$date
	Fri Oct 18 23:49:00 2024
$end
$version
	ModelSim Version 10.7c
$end
$timescale
	1ns
$end

$scope module proc_hier_bench $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemData [15] $end
$var wire 1 h MemData [14] $end
$var wire 1 i MemData [13] $end
$var wire 1 j MemData [12] $end
$var wire 1 k MemData [11] $end
$var wire 1 l MemData [10] $end
$var wire 1 m MemData [9] $end
$var wire 1 n MemData [8] $end
$var wire 1 o MemData [7] $end
$var wire 1 p MemData [6] $end
$var wire 1 q MemData [5] $end
$var wire 1 r MemData [4] $end
$var wire 1 s MemData [3] $end
$var wire 1 t MemData [2] $end
$var wire 1 u MemData [1] $end
$var wire 1 v MemData [0] $end
$var wire 1 w Halt $end
$var integer 32 x inst_count $end
$var integer 32 y trace_file $end
$var integer 32 z sim_log_file $end
$var wire 1 { ZeroExt $end
$var wire 1 | BSrc $end
$var wire 1 } ImmSrc $end
$var wire 1 ~ ALUOpr $end
$var wire 1 !! invA $end
$var wire 1 "! invB $end
$var wire 1 #! ALUSign $end
$var wire 1 $! ALUJmp $end
$var wire 1 %! RegSrc $end
$var wire 1 &! BranchTaken $end
$var wire 1 '! err $end
$var wire 1 (! RSData $end
$var wire 1 )! RTData $end
$var wire 1 *! Imm5 $end
$var wire 1 +! Imm8 $end
$var wire 1 ,! sImm8 $end
$var wire 1 -! sImm11 $end
$var wire 1 .! ALU_Out $end

$scope module DUT $end
$var wire 1 /! clk $end
$var wire 1 0! err $end
$var wire 1 1! rst $end

$scope module c0 $end
$var reg 1 2! clk $end
$var reg 1 3! rst $end
$var wire 1 0! err $end
$var integer 32 4! cycle_count $end
$upscope $end

$scope module p0 $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 0! err $end
$var wire 1 5! PC_Jump [15] $end
$var wire 1 6! PC_Jump [14] $end
$var wire 1 7! PC_Jump [13] $end
$var wire 1 8! PC_Jump [12] $end
$var wire 1 9! PC_Jump [11] $end
$var wire 1 :! PC_Jump [10] $end
$var wire 1 ;! PC_Jump [9] $end
$var wire 1 <! PC_Jump [8] $end
$var wire 1 =! PC_Jump [7] $end
$var wire 1 >! PC_Jump [6] $end
$var wire 1 ?! PC_Jump [5] $end
$var wire 1 @! PC_Jump [4] $end
$var wire 1 A! PC_Jump [3] $end
$var wire 1 B! PC_Jump [2] $end
$var wire 1 C! PC_Jump [1] $end
$var wire 1 D! PC_Jump [0] $end
$var wire 1 E! instr [15] $end
$var wire 1 F! instr [14] $end
$var wire 1 G! instr [13] $end
$var wire 1 H! instr [12] $end
$var wire 1 I! instr [11] $end
$var wire 1 J! instr [10] $end
$var wire 1 K! instr [9] $end
$var wire 1 L! instr [8] $end
$var wire 1 M! instr [7] $end
$var wire 1 N! instr [6] $end
$var wire 1 O! instr [5] $end
$var wire 1 P! instr [4] $end
$var wire 1 Q! instr [3] $end
$var wire 1 R! instr [2] $end
$var wire 1 S! instr [1] $end
$var wire 1 T! instr [0] $end
$var wire 1 U! PC_f [15] $end
$var wire 1 V! PC_f [14] $end
$var wire 1 W! PC_f [13] $end
$var wire 1 X! PC_f [12] $end
$var wire 1 Y! PC_f [11] $end
$var wire 1 Z! PC_f [10] $end
$var wire 1 [! PC_f [9] $end
$var wire 1 \! PC_f [8] $end
$var wire 1 ]! PC_f [7] $end
$var wire 1 ^! PC_f [6] $end
$var wire 1 _! PC_f [5] $end
$var wire 1 `! PC_f [4] $end
$var wire 1 a! PC_f [3] $end
$var wire 1 b! PC_f [2] $end
$var wire 1 c! PC_f [1] $end
$var wire 1 d! PC_f [0] $end
$var wire 1 e! PC_d [15] $end
$var wire 1 f! PC_d [14] $end
$var wire 1 g! PC_d [13] $end
$var wire 1 h! PC_d [12] $end
$var wire 1 i! PC_d [11] $end
$var wire 1 j! PC_d [10] $end
$var wire 1 k! PC_d [9] $end
$var wire 1 l! PC_d [8] $end
$var wire 1 m! PC_d [7] $end
$var wire 1 n! PC_d [6] $end
$var wire 1 o! PC_d [5] $end
$var wire 1 p! PC_d [4] $end
$var wire 1 q! PC_d [3] $end
$var wire 1 r! PC_d [2] $end
$var wire 1 s! PC_d [1] $end
$var wire 1 t! PC_d [0] $end
$var wire 1 u! WB [15] $end
$var wire 1 v! WB [14] $end
$var wire 1 w! WB [13] $end
$var wire 1 x! WB [12] $end
$var wire 1 y! WB [11] $end
$var wire 1 z! WB [10] $end
$var wire 1 {! WB [9] $end
$var wire 1 |! WB [8] $end
$var wire 1 }! WB [7] $end
$var wire 1 ~! WB [6] $end
$var wire 1 !" WB [5] $end
$var wire 1 "" WB [4] $end
$var wire 1 #" WB [3] $end
$var wire 1 $" WB [2] $end
$var wire 1 %" WB [1] $end
$var wire 1 &" WB [0] $end
$var wire 1 '" RSData [15] $end
$var wire 1 (" RSData [14] $end
$var wire 1 )" RSData [13] $end
$var wire 1 *" RSData [12] $end
$var wire 1 +" RSData [11] $end
$var wire 1 ," RSData [10] $end
$var wire 1 -" RSData [9] $end
$var wire 1 ." RSData [8] $end
$var wire 1 /" RSData [7] $end
$var wire 1 0" RSData [6] $end
$var wire 1 1" RSData [5] $end
$var wire 1 2" RSData [4] $end
$var wire 1 3" RSData [3] $end
$var wire 1 4" RSData [2] $end
$var wire 1 5" RSData [1] $end
$var wire 1 6" RSData [0] $end
$var wire 1 7" RTData [15] $end
$var wire 1 8" RTData [14] $end
$var wire 1 9" RTData [13] $end
$var wire 1 :" RTData [12] $end
$var wire 1 ;" RTData [11] $end
$var wire 1 <" RTData [10] $end
$var wire 1 =" RTData [9] $end
$var wire 1 >" RTData [8] $end
$var wire 1 ?" RTData [7] $end
$var wire 1 @" RTData [6] $end
$var wire 1 A" RTData [5] $end
$var wire 1 B" RTData [4] $end
$var wire 1 C" RTData [3] $end
$var wire 1 D" RTData [2] $end
$var wire 1 E" RTData [1] $end
$var wire 1 F" RTData [0] $end
$var wire 1 G" ALU [15] $end
$var wire 1 H" ALU [14] $end
$var wire 1 I" ALU [13] $end
$var wire 1 J" ALU [12] $end
$var wire 1 K" ALU [11] $end
$var wire 1 L" ALU [10] $end
$var wire 1 M" ALU [9] $end
$var wire 1 N" ALU [8] $end
$var wire 1 O" ALU [7] $end
$var wire 1 P" ALU [6] $end
$var wire 1 Q" ALU [5] $end
$var wire 1 R" ALU [4] $end
$var wire 1 S" ALU [3] $end
$var wire 1 T" ALU [2] $end
$var wire 1 U" ALU [1] $end
$var wire 1 V" ALU [0] $end
$var wire 1 W" readData [15] $end
$var wire 1 X" readData [14] $end
$var wire 1 Y" readData [13] $end
$var wire 1 Z" readData [12] $end
$var wire 1 [" readData [11] $end
$var wire 1 \" readData [10] $end
$var wire 1 ]" readData [9] $end
$var wire 1 ^" readData [8] $end
$var wire 1 _" readData [7] $end
$var wire 1 `" readData [6] $end
$var wire 1 a" readData [5] $end
$var wire 1 b" readData [4] $end
$var wire 1 c" readData [3] $end
$var wire 1 d" readData [2] $end
$var wire 1 e" readData [1] $end
$var wire 1 f" readData [0] $end
$var wire 1 g" Imm5 [15] $end
$var wire 1 h" Imm5 [14] $end
$var wire 1 i" Imm5 [13] $end
$var wire 1 j" Imm5 [12] $end
$var wire 1 k" Imm5 [11] $end
$var wire 1 l" Imm5 [10] $end
$var wire 1 m" Imm5 [9] $end
$var wire 1 n" Imm5 [8] $end
$var wire 1 o" Imm5 [7] $end
$var wire 1 p" Imm5 [6] $end
$var wire 1 q" Imm5 [5] $end
$var wire 1 r" Imm5 [4] $end
$var wire 1 s" Imm5 [3] $end
$var wire 1 t" Imm5 [2] $end
$var wire 1 u" Imm5 [1] $end
$var wire 1 v" Imm5 [0] $end
$var wire 1 w" Imm8 [15] $end
$var wire 1 x" Imm8 [14] $end
$var wire 1 y" Imm8 [13] $end
$var wire 1 z" Imm8 [12] $end
$var wire 1 {" Imm8 [11] $end
$var wire 1 |" Imm8 [10] $end
$var wire 1 }" Imm8 [9] $end
$var wire 1 ~" Imm8 [8] $end
$var wire 1 !# Imm8 [7] $end
$var wire 1 "# Imm8 [6] $end
$var wire 1 ## Imm8 [5] $end
$var wire 1 $# Imm8 [4] $end
$var wire 1 %# Imm8 [3] $end
$var wire 1 &# Imm8 [2] $end
$var wire 1 '# Imm8 [1] $end
$var wire 1 (# Imm8 [0] $end
$var wire 1 )# sImm8 [15] $end
$var wire 1 *# sImm8 [14] $end
$var wire 1 +# sImm8 [13] $end
$var wire 1 ,# sImm8 [12] $end
$var wire 1 -# sImm8 [11] $end
$var wire 1 .# sImm8 [10] $end
$var wire 1 /# sImm8 [9] $end
$var wire 1 0# sImm8 [8] $end
$var wire 1 1# sImm8 [7] $end
$var wire 1 2# sImm8 [6] $end
$var wire 1 3# sImm8 [5] $end
$var wire 1 4# sImm8 [4] $end
$var wire 1 5# sImm8 [3] $end
$var wire 1 6# sImm8 [2] $end
$var wire 1 7# sImm8 [1] $end
$var wire 1 8# sImm8 [0] $end
$var wire 1 9# sImm11 [15] $end
$var wire 1 :# sImm11 [14] $end
$var wire 1 ;# sImm11 [13] $end
$var wire 1 <# sImm11 [12] $end
$var wire 1 =# sImm11 [11] $end
$var wire 1 ># sImm11 [10] $end
$var wire 1 ?# sImm11 [9] $end
$var wire 1 @# sImm11 [8] $end
$var wire 1 A# sImm11 [7] $end
$var wire 1 B# sImm11 [6] $end
$var wire 1 C# sImm11 [5] $end
$var wire 1 D# sImm11 [4] $end
$var wire 1 E# sImm11 [3] $end
$var wire 1 F# sImm11 [2] $end
$var wire 1 G# sImm11 [1] $end
$var wire 1 H# sImm11 [0] $end
$var wire 1 I# nHaltSig $end
$var wire 1 J# RegWrt $end
$var wire 1 K# ZeroExt $end
$var wire 1 L# ImmSrc $end
$var wire 1 M# invA $end
$var wire 1 N# invB $end
$var wire 1 O# ALUSign $end
$var wire 1 P# Cin $end
$var wire 1 Q# ALUJmp $end
$var wire 1 R# MemWrt $end
$var wire 1 S# ALUOpr [5] $end
$var wire 1 T# ALUOpr [4] $end
$var wire 1 U# ALUOpr [3] $end
$var wire 1 V# ALUOpr [2] $end
$var wire 1 W# ALUOpr [1] $end
$var wire 1 X# ALUOpr [0] $end
$var wire 1 Y# RegSrc [1] $end
$var wire 1 Z# RegSrc [0] $end
$var wire 1 [# BSrc [1] $end
$var wire 1 \# BSrc [0] $end
$var wire 1 ]# RegDst [1] $end
$var wire 1 ^# RegDst [0] $end
$var wire 1 _# BranchTaken [2] $end
$var wire 1 `# BranchTaken [1] $end
$var wire 1 a# BranchTaken [0] $end

$scope module control0 $end
$var wire 1 E! instr [15] $end
$var wire 1 F! instr [14] $end
$var wire 1 G! instr [13] $end
$var wire 1 H! instr [12] $end
$var wire 1 I! instr [11] $end
$var wire 1 J! instr [10] $end
$var wire 1 K! instr [9] $end
$var wire 1 L! instr [8] $end
$var wire 1 M! instr [7] $end
$var wire 1 N! instr [6] $end
$var wire 1 O! instr [5] $end
$var wire 1 P! instr [4] $end
$var wire 1 Q! instr [3] $end
$var wire 1 R! instr [2] $end
$var wire 1 S! instr [1] $end
$var wire 1 T! instr [0] $end
$var reg 1 b# nHaltSig $end
$var reg 1 c# RegWrt $end
$var reg 1 d# ZeroExt $end
$var reg 1 e# ImmSrc $end
$var reg 1 f# invA $end
$var reg 1 g# invB $end
$var reg 1 h# ALUSign $end
$var reg 1 i# Cin $end
$var reg 1 j# ALUJmp $end
$var reg 1 k# MemWrt $end
$var reg 1 l# err $end
$var reg 6 m# ALUOpr [5:0] $end
$var reg 2 n# RegSrc [1:0] $end
$var reg 2 o# BSrc [1:0] $end
$var reg 2 p# RegDst [1:0] $end
$var reg 3 q# BranchTaken [2:0] $end
$var wire 1 r# funct $end
$upscope $end

$scope module fetch0 $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 5! PC_B [15] $end
$var wire 1 6! PC_B [14] $end
$var wire 1 7! PC_B [13] $end
$var wire 1 8! PC_B [12] $end
$var wire 1 9! PC_B [11] $end
$var wire 1 :! PC_B [10] $end
$var wire 1 ;! PC_B [9] $end
$var wire 1 <! PC_B [8] $end
$var wire 1 =! PC_B [7] $end
$var wire 1 >! PC_B [6] $end
$var wire 1 ?! PC_B [5] $end
$var wire 1 @! PC_B [4] $end
$var wire 1 A! PC_B [3] $end
$var wire 1 B! PC_B [2] $end
$var wire 1 C! PC_B [1] $end
$var wire 1 D! PC_B [0] $end
$var wire 1 I# nHaltSig $end
$var wire 1 E! instr [15] $end
$var wire 1 F! instr [14] $end
$var wire 1 G! instr [13] $end
$var wire 1 H! instr [12] $end
$var wire 1 I! instr [11] $end
$var wire 1 J! instr [10] $end
$var wire 1 K! instr [9] $end
$var wire 1 L! instr [8] $end
$var wire 1 M! instr [7] $end
$var wire 1 N! instr [6] $end
$var wire 1 O! instr [5] $end
$var wire 1 P! instr [4] $end
$var wire 1 Q! instr [3] $end
$var wire 1 R! instr [2] $end
$var wire 1 S! instr [1] $end
$var wire 1 T! instr [0] $end
$var wire 1 U! PC_Next [15] $end
$var wire 1 V! PC_Next [14] $end
$var wire 1 W! PC_Next [13] $end
$var wire 1 X! PC_Next [12] $end
$var wire 1 Y! PC_Next [11] $end
$var wire 1 Z! PC_Next [10] $end
$var wire 1 [! PC_Next [9] $end
$var wire 1 \! PC_Next [8] $end
$var wire 1 ]! PC_Next [7] $end
$var wire 1 ^! PC_Next [6] $end
$var wire 1 _! PC_Next [5] $end
$var wire 1 `! PC_Next [4] $end
$var wire 1 a! PC_Next [3] $end
$var wire 1 b! PC_Next [2] $end
$var wire 1 c! PC_Next [1] $end
$var wire 1 d! PC_Next [0] $end
$var wire 1 s# PC [15] $end
$var wire 1 t# PC [14] $end
$var wire 1 u# PC [13] $end
$var wire 1 v# PC [12] $end
$var wire 1 w# PC [11] $end
$var wire 1 x# PC [10] $end
$var wire 1 y# PC [9] $end
$var wire 1 z# PC [8] $end
$var wire 1 {# PC [7] $end
$var wire 1 |# PC [6] $end
$var wire 1 }# PC [5] $end
$var wire 1 ~# PC [4] $end
$var wire 1 !$ PC [3] $end
$var wire 1 "$ PC [2] $end
$var wire 1 #$ PC [1] $end
$var wire 1 $$ PC [0] $end
$var wire 1 %$ PC_Sum [15] $end
$var wire 1 &$ PC_Sum [14] $end
$var wire 1 '$ PC_Sum [13] $end
$var wire 1 ($ PC_Sum [12] $end
$var wire 1 )$ PC_Sum [11] $end
$var wire 1 *$ PC_Sum [10] $end
$var wire 1 +$ PC_Sum [9] $end
$var wire 1 ,$ PC_Sum [8] $end
$var wire 1 -$ PC_Sum [7] $end
$var wire 1 .$ PC_Sum [6] $end
$var wire 1 /$ PC_Sum [5] $end
$var wire 1 0$ PC_Sum [4] $end
$var wire 1 1$ PC_Sum [3] $end
$var wire 1 2$ PC_Sum [2] $end
$var wire 1 3$ PC_Sum [1] $end
$var wire 1 4$ PC_Sum [0] $end
$var wire 1 5$ err $end
$var wire 1 6$ add2 [15] $end
$var wire 1 7$ add2 [14] $end
$var wire 1 8$ add2 [13] $end
$var wire 1 9$ add2 [12] $end
$var wire 1 :$ add2 [11] $end
$var wire 1 ;$ add2 [10] $end
$var wire 1 <$ add2 [9] $end
$var wire 1 =$ add2 [8] $end
$var wire 1 >$ add2 [7] $end
$var wire 1 ?$ add2 [6] $end
$var wire 1 @$ add2 [5] $end
$var wire 1 A$ add2 [4] $end
$var wire 1 B$ add2 [3] $end
$var wire 1 C$ add2 [2] $end
$var wire 1 D$ add2 [1] $end
$var wire 1 E$ add2 [0] $end
$var wire 1 F$ c_out $end

$scope module pc_reg $end
$var parameter 32 G$ BIT_WIDTH $end
$var parameter 32 H$ BIT_SIZE $end
$var parameter 32 I$ REG_NUMS $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 J$ we $end
$var wire 1 5! w [15] $end
$var wire 1 6! w [14] $end
$var wire 1 7! w [13] $end
$var wire 1 8! w [12] $end
$var wire 1 9! w [11] $end
$var wire 1 :! w [10] $end
$var wire 1 ;! w [9] $end
$var wire 1 <! w [8] $end
$var wire 1 =! w [7] $end
$var wire 1 >! w [6] $end
$var wire 1 ?! w [5] $end
$var wire 1 @! w [4] $end
$var wire 1 A! w [3] $end
$var wire 1 B! w [2] $end
$var wire 1 C! w [1] $end
$var wire 1 D! w [0] $end
$var wire 1 s# r [15] $end
$var wire 1 t# r [14] $end
$var wire 1 u# r [13] $end
$var wire 1 v# r [12] $end
$var wire 1 w# r [11] $end
$var wire 1 x# r [10] $end
$var wire 1 y# r [9] $end
$var wire 1 z# r [8] $end
$var wire 1 {# r [7] $end
$var wire 1 |# r [6] $end
$var wire 1 }# r [5] $end
$var wire 1 ~# r [4] $end
$var wire 1 !$ r [3] $end
$var wire 1 "$ r [2] $end
$var wire 1 #$ r [1] $end
$var wire 1 $$ r [0] $end

$scope module dff01[15] $end
$var wire 1 s# q $end
$var wire 1 K$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 L$ state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 t# q $end
$var wire 1 M$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 N$ state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 u# q $end
$var wire 1 O$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 P$ state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 v# q $end
$var wire 1 Q$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 R$ state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 w# q $end
$var wire 1 S$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 T$ state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 x# q $end
$var wire 1 U$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 V$ state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 y# q $end
$var wire 1 W$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 X$ state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 z# q $end
$var wire 1 Y$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 Z$ state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 {# q $end
$var wire 1 [$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 \$ state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 |# q $end
$var wire 1 ]$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ^$ state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 }# q $end
$var wire 1 _$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 `$ state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 ~# q $end
$var wire 1 a$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 b$ state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 !$ q $end
$var wire 1 c$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 d$ state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 "$ q $end
$var wire 1 e$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 f$ state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 #$ q $end
$var wire 1 g$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 h$ state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 $$ q $end
$var wire 1 i$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 j$ state $end
$upscope $end
$upscope $end

$scope module instr_mem $end
$var wire 1 E! data_out [15] $end
$var wire 1 F! data_out [14] $end
$var wire 1 G! data_out [13] $end
$var wire 1 H! data_out [12] $end
$var wire 1 I! data_out [11] $end
$var wire 1 J! data_out [10] $end
$var wire 1 K! data_out [9] $end
$var wire 1 L! data_out [8] $end
$var wire 1 M! data_out [7] $end
$var wire 1 N! data_out [6] $end
$var wire 1 O! data_out [5] $end
$var wire 1 P! data_out [4] $end
$var wire 1 Q! data_out [3] $end
$var wire 1 R! data_out [2] $end
$var wire 1 S! data_out [1] $end
$var wire 1 T! data_out [0] $end
$var wire 1 k$ data_in [15] $end
$var wire 1 l$ data_in [14] $end
$var wire 1 m$ data_in [13] $end
$var wire 1 n$ data_in [12] $end
$var wire 1 o$ data_in [11] $end
$var wire 1 p$ data_in [10] $end
$var wire 1 q$ data_in [9] $end
$var wire 1 r$ data_in [8] $end
$var wire 1 s$ data_in [7] $end
$var wire 1 t$ data_in [6] $end
$var wire 1 u$ data_in [5] $end
$var wire 1 v$ data_in [4] $end
$var wire 1 w$ data_in [3] $end
$var wire 1 x$ data_in [2] $end
$var wire 1 y$ data_in [1] $end
$var wire 1 z$ data_in [0] $end
$var wire 1 s# addr [15] $end
$var wire 1 t# addr [14] $end
$var wire 1 u# addr [13] $end
$var wire 1 v# addr [12] $end
$var wire 1 w# addr [11] $end
$var wire 1 x# addr [10] $end
$var wire 1 y# addr [9] $end
$var wire 1 z# addr [8] $end
$var wire 1 {# addr [7] $end
$var wire 1 |# addr [6] $end
$var wire 1 }# addr [5] $end
$var wire 1 ~# addr [4] $end
$var wire 1 !$ addr [3] $end
$var wire 1 "$ addr [2] $end
$var wire 1 #$ addr [1] $end
$var wire 1 $$ addr [0] $end
$var wire 1 {$ enable $end
$var wire 1 |$ wr $end
$var wire 1 }$ createdump $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ~$ loaded $end
$var reg 17 !% largest [16:0] $end
$var integer 32 "% mcd $end
$var integer 32 #% i $end
$upscope $end

$scope module pc_add2 $end
$var parameter 32 $% N $end
$var wire 1 %$ sum [15] $end
$var wire 1 &$ sum [14] $end
$var wire 1 '$ sum [13] $end
$var wire 1 ($ sum [12] $end
$var wire 1 )$ sum [11] $end
$var wire 1 *$ sum [10] $end
$var wire 1 +$ sum [9] $end
$var wire 1 ,$ sum [8] $end
$var wire 1 -$ sum [7] $end
$var wire 1 .$ sum [6] $end
$var wire 1 /$ sum [5] $end
$var wire 1 0$ sum [4] $end
$var wire 1 1$ sum [3] $end
$var wire 1 2$ sum [2] $end
$var wire 1 3$ sum [1] $end
$var wire 1 4$ sum [0] $end
$var wire 1 F$ c_out $end
$var wire 1 s# a [15] $end
$var wire 1 t# a [14] $end
$var wire 1 u# a [13] $end
$var wire 1 v# a [12] $end
$var wire 1 w# a [11] $end
$var wire 1 x# a [10] $end
$var wire 1 y# a [9] $end
$var wire 1 z# a [8] $end
$var wire 1 {# a [7] $end
$var wire 1 |# a [6] $end
$var wire 1 }# a [5] $end
$var wire 1 ~# a [4] $end
$var wire 1 !$ a [3] $end
$var wire 1 "$ a [2] $end
$var wire 1 #$ a [1] $end
$var wire 1 $$ a [0] $end
$var wire 1 6$ b [15] $end
$var wire 1 7$ b [14] $end
$var wire 1 8$ b [13] $end
$var wire 1 9$ b [12] $end
$var wire 1 :$ b [11] $end
$var wire 1 ;$ b [10] $end
$var wire 1 <$ b [9] $end
$var wire 1 =$ b [8] $end
$var wire 1 >$ b [7] $end
$var wire 1 ?$ b [6] $end
$var wire 1 @$ b [5] $end
$var wire 1 A$ b [4] $end
$var wire 1 B$ b [3] $end
$var wire 1 C$ b [2] $end
$var wire 1 D$ b [1] $end
$var wire 1 E$ b [0] $end
$var wire 1 %% c_in $end
$var wire 1 &% carries [2] $end
$var wire 1 '% carries [1] $end
$var wire 1 (% carries [0] $end

$scope module cla[3] $end
$var parameter 32 )% N $end
$var wire 1 %$ sum [3] $end
$var wire 1 &$ sum [2] $end
$var wire 1 '$ sum [1] $end
$var wire 1 ($ sum [0] $end
$var wire 1 F$ c_out $end
$var wire 1 s# a [3] $end
$var wire 1 t# a [2] $end
$var wire 1 u# a [1] $end
$var wire 1 v# a [0] $end
$var wire 1 6$ b [3] $end
$var wire 1 7$ b [2] $end
$var wire 1 8$ b [1] $end
$var wire 1 9$ b [0] $end
$var wire 1 &% c_in $end
$var wire 1 *% p [3] $end
$var wire 1 +% p [2] $end
$var wire 1 ,% p [1] $end
$var wire 1 -% p [0] $end
$var wire 1 .% ng [3] $end
$var wire 1 /% ng [2] $end
$var wire 1 0% ng [1] $end
$var wire 1 1% ng [0] $end
$var wire 1 2% carries [4] $end
$var wire 1 3% carries [3] $end
$var wire 1 4% carries [2] $end
$var wire 1 5% carries [1] $end
$var wire 1 6% carries [0] $end
$var wire 1 7% cp [3] $end
$var wire 1 8% cp [2] $end
$var wire 1 9% cp [1] $end
$var wire 1 :% cp [0] $end

$scope module xor_1[3] $end
$var wire 1 *% out $end
$var wire 1 s# in1 $end
$var wire 1 6$ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 +% out $end
$var wire 1 t# in1 $end
$var wire 1 7$ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 ,% out $end
$var wire 1 u# in1 $end
$var wire 1 8$ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 -% out $end
$var wire 1 v# in1 $end
$var wire 1 9$ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 .% out $end
$var wire 1 s# in1 $end
$var wire 1 6$ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 /% out $end
$var wire 1 t# in1 $end
$var wire 1 7$ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 0% out $end
$var wire 1 u# in1 $end
$var wire 1 8$ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 1% out $end
$var wire 1 v# in1 $end
$var wire 1 9$ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 7% out $end
$var wire 1 *% in1 $end
$var wire 1 3% in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 8% out $end
$var wire 1 +% in1 $end
$var wire 1 4% in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 9% out $end
$var wire 1 ,% in1 $end
$var wire 1 5% in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 :% out $end
$var wire 1 -% in1 $end
$var wire 1 &% in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 F$ out $end
$var wire 1 7% in1 $end
$var wire 1 .% in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 3% out $end
$var wire 1 8% in1 $end
$var wire 1 /% in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 4% out $end
$var wire 1 9% in1 $end
$var wire 1 0% in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 5% out $end
$var wire 1 :% in1 $end
$var wire 1 1% in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 %$ s $end
$var wire 1 ;% c_out $end
$var wire 1 s# a $end
$var wire 1 6$ b $end
$var wire 1 3% c_in $end
$var wire 1 <% AxorB $end
$var wire 1 =% CnandAB $end
$var wire 1 >% AnandB $end

$scope module xor_1 $end
$var wire 1 <% out $end
$var wire 1 s# in1 $end
$var wire 1 6$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 %$ out $end
$var wire 1 <% in1 $end
$var wire 1 3% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 =% out $end
$var wire 1 <% in1 $end
$var wire 1 3% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 >% out $end
$var wire 1 s# in1 $end
$var wire 1 6$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 ;% out $end
$var wire 1 >% in1 $end
$var wire 1 =% in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 &$ s $end
$var wire 1 ?% c_out $end
$var wire 1 t# a $end
$var wire 1 7$ b $end
$var wire 1 4% c_in $end
$var wire 1 @% AxorB $end
$var wire 1 A% CnandAB $end
$var wire 1 B% AnandB $end

$scope module xor_1 $end
$var wire 1 @% out $end
$var wire 1 t# in1 $end
$var wire 1 7$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 &$ out $end
$var wire 1 @% in1 $end
$var wire 1 4% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 A% out $end
$var wire 1 @% in1 $end
$var wire 1 4% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 B% out $end
$var wire 1 t# in1 $end
$var wire 1 7$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 ?% out $end
$var wire 1 B% in1 $end
$var wire 1 A% in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 '$ s $end
$var wire 1 C% c_out $end
$var wire 1 u# a $end
$var wire 1 8$ b $end
$var wire 1 5% c_in $end
$var wire 1 D% AxorB $end
$var wire 1 E% CnandAB $end
$var wire 1 F% AnandB $end

$scope module xor_1 $end
$var wire 1 D% out $end
$var wire 1 u# in1 $end
$var wire 1 8$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 '$ out $end
$var wire 1 D% in1 $end
$var wire 1 5% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 E% out $end
$var wire 1 D% in1 $end
$var wire 1 5% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 F% out $end
$var wire 1 u# in1 $end
$var wire 1 8$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 C% out $end
$var wire 1 F% in1 $end
$var wire 1 E% in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 ($ s $end
$var wire 1 G% c_out $end
$var wire 1 v# a $end
$var wire 1 9$ b $end
$var wire 1 &% c_in $end
$var wire 1 H% AxorB $end
$var wire 1 I% CnandAB $end
$var wire 1 J% AnandB $end

$scope module xor_1 $end
$var wire 1 H% out $end
$var wire 1 v# in1 $end
$var wire 1 9$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 ($ out $end
$var wire 1 H% in1 $end
$var wire 1 &% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 I% out $end
$var wire 1 H% in1 $end
$var wire 1 &% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 J% out $end
$var wire 1 v# in1 $end
$var wire 1 9$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 G% out $end
$var wire 1 J% in1 $end
$var wire 1 I% in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[2] $end
$var parameter 32 K% N $end
$var wire 1 )$ sum [3] $end
$var wire 1 *$ sum [2] $end
$var wire 1 +$ sum [1] $end
$var wire 1 ,$ sum [0] $end
$var wire 1 &% c_out $end
$var wire 1 w# a [3] $end
$var wire 1 x# a [2] $end
$var wire 1 y# a [1] $end
$var wire 1 z# a [0] $end
$var wire 1 :$ b [3] $end
$var wire 1 ;$ b [2] $end
$var wire 1 <$ b [1] $end
$var wire 1 =$ b [0] $end
$var wire 1 '% c_in $end
$var wire 1 L% p [3] $end
$var wire 1 M% p [2] $end
$var wire 1 N% p [1] $end
$var wire 1 O% p [0] $end
$var wire 1 P% ng [3] $end
$var wire 1 Q% ng [2] $end
$var wire 1 R% ng [1] $end
$var wire 1 S% ng [0] $end
$var wire 1 T% carries [4] $end
$var wire 1 U% carries [3] $end
$var wire 1 V% carries [2] $end
$var wire 1 W% carries [1] $end
$var wire 1 X% carries [0] $end
$var wire 1 Y% cp [3] $end
$var wire 1 Z% cp [2] $end
$var wire 1 [% cp [1] $end
$var wire 1 \% cp [0] $end

$scope module xor_1[3] $end
$var wire 1 L% out $end
$var wire 1 w# in1 $end
$var wire 1 :$ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 M% out $end
$var wire 1 x# in1 $end
$var wire 1 ;$ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 N% out $end
$var wire 1 y# in1 $end
$var wire 1 <$ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 O% out $end
$var wire 1 z# in1 $end
$var wire 1 =$ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 P% out $end
$var wire 1 w# in1 $end
$var wire 1 :$ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 Q% out $end
$var wire 1 x# in1 $end
$var wire 1 ;$ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 R% out $end
$var wire 1 y# in1 $end
$var wire 1 <$ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 S% out $end
$var wire 1 z# in1 $end
$var wire 1 =$ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 Y% out $end
$var wire 1 L% in1 $end
$var wire 1 U% in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 Z% out $end
$var wire 1 M% in1 $end
$var wire 1 V% in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 [% out $end
$var wire 1 N% in1 $end
$var wire 1 W% in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 \% out $end
$var wire 1 O% in1 $end
$var wire 1 '% in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 &% out $end
$var wire 1 Y% in1 $end
$var wire 1 P% in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 U% out $end
$var wire 1 Z% in1 $end
$var wire 1 Q% in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 V% out $end
$var wire 1 [% in1 $end
$var wire 1 R% in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 W% out $end
$var wire 1 \% in1 $end
$var wire 1 S% in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 )$ s $end
$var wire 1 ]% c_out $end
$var wire 1 w# a $end
$var wire 1 :$ b $end
$var wire 1 U% c_in $end
$var wire 1 ^% AxorB $end
$var wire 1 _% CnandAB $end
$var wire 1 `% AnandB $end

$scope module xor_1 $end
$var wire 1 ^% out $end
$var wire 1 w# in1 $end
$var wire 1 :$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 )$ out $end
$var wire 1 ^% in1 $end
$var wire 1 U% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 _% out $end
$var wire 1 ^% in1 $end
$var wire 1 U% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 `% out $end
$var wire 1 w# in1 $end
$var wire 1 :$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 ]% out $end
$var wire 1 `% in1 $end
$var wire 1 _% in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 *$ s $end
$var wire 1 a% c_out $end
$var wire 1 x# a $end
$var wire 1 ;$ b $end
$var wire 1 V% c_in $end
$var wire 1 b% AxorB $end
$var wire 1 c% CnandAB $end
$var wire 1 d% AnandB $end

$scope module xor_1 $end
$var wire 1 b% out $end
$var wire 1 x# in1 $end
$var wire 1 ;$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 *$ out $end
$var wire 1 b% in1 $end
$var wire 1 V% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 c% out $end
$var wire 1 b% in1 $end
$var wire 1 V% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 d% out $end
$var wire 1 x# in1 $end
$var wire 1 ;$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 a% out $end
$var wire 1 d% in1 $end
$var wire 1 c% in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 +$ s $end
$var wire 1 e% c_out $end
$var wire 1 y# a $end
$var wire 1 <$ b $end
$var wire 1 W% c_in $end
$var wire 1 f% AxorB $end
$var wire 1 g% CnandAB $end
$var wire 1 h% AnandB $end

$scope module xor_1 $end
$var wire 1 f% out $end
$var wire 1 y# in1 $end
$var wire 1 <$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 +$ out $end
$var wire 1 f% in1 $end
$var wire 1 W% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 g% out $end
$var wire 1 f% in1 $end
$var wire 1 W% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 h% out $end
$var wire 1 y# in1 $end
$var wire 1 <$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 e% out $end
$var wire 1 h% in1 $end
$var wire 1 g% in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 ,$ s $end
$var wire 1 i% c_out $end
$var wire 1 z# a $end
$var wire 1 =$ b $end
$var wire 1 '% c_in $end
$var wire 1 j% AxorB $end
$var wire 1 k% CnandAB $end
$var wire 1 l% AnandB $end

$scope module xor_1 $end
$var wire 1 j% out $end
$var wire 1 z# in1 $end
$var wire 1 =$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 ,$ out $end
$var wire 1 j% in1 $end
$var wire 1 '% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 k% out $end
$var wire 1 j% in1 $end
$var wire 1 '% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 l% out $end
$var wire 1 z# in1 $end
$var wire 1 =$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 i% out $end
$var wire 1 l% in1 $end
$var wire 1 k% in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[1] $end
$var parameter 32 m% N $end
$var wire 1 -$ sum [3] $end
$var wire 1 .$ sum [2] $end
$var wire 1 /$ sum [1] $end
$var wire 1 0$ sum [0] $end
$var wire 1 '% c_out $end
$var wire 1 {# a [3] $end
$var wire 1 |# a [2] $end
$var wire 1 }# a [1] $end
$var wire 1 ~# a [0] $end
$var wire 1 >$ b [3] $end
$var wire 1 ?$ b [2] $end
$var wire 1 @$ b [1] $end
$var wire 1 A$ b [0] $end
$var wire 1 (% c_in $end
$var wire 1 n% p [3] $end
$var wire 1 o% p [2] $end
$var wire 1 p% p [1] $end
$var wire 1 q% p [0] $end
$var wire 1 r% ng [3] $end
$var wire 1 s% ng [2] $end
$var wire 1 t% ng [1] $end
$var wire 1 u% ng [0] $end
$var wire 1 v% carries [4] $end
$var wire 1 w% carries [3] $end
$var wire 1 x% carries [2] $end
$var wire 1 y% carries [1] $end
$var wire 1 z% carries [0] $end
$var wire 1 {% cp [3] $end
$var wire 1 |% cp [2] $end
$var wire 1 }% cp [1] $end
$var wire 1 ~% cp [0] $end

$scope module xor_1[3] $end
$var wire 1 n% out $end
$var wire 1 {# in1 $end
$var wire 1 >$ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 o% out $end
$var wire 1 |# in1 $end
$var wire 1 ?$ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 p% out $end
$var wire 1 }# in1 $end
$var wire 1 @$ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 q% out $end
$var wire 1 ~# in1 $end
$var wire 1 A$ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 r% out $end
$var wire 1 {# in1 $end
$var wire 1 >$ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 s% out $end
$var wire 1 |# in1 $end
$var wire 1 ?$ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 t% out $end
$var wire 1 }# in1 $end
$var wire 1 @$ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 u% out $end
$var wire 1 ~# in1 $end
$var wire 1 A$ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 {% out $end
$var wire 1 n% in1 $end
$var wire 1 w% in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 |% out $end
$var wire 1 o% in1 $end
$var wire 1 x% in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 }% out $end
$var wire 1 p% in1 $end
$var wire 1 y% in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 ~% out $end
$var wire 1 q% in1 $end
$var wire 1 (% in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 '% out $end
$var wire 1 {% in1 $end
$var wire 1 r% in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 w% out $end
$var wire 1 |% in1 $end
$var wire 1 s% in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 x% out $end
$var wire 1 }% in1 $end
$var wire 1 t% in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 y% out $end
$var wire 1 ~% in1 $end
$var wire 1 u% in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 -$ s $end
$var wire 1 !& c_out $end
$var wire 1 {# a $end
$var wire 1 >$ b $end
$var wire 1 w% c_in $end
$var wire 1 "& AxorB $end
$var wire 1 #& CnandAB $end
$var wire 1 $& AnandB $end

$scope module xor_1 $end
$var wire 1 "& out $end
$var wire 1 {# in1 $end
$var wire 1 >$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 -$ out $end
$var wire 1 "& in1 $end
$var wire 1 w% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 #& out $end
$var wire 1 "& in1 $end
$var wire 1 w% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 $& out $end
$var wire 1 {# in1 $end
$var wire 1 >$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 !& out $end
$var wire 1 $& in1 $end
$var wire 1 #& in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 .$ s $end
$var wire 1 %& c_out $end
$var wire 1 |# a $end
$var wire 1 ?$ b $end
$var wire 1 x% c_in $end
$var wire 1 && AxorB $end
$var wire 1 '& CnandAB $end
$var wire 1 (& AnandB $end

$scope module xor_1 $end
$var wire 1 && out $end
$var wire 1 |# in1 $end
$var wire 1 ?$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 .$ out $end
$var wire 1 && in1 $end
$var wire 1 x% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 '& out $end
$var wire 1 && in1 $end
$var wire 1 x% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 (& out $end
$var wire 1 |# in1 $end
$var wire 1 ?$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 %& out $end
$var wire 1 (& in1 $end
$var wire 1 '& in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 /$ s $end
$var wire 1 )& c_out $end
$var wire 1 }# a $end
$var wire 1 @$ b $end
$var wire 1 y% c_in $end
$var wire 1 *& AxorB $end
$var wire 1 +& CnandAB $end
$var wire 1 ,& AnandB $end

$scope module xor_1 $end
$var wire 1 *& out $end
$var wire 1 }# in1 $end
$var wire 1 @$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 /$ out $end
$var wire 1 *& in1 $end
$var wire 1 y% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 +& out $end
$var wire 1 *& in1 $end
$var wire 1 y% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 ,& out $end
$var wire 1 }# in1 $end
$var wire 1 @$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 )& out $end
$var wire 1 ,& in1 $end
$var wire 1 +& in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 0$ s $end
$var wire 1 -& c_out $end
$var wire 1 ~# a $end
$var wire 1 A$ b $end
$var wire 1 (% c_in $end
$var wire 1 .& AxorB $end
$var wire 1 /& CnandAB $end
$var wire 1 0& AnandB $end

$scope module xor_1 $end
$var wire 1 .& out $end
$var wire 1 ~# in1 $end
$var wire 1 A$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 0$ out $end
$var wire 1 .& in1 $end
$var wire 1 (% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 /& out $end
$var wire 1 .& in1 $end
$var wire 1 (% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 0& out $end
$var wire 1 ~# in1 $end
$var wire 1 A$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 -& out $end
$var wire 1 0& in1 $end
$var wire 1 /& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[0] $end
$var parameter 32 1& N $end
$var wire 1 1$ sum [3] $end
$var wire 1 2$ sum [2] $end
$var wire 1 3$ sum [1] $end
$var wire 1 4$ sum [0] $end
$var wire 1 (% c_out $end
$var wire 1 !$ a [3] $end
$var wire 1 "$ a [2] $end
$var wire 1 #$ a [1] $end
$var wire 1 $$ a [0] $end
$var wire 1 B$ b [3] $end
$var wire 1 C$ b [2] $end
$var wire 1 D$ b [1] $end
$var wire 1 E$ b [0] $end
$var wire 1 %% c_in $end
$var wire 1 2& p [3] $end
$var wire 1 3& p [2] $end
$var wire 1 4& p [1] $end
$var wire 1 5& p [0] $end
$var wire 1 6& ng [3] $end
$var wire 1 7& ng [2] $end
$var wire 1 8& ng [1] $end
$var wire 1 9& ng [0] $end
$var wire 1 :& carries [4] $end
$var wire 1 ;& carries [3] $end
$var wire 1 <& carries [2] $end
$var wire 1 =& carries [1] $end
$var wire 1 >& carries [0] $end
$var wire 1 ?& cp [3] $end
$var wire 1 @& cp [2] $end
$var wire 1 A& cp [1] $end
$var wire 1 B& cp [0] $end

$scope module xor_1[3] $end
$var wire 1 2& out $end
$var wire 1 !$ in1 $end
$var wire 1 B$ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 3& out $end
$var wire 1 "$ in1 $end
$var wire 1 C$ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 4& out $end
$var wire 1 #$ in1 $end
$var wire 1 D$ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 5& out $end
$var wire 1 $$ in1 $end
$var wire 1 E$ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 6& out $end
$var wire 1 !$ in1 $end
$var wire 1 B$ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 7& out $end
$var wire 1 "$ in1 $end
$var wire 1 C$ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 8& out $end
$var wire 1 #$ in1 $end
$var wire 1 D$ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 9& out $end
$var wire 1 $$ in1 $end
$var wire 1 E$ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 ?& out $end
$var wire 1 2& in1 $end
$var wire 1 ;& in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 @& out $end
$var wire 1 3& in1 $end
$var wire 1 <& in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 A& out $end
$var wire 1 4& in1 $end
$var wire 1 =& in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 B& out $end
$var wire 1 5& in1 $end
$var wire 1 %% in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 (% out $end
$var wire 1 ?& in1 $end
$var wire 1 6& in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 ;& out $end
$var wire 1 @& in1 $end
$var wire 1 7& in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 <& out $end
$var wire 1 A& in1 $end
$var wire 1 8& in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 =& out $end
$var wire 1 B& in1 $end
$var wire 1 9& in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 1$ s $end
$var wire 1 C& c_out $end
$var wire 1 !$ a $end
$var wire 1 B$ b $end
$var wire 1 ;& c_in $end
$var wire 1 D& AxorB $end
$var wire 1 E& CnandAB $end
$var wire 1 F& AnandB $end

$scope module xor_1 $end
$var wire 1 D& out $end
$var wire 1 !$ in1 $end
$var wire 1 B$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 1$ out $end
$var wire 1 D& in1 $end
$var wire 1 ;& in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 E& out $end
$var wire 1 D& in1 $end
$var wire 1 ;& in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 F& out $end
$var wire 1 !$ in1 $end
$var wire 1 B$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 C& out $end
$var wire 1 F& in1 $end
$var wire 1 E& in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 2$ s $end
$var wire 1 G& c_out $end
$var wire 1 "$ a $end
$var wire 1 C$ b $end
$var wire 1 <& c_in $end
$var wire 1 H& AxorB $end
$var wire 1 I& CnandAB $end
$var wire 1 J& AnandB $end

$scope module xor_1 $end
$var wire 1 H& out $end
$var wire 1 "$ in1 $end
$var wire 1 C$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 2$ out $end
$var wire 1 H& in1 $end
$var wire 1 <& in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 I& out $end
$var wire 1 H& in1 $end
$var wire 1 <& in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 J& out $end
$var wire 1 "$ in1 $end
$var wire 1 C$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 G& out $end
$var wire 1 J& in1 $end
$var wire 1 I& in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 3$ s $end
$var wire 1 K& c_out $end
$var wire 1 #$ a $end
$var wire 1 D$ b $end
$var wire 1 =& c_in $end
$var wire 1 L& AxorB $end
$var wire 1 M& CnandAB $end
$var wire 1 N& AnandB $end

$scope module xor_1 $end
$var wire 1 L& out $end
$var wire 1 #$ in1 $end
$var wire 1 D$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 3$ out $end
$var wire 1 L& in1 $end
$var wire 1 =& in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 M& out $end
$var wire 1 L& in1 $end
$var wire 1 =& in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 N& out $end
$var wire 1 #$ in1 $end
$var wire 1 D$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 K& out $end
$var wire 1 N& in1 $end
$var wire 1 M& in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 4$ s $end
$var wire 1 O& c_out $end
$var wire 1 $$ a $end
$var wire 1 E$ b $end
$var wire 1 %% c_in $end
$var wire 1 P& AxorB $end
$var wire 1 Q& CnandAB $end
$var wire 1 R& AnandB $end

$scope module xor_1 $end
$var wire 1 P& out $end
$var wire 1 $$ in1 $end
$var wire 1 E$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 4$ out $end
$var wire 1 P& in1 $end
$var wire 1 %% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 Q& out $end
$var wire 1 P& in1 $end
$var wire 1 %% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 R& out $end
$var wire 1 $$ in1 $end
$var wire 1 E$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 O& out $end
$var wire 1 R& in1 $end
$var wire 1 Q& in2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module decode0 $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 E! instr [15] $end
$var wire 1 F! instr [14] $end
$var wire 1 G! instr [13] $end
$var wire 1 H! instr [12] $end
$var wire 1 I! instr [11] $end
$var wire 1 J! instr [10] $end
$var wire 1 K! instr [9] $end
$var wire 1 L! instr [8] $end
$var wire 1 M! instr [7] $end
$var wire 1 N! instr [6] $end
$var wire 1 O! instr [5] $end
$var wire 1 P! instr [4] $end
$var wire 1 Q! instr [3] $end
$var wire 1 R! instr [2] $end
$var wire 1 S! instr [1] $end
$var wire 1 T! instr [0] $end
$var wire 1 u! WB [15] $end
$var wire 1 v! WB [14] $end
$var wire 1 w! WB [13] $end
$var wire 1 x! WB [12] $end
$var wire 1 y! WB [11] $end
$var wire 1 z! WB [10] $end
$var wire 1 {! WB [9] $end
$var wire 1 |! WB [8] $end
$var wire 1 }! WB [7] $end
$var wire 1 ~! WB [6] $end
$var wire 1 !" WB [5] $end
$var wire 1 "" WB [4] $end
$var wire 1 #" WB [3] $end
$var wire 1 $" WB [2] $end
$var wire 1 %" WB [1] $end
$var wire 1 &" WB [0] $end
$var wire 1 U! PC [15] $end
$var wire 1 V! PC [14] $end
$var wire 1 W! PC [13] $end
$var wire 1 X! PC [12] $end
$var wire 1 Y! PC [11] $end
$var wire 1 Z! PC [10] $end
$var wire 1 [! PC [9] $end
$var wire 1 \! PC [8] $end
$var wire 1 ]! PC [7] $end
$var wire 1 ^! PC [6] $end
$var wire 1 _! PC [5] $end
$var wire 1 `! PC [4] $end
$var wire 1 a! PC [3] $end
$var wire 1 b! PC [2] $end
$var wire 1 c! PC [1] $end
$var wire 1 d! PC [0] $end
$var wire 1 ]# RegDst [1] $end
$var wire 1 ^# RegDst [0] $end
$var wire 1 K# ZeroExt $end
$var wire 1 J# RegWrt $end
$var wire 1 0! err $end
$var wire 1 '" RSData [15] $end
$var wire 1 (" RSData [14] $end
$var wire 1 )" RSData [13] $end
$var wire 1 *" RSData [12] $end
$var wire 1 +" RSData [11] $end
$var wire 1 ," RSData [10] $end
$var wire 1 -" RSData [9] $end
$var wire 1 ." RSData [8] $end
$var wire 1 /" RSData [7] $end
$var wire 1 0" RSData [6] $end
$var wire 1 1" RSData [5] $end
$var wire 1 2" RSData [4] $end
$var wire 1 3" RSData [3] $end
$var wire 1 4" RSData [2] $end
$var wire 1 5" RSData [1] $end
$var wire 1 6" RSData [0] $end
$var wire 1 7" RTData [15] $end
$var wire 1 8" RTData [14] $end
$var wire 1 9" RTData [13] $end
$var wire 1 :" RTData [12] $end
$var wire 1 ;" RTData [11] $end
$var wire 1 <" RTData [10] $end
$var wire 1 =" RTData [9] $end
$var wire 1 >" RTData [8] $end
$var wire 1 ?" RTData [7] $end
$var wire 1 @" RTData [6] $end
$var wire 1 A" RTData [5] $end
$var wire 1 B" RTData [4] $end
$var wire 1 C" RTData [3] $end
$var wire 1 D" RTData [2] $end
$var wire 1 E" RTData [1] $end
$var wire 1 F" RTData [0] $end
$var wire 1 g" Imm5 [15] $end
$var wire 1 h" Imm5 [14] $end
$var wire 1 i" Imm5 [13] $end
$var wire 1 j" Imm5 [12] $end
$var wire 1 k" Imm5 [11] $end
$var wire 1 l" Imm5 [10] $end
$var wire 1 m" Imm5 [9] $end
$var wire 1 n" Imm5 [8] $end
$var wire 1 o" Imm5 [7] $end
$var wire 1 p" Imm5 [6] $end
$var wire 1 q" Imm5 [5] $end
$var wire 1 r" Imm5 [4] $end
$var wire 1 s" Imm5 [3] $end
$var wire 1 t" Imm5 [2] $end
$var wire 1 u" Imm5 [1] $end
$var wire 1 v" Imm5 [0] $end
$var wire 1 w" Imm8 [15] $end
$var wire 1 x" Imm8 [14] $end
$var wire 1 y" Imm8 [13] $end
$var wire 1 z" Imm8 [12] $end
$var wire 1 {" Imm8 [11] $end
$var wire 1 |" Imm8 [10] $end
$var wire 1 }" Imm8 [9] $end
$var wire 1 ~" Imm8 [8] $end
$var wire 1 !# Imm8 [7] $end
$var wire 1 "# Imm8 [6] $end
$var wire 1 ## Imm8 [5] $end
$var wire 1 $# Imm8 [4] $end
$var wire 1 %# Imm8 [3] $end
$var wire 1 &# Imm8 [2] $end
$var wire 1 '# Imm8 [1] $end
$var wire 1 (# Imm8 [0] $end
$var wire 1 )# sImm8 [15] $end
$var wire 1 *# sImm8 [14] $end
$var wire 1 +# sImm8 [13] $end
$var wire 1 ,# sImm8 [12] $end
$var wire 1 -# sImm8 [11] $end
$var wire 1 .# sImm8 [10] $end
$var wire 1 /# sImm8 [9] $end
$var wire 1 0# sImm8 [8] $end
$var wire 1 1# sImm8 [7] $end
$var wire 1 2# sImm8 [6] $end
$var wire 1 3# sImm8 [5] $end
$var wire 1 4# sImm8 [4] $end
$var wire 1 5# sImm8 [3] $end
$var wire 1 6# sImm8 [2] $end
$var wire 1 7# sImm8 [1] $end
$var wire 1 8# sImm8 [0] $end
$var wire 1 9# sImm11 [15] $end
$var wire 1 :# sImm11 [14] $end
$var wire 1 ;# sImm11 [13] $end
$var wire 1 <# sImm11 [12] $end
$var wire 1 =# sImm11 [11] $end
$var wire 1 ># sImm11 [10] $end
$var wire 1 ?# sImm11 [9] $end
$var wire 1 @# sImm11 [8] $end
$var wire 1 A# sImm11 [7] $end
$var wire 1 B# sImm11 [6] $end
$var wire 1 C# sImm11 [5] $end
$var wire 1 D# sImm11 [4] $end
$var wire 1 E# sImm11 [3] $end
$var wire 1 F# sImm11 [2] $end
$var wire 1 G# sImm11 [1] $end
$var wire 1 H# sImm11 [0] $end
$var wire 1 e! PC_Next [15] $end
$var wire 1 f! PC_Next [14] $end
$var wire 1 g! PC_Next [13] $end
$var wire 1 h! PC_Next [12] $end
$var wire 1 i! PC_Next [11] $end
$var wire 1 j! PC_Next [10] $end
$var wire 1 k! PC_Next [9] $end
$var wire 1 l! PC_Next [8] $end
$var wire 1 m! PC_Next [7] $end
$var wire 1 n! PC_Next [6] $end
$var wire 1 o! PC_Next [5] $end
$var wire 1 p! PC_Next [4] $end
$var wire 1 q! PC_Next [3] $end
$var wire 1 r! PC_Next [2] $end
$var wire 1 s! PC_Next [1] $end
$var wire 1 t! PC_Next [0] $end
$var wire 1 S& RD [2] $end
$var wire 1 T& RD [1] $end
$var wire 1 U& RD [0] $end

$scope module regFile0 $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 J! read1RegSel [2] $end
$var wire 1 K! read1RegSel [1] $end
$var wire 1 L! read1RegSel [0] $end
$var wire 1 M! read2RegSel [2] $end
$var wire 1 N! read2RegSel [1] $end
$var wire 1 O! read2RegSel [0] $end
$var wire 1 S& writeRegSel [2] $end
$var wire 1 T& writeRegSel [1] $end
$var wire 1 U& writeRegSel [0] $end
$var wire 1 u! writeData [15] $end
$var wire 1 v! writeData [14] $end
$var wire 1 w! writeData [13] $end
$var wire 1 x! writeData [12] $end
$var wire 1 y! writeData [11] $end
$var wire 1 z! writeData [10] $end
$var wire 1 {! writeData [9] $end
$var wire 1 |! writeData [8] $end
$var wire 1 }! writeData [7] $end
$var wire 1 ~! writeData [6] $end
$var wire 1 !" writeData [5] $end
$var wire 1 "" writeData [4] $end
$var wire 1 #" writeData [3] $end
$var wire 1 $" writeData [2] $end
$var wire 1 %" writeData [1] $end
$var wire 1 &" writeData [0] $end
$var wire 1 J# writeEn $end
$var wire 1 '" read1Data [15] $end
$var wire 1 (" read1Data [14] $end
$var wire 1 )" read1Data [13] $end
$var wire 1 *" read1Data [12] $end
$var wire 1 +" read1Data [11] $end
$var wire 1 ," read1Data [10] $end
$var wire 1 -" read1Data [9] $end
$var wire 1 ." read1Data [8] $end
$var wire 1 /" read1Data [7] $end
$var wire 1 0" read1Data [6] $end
$var wire 1 1" read1Data [5] $end
$var wire 1 2" read1Data [4] $end
$var wire 1 3" read1Data [3] $end
$var wire 1 4" read1Data [2] $end
$var wire 1 5" read1Data [1] $end
$var wire 1 6" read1Data [0] $end
$var wire 1 7" read2Data [15] $end
$var wire 1 8" read2Data [14] $end
$var wire 1 9" read2Data [13] $end
$var wire 1 :" read2Data [12] $end
$var wire 1 ;" read2Data [11] $end
$var wire 1 <" read2Data [10] $end
$var wire 1 =" read2Data [9] $end
$var wire 1 >" read2Data [8] $end
$var wire 1 ?" read2Data [7] $end
$var wire 1 @" read2Data [6] $end
$var wire 1 A" read2Data [5] $end
$var wire 1 B" read2Data [4] $end
$var wire 1 C" read2Data [3] $end
$var wire 1 D" read2Data [2] $end
$var wire 1 E" read2Data [1] $end
$var wire 1 F" read2Data [0] $end
$var wire 1 0! err $end
$var wire 1 V& internal_read1Data [15] $end
$var wire 1 W& internal_read1Data [14] $end
$var wire 1 X& internal_read1Data [13] $end
$var wire 1 Y& internal_read1Data [12] $end
$var wire 1 Z& internal_read1Data [11] $end
$var wire 1 [& internal_read1Data [10] $end
$var wire 1 \& internal_read1Data [9] $end
$var wire 1 ]& internal_read1Data [8] $end
$var wire 1 ^& internal_read1Data [7] $end
$var wire 1 _& internal_read1Data [6] $end
$var wire 1 `& internal_read1Data [5] $end
$var wire 1 a& internal_read1Data [4] $end
$var wire 1 b& internal_read1Data [3] $end
$var wire 1 c& internal_read1Data [2] $end
$var wire 1 d& internal_read1Data [1] $end
$var wire 1 e& internal_read1Data [0] $end
$var wire 1 f& internal_read2Data [15] $end
$var wire 1 g& internal_read2Data [14] $end
$var wire 1 h& internal_read2Data [13] $end
$var wire 1 i& internal_read2Data [12] $end
$var wire 1 j& internal_read2Data [11] $end
$var wire 1 k& internal_read2Data [10] $end
$var wire 1 l& internal_read2Data [9] $end
$var wire 1 m& internal_read2Data [8] $end
$var wire 1 n& internal_read2Data [7] $end
$var wire 1 o& internal_read2Data [6] $end
$var wire 1 p& internal_read2Data [5] $end
$var wire 1 q& internal_read2Data [4] $end
$var wire 1 r& internal_read2Data [3] $end
$var wire 1 s& internal_read2Data [2] $end
$var wire 1 t& internal_read2Data [1] $end
$var wire 1 u& internal_read2Data [0] $end

$scope module rf $end
$var parameter 32 v& BIT_WIDTH $end
$var parameter 32 w& BIT_SIZE $end
$var parameter 32 x& REG_NUMS $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 J! read1RegSel [2] $end
$var wire 1 K! read1RegSel [1] $end
$var wire 1 L! read1RegSel [0] $end
$var wire 1 M! read2RegSel [2] $end
$var wire 1 N! read2RegSel [1] $end
$var wire 1 O! read2RegSel [0] $end
$var wire 1 S& writeRegSel [2] $end
$var wire 1 T& writeRegSel [1] $end
$var wire 1 U& writeRegSel [0] $end
$var wire 1 u! writeData [15] $end
$var wire 1 v! writeData [14] $end
$var wire 1 w! writeData [13] $end
$var wire 1 x! writeData [12] $end
$var wire 1 y! writeData [11] $end
$var wire 1 z! writeData [10] $end
$var wire 1 {! writeData [9] $end
$var wire 1 |! writeData [8] $end
$var wire 1 }! writeData [7] $end
$var wire 1 ~! writeData [6] $end
$var wire 1 !" writeData [5] $end
$var wire 1 "" writeData [4] $end
$var wire 1 #" writeData [3] $end
$var wire 1 $" writeData [2] $end
$var wire 1 %" writeData [1] $end
$var wire 1 &" writeData [0] $end
$var wire 1 J# writeEn $end
$var wire 1 V& read1Data [15] $end
$var wire 1 W& read1Data [14] $end
$var wire 1 X& read1Data [13] $end
$var wire 1 Y& read1Data [12] $end
$var wire 1 Z& read1Data [11] $end
$var wire 1 [& read1Data [10] $end
$var wire 1 \& read1Data [9] $end
$var wire 1 ]& read1Data [8] $end
$var wire 1 ^& read1Data [7] $end
$var wire 1 _& read1Data [6] $end
$var wire 1 `& read1Data [5] $end
$var wire 1 a& read1Data [4] $end
$var wire 1 b& read1Data [3] $end
$var wire 1 c& read1Data [2] $end
$var wire 1 d& read1Data [1] $end
$var wire 1 e& read1Data [0] $end
$var wire 1 f& read2Data [15] $end
$var wire 1 g& read2Data [14] $end
$var wire 1 h& read2Data [13] $end
$var wire 1 i& read2Data [12] $end
$var wire 1 j& read2Data [11] $end
$var wire 1 k& read2Data [10] $end
$var wire 1 l& read2Data [9] $end
$var wire 1 m& read2Data [8] $end
$var wire 1 n& read2Data [7] $end
$var wire 1 o& read2Data [6] $end
$var wire 1 p& read2Data [5] $end
$var wire 1 q& read2Data [4] $end
$var wire 1 r& read2Data [3] $end
$var wire 1 s& read2Data [2] $end
$var wire 1 t& read2Data [1] $end
$var wire 1 u& read2Data [0] $end
$var wire 1 0! err $end
$var wire 1 y& r0 [15] $end
$var wire 1 z& r0 [14] $end
$var wire 1 {& r0 [13] $end
$var wire 1 |& r0 [12] $end
$var wire 1 }& r0 [11] $end
$var wire 1 ~& r0 [10] $end
$var wire 1 !' r0 [9] $end
$var wire 1 "' r0 [8] $end
$var wire 1 #' r0 [7] $end
$var wire 1 $' r0 [6] $end
$var wire 1 %' r0 [5] $end
$var wire 1 &' r0 [4] $end
$var wire 1 '' r0 [3] $end
$var wire 1 (' r0 [2] $end
$var wire 1 )' r0 [1] $end
$var wire 1 *' r0 [0] $end
$var wire 1 +' r1 [15] $end
$var wire 1 ,' r1 [14] $end
$var wire 1 -' r1 [13] $end
$var wire 1 .' r1 [12] $end
$var wire 1 /' r1 [11] $end
$var wire 1 0' r1 [10] $end
$var wire 1 1' r1 [9] $end
$var wire 1 2' r1 [8] $end
$var wire 1 3' r1 [7] $end
$var wire 1 4' r1 [6] $end
$var wire 1 5' r1 [5] $end
$var wire 1 6' r1 [4] $end
$var wire 1 7' r1 [3] $end
$var wire 1 8' r1 [2] $end
$var wire 1 9' r1 [1] $end
$var wire 1 :' r1 [0] $end
$var wire 1 ;' r2 [15] $end
$var wire 1 <' r2 [14] $end
$var wire 1 =' r2 [13] $end
$var wire 1 >' r2 [12] $end
$var wire 1 ?' r2 [11] $end
$var wire 1 @' r2 [10] $end
$var wire 1 A' r2 [9] $end
$var wire 1 B' r2 [8] $end
$var wire 1 C' r2 [7] $end
$var wire 1 D' r2 [6] $end
$var wire 1 E' r2 [5] $end
$var wire 1 F' r2 [4] $end
$var wire 1 G' r2 [3] $end
$var wire 1 H' r2 [2] $end
$var wire 1 I' r2 [1] $end
$var wire 1 J' r2 [0] $end
$var wire 1 K' r3 [15] $end
$var wire 1 L' r3 [14] $end
$var wire 1 M' r3 [13] $end
$var wire 1 N' r3 [12] $end
$var wire 1 O' r3 [11] $end
$var wire 1 P' r3 [10] $end
$var wire 1 Q' r3 [9] $end
$var wire 1 R' r3 [8] $end
$var wire 1 S' r3 [7] $end
$var wire 1 T' r3 [6] $end
$var wire 1 U' r3 [5] $end
$var wire 1 V' r3 [4] $end
$var wire 1 W' r3 [3] $end
$var wire 1 X' r3 [2] $end
$var wire 1 Y' r3 [1] $end
$var wire 1 Z' r3 [0] $end
$var wire 1 [' r4 [15] $end
$var wire 1 \' r4 [14] $end
$var wire 1 ]' r4 [13] $end
$var wire 1 ^' r4 [12] $end
$var wire 1 _' r4 [11] $end
$var wire 1 `' r4 [10] $end
$var wire 1 a' r4 [9] $end
$var wire 1 b' r4 [8] $end
$var wire 1 c' r4 [7] $end
$var wire 1 d' r4 [6] $end
$var wire 1 e' r4 [5] $end
$var wire 1 f' r4 [4] $end
$var wire 1 g' r4 [3] $end
$var wire 1 h' r4 [2] $end
$var wire 1 i' r4 [1] $end
$var wire 1 j' r4 [0] $end
$var wire 1 k' r5 [15] $end
$var wire 1 l' r5 [14] $end
$var wire 1 m' r5 [13] $end
$var wire 1 n' r5 [12] $end
$var wire 1 o' r5 [11] $end
$var wire 1 p' r5 [10] $end
$var wire 1 q' r5 [9] $end
$var wire 1 r' r5 [8] $end
$var wire 1 s' r5 [7] $end
$var wire 1 t' r5 [6] $end
$var wire 1 u' r5 [5] $end
$var wire 1 v' r5 [4] $end
$var wire 1 w' r5 [3] $end
$var wire 1 x' r5 [2] $end
$var wire 1 y' r5 [1] $end
$var wire 1 z' r5 [0] $end
$var wire 1 {' r6 [15] $end
$var wire 1 |' r6 [14] $end
$var wire 1 }' r6 [13] $end
$var wire 1 ~' r6 [12] $end
$var wire 1 !( r6 [11] $end
$var wire 1 "( r6 [10] $end
$var wire 1 #( r6 [9] $end
$var wire 1 $( r6 [8] $end
$var wire 1 %( r6 [7] $end
$var wire 1 &( r6 [6] $end
$var wire 1 '( r6 [5] $end
$var wire 1 (( r6 [4] $end
$var wire 1 )( r6 [3] $end
$var wire 1 *( r6 [2] $end
$var wire 1 +( r6 [1] $end
$var wire 1 ,( r6 [0] $end
$var wire 1 -( r7 [15] $end
$var wire 1 .( r7 [14] $end
$var wire 1 /( r7 [13] $end
$var wire 1 0( r7 [12] $end
$var wire 1 1( r7 [11] $end
$var wire 1 2( r7 [10] $end
$var wire 1 3( r7 [9] $end
$var wire 1 4( r7 [8] $end
$var wire 1 5( r7 [7] $end
$var wire 1 6( r7 [6] $end
$var wire 1 7( r7 [5] $end
$var wire 1 8( r7 [4] $end
$var wire 1 9( r7 [3] $end
$var wire 1 :( r7 [2] $end
$var wire 1 ;( r7 [1] $end
$var wire 1 <( r7 [0] $end
$var wire 1 =( we [15] $end
$var wire 1 >( we [14] $end
$var wire 1 ?( we [13] $end
$var wire 1 @( we [12] $end
$var wire 1 A( we [11] $end
$var wire 1 B( we [10] $end
$var wire 1 C( we [9] $end
$var wire 1 D( we [8] $end
$var wire 1 E( we [7] $end
$var wire 1 F( we [6] $end
$var wire 1 G( we [5] $end
$var wire 1 H( we [4] $end
$var wire 1 I( we [3] $end
$var wire 1 J( we [2] $end
$var wire 1 K( we [1] $end
$var wire 1 L( we [0] $end

$scope module s1 $end
$var parameter 32 M( OPERAND_WIDTH $end
$var parameter 32 N( SHAMT_WIDTH $end
$var parameter 32 O( NUM_OPERATIONS $end
$var wire 1 P( In [15] $end
$var wire 1 Q( In [14] $end
$var wire 1 R( In [13] $end
$var wire 1 S( In [12] $end
$var wire 1 T( In [11] $end
$var wire 1 U( In [10] $end
$var wire 1 V( In [9] $end
$var wire 1 W( In [8] $end
$var wire 1 X( In [7] $end
$var wire 1 Y( In [6] $end
$var wire 1 Z( In [5] $end
$var wire 1 [( In [4] $end
$var wire 1 \( In [3] $end
$var wire 1 ]( In [2] $end
$var wire 1 ^( In [1] $end
$var wire 1 J# In [0] $end
$var wire 1 _( ShAmt [3] $end
$var wire 1 S& ShAmt [2] $end
$var wire 1 T& ShAmt [1] $end
$var wire 1 U& ShAmt [0] $end
$var wire 1 `( Oper [1] $end
$var wire 1 a( Oper [0] $end
$var wire 1 =( Out [15] $end
$var wire 1 >( Out [14] $end
$var wire 1 ?( Out [13] $end
$var wire 1 @( Out [12] $end
$var wire 1 A( Out [11] $end
$var wire 1 B( Out [10] $end
$var wire 1 C( Out [9] $end
$var wire 1 D( Out [8] $end
$var wire 1 E( Out [7] $end
$var wire 1 F( Out [6] $end
$var wire 1 G( Out [5] $end
$var wire 1 H( Out [4] $end
$var wire 1 I( Out [3] $end
$var wire 1 J( Out [2] $end
$var wire 1 K( Out [1] $end
$var wire 1 L( Out [0] $end
$var wire 1 b( s0 [15] $end
$var wire 1 c( s0 [14] $end
$var wire 1 d( s0 [13] $end
$var wire 1 e( s0 [12] $end
$var wire 1 f( s0 [11] $end
$var wire 1 g( s0 [10] $end
$var wire 1 h( s0 [9] $end
$var wire 1 i( s0 [8] $end
$var wire 1 j( s0 [7] $end
$var wire 1 k( s0 [6] $end
$var wire 1 l( s0 [5] $end
$var wire 1 m( s0 [4] $end
$var wire 1 n( s0 [3] $end
$var wire 1 o( s0 [2] $end
$var wire 1 p( s0 [1] $end
$var wire 1 q( s0 [0] $end
$var wire 1 r( s1 [15] $end
$var wire 1 s( s1 [14] $end
$var wire 1 t( s1 [13] $end
$var wire 1 u( s1 [12] $end
$var wire 1 v( s1 [11] $end
$var wire 1 w( s1 [10] $end
$var wire 1 x( s1 [9] $end
$var wire 1 y( s1 [8] $end
$var wire 1 z( s1 [7] $end
$var wire 1 {( s1 [6] $end
$var wire 1 |( s1 [5] $end
$var wire 1 }( s1 [4] $end
$var wire 1 ~( s1 [3] $end
$var wire 1 !) s1 [2] $end
$var wire 1 ") s1 [1] $end
$var wire 1 #) s1 [0] $end
$var wire 1 $) s2 [15] $end
$var wire 1 %) s2 [14] $end
$var wire 1 &) s2 [13] $end
$var wire 1 ') s2 [12] $end
$var wire 1 () s2 [11] $end
$var wire 1 )) s2 [10] $end
$var wire 1 *) s2 [9] $end
$var wire 1 +) s2 [8] $end
$var wire 1 ,) s2 [7] $end
$var wire 1 -) s2 [6] $end
$var wire 1 .) s2 [5] $end
$var wire 1 /) s2 [4] $end
$var wire 1 0) s2 [3] $end
$var wire 1 1) s2 [2] $end
$var wire 1 2) s2 [1] $end
$var wire 1 3) s2 [0] $end
$var wire 1 4) s3 [15] $end
$var wire 1 5) s3 [14] $end
$var wire 1 6) s3 [13] $end
$var wire 1 7) s3 [12] $end
$var wire 1 8) s3 [11] $end
$var wire 1 9) s3 [10] $end
$var wire 1 :) s3 [9] $end
$var wire 1 ;) s3 [8] $end
$var wire 1 <) s3 [7] $end
$var wire 1 =) s3 [6] $end
$var wire 1 >) s3 [5] $end
$var wire 1 ?) s3 [4] $end
$var wire 1 @) s3 [3] $end
$var wire 1 A) s3 [2] $end
$var wire 1 B) s3 [1] $end
$var wire 1 C) s3 [0] $end
$var wire 1 D) temp_out_sh0 [15] $end
$var wire 1 E) temp_out_sh0 [14] $end
$var wire 1 F) temp_out_sh0 [13] $end
$var wire 1 G) temp_out_sh0 [12] $end
$var wire 1 H) temp_out_sh0 [11] $end
$var wire 1 I) temp_out_sh0 [10] $end
$var wire 1 J) temp_out_sh0 [9] $end
$var wire 1 K) temp_out_sh0 [8] $end
$var wire 1 L) temp_out_sh0 [7] $end
$var wire 1 M) temp_out_sh0 [6] $end
$var wire 1 N) temp_out_sh0 [5] $end
$var wire 1 O) temp_out_sh0 [4] $end
$var wire 1 P) temp_out_sh0 [3] $end
$var wire 1 Q) temp_out_sh0 [2] $end
$var wire 1 R) temp_out_sh0 [1] $end
$var wire 1 S) temp_out_sh0 [0] $end
$var wire 1 T) temp_out_sh1 [15] $end
$var wire 1 U) temp_out_sh1 [14] $end
$var wire 1 V) temp_out_sh1 [13] $end
$var wire 1 W) temp_out_sh1 [12] $end
$var wire 1 X) temp_out_sh1 [11] $end
$var wire 1 Y) temp_out_sh1 [10] $end
$var wire 1 Z) temp_out_sh1 [9] $end
$var wire 1 [) temp_out_sh1 [8] $end
$var wire 1 \) temp_out_sh1 [7] $end
$var wire 1 ]) temp_out_sh1 [6] $end
$var wire 1 ^) temp_out_sh1 [5] $end
$var wire 1 _) temp_out_sh1 [4] $end
$var wire 1 `) temp_out_sh1 [3] $end
$var wire 1 a) temp_out_sh1 [2] $end
$var wire 1 b) temp_out_sh1 [1] $end
$var wire 1 c) temp_out_sh1 [0] $end
$var wire 1 d) temp_out_sh2 [15] $end
$var wire 1 e) temp_out_sh2 [14] $end
$var wire 1 f) temp_out_sh2 [13] $end
$var wire 1 g) temp_out_sh2 [12] $end
$var wire 1 h) temp_out_sh2 [11] $end
$var wire 1 i) temp_out_sh2 [10] $end
$var wire 1 j) temp_out_sh2 [9] $end
$var wire 1 k) temp_out_sh2 [8] $end
$var wire 1 l) temp_out_sh2 [7] $end
$var wire 1 m) temp_out_sh2 [6] $end
$var wire 1 n) temp_out_sh2 [5] $end
$var wire 1 o) temp_out_sh2 [4] $end
$var wire 1 p) temp_out_sh2 [3] $end
$var wire 1 q) temp_out_sh2 [2] $end
$var wire 1 r) temp_out_sh2 [1] $end
$var wire 1 s) temp_out_sh2 [0] $end
$var wire 1 t) temp_out_sh3 [15] $end
$var wire 1 u) temp_out_sh3 [14] $end
$var wire 1 v) temp_out_sh3 [13] $end
$var wire 1 w) temp_out_sh3 [12] $end
$var wire 1 x) temp_out_sh3 [11] $end
$var wire 1 y) temp_out_sh3 [10] $end
$var wire 1 z) temp_out_sh3 [9] $end
$var wire 1 {) temp_out_sh3 [8] $end
$var wire 1 |) temp_out_sh3 [7] $end
$var wire 1 }) temp_out_sh3 [6] $end
$var wire 1 ~) temp_out_sh3 [5] $end
$var wire 1 !* temp_out_sh3 [4] $end
$var wire 1 "* temp_out_sh3 [3] $end
$var wire 1 #* temp_out_sh3 [2] $end
$var wire 1 $* temp_out_sh3 [1] $end
$var wire 1 %* temp_out_sh3 [0] $end

$scope module bs0 $end
$var wire 1 P( in [15] $end
$var wire 1 Q( in [14] $end
$var wire 1 R( in [13] $end
$var wire 1 S( in [12] $end
$var wire 1 T( in [11] $end
$var wire 1 U( in [10] $end
$var wire 1 V( in [9] $end
$var wire 1 W( in [8] $end
$var wire 1 X( in [7] $end
$var wire 1 Y( in [6] $end
$var wire 1 Z( in [5] $end
$var wire 1 [( in [4] $end
$var wire 1 \( in [3] $end
$var wire 1 ]( in [2] $end
$var wire 1 ^( in [1] $end
$var wire 1 J# in [0] $end
$var wire 1 `( oper [1] $end
$var wire 1 a( oper [0] $end
$var wire 1 D) out [15] $end
$var wire 1 E) out [14] $end
$var wire 1 F) out [13] $end
$var wire 1 G) out [12] $end
$var wire 1 H) out [11] $end
$var wire 1 I) out [10] $end
$var wire 1 J) out [9] $end
$var wire 1 K) out [8] $end
$var wire 1 L) out [7] $end
$var wire 1 M) out [6] $end
$var wire 1 N) out [5] $end
$var wire 1 O) out [4] $end
$var wire 1 P) out [3] $end
$var wire 1 Q) out [2] $end
$var wire 1 R) out [1] $end
$var wire 1 S) out [0] $end
$upscope $end

$scope module bs1 $end
$var wire 1 b( in [15] $end
$var wire 1 c( in [14] $end
$var wire 1 d( in [13] $end
$var wire 1 e( in [12] $end
$var wire 1 f( in [11] $end
$var wire 1 g( in [10] $end
$var wire 1 h( in [9] $end
$var wire 1 i( in [8] $end
$var wire 1 j( in [7] $end
$var wire 1 k( in [6] $end
$var wire 1 l( in [5] $end
$var wire 1 m( in [4] $end
$var wire 1 n( in [3] $end
$var wire 1 o( in [2] $end
$var wire 1 p( in [1] $end
$var wire 1 q( in [0] $end
$var wire 1 `( oper [1] $end
$var wire 1 a( oper [0] $end
$var wire 1 T) out [15] $end
$var wire 1 U) out [14] $end
$var wire 1 V) out [13] $end
$var wire 1 W) out [12] $end
$var wire 1 X) out [11] $end
$var wire 1 Y) out [10] $end
$var wire 1 Z) out [9] $end
$var wire 1 [) out [8] $end
$var wire 1 \) out [7] $end
$var wire 1 ]) out [6] $end
$var wire 1 ^) out [5] $end
$var wire 1 _) out [4] $end
$var wire 1 `) out [3] $end
$var wire 1 a) out [2] $end
$var wire 1 b) out [1] $end
$var wire 1 c) out [0] $end
$upscope $end

$scope module bs2 $end
$var wire 1 r( in [15] $end
$var wire 1 s( in [14] $end
$var wire 1 t( in [13] $end
$var wire 1 u( in [12] $end
$var wire 1 v( in [11] $end
$var wire 1 w( in [10] $end
$var wire 1 x( in [9] $end
$var wire 1 y( in [8] $end
$var wire 1 z( in [7] $end
$var wire 1 {( in [6] $end
$var wire 1 |( in [5] $end
$var wire 1 }( in [4] $end
$var wire 1 ~( in [3] $end
$var wire 1 !) in [2] $end
$var wire 1 ") in [1] $end
$var wire 1 #) in [0] $end
$var wire 1 `( oper [1] $end
$var wire 1 a( oper [0] $end
$var wire 1 d) out [15] $end
$var wire 1 e) out [14] $end
$var wire 1 f) out [13] $end
$var wire 1 g) out [12] $end
$var wire 1 h) out [11] $end
$var wire 1 i) out [10] $end
$var wire 1 j) out [9] $end
$var wire 1 k) out [8] $end
$var wire 1 l) out [7] $end
$var wire 1 m) out [6] $end
$var wire 1 n) out [5] $end
$var wire 1 o) out [4] $end
$var wire 1 p) out [3] $end
$var wire 1 q) out [2] $end
$var wire 1 r) out [1] $end
$var wire 1 s) out [0] $end
$upscope $end

$scope module bs3 $end
$var wire 1 $) in [15] $end
$var wire 1 %) in [14] $end
$var wire 1 &) in [13] $end
$var wire 1 ') in [12] $end
$var wire 1 () in [11] $end
$var wire 1 )) in [10] $end
$var wire 1 *) in [9] $end
$var wire 1 +) in [8] $end
$var wire 1 ,) in [7] $end
$var wire 1 -) in [6] $end
$var wire 1 .) in [5] $end
$var wire 1 /) in [4] $end
$var wire 1 0) in [3] $end
$var wire 1 1) in [2] $end
$var wire 1 2) in [1] $end
$var wire 1 3) in [0] $end
$var wire 1 `( oper [1] $end
$var wire 1 a( oper [0] $end
$var wire 1 t) out [15] $end
$var wire 1 u) out [14] $end
$var wire 1 v) out [13] $end
$var wire 1 w) out [12] $end
$var wire 1 x) out [11] $end
$var wire 1 y) out [10] $end
$var wire 1 z) out [9] $end
$var wire 1 {) out [8] $end
$var wire 1 |) out [7] $end
$var wire 1 }) out [6] $end
$var wire 1 ~) out [5] $end
$var wire 1 !* out [4] $end
$var wire 1 "* out [3] $end
$var wire 1 #* out [2] $end
$var wire 1 $* out [1] $end
$var wire 1 %* out [0] $end
$upscope $end
$upscope $end

$scope module registers[7] $end
$var parameter 32 &* BIT_WIDTH $end
$var parameter 32 '* BIT_SIZE $end
$var parameter 32 (* REG_NUMS $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 E( we $end
$var wire 1 u! w [15] $end
$var wire 1 v! w [14] $end
$var wire 1 w! w [13] $end
$var wire 1 x! w [12] $end
$var wire 1 y! w [11] $end
$var wire 1 z! w [10] $end
$var wire 1 {! w [9] $end
$var wire 1 |! w [8] $end
$var wire 1 }! w [7] $end
$var wire 1 ~! w [6] $end
$var wire 1 !" w [5] $end
$var wire 1 "" w [4] $end
$var wire 1 #" w [3] $end
$var wire 1 $" w [2] $end
$var wire 1 %" w [1] $end
$var wire 1 &" w [0] $end
$var wire 1 -( r [15] $end
$var wire 1 .( r [14] $end
$var wire 1 /( r [13] $end
$var wire 1 0( r [12] $end
$var wire 1 1( r [11] $end
$var wire 1 2( r [10] $end
$var wire 1 3( r [9] $end
$var wire 1 4( r [8] $end
$var wire 1 5( r [7] $end
$var wire 1 6( r [6] $end
$var wire 1 7( r [5] $end
$var wire 1 8( r [4] $end
$var wire 1 9( r [3] $end
$var wire 1 :( r [2] $end
$var wire 1 ;( r [1] $end
$var wire 1 <( r [0] $end

$scope module dff01[15] $end
$var wire 1 -( q $end
$var wire 1 )* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ** state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 .( q $end
$var wire 1 +* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ,* state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 /( q $end
$var wire 1 -* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 .* state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 0( q $end
$var wire 1 /* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 0* state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 1( q $end
$var wire 1 1* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 2* state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 2( q $end
$var wire 1 3* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 4* state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 3( q $end
$var wire 1 5* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 6* state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 4( q $end
$var wire 1 7* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 8* state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 5( q $end
$var wire 1 9* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 :* state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 6( q $end
$var wire 1 ;* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 <* state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 7( q $end
$var wire 1 =* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 >* state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 8( q $end
$var wire 1 ?* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 @* state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 9( q $end
$var wire 1 A* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 B* state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 :( q $end
$var wire 1 C* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 D* state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 ;( q $end
$var wire 1 E* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 F* state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 <( q $end
$var wire 1 G* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 H* state $end
$upscope $end
$upscope $end

$scope module registers[6] $end
$var parameter 32 I* BIT_WIDTH $end
$var parameter 32 J* BIT_SIZE $end
$var parameter 32 K* REG_NUMS $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 F( we $end
$var wire 1 u! w [15] $end
$var wire 1 v! w [14] $end
$var wire 1 w! w [13] $end
$var wire 1 x! w [12] $end
$var wire 1 y! w [11] $end
$var wire 1 z! w [10] $end
$var wire 1 {! w [9] $end
$var wire 1 |! w [8] $end
$var wire 1 }! w [7] $end
$var wire 1 ~! w [6] $end
$var wire 1 !" w [5] $end
$var wire 1 "" w [4] $end
$var wire 1 #" w [3] $end
$var wire 1 $" w [2] $end
$var wire 1 %" w [1] $end
$var wire 1 &" w [0] $end
$var wire 1 {' r [15] $end
$var wire 1 |' r [14] $end
$var wire 1 }' r [13] $end
$var wire 1 ~' r [12] $end
$var wire 1 !( r [11] $end
$var wire 1 "( r [10] $end
$var wire 1 #( r [9] $end
$var wire 1 $( r [8] $end
$var wire 1 %( r [7] $end
$var wire 1 &( r [6] $end
$var wire 1 '( r [5] $end
$var wire 1 (( r [4] $end
$var wire 1 )( r [3] $end
$var wire 1 *( r [2] $end
$var wire 1 +( r [1] $end
$var wire 1 ,( r [0] $end

$scope module dff01[15] $end
$var wire 1 {' q $end
$var wire 1 L* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 M* state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 |' q $end
$var wire 1 N* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 O* state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 }' q $end
$var wire 1 P* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 Q* state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 ~' q $end
$var wire 1 R* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 S* state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 !( q $end
$var wire 1 T* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 U* state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 "( q $end
$var wire 1 V* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 W* state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 #( q $end
$var wire 1 X* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 Y* state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 $( q $end
$var wire 1 Z* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 [* state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 %( q $end
$var wire 1 \* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ]* state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 &( q $end
$var wire 1 ^* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 _* state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 '( q $end
$var wire 1 `* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 a* state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 (( q $end
$var wire 1 b* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 c* state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 )( q $end
$var wire 1 d* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 e* state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 *( q $end
$var wire 1 f* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 g* state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 +( q $end
$var wire 1 h* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 i* state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 ,( q $end
$var wire 1 j* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 k* state $end
$upscope $end
$upscope $end

$scope module registers[5] $end
$var parameter 32 l* BIT_WIDTH $end
$var parameter 32 m* BIT_SIZE $end
$var parameter 32 n* REG_NUMS $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 G( we $end
$var wire 1 u! w [15] $end
$var wire 1 v! w [14] $end
$var wire 1 w! w [13] $end
$var wire 1 x! w [12] $end
$var wire 1 y! w [11] $end
$var wire 1 z! w [10] $end
$var wire 1 {! w [9] $end
$var wire 1 |! w [8] $end
$var wire 1 }! w [7] $end
$var wire 1 ~! w [6] $end
$var wire 1 !" w [5] $end
$var wire 1 "" w [4] $end
$var wire 1 #" w [3] $end
$var wire 1 $" w [2] $end
$var wire 1 %" w [1] $end
$var wire 1 &" w [0] $end
$var wire 1 k' r [15] $end
$var wire 1 l' r [14] $end
$var wire 1 m' r [13] $end
$var wire 1 n' r [12] $end
$var wire 1 o' r [11] $end
$var wire 1 p' r [10] $end
$var wire 1 q' r [9] $end
$var wire 1 r' r [8] $end
$var wire 1 s' r [7] $end
$var wire 1 t' r [6] $end
$var wire 1 u' r [5] $end
$var wire 1 v' r [4] $end
$var wire 1 w' r [3] $end
$var wire 1 x' r [2] $end
$var wire 1 y' r [1] $end
$var wire 1 z' r [0] $end

$scope module dff01[15] $end
$var wire 1 k' q $end
$var wire 1 o* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 p* state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 l' q $end
$var wire 1 q* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 r* state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 m' q $end
$var wire 1 s* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 t* state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 n' q $end
$var wire 1 u* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 v* state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 o' q $end
$var wire 1 w* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 x* state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 p' q $end
$var wire 1 y* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 z* state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 q' q $end
$var wire 1 {* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 |* state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 r' q $end
$var wire 1 }* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ~* state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 s' q $end
$var wire 1 !+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 "+ state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 t' q $end
$var wire 1 #+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 $+ state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 u' q $end
$var wire 1 %+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 &+ state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 v' q $end
$var wire 1 '+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 (+ state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 w' q $end
$var wire 1 )+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 *+ state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 x' q $end
$var wire 1 ++ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ,+ state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 y' q $end
$var wire 1 -+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 .+ state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 z' q $end
$var wire 1 /+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 0+ state $end
$upscope $end
$upscope $end

$scope module registers[4] $end
$var parameter 32 1+ BIT_WIDTH $end
$var parameter 32 2+ BIT_SIZE $end
$var parameter 32 3+ REG_NUMS $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 H( we $end
$var wire 1 u! w [15] $end
$var wire 1 v! w [14] $end
$var wire 1 w! w [13] $end
$var wire 1 x! w [12] $end
$var wire 1 y! w [11] $end
$var wire 1 z! w [10] $end
$var wire 1 {! w [9] $end
$var wire 1 |! w [8] $end
$var wire 1 }! w [7] $end
$var wire 1 ~! w [6] $end
$var wire 1 !" w [5] $end
$var wire 1 "" w [4] $end
$var wire 1 #" w [3] $end
$var wire 1 $" w [2] $end
$var wire 1 %" w [1] $end
$var wire 1 &" w [0] $end
$var wire 1 [' r [15] $end
$var wire 1 \' r [14] $end
$var wire 1 ]' r [13] $end
$var wire 1 ^' r [12] $end
$var wire 1 _' r [11] $end
$var wire 1 `' r [10] $end
$var wire 1 a' r [9] $end
$var wire 1 b' r [8] $end
$var wire 1 c' r [7] $end
$var wire 1 d' r [6] $end
$var wire 1 e' r [5] $end
$var wire 1 f' r [4] $end
$var wire 1 g' r [3] $end
$var wire 1 h' r [2] $end
$var wire 1 i' r [1] $end
$var wire 1 j' r [0] $end

$scope module dff01[15] $end
$var wire 1 [' q $end
$var wire 1 4+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 5+ state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 \' q $end
$var wire 1 6+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 7+ state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 ]' q $end
$var wire 1 8+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 9+ state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 ^' q $end
$var wire 1 :+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ;+ state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 _' q $end
$var wire 1 <+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 =+ state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 `' q $end
$var wire 1 >+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ?+ state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 a' q $end
$var wire 1 @+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 A+ state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 b' q $end
$var wire 1 B+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 C+ state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 c' q $end
$var wire 1 D+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 E+ state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 d' q $end
$var wire 1 F+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 G+ state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 e' q $end
$var wire 1 H+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 I+ state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 f' q $end
$var wire 1 J+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 K+ state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 g' q $end
$var wire 1 L+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 M+ state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 h' q $end
$var wire 1 N+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 O+ state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 i' q $end
$var wire 1 P+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 Q+ state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 j' q $end
$var wire 1 R+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 S+ state $end
$upscope $end
$upscope $end

$scope module registers[3] $end
$var parameter 32 T+ BIT_WIDTH $end
$var parameter 32 U+ BIT_SIZE $end
$var parameter 32 V+ REG_NUMS $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 I( we $end
$var wire 1 u! w [15] $end
$var wire 1 v! w [14] $end
$var wire 1 w! w [13] $end
$var wire 1 x! w [12] $end
$var wire 1 y! w [11] $end
$var wire 1 z! w [10] $end
$var wire 1 {! w [9] $end
$var wire 1 |! w [8] $end
$var wire 1 }! w [7] $end
$var wire 1 ~! w [6] $end
$var wire 1 !" w [5] $end
$var wire 1 "" w [4] $end
$var wire 1 #" w [3] $end
$var wire 1 $" w [2] $end
$var wire 1 %" w [1] $end
$var wire 1 &" w [0] $end
$var wire 1 K' r [15] $end
$var wire 1 L' r [14] $end
$var wire 1 M' r [13] $end
$var wire 1 N' r [12] $end
$var wire 1 O' r [11] $end
$var wire 1 P' r [10] $end
$var wire 1 Q' r [9] $end
$var wire 1 R' r [8] $end
$var wire 1 S' r [7] $end
$var wire 1 T' r [6] $end
$var wire 1 U' r [5] $end
$var wire 1 V' r [4] $end
$var wire 1 W' r [3] $end
$var wire 1 X' r [2] $end
$var wire 1 Y' r [1] $end
$var wire 1 Z' r [0] $end

$scope module dff01[15] $end
$var wire 1 K' q $end
$var wire 1 W+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 X+ state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 L' q $end
$var wire 1 Y+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 Z+ state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 M' q $end
$var wire 1 [+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 \+ state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 N' q $end
$var wire 1 ]+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ^+ state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 O' q $end
$var wire 1 _+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 `+ state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 P' q $end
$var wire 1 a+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 b+ state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 Q' q $end
$var wire 1 c+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 d+ state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 R' q $end
$var wire 1 e+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 f+ state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 S' q $end
$var wire 1 g+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 h+ state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 T' q $end
$var wire 1 i+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 j+ state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 U' q $end
$var wire 1 k+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 l+ state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 V' q $end
$var wire 1 m+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 n+ state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 W' q $end
$var wire 1 o+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 p+ state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 X' q $end
$var wire 1 q+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 r+ state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 Y' q $end
$var wire 1 s+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 t+ state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 Z' q $end
$var wire 1 u+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 v+ state $end
$upscope $end
$upscope $end

$scope module registers[2] $end
$var parameter 32 w+ BIT_WIDTH $end
$var parameter 32 x+ BIT_SIZE $end
$var parameter 32 y+ REG_NUMS $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 J( we $end
$var wire 1 u! w [15] $end
$var wire 1 v! w [14] $end
$var wire 1 w! w [13] $end
$var wire 1 x! w [12] $end
$var wire 1 y! w [11] $end
$var wire 1 z! w [10] $end
$var wire 1 {! w [9] $end
$var wire 1 |! w [8] $end
$var wire 1 }! w [7] $end
$var wire 1 ~! w [6] $end
$var wire 1 !" w [5] $end
$var wire 1 "" w [4] $end
$var wire 1 #" w [3] $end
$var wire 1 $" w [2] $end
$var wire 1 %" w [1] $end
$var wire 1 &" w [0] $end
$var wire 1 ;' r [15] $end
$var wire 1 <' r [14] $end
$var wire 1 =' r [13] $end
$var wire 1 >' r [12] $end
$var wire 1 ?' r [11] $end
$var wire 1 @' r [10] $end
$var wire 1 A' r [9] $end
$var wire 1 B' r [8] $end
$var wire 1 C' r [7] $end
$var wire 1 D' r [6] $end
$var wire 1 E' r [5] $end
$var wire 1 F' r [4] $end
$var wire 1 G' r [3] $end
$var wire 1 H' r [2] $end
$var wire 1 I' r [1] $end
$var wire 1 J' r [0] $end

$scope module dff01[15] $end
$var wire 1 ;' q $end
$var wire 1 z+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 {+ state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 <' q $end
$var wire 1 |+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 }+ state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 =' q $end
$var wire 1 ~+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 !, state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 >' q $end
$var wire 1 ", d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 #, state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 ?' q $end
$var wire 1 $, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 %, state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 @' q $end
$var wire 1 &, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ', state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 A' q $end
$var wire 1 (, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ), state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 B' q $end
$var wire 1 *, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 +, state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 C' q $end
$var wire 1 ,, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 -, state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 D' q $end
$var wire 1 ., d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 /, state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 E' q $end
$var wire 1 0, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 1, state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 F' q $end
$var wire 1 2, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 3, state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 G' q $end
$var wire 1 4, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 5, state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 H' q $end
$var wire 1 6, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 7, state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 I' q $end
$var wire 1 8, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 9, state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 J' q $end
$var wire 1 :, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ;, state $end
$upscope $end
$upscope $end

$scope module registers[1] $end
$var parameter 32 <, BIT_WIDTH $end
$var parameter 32 =, BIT_SIZE $end
$var parameter 32 >, REG_NUMS $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 K( we $end
$var wire 1 u! w [15] $end
$var wire 1 v! w [14] $end
$var wire 1 w! w [13] $end
$var wire 1 x! w [12] $end
$var wire 1 y! w [11] $end
$var wire 1 z! w [10] $end
$var wire 1 {! w [9] $end
$var wire 1 |! w [8] $end
$var wire 1 }! w [7] $end
$var wire 1 ~! w [6] $end
$var wire 1 !" w [5] $end
$var wire 1 "" w [4] $end
$var wire 1 #" w [3] $end
$var wire 1 $" w [2] $end
$var wire 1 %" w [1] $end
$var wire 1 &" w [0] $end
$var wire 1 +' r [15] $end
$var wire 1 ,' r [14] $end
$var wire 1 -' r [13] $end
$var wire 1 .' r [12] $end
$var wire 1 /' r [11] $end
$var wire 1 0' r [10] $end
$var wire 1 1' r [9] $end
$var wire 1 2' r [8] $end
$var wire 1 3' r [7] $end
$var wire 1 4' r [6] $end
$var wire 1 5' r [5] $end
$var wire 1 6' r [4] $end
$var wire 1 7' r [3] $end
$var wire 1 8' r [2] $end
$var wire 1 9' r [1] $end
$var wire 1 :' r [0] $end

$scope module dff01[15] $end
$var wire 1 +' q $end
$var wire 1 ?, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 @, state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 ,' q $end
$var wire 1 A, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 B, state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 -' q $end
$var wire 1 C, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 D, state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 .' q $end
$var wire 1 E, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 F, state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 /' q $end
$var wire 1 G, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 H, state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 0' q $end
$var wire 1 I, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 J, state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 1' q $end
$var wire 1 K, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 L, state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 2' q $end
$var wire 1 M, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 N, state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 3' q $end
$var wire 1 O, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 P, state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 4' q $end
$var wire 1 Q, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 R, state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 5' q $end
$var wire 1 S, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 T, state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 6' q $end
$var wire 1 U, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 V, state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 7' q $end
$var wire 1 W, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 X, state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 8' q $end
$var wire 1 Y, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 Z, state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 9' q $end
$var wire 1 [, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 \, state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 :' q $end
$var wire 1 ], d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ^, state $end
$upscope $end
$upscope $end

$scope module registers[0] $end
$var parameter 32 _, BIT_WIDTH $end
$var parameter 32 `, BIT_SIZE $end
$var parameter 32 a, REG_NUMS $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 L( we $end
$var wire 1 u! w [15] $end
$var wire 1 v! w [14] $end
$var wire 1 w! w [13] $end
$var wire 1 x! w [12] $end
$var wire 1 y! w [11] $end
$var wire 1 z! w [10] $end
$var wire 1 {! w [9] $end
$var wire 1 |! w [8] $end
$var wire 1 }! w [7] $end
$var wire 1 ~! w [6] $end
$var wire 1 !" w [5] $end
$var wire 1 "" w [4] $end
$var wire 1 #" w [3] $end
$var wire 1 $" w [2] $end
$var wire 1 %" w [1] $end
$var wire 1 &" w [0] $end
$var wire 1 y& r [15] $end
$var wire 1 z& r [14] $end
$var wire 1 {& r [13] $end
$var wire 1 |& r [12] $end
$var wire 1 }& r [11] $end
$var wire 1 ~& r [10] $end
$var wire 1 !' r [9] $end
$var wire 1 "' r [8] $end
$var wire 1 #' r [7] $end
$var wire 1 $' r [6] $end
$var wire 1 %' r [5] $end
$var wire 1 &' r [4] $end
$var wire 1 '' r [3] $end
$var wire 1 (' r [2] $end
$var wire 1 )' r [1] $end
$var wire 1 *' r [0] $end

$scope module dff01[15] $end
$var wire 1 y& q $end
$var wire 1 b, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 c, state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 z& q $end
$var wire 1 d, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 e, state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 {& q $end
$var wire 1 f, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 g, state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 |& q $end
$var wire 1 h, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 i, state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 }& q $end
$var wire 1 j, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 k, state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 ~& q $end
$var wire 1 l, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 m, state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 !' q $end
$var wire 1 n, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 o, state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 "' q $end
$var wire 1 p, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 q, state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 #' q $end
$var wire 1 r, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 s, state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 $' q $end
$var wire 1 t, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 u, state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 %' q $end
$var wire 1 v, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 w, state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 &' q $end
$var wire 1 x, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 y, state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 '' q $end
$var wire 1 z, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 {, state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 (' q $end
$var wire 1 |, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 }, state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 )' q $end
$var wire 1 ~, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 !- state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 *' q $end
$var wire 1 "- d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 #- state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module execute0 $end
$var wire 1 '" RSData [15] $end
$var wire 1 (" RSData [14] $end
$var wire 1 )" RSData [13] $end
$var wire 1 *" RSData [12] $end
$var wire 1 +" RSData [11] $end
$var wire 1 ," RSData [10] $end
$var wire 1 -" RSData [9] $end
$var wire 1 ." RSData [8] $end
$var wire 1 /" RSData [7] $end
$var wire 1 0" RSData [6] $end
$var wire 1 1" RSData [5] $end
$var wire 1 2" RSData [4] $end
$var wire 1 3" RSData [3] $end
$var wire 1 4" RSData [2] $end
$var wire 1 5" RSData [1] $end
$var wire 1 6" RSData [0] $end
$var wire 1 7" RTData [15] $end
$var wire 1 8" RTData [14] $end
$var wire 1 9" RTData [13] $end
$var wire 1 :" RTData [12] $end
$var wire 1 ;" RTData [11] $end
$var wire 1 <" RTData [10] $end
$var wire 1 =" RTData [9] $end
$var wire 1 >" RTData [8] $end
$var wire 1 ?" RTData [7] $end
$var wire 1 @" RTData [6] $end
$var wire 1 A" RTData [5] $end
$var wire 1 B" RTData [4] $end
$var wire 1 C" RTData [3] $end
$var wire 1 D" RTData [2] $end
$var wire 1 E" RTData [1] $end
$var wire 1 F" RTData [0] $end
$var wire 1 e! PC [15] $end
$var wire 1 f! PC [14] $end
$var wire 1 g! PC [13] $end
$var wire 1 h! PC [12] $end
$var wire 1 i! PC [11] $end
$var wire 1 j! PC [10] $end
$var wire 1 k! PC [9] $end
$var wire 1 l! PC [8] $end
$var wire 1 m! PC [7] $end
$var wire 1 n! PC [6] $end
$var wire 1 o! PC [5] $end
$var wire 1 p! PC [4] $end
$var wire 1 q! PC [3] $end
$var wire 1 r! PC [2] $end
$var wire 1 s! PC [1] $end
$var wire 1 t! PC [0] $end
$var wire 1 g" Imm5 [15] $end
$var wire 1 h" Imm5 [14] $end
$var wire 1 i" Imm5 [13] $end
$var wire 1 j" Imm5 [12] $end
$var wire 1 k" Imm5 [11] $end
$var wire 1 l" Imm5 [10] $end
$var wire 1 m" Imm5 [9] $end
$var wire 1 n" Imm5 [8] $end
$var wire 1 o" Imm5 [7] $end
$var wire 1 p" Imm5 [6] $end
$var wire 1 q" Imm5 [5] $end
$var wire 1 r" Imm5 [4] $end
$var wire 1 s" Imm5 [3] $end
$var wire 1 t" Imm5 [2] $end
$var wire 1 u" Imm5 [1] $end
$var wire 1 v" Imm5 [0] $end
$var wire 1 w" Imm8 [15] $end
$var wire 1 x" Imm8 [14] $end
$var wire 1 y" Imm8 [13] $end
$var wire 1 z" Imm8 [12] $end
$var wire 1 {" Imm8 [11] $end
$var wire 1 |" Imm8 [10] $end
$var wire 1 }" Imm8 [9] $end
$var wire 1 ~" Imm8 [8] $end
$var wire 1 !# Imm8 [7] $end
$var wire 1 "# Imm8 [6] $end
$var wire 1 ## Imm8 [5] $end
$var wire 1 $# Imm8 [4] $end
$var wire 1 %# Imm8 [3] $end
$var wire 1 &# Imm8 [2] $end
$var wire 1 '# Imm8 [1] $end
$var wire 1 (# Imm8 [0] $end
$var wire 1 )# sImm8 [15] $end
$var wire 1 *# sImm8 [14] $end
$var wire 1 +# sImm8 [13] $end
$var wire 1 ,# sImm8 [12] $end
$var wire 1 -# sImm8 [11] $end
$var wire 1 .# sImm8 [10] $end
$var wire 1 /# sImm8 [9] $end
$var wire 1 0# sImm8 [8] $end
$var wire 1 1# sImm8 [7] $end
$var wire 1 2# sImm8 [6] $end
$var wire 1 3# sImm8 [5] $end
$var wire 1 4# sImm8 [4] $end
$var wire 1 5# sImm8 [3] $end
$var wire 1 6# sImm8 [2] $end
$var wire 1 7# sImm8 [1] $end
$var wire 1 8# sImm8 [0] $end
$var wire 1 9# sImm11 [15] $end
$var wire 1 :# sImm11 [14] $end
$var wire 1 ;# sImm11 [13] $end
$var wire 1 <# sImm11 [12] $end
$var wire 1 =# sImm11 [11] $end
$var wire 1 ># sImm11 [10] $end
$var wire 1 ?# sImm11 [9] $end
$var wire 1 @# sImm11 [8] $end
$var wire 1 A# sImm11 [7] $end
$var wire 1 B# sImm11 [6] $end
$var wire 1 C# sImm11 [5] $end
$var wire 1 D# sImm11 [4] $end
$var wire 1 E# sImm11 [3] $end
$var wire 1 F# sImm11 [2] $end
$var wire 1 G# sImm11 [1] $end
$var wire 1 H# sImm11 [0] $end
$var wire 1 [# BSrc [1] $end
$var wire 1 \# BSrc [0] $end
$var wire 1 _# BranchTaken [2] $end
$var wire 1 `# BranchTaken [1] $end
$var wire 1 a# BranchTaken [0] $end
$var wire 1 L# ImmSrc $end
$var wire 1 Q# ALUJmp $end
$var wire 1 M# invA $end
$var wire 1 N# invB $end
$var wire 1 O# ALUSign $end
$var wire 1 P# cin $end
$var wire 1 G" ALU_Out [15] $end
$var wire 1 H" ALU_Out [14] $end
$var wire 1 I" ALU_Out [13] $end
$var wire 1 J" ALU_Out [12] $end
$var wire 1 K" ALU_Out [11] $end
$var wire 1 L" ALU_Out [10] $end
$var wire 1 M" ALU_Out [9] $end
$var wire 1 N" ALU_Out [8] $end
$var wire 1 O" ALU_Out [7] $end
$var wire 1 P" ALU_Out [6] $end
$var wire 1 Q" ALU_Out [5] $end
$var wire 1 R" ALU_Out [4] $end
$var wire 1 S" ALU_Out [3] $end
$var wire 1 T" ALU_Out [2] $end
$var wire 1 U" ALU_Out [1] $end
$var wire 1 V" ALU_Out [0] $end
$var wire 1 5! PC_Next [15] $end
$var wire 1 6! PC_Next [14] $end
$var wire 1 7! PC_Next [13] $end
$var wire 1 8! PC_Next [12] $end
$var wire 1 9! PC_Next [11] $end
$var wire 1 :! PC_Next [10] $end
$var wire 1 ;! PC_Next [9] $end
$var wire 1 <! PC_Next [8] $end
$var wire 1 =! PC_Next [7] $end
$var wire 1 >! PC_Next [6] $end
$var wire 1 ?! PC_Next [5] $end
$var wire 1 @! PC_Next [4] $end
$var wire 1 A! PC_Next [3] $end
$var wire 1 B! PC_Next [2] $end
$var wire 1 C! PC_Next [1] $end
$var wire 1 D! PC_Next [0] $end
$var wire 1 $- ALUIn [15] $end
$var wire 1 %- ALUIn [14] $end
$var wire 1 &- ALUIn [13] $end
$var wire 1 '- ALUIn [12] $end
$var wire 1 (- ALUIn [11] $end
$var wire 1 )- ALUIn [10] $end
$var wire 1 *- ALUIn [9] $end
$var wire 1 +- ALUIn [8] $end
$var wire 1 ,- ALUIn [7] $end
$var wire 1 -- ALUIn [6] $end
$var wire 1 .- ALUIn [5] $end
$var wire 1 /- ALUIn [4] $end
$var wire 1 0- ALUIn [3] $end
$var wire 1 1- ALUIn [2] $end
$var wire 1 2- ALUIn [1] $end
$var wire 1 3- ALUIn [0] $end
$var wire 1 4- PC_I [15] $end
$var wire 1 5- PC_I [14] $end
$var wire 1 6- PC_I [13] $end
$var wire 1 7- PC_I [12] $end
$var wire 1 8- PC_I [11] $end
$var wire 1 9- PC_I [10] $end
$var wire 1 :- PC_I [9] $end
$var wire 1 ;- PC_I [8] $end
$var wire 1 <- PC_I [7] $end
$var wire 1 =- PC_I [6] $end
$var wire 1 >- PC_I [5] $end
$var wire 1 ?- PC_I [4] $end
$var wire 1 @- PC_I [3] $end
$var wire 1 A- PC_I [2] $end
$var wire 1 B- PC_I [1] $end
$var wire 1 C- PC_I [0] $end
$var wire 1 D- PC_Branch [15] $end
$var wire 1 E- PC_Branch [14] $end
$var wire 1 F- PC_Branch [13] $end
$var wire 1 G- PC_Branch [12] $end
$var wire 1 H- PC_Branch [11] $end
$var wire 1 I- PC_Branch [10] $end
$var wire 1 J- PC_Branch [9] $end
$var wire 1 K- PC_Branch [8] $end
$var wire 1 L- PC_Branch [7] $end
$var wire 1 M- PC_Branch [6] $end
$var wire 1 N- PC_Branch [5] $end
$var wire 1 O- PC_Branch [4] $end
$var wire 1 P- PC_Branch [3] $end
$var wire 1 Q- PC_Branch [2] $end
$var wire 1 R- PC_Branch [1] $end
$var wire 1 S- PC_Branch [0] $end
$var wire 1 T- Branch [15] $end
$var wire 1 U- Branch [14] $end
$var wire 1 V- Branch [13] $end
$var wire 1 W- Branch [12] $end
$var wire 1 X- Branch [11] $end
$var wire 1 Y- Branch [10] $end
$var wire 1 Z- Branch [9] $end
$var wire 1 [- Branch [8] $end
$var wire 1 \- Branch [7] $end
$var wire 1 ]- Branch [6] $end
$var wire 1 ^- Branch [5] $end
$var wire 1 _- Branch [4] $end
$var wire 1 `- Branch [3] $end
$var wire 1 a- Branch [2] $end
$var wire 1 b- Branch [1] $end
$var wire 1 c- Branch [0] $end
$var wire 1 d- BrchCnd $end
$var wire 1 e- SF $end
$var wire 1 f- CF $end
$var wire 1 g- OF $end
$var wire 1 h- ZF $end

$scope module pc_adder $end
$var parameter 32 i- N $end
$var wire 1 T- sum [15] $end
$var wire 1 U- sum [14] $end
$var wire 1 V- sum [13] $end
$var wire 1 W- sum [12] $end
$var wire 1 X- sum [11] $end
$var wire 1 Y- sum [10] $end
$var wire 1 Z- sum [9] $end
$var wire 1 [- sum [8] $end
$var wire 1 \- sum [7] $end
$var wire 1 ]- sum [6] $end
$var wire 1 ^- sum [5] $end
$var wire 1 _- sum [4] $end
$var wire 1 `- sum [3] $end
$var wire 1 a- sum [2] $end
$var wire 1 b- sum [1] $end
$var wire 1 c- sum [0] $end
$var wire 1 j- c_out $end
$var wire 1 e! a [15] $end
$var wire 1 f! a [14] $end
$var wire 1 g! a [13] $end
$var wire 1 h! a [12] $end
$var wire 1 i! a [11] $end
$var wire 1 j! a [10] $end
$var wire 1 k! a [9] $end
$var wire 1 l! a [8] $end
$var wire 1 m! a [7] $end
$var wire 1 n! a [6] $end
$var wire 1 o! a [5] $end
$var wire 1 p! a [4] $end
$var wire 1 q! a [3] $end
$var wire 1 r! a [2] $end
$var wire 1 s! a [1] $end
$var wire 1 t! a [0] $end
$var wire 1 4- b [15] $end
$var wire 1 5- b [14] $end
$var wire 1 6- b [13] $end
$var wire 1 7- b [12] $end
$var wire 1 8- b [11] $end
$var wire 1 9- b [10] $end
$var wire 1 :- b [9] $end
$var wire 1 ;- b [8] $end
$var wire 1 <- b [7] $end
$var wire 1 =- b [6] $end
$var wire 1 >- b [5] $end
$var wire 1 ?- b [4] $end
$var wire 1 @- b [3] $end
$var wire 1 A- b [2] $end
$var wire 1 B- b [1] $end
$var wire 1 C- b [0] $end
$var wire 1 k- c_in $end
$var wire 1 l- carries [2] $end
$var wire 1 m- carries [1] $end
$var wire 1 n- carries [0] $end

$scope module cla[3] $end
$var parameter 32 o- N $end
$var wire 1 T- sum [3] $end
$var wire 1 U- sum [2] $end
$var wire 1 V- sum [1] $end
$var wire 1 W- sum [0] $end
$var wire 1 j- c_out $end
$var wire 1 e! a [3] $end
$var wire 1 f! a [2] $end
$var wire 1 g! a [1] $end
$var wire 1 h! a [0] $end
$var wire 1 4- b [3] $end
$var wire 1 5- b [2] $end
$var wire 1 6- b [1] $end
$var wire 1 7- b [0] $end
$var wire 1 l- c_in $end
$var wire 1 p- p [3] $end
$var wire 1 q- p [2] $end
$var wire 1 r- p [1] $end
$var wire 1 s- p [0] $end
$var wire 1 t- ng [3] $end
$var wire 1 u- ng [2] $end
$var wire 1 v- ng [1] $end
$var wire 1 w- ng [0] $end
$var wire 1 x- carries [4] $end
$var wire 1 y- carries [3] $end
$var wire 1 z- carries [2] $end
$var wire 1 {- carries [1] $end
$var wire 1 |- carries [0] $end
$var wire 1 }- cp [3] $end
$var wire 1 ~- cp [2] $end
$var wire 1 !. cp [1] $end
$var wire 1 ". cp [0] $end

$scope module xor_1[3] $end
$var wire 1 p- out $end
$var wire 1 e! in1 $end
$var wire 1 4- in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 q- out $end
$var wire 1 f! in1 $end
$var wire 1 5- in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 r- out $end
$var wire 1 g! in1 $end
$var wire 1 6- in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 s- out $end
$var wire 1 h! in1 $end
$var wire 1 7- in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 t- out $end
$var wire 1 e! in1 $end
$var wire 1 4- in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 u- out $end
$var wire 1 f! in1 $end
$var wire 1 5- in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 v- out $end
$var wire 1 g! in1 $end
$var wire 1 6- in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 w- out $end
$var wire 1 h! in1 $end
$var wire 1 7- in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 }- out $end
$var wire 1 p- in1 $end
$var wire 1 y- in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 ~- out $end
$var wire 1 q- in1 $end
$var wire 1 z- in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 !. out $end
$var wire 1 r- in1 $end
$var wire 1 {- in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 ". out $end
$var wire 1 s- in1 $end
$var wire 1 l- in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 j- out $end
$var wire 1 }- in1 $end
$var wire 1 t- in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 y- out $end
$var wire 1 ~- in1 $end
$var wire 1 u- in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 z- out $end
$var wire 1 !. in1 $end
$var wire 1 v- in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 {- out $end
$var wire 1 ". in1 $end
$var wire 1 w- in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 T- s $end
$var wire 1 #. c_out $end
$var wire 1 e! a $end
$var wire 1 4- b $end
$var wire 1 y- c_in $end
$var wire 1 $. AxorB $end
$var wire 1 %. CnandAB $end
$var wire 1 &. AnandB $end

$scope module xor_1 $end
$var wire 1 $. out $end
$var wire 1 e! in1 $end
$var wire 1 4- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 T- out $end
$var wire 1 $. in1 $end
$var wire 1 y- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 %. out $end
$var wire 1 $. in1 $end
$var wire 1 y- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 &. out $end
$var wire 1 e! in1 $end
$var wire 1 4- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 #. out $end
$var wire 1 &. in1 $end
$var wire 1 %. in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 U- s $end
$var wire 1 '. c_out $end
$var wire 1 f! a $end
$var wire 1 5- b $end
$var wire 1 z- c_in $end
$var wire 1 (. AxorB $end
$var wire 1 ). CnandAB $end
$var wire 1 *. AnandB $end

$scope module xor_1 $end
$var wire 1 (. out $end
$var wire 1 f! in1 $end
$var wire 1 5- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 U- out $end
$var wire 1 (. in1 $end
$var wire 1 z- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 ). out $end
$var wire 1 (. in1 $end
$var wire 1 z- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 *. out $end
$var wire 1 f! in1 $end
$var wire 1 5- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 '. out $end
$var wire 1 *. in1 $end
$var wire 1 ). in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 V- s $end
$var wire 1 +. c_out $end
$var wire 1 g! a $end
$var wire 1 6- b $end
$var wire 1 {- c_in $end
$var wire 1 ,. AxorB $end
$var wire 1 -. CnandAB $end
$var wire 1 .. AnandB $end

$scope module xor_1 $end
$var wire 1 ,. out $end
$var wire 1 g! in1 $end
$var wire 1 6- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 V- out $end
$var wire 1 ,. in1 $end
$var wire 1 {- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 -. out $end
$var wire 1 ,. in1 $end
$var wire 1 {- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 .. out $end
$var wire 1 g! in1 $end
$var wire 1 6- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 +. out $end
$var wire 1 .. in1 $end
$var wire 1 -. in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 W- s $end
$var wire 1 /. c_out $end
$var wire 1 h! a $end
$var wire 1 7- b $end
$var wire 1 l- c_in $end
$var wire 1 0. AxorB $end
$var wire 1 1. CnandAB $end
$var wire 1 2. AnandB $end

$scope module xor_1 $end
$var wire 1 0. out $end
$var wire 1 h! in1 $end
$var wire 1 7- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 W- out $end
$var wire 1 0. in1 $end
$var wire 1 l- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 1. out $end
$var wire 1 0. in1 $end
$var wire 1 l- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 2. out $end
$var wire 1 h! in1 $end
$var wire 1 7- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 /. out $end
$var wire 1 2. in1 $end
$var wire 1 1. in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[2] $end
$var parameter 32 3. N $end
$var wire 1 X- sum [3] $end
$var wire 1 Y- sum [2] $end
$var wire 1 Z- sum [1] $end
$var wire 1 [- sum [0] $end
$var wire 1 l- c_out $end
$var wire 1 i! a [3] $end
$var wire 1 j! a [2] $end
$var wire 1 k! a [1] $end
$var wire 1 l! a [0] $end
$var wire 1 8- b [3] $end
$var wire 1 9- b [2] $end
$var wire 1 :- b [1] $end
$var wire 1 ;- b [0] $end
$var wire 1 m- c_in $end
$var wire 1 4. p [3] $end
$var wire 1 5. p [2] $end
$var wire 1 6. p [1] $end
$var wire 1 7. p [0] $end
$var wire 1 8. ng [3] $end
$var wire 1 9. ng [2] $end
$var wire 1 :. ng [1] $end
$var wire 1 ;. ng [0] $end
$var wire 1 <. carries [4] $end
$var wire 1 =. carries [3] $end
$var wire 1 >. carries [2] $end
$var wire 1 ?. carries [1] $end
$var wire 1 @. carries [0] $end
$var wire 1 A. cp [3] $end
$var wire 1 B. cp [2] $end
$var wire 1 C. cp [1] $end
$var wire 1 D. cp [0] $end

$scope module xor_1[3] $end
$var wire 1 4. out $end
$var wire 1 i! in1 $end
$var wire 1 8- in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 5. out $end
$var wire 1 j! in1 $end
$var wire 1 9- in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 6. out $end
$var wire 1 k! in1 $end
$var wire 1 :- in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 7. out $end
$var wire 1 l! in1 $end
$var wire 1 ;- in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 8. out $end
$var wire 1 i! in1 $end
$var wire 1 8- in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 9. out $end
$var wire 1 j! in1 $end
$var wire 1 9- in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 :. out $end
$var wire 1 k! in1 $end
$var wire 1 :- in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 ;. out $end
$var wire 1 l! in1 $end
$var wire 1 ;- in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 A. out $end
$var wire 1 4. in1 $end
$var wire 1 =. in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 B. out $end
$var wire 1 5. in1 $end
$var wire 1 >. in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 C. out $end
$var wire 1 6. in1 $end
$var wire 1 ?. in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 D. out $end
$var wire 1 7. in1 $end
$var wire 1 m- in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 l- out $end
$var wire 1 A. in1 $end
$var wire 1 8. in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 =. out $end
$var wire 1 B. in1 $end
$var wire 1 9. in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 >. out $end
$var wire 1 C. in1 $end
$var wire 1 :. in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 ?. out $end
$var wire 1 D. in1 $end
$var wire 1 ;. in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 X- s $end
$var wire 1 E. c_out $end
$var wire 1 i! a $end
$var wire 1 8- b $end
$var wire 1 =. c_in $end
$var wire 1 F. AxorB $end
$var wire 1 G. CnandAB $end
$var wire 1 H. AnandB $end

$scope module xor_1 $end
$var wire 1 F. out $end
$var wire 1 i! in1 $end
$var wire 1 8- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 X- out $end
$var wire 1 F. in1 $end
$var wire 1 =. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 G. out $end
$var wire 1 F. in1 $end
$var wire 1 =. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 H. out $end
$var wire 1 i! in1 $end
$var wire 1 8- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 E. out $end
$var wire 1 H. in1 $end
$var wire 1 G. in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 Y- s $end
$var wire 1 I. c_out $end
$var wire 1 j! a $end
$var wire 1 9- b $end
$var wire 1 >. c_in $end
$var wire 1 J. AxorB $end
$var wire 1 K. CnandAB $end
$var wire 1 L. AnandB $end

$scope module xor_1 $end
$var wire 1 J. out $end
$var wire 1 j! in1 $end
$var wire 1 9- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 Y- out $end
$var wire 1 J. in1 $end
$var wire 1 >. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 K. out $end
$var wire 1 J. in1 $end
$var wire 1 >. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 L. out $end
$var wire 1 j! in1 $end
$var wire 1 9- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 I. out $end
$var wire 1 L. in1 $end
$var wire 1 K. in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 Z- s $end
$var wire 1 M. c_out $end
$var wire 1 k! a $end
$var wire 1 :- b $end
$var wire 1 ?. c_in $end
$var wire 1 N. AxorB $end
$var wire 1 O. CnandAB $end
$var wire 1 P. AnandB $end

$scope module xor_1 $end
$var wire 1 N. out $end
$var wire 1 k! in1 $end
$var wire 1 :- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 Z- out $end
$var wire 1 N. in1 $end
$var wire 1 ?. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 O. out $end
$var wire 1 N. in1 $end
$var wire 1 ?. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 P. out $end
$var wire 1 k! in1 $end
$var wire 1 :- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 M. out $end
$var wire 1 P. in1 $end
$var wire 1 O. in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 [- s $end
$var wire 1 Q. c_out $end
$var wire 1 l! a $end
$var wire 1 ;- b $end
$var wire 1 m- c_in $end
$var wire 1 R. AxorB $end
$var wire 1 S. CnandAB $end
$var wire 1 T. AnandB $end

$scope module xor_1 $end
$var wire 1 R. out $end
$var wire 1 l! in1 $end
$var wire 1 ;- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 [- out $end
$var wire 1 R. in1 $end
$var wire 1 m- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 S. out $end
$var wire 1 R. in1 $end
$var wire 1 m- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 T. out $end
$var wire 1 l! in1 $end
$var wire 1 ;- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 Q. out $end
$var wire 1 T. in1 $end
$var wire 1 S. in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[1] $end
$var parameter 32 U. N $end
$var wire 1 \- sum [3] $end
$var wire 1 ]- sum [2] $end
$var wire 1 ^- sum [1] $end
$var wire 1 _- sum [0] $end
$var wire 1 m- c_out $end
$var wire 1 m! a [3] $end
$var wire 1 n! a [2] $end
$var wire 1 o! a [1] $end
$var wire 1 p! a [0] $end
$var wire 1 <- b [3] $end
$var wire 1 =- b [2] $end
$var wire 1 >- b [1] $end
$var wire 1 ?- b [0] $end
$var wire 1 n- c_in $end
$var wire 1 V. p [3] $end
$var wire 1 W. p [2] $end
$var wire 1 X. p [1] $end
$var wire 1 Y. p [0] $end
$var wire 1 Z. ng [3] $end
$var wire 1 [. ng [2] $end
$var wire 1 \. ng [1] $end
$var wire 1 ]. ng [0] $end
$var wire 1 ^. carries [4] $end
$var wire 1 _. carries [3] $end
$var wire 1 `. carries [2] $end
$var wire 1 a. carries [1] $end
$var wire 1 b. carries [0] $end
$var wire 1 c. cp [3] $end
$var wire 1 d. cp [2] $end
$var wire 1 e. cp [1] $end
$var wire 1 f. cp [0] $end

$scope module xor_1[3] $end
$var wire 1 V. out $end
$var wire 1 m! in1 $end
$var wire 1 <- in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 W. out $end
$var wire 1 n! in1 $end
$var wire 1 =- in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 X. out $end
$var wire 1 o! in1 $end
$var wire 1 >- in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 Y. out $end
$var wire 1 p! in1 $end
$var wire 1 ?- in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 Z. out $end
$var wire 1 m! in1 $end
$var wire 1 <- in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 [. out $end
$var wire 1 n! in1 $end
$var wire 1 =- in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 \. out $end
$var wire 1 o! in1 $end
$var wire 1 >- in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 ]. out $end
$var wire 1 p! in1 $end
$var wire 1 ?- in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 c. out $end
$var wire 1 V. in1 $end
$var wire 1 _. in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 d. out $end
$var wire 1 W. in1 $end
$var wire 1 `. in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 e. out $end
$var wire 1 X. in1 $end
$var wire 1 a. in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 f. out $end
$var wire 1 Y. in1 $end
$var wire 1 n- in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 m- out $end
$var wire 1 c. in1 $end
$var wire 1 Z. in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 _. out $end
$var wire 1 d. in1 $end
$var wire 1 [. in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 `. out $end
$var wire 1 e. in1 $end
$var wire 1 \. in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 a. out $end
$var wire 1 f. in1 $end
$var wire 1 ]. in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 \- s $end
$var wire 1 g. c_out $end
$var wire 1 m! a $end
$var wire 1 <- b $end
$var wire 1 _. c_in $end
$var wire 1 h. AxorB $end
$var wire 1 i. CnandAB $end
$var wire 1 j. AnandB $end

$scope module xor_1 $end
$var wire 1 h. out $end
$var wire 1 m! in1 $end
$var wire 1 <- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 \- out $end
$var wire 1 h. in1 $end
$var wire 1 _. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 i. out $end
$var wire 1 h. in1 $end
$var wire 1 _. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 j. out $end
$var wire 1 m! in1 $end
$var wire 1 <- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 g. out $end
$var wire 1 j. in1 $end
$var wire 1 i. in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 ]- s $end
$var wire 1 k. c_out $end
$var wire 1 n! a $end
$var wire 1 =- b $end
$var wire 1 `. c_in $end
$var wire 1 l. AxorB $end
$var wire 1 m. CnandAB $end
$var wire 1 n. AnandB $end

$scope module xor_1 $end
$var wire 1 l. out $end
$var wire 1 n! in1 $end
$var wire 1 =- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 ]- out $end
$var wire 1 l. in1 $end
$var wire 1 `. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 m. out $end
$var wire 1 l. in1 $end
$var wire 1 `. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 n. out $end
$var wire 1 n! in1 $end
$var wire 1 =- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 k. out $end
$var wire 1 n. in1 $end
$var wire 1 m. in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 ^- s $end
$var wire 1 o. c_out $end
$var wire 1 o! a $end
$var wire 1 >- b $end
$var wire 1 a. c_in $end
$var wire 1 p. AxorB $end
$var wire 1 q. CnandAB $end
$var wire 1 r. AnandB $end

$scope module xor_1 $end
$var wire 1 p. out $end
$var wire 1 o! in1 $end
$var wire 1 >- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 ^- out $end
$var wire 1 p. in1 $end
$var wire 1 a. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 q. out $end
$var wire 1 p. in1 $end
$var wire 1 a. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 r. out $end
$var wire 1 o! in1 $end
$var wire 1 >- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 o. out $end
$var wire 1 r. in1 $end
$var wire 1 q. in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 _- s $end
$var wire 1 s. c_out $end
$var wire 1 p! a $end
$var wire 1 ?- b $end
$var wire 1 n- c_in $end
$var wire 1 t. AxorB $end
$var wire 1 u. CnandAB $end
$var wire 1 v. AnandB $end

$scope module xor_1 $end
$var wire 1 t. out $end
$var wire 1 p! in1 $end
$var wire 1 ?- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 _- out $end
$var wire 1 t. in1 $end
$var wire 1 n- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 u. out $end
$var wire 1 t. in1 $end
$var wire 1 n- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 v. out $end
$var wire 1 p! in1 $end
$var wire 1 ?- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 s. out $end
$var wire 1 v. in1 $end
$var wire 1 u. in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[0] $end
$var parameter 32 w. N $end
$var wire 1 `- sum [3] $end
$var wire 1 a- sum [2] $end
$var wire 1 b- sum [1] $end
$var wire 1 c- sum [0] $end
$var wire 1 n- c_out $end
$var wire 1 q! a [3] $end
$var wire 1 r! a [2] $end
$var wire 1 s! a [1] $end
$var wire 1 t! a [0] $end
$var wire 1 @- b [3] $end
$var wire 1 A- b [2] $end
$var wire 1 B- b [1] $end
$var wire 1 C- b [0] $end
$var wire 1 k- c_in $end
$var wire 1 x. p [3] $end
$var wire 1 y. p [2] $end
$var wire 1 z. p [1] $end
$var wire 1 {. p [0] $end
$var wire 1 |. ng [3] $end
$var wire 1 }. ng [2] $end
$var wire 1 ~. ng [1] $end
$var wire 1 !/ ng [0] $end
$var wire 1 "/ carries [4] $end
$var wire 1 #/ carries [3] $end
$var wire 1 $/ carries [2] $end
$var wire 1 %/ carries [1] $end
$var wire 1 &/ carries [0] $end
$var wire 1 '/ cp [3] $end
$var wire 1 (/ cp [2] $end
$var wire 1 )/ cp [1] $end
$var wire 1 */ cp [0] $end

$scope module xor_1[3] $end
$var wire 1 x. out $end
$var wire 1 q! in1 $end
$var wire 1 @- in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 y. out $end
$var wire 1 r! in1 $end
$var wire 1 A- in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 z. out $end
$var wire 1 s! in1 $end
$var wire 1 B- in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 {. out $end
$var wire 1 t! in1 $end
$var wire 1 C- in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 |. out $end
$var wire 1 q! in1 $end
$var wire 1 @- in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 }. out $end
$var wire 1 r! in1 $end
$var wire 1 A- in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 ~. out $end
$var wire 1 s! in1 $end
$var wire 1 B- in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 !/ out $end
$var wire 1 t! in1 $end
$var wire 1 C- in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 '/ out $end
$var wire 1 x. in1 $end
$var wire 1 #/ in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 (/ out $end
$var wire 1 y. in1 $end
$var wire 1 $/ in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 )/ out $end
$var wire 1 z. in1 $end
$var wire 1 %/ in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 */ out $end
$var wire 1 {. in1 $end
$var wire 1 k- in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 n- out $end
$var wire 1 '/ in1 $end
$var wire 1 |. in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 #/ out $end
$var wire 1 (/ in1 $end
$var wire 1 }. in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 $/ out $end
$var wire 1 )/ in1 $end
$var wire 1 ~. in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 %/ out $end
$var wire 1 */ in1 $end
$var wire 1 !/ in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 `- s $end
$var wire 1 +/ c_out $end
$var wire 1 q! a $end
$var wire 1 @- b $end
$var wire 1 #/ c_in $end
$var wire 1 ,/ AxorB $end
$var wire 1 -/ CnandAB $end
$var wire 1 ./ AnandB $end

$scope module xor_1 $end
$var wire 1 ,/ out $end
$var wire 1 q! in1 $end
$var wire 1 @- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 `- out $end
$var wire 1 ,/ in1 $end
$var wire 1 #/ in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 -/ out $end
$var wire 1 ,/ in1 $end
$var wire 1 #/ in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 ./ out $end
$var wire 1 q! in1 $end
$var wire 1 @- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 +/ out $end
$var wire 1 ./ in1 $end
$var wire 1 -/ in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 a- s $end
$var wire 1 // c_out $end
$var wire 1 r! a $end
$var wire 1 A- b $end
$var wire 1 $/ c_in $end
$var wire 1 0/ AxorB $end
$var wire 1 1/ CnandAB $end
$var wire 1 2/ AnandB $end

$scope module xor_1 $end
$var wire 1 0/ out $end
$var wire 1 r! in1 $end
$var wire 1 A- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 a- out $end
$var wire 1 0/ in1 $end
$var wire 1 $/ in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 1/ out $end
$var wire 1 0/ in1 $end
$var wire 1 $/ in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 2/ out $end
$var wire 1 r! in1 $end
$var wire 1 A- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 // out $end
$var wire 1 2/ in1 $end
$var wire 1 1/ in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 b- s $end
$var wire 1 3/ c_out $end
$var wire 1 s! a $end
$var wire 1 B- b $end
$var wire 1 %/ c_in $end
$var wire 1 4/ AxorB $end
$var wire 1 5/ CnandAB $end
$var wire 1 6/ AnandB $end

$scope module xor_1 $end
$var wire 1 4/ out $end
$var wire 1 s! in1 $end
$var wire 1 B- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 b- out $end
$var wire 1 4/ in1 $end
$var wire 1 %/ in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 5/ out $end
$var wire 1 4/ in1 $end
$var wire 1 %/ in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 6/ out $end
$var wire 1 s! in1 $end
$var wire 1 B- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 3/ out $end
$var wire 1 6/ in1 $end
$var wire 1 5/ in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 c- s $end
$var wire 1 7/ c_out $end
$var wire 1 t! a $end
$var wire 1 C- b $end
$var wire 1 k- c_in $end
$var wire 1 8/ AxorB $end
$var wire 1 9/ CnandAB $end
$var wire 1 :/ AnandB $end

$scope module xor_1 $end
$var wire 1 8/ out $end
$var wire 1 t! in1 $end
$var wire 1 C- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 c- out $end
$var wire 1 8/ in1 $end
$var wire 1 k- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 9/ out $end
$var wire 1 8/ in1 $end
$var wire 1 k- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 :/ out $end
$var wire 1 t! in1 $end
$var wire 1 C- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 7/ out $end
$var wire 1 :/ in1 $end
$var wire 1 9/ in2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module alu1 $end
$var parameter 32 ;/ OPERAND_WIDTH $end
$var parameter 32 </ NUM_OPERATIONS $end
$var wire 1 '" InA [15] $end
$var wire 1 (" InA [14] $end
$var wire 1 )" InA [13] $end
$var wire 1 *" InA [12] $end
$var wire 1 +" InA [11] $end
$var wire 1 ," InA [10] $end
$var wire 1 -" InA [9] $end
$var wire 1 ." InA [8] $end
$var wire 1 /" InA [7] $end
$var wire 1 0" InA [6] $end
$var wire 1 1" InA [5] $end
$var wire 1 2" InA [4] $end
$var wire 1 3" InA [3] $end
$var wire 1 4" InA [2] $end
$var wire 1 5" InA [1] $end
$var wire 1 6" InA [0] $end
$var wire 1 $- InB [15] $end
$var wire 1 %- InB [14] $end
$var wire 1 &- InB [13] $end
$var wire 1 '- InB [12] $end
$var wire 1 (- InB [11] $end
$var wire 1 )- InB [10] $end
$var wire 1 *- InB [9] $end
$var wire 1 +- InB [8] $end
$var wire 1 ,- InB [7] $end
$var wire 1 -- InB [6] $end
$var wire 1 .- InB [5] $end
$var wire 1 /- InB [4] $end
$var wire 1 0- InB [3] $end
$var wire 1 1- InB [2] $end
$var wire 1 2- InB [1] $end
$var wire 1 3- InB [0] $end
$var wire 1 P# Cin $end
$var wire 1 =/ Oper [3] $end
$var wire 1 >/ Oper [2] $end
$var wire 1 ?/ Oper [1] $end
$var wire 1 @/ Oper [0] $end
$var wire 1 M# invA $end
$var wire 1 N# invB $end
$var wire 1 O# sign $end
$var reg 16 A/ Out [15:0] $end
$var wire 1 g- OF $end
$var wire 1 h- ZF $end
$var wire 1 f- CF $end
$var wire 1 e- SF $end
$var wire 1 B/ Cout $end
$var wire 1 C/ S [15] $end
$var wire 1 D/ S [14] $end
$var wire 1 E/ S [13] $end
$var wire 1 F/ S [12] $end
$var wire 1 G/ S [11] $end
$var wire 1 H/ S [10] $end
$var wire 1 I/ S [9] $end
$var wire 1 J/ S [8] $end
$var wire 1 K/ S [7] $end
$var wire 1 L/ S [6] $end
$var wire 1 M/ S [5] $end
$var wire 1 N/ S [4] $end
$var wire 1 O/ S [3] $end
$var wire 1 P/ S [2] $end
$var wire 1 Q/ S [1] $end
$var wire 1 R/ S [0] $end
$var wire 1 S/ ShOut [15] $end
$var wire 1 T/ ShOut [14] $end
$var wire 1 U/ ShOut [13] $end
$var wire 1 V/ ShOut [12] $end
$var wire 1 W/ ShOut [11] $end
$var wire 1 X/ ShOut [10] $end
$var wire 1 Y/ ShOut [9] $end
$var wire 1 Z/ ShOut [8] $end
$var wire 1 [/ ShOut [7] $end
$var wire 1 \/ ShOut [6] $end
$var wire 1 ]/ ShOut [5] $end
$var wire 1 ^/ ShOut [4] $end
$var wire 1 _/ ShOut [3] $end
$var wire 1 `/ ShOut [2] $end
$var wire 1 a/ ShOut [1] $end
$var wire 1 b/ ShOut [0] $end
$var wire 1 c/ BitOut [15] $end
$var wire 1 d/ BitOut [14] $end
$var wire 1 e/ BitOut [13] $end
$var wire 1 f/ BitOut [12] $end
$var wire 1 g/ BitOut [11] $end
$var wire 1 h/ BitOut [10] $end
$var wire 1 i/ BitOut [9] $end
$var wire 1 j/ BitOut [8] $end
$var wire 1 k/ BitOut [7] $end
$var wire 1 l/ BitOut [6] $end
$var wire 1 m/ BitOut [5] $end
$var wire 1 n/ BitOut [4] $end
$var wire 1 o/ BitOut [3] $end
$var wire 1 p/ BitOut [2] $end
$var wire 1 q/ BitOut [1] $end
$var wire 1 r/ BitOut [0] $end
$var wire 1 s/ A [15] $end
$var wire 1 t/ A [14] $end
$var wire 1 u/ A [13] $end
$var wire 1 v/ A [12] $end
$var wire 1 w/ A [11] $end
$var wire 1 x/ A [10] $end
$var wire 1 y/ A [9] $end
$var wire 1 z/ A [8] $end
$var wire 1 {/ A [7] $end
$var wire 1 |/ A [6] $end
$var wire 1 }/ A [5] $end
$var wire 1 ~/ A [4] $end
$var wire 1 !0 A [3] $end
$var wire 1 "0 A [2] $end
$var wire 1 #0 A [1] $end
$var wire 1 $0 A [0] $end
$var wire 1 %0 B [15] $end
$var wire 1 &0 B [14] $end
$var wire 1 '0 B [13] $end
$var wire 1 (0 B [12] $end
$var wire 1 )0 B [11] $end
$var wire 1 *0 B [10] $end
$var wire 1 +0 B [9] $end
$var wire 1 ,0 B [8] $end
$var wire 1 -0 B [7] $end
$var wire 1 .0 B [6] $end
$var wire 1 /0 B [5] $end
$var wire 1 00 B [4] $end
$var wire 1 10 B [3] $end
$var wire 1 20 B [2] $end
$var wire 1 30 B [1] $end
$var wire 1 40 B [0] $end
$var wire 1 50 sA [15] $end
$var wire 1 60 sA [14] $end
$var wire 1 70 sA [13] $end
$var wire 1 80 sA [12] $end
$var wire 1 90 sA [11] $end
$var wire 1 :0 sA [10] $end
$var wire 1 ;0 sA [9] $end
$var wire 1 <0 sA [8] $end
$var wire 1 =0 sA [7] $end
$var wire 1 >0 sA [6] $end
$var wire 1 ?0 sA [5] $end
$var wire 1 @0 sA [4] $end
$var wire 1 A0 sA [3] $end
$var wire 1 B0 sA [2] $end
$var wire 1 C0 sA [1] $end
$var wire 1 D0 sA [0] $end
$var wire 1 E0 sB [15] $end
$var wire 1 F0 sB [14] $end
$var wire 1 G0 sB [13] $end
$var wire 1 H0 sB [12] $end
$var wire 1 I0 sB [11] $end
$var wire 1 J0 sB [10] $end
$var wire 1 K0 sB [9] $end
$var wire 1 L0 sB [8] $end
$var wire 1 M0 sB [7] $end
$var wire 1 N0 sB [6] $end
$var wire 1 O0 sB [5] $end
$var wire 1 P0 sB [4] $end
$var wire 1 Q0 sB [3] $end
$var wire 1 R0 sB [2] $end
$var wire 1 S0 sB [1] $end
$var wire 1 T0 sB [0] $end

$scope module cla $end
$var parameter 32 U0 N $end
$var wire 1 C/ sum [15] $end
$var wire 1 D/ sum [14] $end
$var wire 1 E/ sum [13] $end
$var wire 1 F/ sum [12] $end
$var wire 1 G/ sum [11] $end
$var wire 1 H/ sum [10] $end
$var wire 1 I/ sum [9] $end
$var wire 1 J/ sum [8] $end
$var wire 1 K/ sum [7] $end
$var wire 1 L/ sum [6] $end
$var wire 1 M/ sum [5] $end
$var wire 1 N/ sum [4] $end
$var wire 1 O/ sum [3] $end
$var wire 1 P/ sum [2] $end
$var wire 1 Q/ sum [1] $end
$var wire 1 R/ sum [0] $end
$var wire 1 B/ c_out $end
$var wire 1 %0 a [15] $end
$var wire 1 &0 a [14] $end
$var wire 1 '0 a [13] $end
$var wire 1 (0 a [12] $end
$var wire 1 )0 a [11] $end
$var wire 1 *0 a [10] $end
$var wire 1 +0 a [9] $end
$var wire 1 ,0 a [8] $end
$var wire 1 -0 a [7] $end
$var wire 1 .0 a [6] $end
$var wire 1 /0 a [5] $end
$var wire 1 00 a [4] $end
$var wire 1 10 a [3] $end
$var wire 1 20 a [2] $end
$var wire 1 30 a [1] $end
$var wire 1 40 a [0] $end
$var wire 1 s/ b [15] $end
$var wire 1 t/ b [14] $end
$var wire 1 u/ b [13] $end
$var wire 1 v/ b [12] $end
$var wire 1 w/ b [11] $end
$var wire 1 x/ b [10] $end
$var wire 1 y/ b [9] $end
$var wire 1 z/ b [8] $end
$var wire 1 {/ b [7] $end
$var wire 1 |/ b [6] $end
$var wire 1 }/ b [5] $end
$var wire 1 ~/ b [4] $end
$var wire 1 !0 b [3] $end
$var wire 1 "0 b [2] $end
$var wire 1 #0 b [1] $end
$var wire 1 $0 b [0] $end
$var wire 1 P# c_in $end
$var wire 1 V0 carries [2] $end
$var wire 1 W0 carries [1] $end
$var wire 1 X0 carries [0] $end

$scope module cla[3] $end
$var parameter 32 Y0 N $end
$var wire 1 C/ sum [3] $end
$var wire 1 D/ sum [2] $end
$var wire 1 E/ sum [1] $end
$var wire 1 F/ sum [0] $end
$var wire 1 B/ c_out $end
$var wire 1 %0 a [3] $end
$var wire 1 &0 a [2] $end
$var wire 1 '0 a [1] $end
$var wire 1 (0 a [0] $end
$var wire 1 s/ b [3] $end
$var wire 1 t/ b [2] $end
$var wire 1 u/ b [1] $end
$var wire 1 v/ b [0] $end
$var wire 1 V0 c_in $end
$var wire 1 Z0 p [3] $end
$var wire 1 [0 p [2] $end
$var wire 1 \0 p [1] $end
$var wire 1 ]0 p [0] $end
$var wire 1 ^0 ng [3] $end
$var wire 1 _0 ng [2] $end
$var wire 1 `0 ng [1] $end
$var wire 1 a0 ng [0] $end
$var wire 1 b0 carries [4] $end
$var wire 1 c0 carries [3] $end
$var wire 1 d0 carries [2] $end
$var wire 1 e0 carries [1] $end
$var wire 1 f0 carries [0] $end
$var wire 1 g0 cp [3] $end
$var wire 1 h0 cp [2] $end
$var wire 1 i0 cp [1] $end
$var wire 1 j0 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 Z0 out $end
$var wire 1 %0 in1 $end
$var wire 1 s/ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 [0 out $end
$var wire 1 &0 in1 $end
$var wire 1 t/ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 \0 out $end
$var wire 1 '0 in1 $end
$var wire 1 u/ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 ]0 out $end
$var wire 1 (0 in1 $end
$var wire 1 v/ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 ^0 out $end
$var wire 1 %0 in1 $end
$var wire 1 s/ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 _0 out $end
$var wire 1 &0 in1 $end
$var wire 1 t/ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 `0 out $end
$var wire 1 '0 in1 $end
$var wire 1 u/ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 a0 out $end
$var wire 1 (0 in1 $end
$var wire 1 v/ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 g0 out $end
$var wire 1 Z0 in1 $end
$var wire 1 c0 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 h0 out $end
$var wire 1 [0 in1 $end
$var wire 1 d0 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 i0 out $end
$var wire 1 \0 in1 $end
$var wire 1 e0 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 j0 out $end
$var wire 1 ]0 in1 $end
$var wire 1 V0 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 B/ out $end
$var wire 1 g0 in1 $end
$var wire 1 ^0 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 c0 out $end
$var wire 1 h0 in1 $end
$var wire 1 _0 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 d0 out $end
$var wire 1 i0 in1 $end
$var wire 1 `0 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 e0 out $end
$var wire 1 j0 in1 $end
$var wire 1 a0 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 C/ s $end
$var wire 1 k0 c_out $end
$var wire 1 %0 a $end
$var wire 1 s/ b $end
$var wire 1 c0 c_in $end
$var wire 1 l0 AxorB $end
$var wire 1 m0 CnandAB $end
$var wire 1 n0 AnandB $end

$scope module xor_1 $end
$var wire 1 l0 out $end
$var wire 1 %0 in1 $end
$var wire 1 s/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 C/ out $end
$var wire 1 l0 in1 $end
$var wire 1 c0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 m0 out $end
$var wire 1 l0 in1 $end
$var wire 1 c0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 n0 out $end
$var wire 1 %0 in1 $end
$var wire 1 s/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 k0 out $end
$var wire 1 n0 in1 $end
$var wire 1 m0 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 D/ s $end
$var wire 1 o0 c_out $end
$var wire 1 &0 a $end
$var wire 1 t/ b $end
$var wire 1 d0 c_in $end
$var wire 1 p0 AxorB $end
$var wire 1 q0 CnandAB $end
$var wire 1 r0 AnandB $end

$scope module xor_1 $end
$var wire 1 p0 out $end
$var wire 1 &0 in1 $end
$var wire 1 t/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 D/ out $end
$var wire 1 p0 in1 $end
$var wire 1 d0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 q0 out $end
$var wire 1 p0 in1 $end
$var wire 1 d0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 r0 out $end
$var wire 1 &0 in1 $end
$var wire 1 t/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 o0 out $end
$var wire 1 r0 in1 $end
$var wire 1 q0 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 E/ s $end
$var wire 1 s0 c_out $end
$var wire 1 '0 a $end
$var wire 1 u/ b $end
$var wire 1 e0 c_in $end
$var wire 1 t0 AxorB $end
$var wire 1 u0 CnandAB $end
$var wire 1 v0 AnandB $end

$scope module xor_1 $end
$var wire 1 t0 out $end
$var wire 1 '0 in1 $end
$var wire 1 u/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 E/ out $end
$var wire 1 t0 in1 $end
$var wire 1 e0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 u0 out $end
$var wire 1 t0 in1 $end
$var wire 1 e0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 v0 out $end
$var wire 1 '0 in1 $end
$var wire 1 u/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 s0 out $end
$var wire 1 v0 in1 $end
$var wire 1 u0 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 F/ s $end
$var wire 1 w0 c_out $end
$var wire 1 (0 a $end
$var wire 1 v/ b $end
$var wire 1 V0 c_in $end
$var wire 1 x0 AxorB $end
$var wire 1 y0 CnandAB $end
$var wire 1 z0 AnandB $end

$scope module xor_1 $end
$var wire 1 x0 out $end
$var wire 1 (0 in1 $end
$var wire 1 v/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 F/ out $end
$var wire 1 x0 in1 $end
$var wire 1 V0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 y0 out $end
$var wire 1 x0 in1 $end
$var wire 1 V0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 z0 out $end
$var wire 1 (0 in1 $end
$var wire 1 v/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 w0 out $end
$var wire 1 z0 in1 $end
$var wire 1 y0 in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[2] $end
$var parameter 32 {0 N $end
$var wire 1 G/ sum [3] $end
$var wire 1 H/ sum [2] $end
$var wire 1 I/ sum [1] $end
$var wire 1 J/ sum [0] $end
$var wire 1 V0 c_out $end
$var wire 1 )0 a [3] $end
$var wire 1 *0 a [2] $end
$var wire 1 +0 a [1] $end
$var wire 1 ,0 a [0] $end
$var wire 1 w/ b [3] $end
$var wire 1 x/ b [2] $end
$var wire 1 y/ b [1] $end
$var wire 1 z/ b [0] $end
$var wire 1 W0 c_in $end
$var wire 1 |0 p [3] $end
$var wire 1 }0 p [2] $end
$var wire 1 ~0 p [1] $end
$var wire 1 !1 p [0] $end
$var wire 1 "1 ng [3] $end
$var wire 1 #1 ng [2] $end
$var wire 1 $1 ng [1] $end
$var wire 1 %1 ng [0] $end
$var wire 1 &1 carries [4] $end
$var wire 1 '1 carries [3] $end
$var wire 1 (1 carries [2] $end
$var wire 1 )1 carries [1] $end
$var wire 1 *1 carries [0] $end
$var wire 1 +1 cp [3] $end
$var wire 1 ,1 cp [2] $end
$var wire 1 -1 cp [1] $end
$var wire 1 .1 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 |0 out $end
$var wire 1 )0 in1 $end
$var wire 1 w/ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 }0 out $end
$var wire 1 *0 in1 $end
$var wire 1 x/ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 ~0 out $end
$var wire 1 +0 in1 $end
$var wire 1 y/ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 !1 out $end
$var wire 1 ,0 in1 $end
$var wire 1 z/ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 "1 out $end
$var wire 1 )0 in1 $end
$var wire 1 w/ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 #1 out $end
$var wire 1 *0 in1 $end
$var wire 1 x/ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 $1 out $end
$var wire 1 +0 in1 $end
$var wire 1 y/ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 %1 out $end
$var wire 1 ,0 in1 $end
$var wire 1 z/ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 +1 out $end
$var wire 1 |0 in1 $end
$var wire 1 '1 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 ,1 out $end
$var wire 1 }0 in1 $end
$var wire 1 (1 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 -1 out $end
$var wire 1 ~0 in1 $end
$var wire 1 )1 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 .1 out $end
$var wire 1 !1 in1 $end
$var wire 1 W0 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 V0 out $end
$var wire 1 +1 in1 $end
$var wire 1 "1 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 '1 out $end
$var wire 1 ,1 in1 $end
$var wire 1 #1 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 (1 out $end
$var wire 1 -1 in1 $end
$var wire 1 $1 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 )1 out $end
$var wire 1 .1 in1 $end
$var wire 1 %1 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 G/ s $end
$var wire 1 /1 c_out $end
$var wire 1 )0 a $end
$var wire 1 w/ b $end
$var wire 1 '1 c_in $end
$var wire 1 01 AxorB $end
$var wire 1 11 CnandAB $end
$var wire 1 21 AnandB $end

$scope module xor_1 $end
$var wire 1 01 out $end
$var wire 1 )0 in1 $end
$var wire 1 w/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 G/ out $end
$var wire 1 01 in1 $end
$var wire 1 '1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 11 out $end
$var wire 1 01 in1 $end
$var wire 1 '1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 21 out $end
$var wire 1 )0 in1 $end
$var wire 1 w/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 /1 out $end
$var wire 1 21 in1 $end
$var wire 1 11 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 H/ s $end
$var wire 1 31 c_out $end
$var wire 1 *0 a $end
$var wire 1 x/ b $end
$var wire 1 (1 c_in $end
$var wire 1 41 AxorB $end
$var wire 1 51 CnandAB $end
$var wire 1 61 AnandB $end

$scope module xor_1 $end
$var wire 1 41 out $end
$var wire 1 *0 in1 $end
$var wire 1 x/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 H/ out $end
$var wire 1 41 in1 $end
$var wire 1 (1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 51 out $end
$var wire 1 41 in1 $end
$var wire 1 (1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 61 out $end
$var wire 1 *0 in1 $end
$var wire 1 x/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 31 out $end
$var wire 1 61 in1 $end
$var wire 1 51 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 I/ s $end
$var wire 1 71 c_out $end
$var wire 1 +0 a $end
$var wire 1 y/ b $end
$var wire 1 )1 c_in $end
$var wire 1 81 AxorB $end
$var wire 1 91 CnandAB $end
$var wire 1 :1 AnandB $end

$scope module xor_1 $end
$var wire 1 81 out $end
$var wire 1 +0 in1 $end
$var wire 1 y/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 I/ out $end
$var wire 1 81 in1 $end
$var wire 1 )1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 91 out $end
$var wire 1 81 in1 $end
$var wire 1 )1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 :1 out $end
$var wire 1 +0 in1 $end
$var wire 1 y/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 71 out $end
$var wire 1 :1 in1 $end
$var wire 1 91 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 J/ s $end
$var wire 1 ;1 c_out $end
$var wire 1 ,0 a $end
$var wire 1 z/ b $end
$var wire 1 W0 c_in $end
$var wire 1 <1 AxorB $end
$var wire 1 =1 CnandAB $end
$var wire 1 >1 AnandB $end

$scope module xor_1 $end
$var wire 1 <1 out $end
$var wire 1 ,0 in1 $end
$var wire 1 z/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 J/ out $end
$var wire 1 <1 in1 $end
$var wire 1 W0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 =1 out $end
$var wire 1 <1 in1 $end
$var wire 1 W0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 >1 out $end
$var wire 1 ,0 in1 $end
$var wire 1 z/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 ;1 out $end
$var wire 1 >1 in1 $end
$var wire 1 =1 in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[1] $end
$var parameter 32 ?1 N $end
$var wire 1 K/ sum [3] $end
$var wire 1 L/ sum [2] $end
$var wire 1 M/ sum [1] $end
$var wire 1 N/ sum [0] $end
$var wire 1 W0 c_out $end
$var wire 1 -0 a [3] $end
$var wire 1 .0 a [2] $end
$var wire 1 /0 a [1] $end
$var wire 1 00 a [0] $end
$var wire 1 {/ b [3] $end
$var wire 1 |/ b [2] $end
$var wire 1 }/ b [1] $end
$var wire 1 ~/ b [0] $end
$var wire 1 X0 c_in $end
$var wire 1 @1 p [3] $end
$var wire 1 A1 p [2] $end
$var wire 1 B1 p [1] $end
$var wire 1 C1 p [0] $end
$var wire 1 D1 ng [3] $end
$var wire 1 E1 ng [2] $end
$var wire 1 F1 ng [1] $end
$var wire 1 G1 ng [0] $end
$var wire 1 H1 carries [4] $end
$var wire 1 I1 carries [3] $end
$var wire 1 J1 carries [2] $end
$var wire 1 K1 carries [1] $end
$var wire 1 L1 carries [0] $end
$var wire 1 M1 cp [3] $end
$var wire 1 N1 cp [2] $end
$var wire 1 O1 cp [1] $end
$var wire 1 P1 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 @1 out $end
$var wire 1 -0 in1 $end
$var wire 1 {/ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 A1 out $end
$var wire 1 .0 in1 $end
$var wire 1 |/ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 B1 out $end
$var wire 1 /0 in1 $end
$var wire 1 }/ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 C1 out $end
$var wire 1 00 in1 $end
$var wire 1 ~/ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 D1 out $end
$var wire 1 -0 in1 $end
$var wire 1 {/ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 E1 out $end
$var wire 1 .0 in1 $end
$var wire 1 |/ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 F1 out $end
$var wire 1 /0 in1 $end
$var wire 1 }/ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 G1 out $end
$var wire 1 00 in1 $end
$var wire 1 ~/ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 M1 out $end
$var wire 1 @1 in1 $end
$var wire 1 I1 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 N1 out $end
$var wire 1 A1 in1 $end
$var wire 1 J1 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 O1 out $end
$var wire 1 B1 in1 $end
$var wire 1 K1 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 P1 out $end
$var wire 1 C1 in1 $end
$var wire 1 X0 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 W0 out $end
$var wire 1 M1 in1 $end
$var wire 1 D1 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 I1 out $end
$var wire 1 N1 in1 $end
$var wire 1 E1 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 J1 out $end
$var wire 1 O1 in1 $end
$var wire 1 F1 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 K1 out $end
$var wire 1 P1 in1 $end
$var wire 1 G1 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 K/ s $end
$var wire 1 Q1 c_out $end
$var wire 1 -0 a $end
$var wire 1 {/ b $end
$var wire 1 I1 c_in $end
$var wire 1 R1 AxorB $end
$var wire 1 S1 CnandAB $end
$var wire 1 T1 AnandB $end

$scope module xor_1 $end
$var wire 1 R1 out $end
$var wire 1 -0 in1 $end
$var wire 1 {/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 K/ out $end
$var wire 1 R1 in1 $end
$var wire 1 I1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 S1 out $end
$var wire 1 R1 in1 $end
$var wire 1 I1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 T1 out $end
$var wire 1 -0 in1 $end
$var wire 1 {/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 Q1 out $end
$var wire 1 T1 in1 $end
$var wire 1 S1 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 L/ s $end
$var wire 1 U1 c_out $end
$var wire 1 .0 a $end
$var wire 1 |/ b $end
$var wire 1 J1 c_in $end
$var wire 1 V1 AxorB $end
$var wire 1 W1 CnandAB $end
$var wire 1 X1 AnandB $end

$scope module xor_1 $end
$var wire 1 V1 out $end
$var wire 1 .0 in1 $end
$var wire 1 |/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 L/ out $end
$var wire 1 V1 in1 $end
$var wire 1 J1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 W1 out $end
$var wire 1 V1 in1 $end
$var wire 1 J1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 X1 out $end
$var wire 1 .0 in1 $end
$var wire 1 |/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 U1 out $end
$var wire 1 X1 in1 $end
$var wire 1 W1 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 M/ s $end
$var wire 1 Y1 c_out $end
$var wire 1 /0 a $end
$var wire 1 }/ b $end
$var wire 1 K1 c_in $end
$var wire 1 Z1 AxorB $end
$var wire 1 [1 CnandAB $end
$var wire 1 \1 AnandB $end

$scope module xor_1 $end
$var wire 1 Z1 out $end
$var wire 1 /0 in1 $end
$var wire 1 }/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 M/ out $end
$var wire 1 Z1 in1 $end
$var wire 1 K1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 [1 out $end
$var wire 1 Z1 in1 $end
$var wire 1 K1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 \1 out $end
$var wire 1 /0 in1 $end
$var wire 1 }/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 Y1 out $end
$var wire 1 \1 in1 $end
$var wire 1 [1 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 N/ s $end
$var wire 1 ]1 c_out $end
$var wire 1 00 a $end
$var wire 1 ~/ b $end
$var wire 1 X0 c_in $end
$var wire 1 ^1 AxorB $end
$var wire 1 _1 CnandAB $end
$var wire 1 `1 AnandB $end

$scope module xor_1 $end
$var wire 1 ^1 out $end
$var wire 1 00 in1 $end
$var wire 1 ~/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 N/ out $end
$var wire 1 ^1 in1 $end
$var wire 1 X0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 _1 out $end
$var wire 1 ^1 in1 $end
$var wire 1 X0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 `1 out $end
$var wire 1 00 in1 $end
$var wire 1 ~/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 ]1 out $end
$var wire 1 `1 in1 $end
$var wire 1 _1 in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[0] $end
$var parameter 32 a1 N $end
$var wire 1 O/ sum [3] $end
$var wire 1 P/ sum [2] $end
$var wire 1 Q/ sum [1] $end
$var wire 1 R/ sum [0] $end
$var wire 1 X0 c_out $end
$var wire 1 10 a [3] $end
$var wire 1 20 a [2] $end
$var wire 1 30 a [1] $end
$var wire 1 40 a [0] $end
$var wire 1 !0 b [3] $end
$var wire 1 "0 b [2] $end
$var wire 1 #0 b [1] $end
$var wire 1 $0 b [0] $end
$var wire 1 P# c_in $end
$var wire 1 b1 p [3] $end
$var wire 1 c1 p [2] $end
$var wire 1 d1 p [1] $end
$var wire 1 e1 p [0] $end
$var wire 1 f1 ng [3] $end
$var wire 1 g1 ng [2] $end
$var wire 1 h1 ng [1] $end
$var wire 1 i1 ng [0] $end
$var wire 1 j1 carries [4] $end
$var wire 1 k1 carries [3] $end
$var wire 1 l1 carries [2] $end
$var wire 1 m1 carries [1] $end
$var wire 1 n1 carries [0] $end
$var wire 1 o1 cp [3] $end
$var wire 1 p1 cp [2] $end
$var wire 1 q1 cp [1] $end
$var wire 1 r1 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 b1 out $end
$var wire 1 10 in1 $end
$var wire 1 !0 in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 c1 out $end
$var wire 1 20 in1 $end
$var wire 1 "0 in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 d1 out $end
$var wire 1 30 in1 $end
$var wire 1 #0 in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 e1 out $end
$var wire 1 40 in1 $end
$var wire 1 $0 in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 f1 out $end
$var wire 1 10 in1 $end
$var wire 1 !0 in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 g1 out $end
$var wire 1 20 in1 $end
$var wire 1 "0 in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 h1 out $end
$var wire 1 30 in1 $end
$var wire 1 #0 in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 i1 out $end
$var wire 1 40 in1 $end
$var wire 1 $0 in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 o1 out $end
$var wire 1 b1 in1 $end
$var wire 1 k1 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 p1 out $end
$var wire 1 c1 in1 $end
$var wire 1 l1 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 q1 out $end
$var wire 1 d1 in1 $end
$var wire 1 m1 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 r1 out $end
$var wire 1 e1 in1 $end
$var wire 1 P# in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 X0 out $end
$var wire 1 o1 in1 $end
$var wire 1 f1 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 k1 out $end
$var wire 1 p1 in1 $end
$var wire 1 g1 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 l1 out $end
$var wire 1 q1 in1 $end
$var wire 1 h1 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 m1 out $end
$var wire 1 r1 in1 $end
$var wire 1 i1 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 O/ s $end
$var wire 1 s1 c_out $end
$var wire 1 10 a $end
$var wire 1 !0 b $end
$var wire 1 k1 c_in $end
$var wire 1 t1 AxorB $end
$var wire 1 u1 CnandAB $end
$var wire 1 v1 AnandB $end

$scope module xor_1 $end
$var wire 1 t1 out $end
$var wire 1 10 in1 $end
$var wire 1 !0 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 O/ out $end
$var wire 1 t1 in1 $end
$var wire 1 k1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 u1 out $end
$var wire 1 t1 in1 $end
$var wire 1 k1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 v1 out $end
$var wire 1 10 in1 $end
$var wire 1 !0 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 s1 out $end
$var wire 1 v1 in1 $end
$var wire 1 u1 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 P/ s $end
$var wire 1 w1 c_out $end
$var wire 1 20 a $end
$var wire 1 "0 b $end
$var wire 1 l1 c_in $end
$var wire 1 x1 AxorB $end
$var wire 1 y1 CnandAB $end
$var wire 1 z1 AnandB $end

$scope module xor_1 $end
$var wire 1 x1 out $end
$var wire 1 20 in1 $end
$var wire 1 "0 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 P/ out $end
$var wire 1 x1 in1 $end
$var wire 1 l1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 y1 out $end
$var wire 1 x1 in1 $end
$var wire 1 l1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 z1 out $end
$var wire 1 20 in1 $end
$var wire 1 "0 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 w1 out $end
$var wire 1 z1 in1 $end
$var wire 1 y1 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 Q/ s $end
$var wire 1 {1 c_out $end
$var wire 1 30 a $end
$var wire 1 #0 b $end
$var wire 1 m1 c_in $end
$var wire 1 |1 AxorB $end
$var wire 1 }1 CnandAB $end
$var wire 1 ~1 AnandB $end

$scope module xor_1 $end
$var wire 1 |1 out $end
$var wire 1 30 in1 $end
$var wire 1 #0 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 Q/ out $end
$var wire 1 |1 in1 $end
$var wire 1 m1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 }1 out $end
$var wire 1 |1 in1 $end
$var wire 1 m1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 ~1 out $end
$var wire 1 30 in1 $end
$var wire 1 #0 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 {1 out $end
$var wire 1 ~1 in1 $end
$var wire 1 }1 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 R/ s $end
$var wire 1 !2 c_out $end
$var wire 1 40 a $end
$var wire 1 $0 b $end
$var wire 1 P# c_in $end
$var wire 1 "2 AxorB $end
$var wire 1 #2 CnandAB $end
$var wire 1 $2 AnandB $end

$scope module xor_1 $end
$var wire 1 "2 out $end
$var wire 1 40 in1 $end
$var wire 1 $0 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 R/ out $end
$var wire 1 "2 in1 $end
$var wire 1 P# in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 #2 out $end
$var wire 1 "2 in1 $end
$var wire 1 P# in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 $2 out $end
$var wire 1 40 in1 $end
$var wire 1 $0 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 !2 out $end
$var wire 1 $2 in1 $end
$var wire 1 #2 in2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module shift $end
$var parameter 32 %2 OPERAND_WIDTH $end
$var parameter 32 &2 SHAMT_WIDTH $end
$var parameter 32 '2 NUM_OPERATIONS $end
$var wire 1 s/ In [15] $end
$var wire 1 t/ In [14] $end
$var wire 1 u/ In [13] $end
$var wire 1 v/ In [12] $end
$var wire 1 w/ In [11] $end
$var wire 1 x/ In [10] $end
$var wire 1 y/ In [9] $end
$var wire 1 z/ In [8] $end
$var wire 1 {/ In [7] $end
$var wire 1 |/ In [6] $end
$var wire 1 }/ In [5] $end
$var wire 1 ~/ In [4] $end
$var wire 1 !0 In [3] $end
$var wire 1 "0 In [2] $end
$var wire 1 #0 In [1] $end
$var wire 1 $0 In [0] $end
$var wire 1 10 ShAmt [3] $end
$var wire 1 20 ShAmt [2] $end
$var wire 1 30 ShAmt [1] $end
$var wire 1 40 ShAmt [0] $end
$var wire 1 ?/ Oper [1] $end
$var wire 1 @/ Oper [0] $end
$var wire 1 S/ Out [15] $end
$var wire 1 T/ Out [14] $end
$var wire 1 U/ Out [13] $end
$var wire 1 V/ Out [12] $end
$var wire 1 W/ Out [11] $end
$var wire 1 X/ Out [10] $end
$var wire 1 Y/ Out [9] $end
$var wire 1 Z/ Out [8] $end
$var wire 1 [/ Out [7] $end
$var wire 1 \/ Out [6] $end
$var wire 1 ]/ Out [5] $end
$var wire 1 ^/ Out [4] $end
$var wire 1 _/ Out [3] $end
$var wire 1 `/ Out [2] $end
$var wire 1 a/ Out [1] $end
$var wire 1 b/ Out [0] $end
$var wire 1 (2 s0 [15] $end
$var wire 1 )2 s0 [14] $end
$var wire 1 *2 s0 [13] $end
$var wire 1 +2 s0 [12] $end
$var wire 1 ,2 s0 [11] $end
$var wire 1 -2 s0 [10] $end
$var wire 1 .2 s0 [9] $end
$var wire 1 /2 s0 [8] $end
$var wire 1 02 s0 [7] $end
$var wire 1 12 s0 [6] $end
$var wire 1 22 s0 [5] $end
$var wire 1 32 s0 [4] $end
$var wire 1 42 s0 [3] $end
$var wire 1 52 s0 [2] $end
$var wire 1 62 s0 [1] $end
$var wire 1 72 s0 [0] $end
$var wire 1 82 s1 [15] $end
$var wire 1 92 s1 [14] $end
$var wire 1 :2 s1 [13] $end
$var wire 1 ;2 s1 [12] $end
$var wire 1 <2 s1 [11] $end
$var wire 1 =2 s1 [10] $end
$var wire 1 >2 s1 [9] $end
$var wire 1 ?2 s1 [8] $end
$var wire 1 @2 s1 [7] $end
$var wire 1 A2 s1 [6] $end
$var wire 1 B2 s1 [5] $end
$var wire 1 C2 s1 [4] $end
$var wire 1 D2 s1 [3] $end
$var wire 1 E2 s1 [2] $end
$var wire 1 F2 s1 [1] $end
$var wire 1 G2 s1 [0] $end
$var wire 1 H2 s2 [15] $end
$var wire 1 I2 s2 [14] $end
$var wire 1 J2 s2 [13] $end
$var wire 1 K2 s2 [12] $end
$var wire 1 L2 s2 [11] $end
$var wire 1 M2 s2 [10] $end
$var wire 1 N2 s2 [9] $end
$var wire 1 O2 s2 [8] $end
$var wire 1 P2 s2 [7] $end
$var wire 1 Q2 s2 [6] $end
$var wire 1 R2 s2 [5] $end
$var wire 1 S2 s2 [4] $end
$var wire 1 T2 s2 [3] $end
$var wire 1 U2 s2 [2] $end
$var wire 1 V2 s2 [1] $end
$var wire 1 W2 s2 [0] $end
$var wire 1 X2 s3 [15] $end
$var wire 1 Y2 s3 [14] $end
$var wire 1 Z2 s3 [13] $end
$var wire 1 [2 s3 [12] $end
$var wire 1 \2 s3 [11] $end
$var wire 1 ]2 s3 [10] $end
$var wire 1 ^2 s3 [9] $end
$var wire 1 _2 s3 [8] $end
$var wire 1 `2 s3 [7] $end
$var wire 1 a2 s3 [6] $end
$var wire 1 b2 s3 [5] $end
$var wire 1 c2 s3 [4] $end
$var wire 1 d2 s3 [3] $end
$var wire 1 e2 s3 [2] $end
$var wire 1 f2 s3 [1] $end
$var wire 1 g2 s3 [0] $end
$var wire 1 h2 temp_out_sh0 [15] $end
$var wire 1 i2 temp_out_sh0 [14] $end
$var wire 1 j2 temp_out_sh0 [13] $end
$var wire 1 k2 temp_out_sh0 [12] $end
$var wire 1 l2 temp_out_sh0 [11] $end
$var wire 1 m2 temp_out_sh0 [10] $end
$var wire 1 n2 temp_out_sh0 [9] $end
$var wire 1 o2 temp_out_sh0 [8] $end
$var wire 1 p2 temp_out_sh0 [7] $end
$var wire 1 q2 temp_out_sh0 [6] $end
$var wire 1 r2 temp_out_sh0 [5] $end
$var wire 1 s2 temp_out_sh0 [4] $end
$var wire 1 t2 temp_out_sh0 [3] $end
$var wire 1 u2 temp_out_sh0 [2] $end
$var wire 1 v2 temp_out_sh0 [1] $end
$var wire 1 w2 temp_out_sh0 [0] $end
$var wire 1 x2 temp_out_sh1 [15] $end
$var wire 1 y2 temp_out_sh1 [14] $end
$var wire 1 z2 temp_out_sh1 [13] $end
$var wire 1 {2 temp_out_sh1 [12] $end
$var wire 1 |2 temp_out_sh1 [11] $end
$var wire 1 }2 temp_out_sh1 [10] $end
$var wire 1 ~2 temp_out_sh1 [9] $end
$var wire 1 !3 temp_out_sh1 [8] $end
$var wire 1 "3 temp_out_sh1 [7] $end
$var wire 1 #3 temp_out_sh1 [6] $end
$var wire 1 $3 temp_out_sh1 [5] $end
$var wire 1 %3 temp_out_sh1 [4] $end
$var wire 1 &3 temp_out_sh1 [3] $end
$var wire 1 '3 temp_out_sh1 [2] $end
$var wire 1 (3 temp_out_sh1 [1] $end
$var wire 1 )3 temp_out_sh1 [0] $end
$var wire 1 *3 temp_out_sh2 [15] $end
$var wire 1 +3 temp_out_sh2 [14] $end
$var wire 1 ,3 temp_out_sh2 [13] $end
$var wire 1 -3 temp_out_sh2 [12] $end
$var wire 1 .3 temp_out_sh2 [11] $end
$var wire 1 /3 temp_out_sh2 [10] $end
$var wire 1 03 temp_out_sh2 [9] $end
$var wire 1 13 temp_out_sh2 [8] $end
$var wire 1 23 temp_out_sh2 [7] $end
$var wire 1 33 temp_out_sh2 [6] $end
$var wire 1 43 temp_out_sh2 [5] $end
$var wire 1 53 temp_out_sh2 [4] $end
$var wire 1 63 temp_out_sh2 [3] $end
$var wire 1 73 temp_out_sh2 [2] $end
$var wire 1 83 temp_out_sh2 [1] $end
$var wire 1 93 temp_out_sh2 [0] $end
$var wire 1 :3 temp_out_sh3 [15] $end
$var wire 1 ;3 temp_out_sh3 [14] $end
$var wire 1 <3 temp_out_sh3 [13] $end
$var wire 1 =3 temp_out_sh3 [12] $end
$var wire 1 >3 temp_out_sh3 [11] $end
$var wire 1 ?3 temp_out_sh3 [10] $end
$var wire 1 @3 temp_out_sh3 [9] $end
$var wire 1 A3 temp_out_sh3 [8] $end
$var wire 1 B3 temp_out_sh3 [7] $end
$var wire 1 C3 temp_out_sh3 [6] $end
$var wire 1 D3 temp_out_sh3 [5] $end
$var wire 1 E3 temp_out_sh3 [4] $end
$var wire 1 F3 temp_out_sh3 [3] $end
$var wire 1 G3 temp_out_sh3 [2] $end
$var wire 1 H3 temp_out_sh3 [1] $end
$var wire 1 I3 temp_out_sh3 [0] $end

$scope module bs0 $end
$var wire 1 s/ in [15] $end
$var wire 1 t/ in [14] $end
$var wire 1 u/ in [13] $end
$var wire 1 v/ in [12] $end
$var wire 1 w/ in [11] $end
$var wire 1 x/ in [10] $end
$var wire 1 y/ in [9] $end
$var wire 1 z/ in [8] $end
$var wire 1 {/ in [7] $end
$var wire 1 |/ in [6] $end
$var wire 1 }/ in [5] $end
$var wire 1 ~/ in [4] $end
$var wire 1 !0 in [3] $end
$var wire 1 "0 in [2] $end
$var wire 1 #0 in [1] $end
$var wire 1 $0 in [0] $end
$var wire 1 ?/ oper [1] $end
$var wire 1 @/ oper [0] $end
$var wire 1 h2 out [15] $end
$var wire 1 i2 out [14] $end
$var wire 1 j2 out [13] $end
$var wire 1 k2 out [12] $end
$var wire 1 l2 out [11] $end
$var wire 1 m2 out [10] $end
$var wire 1 n2 out [9] $end
$var wire 1 o2 out [8] $end
$var wire 1 p2 out [7] $end
$var wire 1 q2 out [6] $end
$var wire 1 r2 out [5] $end
$var wire 1 s2 out [4] $end
$var wire 1 t2 out [3] $end
$var wire 1 u2 out [2] $end
$var wire 1 v2 out [1] $end
$var wire 1 w2 out [0] $end
$upscope $end

$scope module bs1 $end
$var wire 1 (2 in [15] $end
$var wire 1 )2 in [14] $end
$var wire 1 *2 in [13] $end
$var wire 1 +2 in [12] $end
$var wire 1 ,2 in [11] $end
$var wire 1 -2 in [10] $end
$var wire 1 .2 in [9] $end
$var wire 1 /2 in [8] $end
$var wire 1 02 in [7] $end
$var wire 1 12 in [6] $end
$var wire 1 22 in [5] $end
$var wire 1 32 in [4] $end
$var wire 1 42 in [3] $end
$var wire 1 52 in [2] $end
$var wire 1 62 in [1] $end
$var wire 1 72 in [0] $end
$var wire 1 ?/ oper [1] $end
$var wire 1 @/ oper [0] $end
$var wire 1 x2 out [15] $end
$var wire 1 y2 out [14] $end
$var wire 1 z2 out [13] $end
$var wire 1 {2 out [12] $end
$var wire 1 |2 out [11] $end
$var wire 1 }2 out [10] $end
$var wire 1 ~2 out [9] $end
$var wire 1 !3 out [8] $end
$var wire 1 "3 out [7] $end
$var wire 1 #3 out [6] $end
$var wire 1 $3 out [5] $end
$var wire 1 %3 out [4] $end
$var wire 1 &3 out [3] $end
$var wire 1 '3 out [2] $end
$var wire 1 (3 out [1] $end
$var wire 1 )3 out [0] $end
$upscope $end

$scope module bs2 $end
$var wire 1 82 in [15] $end
$var wire 1 92 in [14] $end
$var wire 1 :2 in [13] $end
$var wire 1 ;2 in [12] $end
$var wire 1 <2 in [11] $end
$var wire 1 =2 in [10] $end
$var wire 1 >2 in [9] $end
$var wire 1 ?2 in [8] $end
$var wire 1 @2 in [7] $end
$var wire 1 A2 in [6] $end
$var wire 1 B2 in [5] $end
$var wire 1 C2 in [4] $end
$var wire 1 D2 in [3] $end
$var wire 1 E2 in [2] $end
$var wire 1 F2 in [1] $end
$var wire 1 G2 in [0] $end
$var wire 1 ?/ oper [1] $end
$var wire 1 @/ oper [0] $end
$var wire 1 *3 out [15] $end
$var wire 1 +3 out [14] $end
$var wire 1 ,3 out [13] $end
$var wire 1 -3 out [12] $end
$var wire 1 .3 out [11] $end
$var wire 1 /3 out [10] $end
$var wire 1 03 out [9] $end
$var wire 1 13 out [8] $end
$var wire 1 23 out [7] $end
$var wire 1 33 out [6] $end
$var wire 1 43 out [5] $end
$var wire 1 53 out [4] $end
$var wire 1 63 out [3] $end
$var wire 1 73 out [2] $end
$var wire 1 83 out [1] $end
$var wire 1 93 out [0] $end
$upscope $end

$scope module bs3 $end
$var wire 1 H2 in [15] $end
$var wire 1 I2 in [14] $end
$var wire 1 J2 in [13] $end
$var wire 1 K2 in [12] $end
$var wire 1 L2 in [11] $end
$var wire 1 M2 in [10] $end
$var wire 1 N2 in [9] $end
$var wire 1 O2 in [8] $end
$var wire 1 P2 in [7] $end
$var wire 1 Q2 in [6] $end
$var wire 1 R2 in [5] $end
$var wire 1 S2 in [4] $end
$var wire 1 T2 in [3] $end
$var wire 1 U2 in [2] $end
$var wire 1 V2 in [1] $end
$var wire 1 W2 in [0] $end
$var wire 1 ?/ oper [1] $end
$var wire 1 @/ oper [0] $end
$var wire 1 :3 out [15] $end
$var wire 1 ;3 out [14] $end
$var wire 1 <3 out [13] $end
$var wire 1 =3 out [12] $end
$var wire 1 >3 out [11] $end
$var wire 1 ?3 out [10] $end
$var wire 1 @3 out [9] $end
$var wire 1 A3 out [8] $end
$var wire 1 B3 out [7] $end
$var wire 1 C3 out [6] $end
$var wire 1 D3 out [5] $end
$var wire 1 E3 out [4] $end
$var wire 1 F3 out [3] $end
$var wire 1 G3 out [2] $end
$var wire 1 H3 out [1] $end
$var wire 1 I3 out [0] $end
$upscope $end
$upscope $end
$upscope $end

$scope module branch_ctrl $end
$var wire 1 e- SF $end
$var wire 1 h- ZF $end
$var wire 1 _# brch_instr [2] $end
$var wire 1 `# brch_instr [1] $end
$var wire 1 a# brch_instr [0] $end
$var wire 1 d- BrchCnd $end
$var reg 1 J3 brch_sig $end
$upscope $end
$upscope $end

$scope module memory0 $end
$var wire 1 G" ALU [15] $end
$var wire 1 H" ALU [14] $end
$var wire 1 I" ALU [13] $end
$var wire 1 J" ALU [12] $end
$var wire 1 K" ALU [11] $end
$var wire 1 L" ALU [10] $end
$var wire 1 M" ALU [9] $end
$var wire 1 N" ALU [8] $end
$var wire 1 O" ALU [7] $end
$var wire 1 P" ALU [6] $end
$var wire 1 Q" ALU [5] $end
$var wire 1 R" ALU [4] $end
$var wire 1 S" ALU [3] $end
$var wire 1 T" ALU [2] $end
$var wire 1 U" ALU [1] $end
$var wire 1 V" ALU [0] $end
$var wire 1 7" writeData [15] $end
$var wire 1 8" writeData [14] $end
$var wire 1 9" writeData [13] $end
$var wire 1 :" writeData [12] $end
$var wire 1 ;" writeData [11] $end
$var wire 1 <" writeData [10] $end
$var wire 1 =" writeData [9] $end
$var wire 1 >" writeData [8] $end
$var wire 1 ?" writeData [7] $end
$var wire 1 @" writeData [6] $end
$var wire 1 A" writeData [5] $end
$var wire 1 B" writeData [4] $end
$var wire 1 C" writeData [3] $end
$var wire 1 D" writeData [2] $end
$var wire 1 E" writeData [1] $end
$var wire 1 F" writeData [0] $end
$var wire 1 I# nHaltSig $end
$var wire 1 R# MemWrt $end
$var wire 1 W" readData [15] $end
$var wire 1 X" readData [14] $end
$var wire 1 Y" readData [13] $end
$var wire 1 Z" readData [12] $end
$var wire 1 [" readData [11] $end
$var wire 1 \" readData [10] $end
$var wire 1 ]" readData [9] $end
$var wire 1 ^" readData [8] $end
$var wire 1 _" readData [7] $end
$var wire 1 `" readData [6] $end
$var wire 1 a" readData [5] $end
$var wire 1 b" readData [4] $end
$var wire 1 c" readData [3] $end
$var wire 1 d" readData [2] $end
$var wire 1 e" readData [1] $end
$var wire 1 f" readData [0] $end
$var wire 1 K3 clk $end
$var wire 1 L3 rst $end

$scope module data_mem $end
$var wire 1 W" data_out [15] $end
$var wire 1 X" data_out [14] $end
$var wire 1 Y" data_out [13] $end
$var wire 1 Z" data_out [12] $end
$var wire 1 [" data_out [11] $end
$var wire 1 \" data_out [10] $end
$var wire 1 ]" data_out [9] $end
$var wire 1 ^" data_out [8] $end
$var wire 1 _" data_out [7] $end
$var wire 1 `" data_out [6] $end
$var wire 1 a" data_out [5] $end
$var wire 1 b" data_out [4] $end
$var wire 1 c" data_out [3] $end
$var wire 1 d" data_out [2] $end
$var wire 1 e" data_out [1] $end
$var wire 1 f" data_out [0] $end
$var wire 1 7" data_in [15] $end
$var wire 1 8" data_in [14] $end
$var wire 1 9" data_in [13] $end
$var wire 1 :" data_in [12] $end
$var wire 1 ;" data_in [11] $end
$var wire 1 <" data_in [10] $end
$var wire 1 =" data_in [9] $end
$var wire 1 >" data_in [8] $end
$var wire 1 ?" data_in [7] $end
$var wire 1 @" data_in [6] $end
$var wire 1 A" data_in [5] $end
$var wire 1 B" data_in [4] $end
$var wire 1 C" data_in [3] $end
$var wire 1 D" data_in [2] $end
$var wire 1 E" data_in [1] $end
$var wire 1 F" data_in [0] $end
$var wire 1 G" addr [15] $end
$var wire 1 H" addr [14] $end
$var wire 1 I" addr [13] $end
$var wire 1 J" addr [12] $end
$var wire 1 K" addr [11] $end
$var wire 1 L" addr [10] $end
$var wire 1 M" addr [9] $end
$var wire 1 N" addr [8] $end
$var wire 1 O" addr [7] $end
$var wire 1 P" addr [6] $end
$var wire 1 Q" addr [5] $end
$var wire 1 R" addr [4] $end
$var wire 1 S" addr [3] $end
$var wire 1 T" addr [2] $end
$var wire 1 U" addr [1] $end
$var wire 1 V" addr [0] $end
$var wire 1 I# enable $end
$var wire 1 R# wr $end
$var wire 1 M3 createdump $end
$var wire 1 K3 clk $end
$var wire 1 L3 rst $end
$var reg 1 N3 loaded $end
$var reg 17 O3 largest [16:0] $end
$var integer 32 P3 mcd $end
$var integer 32 Q3 i $end
$upscope $end
$upscope $end

$scope module wb0 $end
$var wire 1 W" MemIn [15] $end
$var wire 1 X" MemIn [14] $end
$var wire 1 Y" MemIn [13] $end
$var wire 1 Z" MemIn [12] $end
$var wire 1 [" MemIn [11] $end
$var wire 1 \" MemIn [10] $end
$var wire 1 ]" MemIn [9] $end
$var wire 1 ^" MemIn [8] $end
$var wire 1 _" MemIn [7] $end
$var wire 1 `" MemIn [6] $end
$var wire 1 a" MemIn [5] $end
$var wire 1 b" MemIn [4] $end
$var wire 1 c" MemIn [3] $end
$var wire 1 d" MemIn [2] $end
$var wire 1 e" MemIn [1] $end
$var wire 1 f" MemIn [0] $end
$var wire 1 e! PcIn [15] $end
$var wire 1 f! PcIn [14] $end
$var wire 1 g! PcIn [13] $end
$var wire 1 h! PcIn [12] $end
$var wire 1 i! PcIn [11] $end
$var wire 1 j! PcIn [10] $end
$var wire 1 k! PcIn [9] $end
$var wire 1 l! PcIn [8] $end
$var wire 1 m! PcIn [7] $end
$var wire 1 n! PcIn [6] $end
$var wire 1 o! PcIn [5] $end
$var wire 1 p! PcIn [4] $end
$var wire 1 q! PcIn [3] $end
$var wire 1 r! PcIn [2] $end
$var wire 1 s! PcIn [1] $end
$var wire 1 t! PcIn [0] $end
$var wire 1 G" ALUIn [15] $end
$var wire 1 H" ALUIn [14] $end
$var wire 1 I" ALUIn [13] $end
$var wire 1 J" ALUIn [12] $end
$var wire 1 K" ALUIn [11] $end
$var wire 1 L" ALUIn [10] $end
$var wire 1 M" ALUIn [9] $end
$var wire 1 N" ALUIn [8] $end
$var wire 1 O" ALUIn [7] $end
$var wire 1 P" ALUIn [6] $end
$var wire 1 Q" ALUIn [5] $end
$var wire 1 R" ALUIn [4] $end
$var wire 1 S" ALUIn [3] $end
$var wire 1 T" ALUIn [2] $end
$var wire 1 U" ALUIn [1] $end
$var wire 1 V" ALUIn [0] $end
$var wire 1 Y# RegSrc [1] $end
$var wire 1 Z# RegSrc [0] $end
$var wire 1 u! WB [15] $end
$var wire 1 v! WB [14] $end
$var wire 1 w! WB [13] $end
$var wire 1 x! WB [12] $end
$var wire 1 y! WB [11] $end
$var wire 1 z! WB [10] $end
$var wire 1 {! WB [9] $end
$var wire 1 |! WB [8] $end
$var wire 1 }! WB [7] $end
$var wire 1 ~! WB [6] $end
$var wire 1 !" WB [5] $end
$var wire 1 "" WB [4] $end
$var wire 1 #" WB [3] $end
$var wire 1 $" WB [2] $end
$var wire 1 %" WB [1] $end
$var wire 1 &" WB [0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
12!
13!
xb#
xc#
xd#
xe#
xf#
xg#
xh#
xi#
xj#
xk#
xl#
bx m#
bx n#
bx o#
bx p#
bx q#
0j$
0h$
0f$
0d$
0b$
0`$
0^$
0\$
0Z$
0X$
0V$
0T$
0R$
0P$
0N$
0L$
1~$
b0 !%
0#-
0!-
0},
0{,
0y,
0w,
0u,
0s,
0q,
0o,
0m,
0k,
0i,
0g,
0e,
0c,
0^,
0\,
0Z,
0X,
0V,
0T,
0R,
0P,
0N,
0L,
0J,
0H,
0F,
0D,
0B,
0@,
0;,
09,
07,
05,
03,
01,
0/,
0-,
0+,
0),
0',
0%,
0#,
0!,
0}+
0{+
0v+
0t+
0r+
0p+
0n+
0l+
0j+
0h+
0f+
0d+
0b+
0`+
0^+
0\+
0Z+
0X+
0S+
0Q+
0O+
0M+
0K+
0I+
0G+
0E+
0C+
0A+
0?+
0=+
0;+
09+
07+
05+
00+
0.+
0,+
0*+
0(+
0&+
0$+
0"+
0~*
0|*
0z*
0x*
0v*
0t*
0r*
0p*
0k*
0i*
0g*
0e*
0c*
0a*
0_*
0]*
0[*
0Y*
0W*
0U*
0S*
0Q*
0O*
0M*
0H*
0F*
0D*
0B*
0@*
0>*
0<*
0:*
08*
06*
04*
02*
00*
0.*
0,*
0**
bx A/
xJ3
0N3
b0 O3
b10000 G$
b11 H$
b1000 I$
b10000 $%
b10000 v&
b11 w&
b1000 x&
b10000 M(
b100 N(
b10 O(
b10000 i-
b10000 ;/
b100 </
b10000 U0
b10000 %2
b100 &2
b10 '2
b100 )%
b100 K%
b100 m%
b100 1&
b10000 &*
b11 '*
b1000 (*
b10000 I*
b11 J*
b1000 K*
b10000 l*
b11 m*
b1000 n*
b10000 1+
b11 2+
b1000 3+
b10000 T+
b11 U+
b1000 V+
b10000 w+
b11 x+
b1000 y+
b10000 <,
b11 =,
b1000 >,
b10000 _,
b11 `,
b1000 a,
b100 o-
b100 3.
b100 U.
b100 w.
b100 Y0
b100 {0
b100 ?1
b100 a1
b0 x
b10 y
b100 z
b1 4!
bx "%
b10000000000000000 #%
bx P3
b10000000000000000 Q3
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
x%
x$
x#
x"
x!
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
xA
xD
xC
0B
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xU
xV
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xw
1/!
x0!
11!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
x6!
x5!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
xd!
xc!
xb!
xa!
x`!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xt!
xs!
xr!
xq!
xp!
xo!
xn!
xm!
xl!
xk!
xj!
xi!
xh!
xg!
xf!
xe!
x&"
x%"
x$"
x#"
x""
x!"
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
xI#
xJ#
xK#
xL#
xM#
xN#
xO#
xP#
xQ#
xR#
xX#
xW#
xV#
xU#
xT#
xS#
xZ#
xY#
x\#
x[#
x^#
x]#
xa#
x`#
x_#
xr#
x$$
x#$
x"$
x!$
x~#
x}#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
z5$
0E$
1D$
0C$
0B$
0A$
0@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
xF$
x(%
x'%
x&%
x5&
x4&
x3&
x2&
19&
x8&
17&
16&
z>&
0=&
x<&
x;&
z:&
1B&
1A&
x@&
x?&
xP&
1Q&
1R&
xL&
1M&
xN&
xH&
xI&
1J&
xD&
xE&
1F&
xq%
xp%
xo%
xn%
1u%
1t%
1s%
1r%
zz%
xy%
xx%
xw%
zv%
x~%
x}%
x|%
x{%
x.&
x/&
10&
x*&
x+&
1,&
x&&
x'&
1(&
x"&
x#&
1$&
xO%
xN%
xM%
xL%
1S%
1R%
1Q%
1P%
zX%
xW%
xV%
xU%
zT%
x\%
x[%
xZ%
xY%
xj%
xk%
1l%
xf%
xg%
1h%
xb%
xc%
1d%
x^%
x_%
1`%
x-%
x,%
x+%
x*%
11%
10%
1/%
1.%
z6%
x5%
x4%
x3%
z2%
x:%
x9%
x8%
x7%
xH%
xI%
1J%
xD%
xE%
1F%
x@%
xA%
1B%
x<%
x=%
1>%
xU&
xT&
xS&
xe&
xd&
xc&
xb&
xa&
x`&
x_&
x^&
x]&
x\&
x[&
xZ&
xY&
xX&
xW&
xV&
xu&
xt&
xs&
xr&
xq&
xp&
xo&
xn&
xm&
xl&
xk&
xj&
xi&
xh&
xg&
xf&
x*'
x)'
x('
x''
x&'
x%'
x$'
x#'
x"'
x!'
x~&
x}&
x|&
x{&
xz&
xy&
x:'
x9'
x8'
x7'
x6'
x5'
x4'
x3'
x2'
x1'
x0'
x/'
x.'
x-'
x,'
x+'
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
xB'
xA'
x@'
x?'
x>'
x='
x<'
x;'
xZ'
xY'
xX'
xW'
xV'
xU'
xT'
xS'
xR'
xQ'
xP'
xO'
xN'
xM'
xL'
xK'
xj'
xi'
xh'
xg'
xf'
xe'
xd'
xc'
xb'
xa'
x`'
x_'
x^'
x]'
x\'
x['
xz'
xy'
xx'
xw'
xv'
xu'
xt'
xs'
xr'
xq'
xp'
xo'
xn'
xm'
xl'
xk'
x,(
x+(
x*(
x)(
x((
x'(
x&(
x%(
x$(
x#(
x"(
x!(
x~'
x}'
x|'
x{'
x<(
x;(
x:(
x9(
x8(
x7(
x6(
x5(
x4(
x3(
x2(
x1(
x0(
x/(
x.(
x-(
xL(
xK(
xJ(
xI(
xH(
xG(
xF(
xE(
0D(
0C(
0B(
0A(
0@(
0?(
0>(
0=(
xq(
xp(
0o(
0n(
0m(
0l(
0k(
0j(
0i(
0h(
0g(
0f(
0e(
0d(
0c(
0b(
x#)
x")
x!)
x~(
0}(
0|(
0{(
0z(
0y(
0x(
0w(
0v(
0u(
0t(
0s(
0r(
x3)
x2)
x1)
x0)
x/)
x.)
x-)
x,)
0+)
0*)
0))
0()
0')
0&)
0%)
0$)
xC)
xB)
xA)
x@)
x?)
x>)
x=)
x<)
0;)
0:)
09)
08)
07)
06)
05)
04)
0S)
xR)
0Q)
0P)
0O)
0N)
0M)
0L)
0K)
0J)
0I)
0H)
0G)
0F)
0E)
0D)
0c)
0b)
xa)
x`)
0_)
0^)
0])
0\)
0[)
0Z)
0Y)
0X)
0W)
0V)
0U)
0T)
0s)
0r)
0q)
0p)
xo)
xn)
xm)
xl)
0k)
0j)
0i)
0h)
0g)
0f)
0e)
0d)
0%*
0$*
0#*
0"*
0!*
0~)
0})
0|)
x{)
xz)
xy)
xx)
xw)
xv)
xu)
xt)
x3-
x2-
x1-
x0-
x/-
x.-
x--
x,-
x+-
x*-
x)-
x(-
x'-
x&-
x%-
x$-
xC-
xB-
xA-
x@-
x?-
x>-
x=-
x<-
x;-
x:-
x9-
x8-
x7-
x6-
x5-
x4-
xS-
xR-
xQ-
xP-
xO-
xN-
xM-
xL-
xK-
xJ-
xI-
xH-
xG-
xF-
xE-
xD-
xc-
xb-
xa-
x`-
x_-
x^-
x]-
x\-
x[-
xZ-
xY-
xX-
xW-
xV-
xU-
xT-
xd-
xe-
xf-
xg-
xh-
xn-
xm-
xl-
x{.
xz.
xy.
xx.
x!/
x~.
x}.
x|.
z&/
x%/
x$/
x#/
z"/
1*/
x)/
x(/
x'/
x8/
19/
x:/
x4/
x5/
x6/
x0/
x1/
x2/
x,/
x-/
x./
xY.
xX.
xW.
xV.
x].
x\.
x[.
xZ.
zb.
xa.
x`.
x_.
z^.
xf.
xe.
xd.
xc.
xt.
xu.
xv.
xp.
xq.
xr.
xl.
xm.
xn.
xh.
xi.
xj.
x7.
x6.
x5.
x4.
x;.
x:.
x9.
x8.
z@.
x?.
x>.
x=.
z<.
xD.
xC.
xB.
xA.
xR.
xS.
xT.
xN.
xO.
xP.
xJ.
xK.
xL.
xF.
xG.
xH.
xs-
xr-
xq-
xp-
xw-
xv-
xu-
xt-
z|-
x{-
xz-
xy-
zx-
x".
x!.
x~-
x}-
x0.
x1.
x2.
x,.
x-.
x..
x(.
x).
x*.
x$.
x%.
x&.
xB/
xR/
xQ/
xP/
xO/
xN/
xM/
xL/
xK/
xJ/
xI/
xH/
xG/
xF/
xE/
xD/
xC/
xb/
xa/
x`/
x_/
x^/
x]/
x\/
x[/
xZ/
xY/
xX/
xW/
xV/
xU/
xT/
xS/
xr/
xq/
xp/
xo/
xn/
xm/
xl/
xk/
xj/
xi/
xh/
xg/
xf/
xe/
xd/
xc/
x$0
x#0
x"0
x!0
x~/
x}/
x|/
x{/
xz/
xy/
xx/
xw/
xv/
xu/
xt/
xs/
x40
x30
x20
x10
x00
x/0
x.0
x-0
x,0
x+0
x*0
x)0
x(0
x'0
x&0
x%0
zD0
zC0
zB0
zA0
z@0
z?0
z>0
z=0
z<0
z;0
z:0
z90
z80
z70
z60
z50
zT0
zS0
zR0
zQ0
zP0
zO0
zN0
zM0
zL0
zK0
zJ0
zI0
zH0
zG0
zF0
zE0
xX0
xW0
xV0
xe1
xd1
xc1
xb1
xi1
xh1
xg1
xf1
zn1
xm1
xl1
xk1
zj1
xr1
xq1
xp1
xo1
x"2
x#2
x$2
x|1
x}1
x~1
xx1
xy1
xz1
xt1
xu1
xv1
xC1
xB1
xA1
x@1
xG1
xF1
xE1
xD1
zL1
xK1
xJ1
xI1
zH1
xP1
xO1
xN1
xM1
x^1
x_1
x`1
xZ1
x[1
x\1
xV1
xW1
xX1
xR1
xS1
xT1
x!1
x~0
x}0
x|0
x%1
x$1
x#1
x"1
z*1
x)1
x(1
x'1
z&1
x.1
x-1
x,1
x+1
x<1
x=1
x>1
x81
x91
x:1
x41
x51
x61
x01
x11
x21
x]0
x\0
x[0
xZ0
xa0
x`0
x_0
x^0
zf0
xe0
xd0
xc0
zb0
xj0
xi0
xh0
xg0
xx0
xy0
xz0
xt0
xu0
xv0
xp0
xq0
xr0
xl0
xm0
xn0
x72
x62
x52
x42
x32
x22
x12
x02
x/2
x.2
x-2
x,2
x+2
x*2
x)2
x(2
xG2
xF2
xE2
xD2
xC2
xB2
xA2
x@2
x?2
x>2
x=2
x<2
x;2
x:2
x92
x82
xW2
xV2
xU2
xT2
xS2
xR2
xQ2
xP2
xO2
xN2
xM2
xL2
xK2
xJ2
xI2
xH2
xg2
xf2
xe2
xd2
xc2
xb2
xa2
x`2
x_2
x^2
x]2
x\2
x[2
xZ2
xY2
xX2
xw2
xv2
xu2
xt2
xs2
xr2
xq2
xp2
xo2
xn2
xm2
xl2
xk2
xj2
xi2
xh2
x)3
x(3
x'3
x&3
x%3
x$3
x#3
x"3
x!3
x~2
x}2
x|2
x{2
xz2
xy2
xx2
x93
x83
x73
x63
x53
x43
x33
x23
x13
x03
x/3
x.3
x-3
x,3
x+3
x*3
xI3
xH3
xG3
xF3
xE3
xD3
xC3
xB3
xA3
x@3
x?3
x>3
x=3
x<3
x;3
x:3
zK3
zL3
x{
x|
x}
x~
x!!
x"!
x#!
x$!
x%!
x&!
x'!
x(!
x)!
x*!
x+!
x,!
x-!
x.!
0%%
x}$
0|$
1{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
0q$
0p$
0o$
0n$
0m$
0l$
0k$
1J$
xi$
xg$
xe$
xc$
xa$
x_$
x]$
x[$
xY$
xW$
xU$
xS$
xQ$
xO$
xM$
xK$
0O&
xK&
xG&
xC&
x-&
x)&
x%&
x!&
xi%
xe%
xa%
x]%
xG%
xC%
x?%
x;%
1a(
0`(
0_(
0^(
0](
0\(
0[(
0Z(
0Y(
0X(
0W(
0V(
0U(
0T(
0S(
0R(
0Q(
0P(
x"-
x~,
x|,
xz,
xx,
xv,
xt,
xr,
xp,
xn,
xl,
xj,
xh,
xf,
xd,
xb,
x],
x[,
xY,
xW,
xU,
xS,
xQ,
xO,
xM,
xK,
xI,
xG,
xE,
xC,
xA,
x?,
x:,
x8,
x6,
x4,
x2,
x0,
x.,
x,,
x*,
x(,
x&,
x$,
x",
x~+
x|+
xz+
xu+
xs+
xq+
xo+
xm+
xk+
xi+
xg+
xe+
xc+
xa+
x_+
x]+
x[+
xY+
xW+
xR+
xP+
xN+
xL+
xJ+
xH+
xF+
xD+
xB+
x@+
x>+
x<+
x:+
x8+
x6+
x4+
x/+
x-+
x++
x)+
x'+
x%+
x#+
x!+
x}*
x{*
xy*
xw*
xu*
xs*
xq*
xo*
xj*
xh*
xf*
xd*
xb*
x`*
x^*
x\*
xZ*
xX*
xV*
xT*
xR*
xP*
xN*
xL*
xG*
xE*
xC*
xA*
x?*
x=*
x;*
x9*
x7*
x5*
x3*
x1*
x/*
x-*
x+*
x)*
0k-
xj-
x7/
x3/
x//
x+/
xs.
xo.
xk.
xg.
xQ.
xM.
xI.
xE.
x/.
x+.
x'.
x#.
z@/
z?/
z>/
z=/
x!2
x{1
xw1
xs1
x]1
xY1
xU1
xQ1
x;1
x71
x31
x/1
xw0
xs0
xo0
xk0
0M3
$end
#1
0-(
0.(
0/(
00(
01(
02(
03(
04(
05(
06(
07(
08(
09(
0:(
0;(
0<(
0{'
0|'
0}'
0~'
0!(
0"(
0#(
0$(
0%(
0&(
0'(
0((
0)(
0*(
0+(
0,(
0k'
0l'
0m'
0n'
0o'
0p'
0q'
0r'
0s'
0t'
0u'
0v'
0w'
0x'
0y'
0z'
0['
0\'
0]'
0^'
0_'
0`'
0a'
0b'
0c'
0d'
0e'
0f'
0g'
0h'
0i'
0j'
0K'
0L'
0M'
0N'
0O'
0P'
0Q'
0R'
0S'
0T'
0U'
0V'
0W'
0X'
0Y'
0Z'
0;'
0<'
0='
0>'
0?'
0@'
0A'
0B'
0C'
0D'
0E'
0F'
0G'
0H'
0I'
0J'
0+'
0,'
0-'
0.'
0/'
00'
01'
02'
03'
04'
05'
06'
07'
08'
09'
0:'
0y&
0z&
0{&
0|&
0}&
0~&
0!'
0"'
0#'
0$'
0%'
0&'
0''
0('
0)'
0*'
0s#
0t#
0u#
0v#
0w#
0x#
0y#
0z#
0{#
0|#
0}#
0~#
0!$
0"$
0#$
0$$
05&
0P&
14&
18&
1L&
1N&
03&
0H&
02&
0D&
0q%
0.&
0p%
0*&
0o%
0&&
0n%
0"&
0O%
0j%
0N%
0f%
0M%
0b%
0L%
0^%
0-%
0H%
0,%
0D%
0+%
0@%
0*%
0<%
1=%
17%
1A%
18%
1E%
19%
1I%
1:%
1_%
1Y%
1c%
1Z%
1g%
1[%
1k%
1\%
1#&
1{%
1'&
1|%
1+&
1}%
1/&
1~%
1E&
1?&
1I&
1@&
0K&
13$
0<&
04$
02$
0;&
0G&
0(%
0C&
0y%
0-&
0x%
0)&
0w%
0%&
0'%
0!&
0W%
0i%
0V%
0e%
0U%
0a%
0&%
0]%
05%
0G%
04%
0C%
03%
0?%
0F$
0;%
0%$
0&$
0'$
0($
0)$
0*$
0+$
0,$
0-$
0.$
0/$
00$
01$
0d!
1c!
0b!
0a!
0`!
0_!
0^!
0]!
0\!
0[!
0Z!
0Y!
0X!
0W!
0V!
0U!
0e&
0d&
0c&
0b&
0a&
0`&
0_&
0^&
0]&
0\&
0[&
0Z&
0Y&
0X&
0W&
0V&
0u&
0t&
0s&
0r&
0q&
0p&
0o&
0n&
0m&
0l&
0k&
0j&
0i&
0h&
0g&
0f&
0t!
1s!
0r!
0q!
0p!
0o!
0n!
0m!
0l!
0k!
0j!
0i!
0h!
0g!
0f!
0e!
00
1/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0$
0#
0"
0!
1t-
1&.
1u-
1*.
1v-
1..
1w-
12.
18.
1H.
19.
1L.
1:.
1P.
1;.
1T.
1Z.
1j.
1[.
1n.
1\.
1r.
1].
1v.
1|.
1./
1}.
12/
1!/
1:/
07/
0%/
1)/
15/
1T!
1S!
1R!
1Q!
1P!
1O!
1N!
1M!
1L!
0K!
0J!
0I!
0H!
0G!
1F!
1E!
1U&
1v"
1u"
1t"
1s"
1r"
18#
17#
16#
15#
14#
13#
12#
11#
10#
1/#
1.#
1-#
1,#
1+#
1*#
1)#
1H#
1G#
1F#
1E#
1D#
1C#
1B#
1A#
1@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
1@
1?
1>
1=
1<
1;
1:
19
18
07
06
05
04
03
12
11
1*!
1,!
1(#
1'#
1&#
1%#
1$#
1##
1"#
1!#
1C-
1B-
1A-
1@-
1?-
1>-
1=-
1<-
1;-
0q(
1-!
17.
1R.
1V.
1h.
1W.
1l.
1X.
1p.
1Y.
1t.
1x.
1,/
1y.
10/
0z.
0~.
04/
06/
1{.
18/
1c-
13/
0b-
1$/
0(/
0a-
01/
1//
1#/
0'/
0`-
0-/
1+/
1n-
0f.
0_-
0u.
1s.
1a.
0e.
0^-
0q.
1o.
1`.
0d.
0]-
0m.
1k.
1_.
0c.
0\-
0i.
1g.
1m-
0D.
0[-
0S.
1Q.
1?.
1+!
0Q-
0P-
0O-
0N-
0M-
0L-
0K-
0a)
0#)
0o)
03)
0!)
0m)
0{)
0C)
01)
0/)
0y)
0w)
0L(
0A)
0?)
0-)
0u)
0J(
0H(
0"-
0~,
0|,
0z,
0x,
0v,
0t,
0r,
0p,
0n,
0l,
0j,
0h,
0f,
0d,
0b,
0=)
0F(
0R+
0P+
0N+
0L+
0J+
0H+
0F+
0D+
0B+
0@+
0>+
0<+
0:+
08+
06+
04+
0:,
08,
06,
04,
02,
00,
0.,
0,,
0*,
0(,
0&,
0$,
0",
0~+
0|+
0z+
0j*
0h*
0f*
0d*
0b*
0`*
0^*
0\*
0Z*
0X*
0V*
0T*
0R*
0P*
0N*
0L*
1r#
1b#
0c#
0d#
0e#
0f#
0g#
0h#
0i#
0j#
0k#
0l#
b0 m#
b0 n#
b0 p#
b0 o#
b0 q#
1e#
b101 m#
1I#
0J#
0{
0K#
1}
1L#
0!!
0M#
0"!
0N#
0#!
0O#
0P#
0$!
0Q#
0R#
1~
0%!
0|
0\#
0[#
0^#
0]#
0Z#
0Y#
1X#
0W#
1V#
0U#
0T#
0S#
0&!
1r1
1#2
0}$
1w
0U
0A
0&"
1%"
0$"
0#"
0""
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
1T&
1S&
0D
0C
0B!
0A!
0@!
0?!
0>!
0=!
0<!
1:-
19-
18-
17-
16-
15-
14-
1q"
1p"
1o"
1n"
1m"
1l"
1k"
1j"
1i"
1h"
1g"
1~"
1}"
1|"
1{"
1z"
1y"
1x"
1w"
0R)
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
1p-
1$.
1q-
1(.
1r-
1,.
1s-
10.
14.
1F.
15.
1J.
16.
1N.
0Z-
0O.
0C.
1>.
1M.
0B.
0Y-
0K.
1I.
1=.
0A.
0X-
0G.
1E.
1l-
0".
0W-
01.
1/.
1{-
0!.
0V-
0-.
1+.
1z-
0~-
0U-
0).
1'.
1y-
0}-
0T-
0%.
1#.
1j-
0(!
0)!
0J-
0I-
0H-
0G-
0F-
0E-
0D-
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0p(
03-
02-
01-
00-
0/-
0.-
0--
0,-
0+-
0*-
0)-
0(-
0'-
0&-
0%-
0$-
0e$
0c$
0a$
0_$
0]$
0[$
0Y$
02)
00)
0")
0],
0Y,
0W,
0U,
0S,
0Q,
0O,
0M,
0K,
0I,
0G,
0E,
0C,
0A,
0?,
0u+
0q+
0o+
0m+
0k+
0i+
0g+
0e+
0c+
0a+
0_+
0]+
0[+
0Y+
0W+
0/+
0++
0)+
0'+
0%+
0#+
0!+
0}*
0{*
0y*
0w*
0u*
0s*
0q*
0o*
0G*
0C*
0A*
0?*
0=*
0;*
09*
07*
05*
03*
01*
0/*
0-*
0+*
0)*
0T
1S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0n)
0z)
0x)
0B)
0@)
040
030
020
010
000
0/0
0.0
0-0
0,0
0+0
0*0
0)0
0(0
0'0
0&0
0%0
0`)
0;!
0:!
09!
08!
07!
06!
05!
1^0
1n0
1_0
1r0
1`0
1v0
1a0
1z0
1"1
121
1#1
161
1$1
1:1
1%1
1>1
1D1
1T1
1E1
1X1
1F1
1\1
1G1
1`1
1f1
1v1
1g1
1z1
1h1
1~1
1i1
1$2
0!2
0m1
1q1
1}1
0{1
0l1
1p1
1y1
0w1
0k1
1o1
1u1
0s1
0X0
1P1
1_1
0]1
0K1
1O1
1[1
0Y1
0J1
1N1
1W1
0U1
0I1
1M1
1S1
0Q1
0W0
1.1
1=1
0;1
0)1
1-1
191
071
0(1
1,1
151
031
0'1
1+1
111
0/1
0V0
1j0
1y0
0w0
0e0
1i0
1u0
0s0
0d0
1h0
1q0
0o0
0c0
1g0
1m0
0k0
0B/
0g-
0W$
0U$
0S$
0Q$
0O$
0M$
0K$
0~(
0K(
0I(
0.)
0v)
0>)
0s+
0[,
0l)
0,)
0G(
0-+
0t)
0<)
0E(
0E*
0$0
0#0
0"0
0!0
0~/
0}/
0|/
0{/
0z/
0y/
0x/
0w/
0v/
0u/
0t/
0s/
0a#
0`#
0_#
0f-
0d-
0Z0
0l0
0[0
0p0
0\0
0t0
0]0
0x0
0|0
001
0}0
041
0~0
081
0!1
0<1
0@1
0R1
0A1
0V1
0B1
0Z1
0C1
0^1
0b1
0t1
0c1
0x1
0d1
0|1
0e1
0"2
0R/
0Q/
0P/
0O/
0N/
0M/
0L/
0K/
0J/
0I/
0H/
0G/
0F/
0E/
0D/
0C/
0S-
1R-
0w2
0v2
0u2
0t2
0s2
0r2
0q2
0p2
0o2
0n2
0m2
0l2
0k2
0j2
0i2
0h2
072
062
052
042
032
022
012
002
0/2
0.2
0-2
0,2
0+2
0*2
0)2
0(2
0)3
0(3
0'3
0&3
0%3
0$3
0#3
0"3
0!3
0~2
0}2
0|2
0{2
0z2
0y2
0x2
0G2
0F2
0E2
0D2
0C2
0B2
0A2
0@2
0?2
0>2
0=2
0<2
0;2
0:2
092
082
0D!
1C!
0i$
1g$
093
083
073
063
053
043
033
023
013
003
0/3
0.3
0-3
0,3
0+3
0*3
0W2
0V2
0U2
0T2
0S2
0R2
0Q2
0P2
0O2
0N2
0M2
0L2
0K2
0J2
0I2
0H2
0I3
0H3
0G3
0F3
0E3
0D3
0C3
0B3
0A3
0@3
0?3
0>3
0=3
0<3
0;3
0:3
0g2
0f2
0e2
0d2
0c2
0b2
0a2
0`2
0_2
0^2
0]2
0\2
0[2
0Z2
0Y2
0X2
0b/
0a/
0`/
0_/
0^/
0]/
0\/
0[/
0Z/
0Y/
0X/
0W/
0V/
0U/
0T/
0S/
0r/
0q/
0p/
0o/
0n/
0m/
0l/
0k/
0j/
0i/
0h/
0g/
0f/
0e/
0d/
0c/
1h-
0e-
1J3
b0 A/
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0.!
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
#50
02!
0/!
#100
12!
1/!
b10 4!
#150
02!
0/!
#200
12!
1/!
b11 4!
#201
03!
01!
#250
02!
0/!
#300
12!
1/!
1h$
b100 4!
b1 x
