$date
	Sun Oct 20 01:46:17 2024
$end
$version
	ModelSim Version 10.7c
$end
$timescale
	1ns
$end

$scope module proc_hier_bench $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemData [15] $end
$var wire 1 h MemData [14] $end
$var wire 1 i MemData [13] $end
$var wire 1 j MemData [12] $end
$var wire 1 k MemData [11] $end
$var wire 1 l MemData [10] $end
$var wire 1 m MemData [9] $end
$var wire 1 n MemData [8] $end
$var wire 1 o MemData [7] $end
$var wire 1 p MemData [6] $end
$var wire 1 q MemData [5] $end
$var wire 1 r MemData [4] $end
$var wire 1 s MemData [3] $end
$var wire 1 t MemData [2] $end
$var wire 1 u MemData [1] $end
$var wire 1 v MemData [0] $end
$var wire 1 w Halt $end
$var integer 32 x inst_count $end
$var integer 32 y trace_file $end
$var integer 32 z sim_log_file $end

$scope module DUT $end
$var wire 1 { clk $end
$var wire 1 | err $end
$var wire 1 } rst $end

$scope module c0 $end
$var reg 1 ~ clk $end
$var reg 1 !! rst $end
$var wire 1 | err $end
$var integer 32 "! cycle_count $end
$upscope $end

$scope module p0 $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 | err $end
$var wire 1 #! PC_Jump [15] $end
$var wire 1 $! PC_Jump [14] $end
$var wire 1 %! PC_Jump [13] $end
$var wire 1 &! PC_Jump [12] $end
$var wire 1 '! PC_Jump [11] $end
$var wire 1 (! PC_Jump [10] $end
$var wire 1 )! PC_Jump [9] $end
$var wire 1 *! PC_Jump [8] $end
$var wire 1 +! PC_Jump [7] $end
$var wire 1 ,! PC_Jump [6] $end
$var wire 1 -! PC_Jump [5] $end
$var wire 1 .! PC_Jump [4] $end
$var wire 1 /! PC_Jump [3] $end
$var wire 1 0! PC_Jump [2] $end
$var wire 1 1! PC_Jump [1] $end
$var wire 1 2! PC_Jump [0] $end
$var wire 1 3! PC [15] $end
$var wire 1 4! PC [14] $end
$var wire 1 5! PC [13] $end
$var wire 1 6! PC [12] $end
$var wire 1 7! PC [11] $end
$var wire 1 8! PC [10] $end
$var wire 1 9! PC [9] $end
$var wire 1 :! PC [8] $end
$var wire 1 ;! PC [7] $end
$var wire 1 <! PC [6] $end
$var wire 1 =! PC [5] $end
$var wire 1 >! PC [4] $end
$var wire 1 ?! PC [3] $end
$var wire 1 @! PC [2] $end
$var wire 1 A! PC [1] $end
$var wire 1 B! PC [0] $end
$var wire 1 C! instr [15] $end
$var wire 1 D! instr [14] $end
$var wire 1 E! instr [13] $end
$var wire 1 F! instr [12] $end
$var wire 1 G! instr [11] $end
$var wire 1 H! instr [10] $end
$var wire 1 I! instr [9] $end
$var wire 1 J! instr [8] $end
$var wire 1 K! instr [7] $end
$var wire 1 L! instr [6] $end
$var wire 1 M! instr [5] $end
$var wire 1 N! instr [4] $end
$var wire 1 O! instr [3] $end
$var wire 1 P! instr [2] $end
$var wire 1 Q! instr [1] $end
$var wire 1 R! instr [0] $end
$var wire 1 S! PC_f [15] $end
$var wire 1 T! PC_f [14] $end
$var wire 1 U! PC_f [13] $end
$var wire 1 V! PC_f [12] $end
$var wire 1 W! PC_f [11] $end
$var wire 1 X! PC_f [10] $end
$var wire 1 Y! PC_f [9] $end
$var wire 1 Z! PC_f [8] $end
$var wire 1 [! PC_f [7] $end
$var wire 1 \! PC_f [6] $end
$var wire 1 ]! PC_f [5] $end
$var wire 1 ^! PC_f [4] $end
$var wire 1 _! PC_f [3] $end
$var wire 1 `! PC_f [2] $end
$var wire 1 a! PC_f [1] $end
$var wire 1 b! PC_f [0] $end
$var wire 1 c! PC_d [15] $end
$var wire 1 d! PC_d [14] $end
$var wire 1 e! PC_d [13] $end
$var wire 1 f! PC_d [12] $end
$var wire 1 g! PC_d [11] $end
$var wire 1 h! PC_d [10] $end
$var wire 1 i! PC_d [9] $end
$var wire 1 j! PC_d [8] $end
$var wire 1 k! PC_d [7] $end
$var wire 1 l! PC_d [6] $end
$var wire 1 m! PC_d [5] $end
$var wire 1 n! PC_d [4] $end
$var wire 1 o! PC_d [3] $end
$var wire 1 p! PC_d [2] $end
$var wire 1 q! PC_d [1] $end
$var wire 1 r! PC_d [0] $end
$var wire 1 s! ALUOpr [5] $end
$var wire 1 t! ALUOpr [4] $end
$var wire 1 u! ALUOpr [3] $end
$var wire 1 v! ALUOpr [2] $end
$var wire 1 w! ALUOpr [1] $end
$var wire 1 x! ALUOpr [0] $end
$var wire 1 y! Oper [3] $end
$var wire 1 z! Oper [2] $end
$var wire 1 {! Oper [1] $end
$var wire 1 |! Oper [0] $end
$var wire 1 }! BranchTaken [3] $end
$var wire 1 ~! BranchTaken [2] $end
$var wire 1 !" BranchTaken [1] $end
$var wire 1 "" BranchTaken [0] $end
$var wire 1 #" WB [15] $end
$var wire 1 $" WB [14] $end
$var wire 1 %" WB [13] $end
$var wire 1 &" WB [12] $end
$var wire 1 '" WB [11] $end
$var wire 1 (" WB [10] $end
$var wire 1 )" WB [9] $end
$var wire 1 *" WB [8] $end
$var wire 1 +" WB [7] $end
$var wire 1 ," WB [6] $end
$var wire 1 -" WB [5] $end
$var wire 1 ." WB [4] $end
$var wire 1 /" WB [3] $end
$var wire 1 0" WB [2] $end
$var wire 1 1" WB [1] $end
$var wire 1 2" WB [0] $end
$var wire 1 3" RSData [15] $end
$var wire 1 4" RSData [14] $end
$var wire 1 5" RSData [13] $end
$var wire 1 6" RSData [12] $end
$var wire 1 7" RSData [11] $end
$var wire 1 8" RSData [10] $end
$var wire 1 9" RSData [9] $end
$var wire 1 :" RSData [8] $end
$var wire 1 ;" RSData [7] $end
$var wire 1 <" RSData [6] $end
$var wire 1 =" RSData [5] $end
$var wire 1 >" RSData [4] $end
$var wire 1 ?" RSData [3] $end
$var wire 1 @" RSData [2] $end
$var wire 1 A" RSData [1] $end
$var wire 1 B" RSData [0] $end
$var wire 1 C" RTData [15] $end
$var wire 1 D" RTData [14] $end
$var wire 1 E" RTData [13] $end
$var wire 1 F" RTData [12] $end
$var wire 1 G" RTData [11] $end
$var wire 1 H" RTData [10] $end
$var wire 1 I" RTData [9] $end
$var wire 1 J" RTData [8] $end
$var wire 1 K" RTData [7] $end
$var wire 1 L" RTData [6] $end
$var wire 1 M" RTData [5] $end
$var wire 1 N" RTData [4] $end
$var wire 1 O" RTData [3] $end
$var wire 1 P" RTData [2] $end
$var wire 1 Q" RTData [1] $end
$var wire 1 R" RTData [0] $end
$var wire 1 S" ALU [15] $end
$var wire 1 T" ALU [14] $end
$var wire 1 U" ALU [13] $end
$var wire 1 V" ALU [12] $end
$var wire 1 W" ALU [11] $end
$var wire 1 X" ALU [10] $end
$var wire 1 Y" ALU [9] $end
$var wire 1 Z" ALU [8] $end
$var wire 1 [" ALU [7] $end
$var wire 1 \" ALU [6] $end
$var wire 1 ]" ALU [5] $end
$var wire 1 ^" ALU [4] $end
$var wire 1 _" ALU [3] $end
$var wire 1 `" ALU [2] $end
$var wire 1 a" ALU [1] $end
$var wire 1 b" ALU [0] $end
$var wire 1 c" readData [15] $end
$var wire 1 d" readData [14] $end
$var wire 1 e" readData [13] $end
$var wire 1 f" readData [12] $end
$var wire 1 g" readData [11] $end
$var wire 1 h" readData [10] $end
$var wire 1 i" readData [9] $end
$var wire 1 j" readData [8] $end
$var wire 1 k" readData [7] $end
$var wire 1 l" readData [6] $end
$var wire 1 m" readData [5] $end
$var wire 1 n" readData [4] $end
$var wire 1 o" readData [3] $end
$var wire 1 p" readData [2] $end
$var wire 1 q" readData [1] $end
$var wire 1 r" readData [0] $end
$var wire 1 s" Imm5 [15] $end
$var wire 1 t" Imm5 [14] $end
$var wire 1 u" Imm5 [13] $end
$var wire 1 v" Imm5 [12] $end
$var wire 1 w" Imm5 [11] $end
$var wire 1 x" Imm5 [10] $end
$var wire 1 y" Imm5 [9] $end
$var wire 1 z" Imm5 [8] $end
$var wire 1 {" Imm5 [7] $end
$var wire 1 |" Imm5 [6] $end
$var wire 1 }" Imm5 [5] $end
$var wire 1 ~" Imm5 [4] $end
$var wire 1 !# Imm5 [3] $end
$var wire 1 "# Imm5 [2] $end
$var wire 1 ## Imm5 [1] $end
$var wire 1 $# Imm5 [0] $end
$var wire 1 %# Imm8 [15] $end
$var wire 1 &# Imm8 [14] $end
$var wire 1 '# Imm8 [13] $end
$var wire 1 (# Imm8 [12] $end
$var wire 1 )# Imm8 [11] $end
$var wire 1 *# Imm8 [10] $end
$var wire 1 +# Imm8 [9] $end
$var wire 1 ,# Imm8 [8] $end
$var wire 1 -# Imm8 [7] $end
$var wire 1 .# Imm8 [6] $end
$var wire 1 /# Imm8 [5] $end
$var wire 1 0# Imm8 [4] $end
$var wire 1 1# Imm8 [3] $end
$var wire 1 2# Imm8 [2] $end
$var wire 1 3# Imm8 [1] $end
$var wire 1 4# Imm8 [0] $end
$var wire 1 5# sImm8 [15] $end
$var wire 1 6# sImm8 [14] $end
$var wire 1 7# sImm8 [13] $end
$var wire 1 8# sImm8 [12] $end
$var wire 1 9# sImm8 [11] $end
$var wire 1 :# sImm8 [10] $end
$var wire 1 ;# sImm8 [9] $end
$var wire 1 <# sImm8 [8] $end
$var wire 1 =# sImm8 [7] $end
$var wire 1 ># sImm8 [6] $end
$var wire 1 ?# sImm8 [5] $end
$var wire 1 @# sImm8 [4] $end
$var wire 1 A# sImm8 [3] $end
$var wire 1 B# sImm8 [2] $end
$var wire 1 C# sImm8 [1] $end
$var wire 1 D# sImm8 [0] $end
$var wire 1 E# sImm11 [15] $end
$var wire 1 F# sImm11 [14] $end
$var wire 1 G# sImm11 [13] $end
$var wire 1 H# sImm11 [12] $end
$var wire 1 I# sImm11 [11] $end
$var wire 1 J# sImm11 [10] $end
$var wire 1 K# sImm11 [9] $end
$var wire 1 L# sImm11 [8] $end
$var wire 1 M# sImm11 [7] $end
$var wire 1 N# sImm11 [6] $end
$var wire 1 O# sImm11 [5] $end
$var wire 1 P# sImm11 [4] $end
$var wire 1 Q# sImm11 [3] $end
$var wire 1 R# sImm11 [2] $end
$var wire 1 S# sImm11 [1] $end
$var wire 1 T# sImm11 [0] $end
$var wire 1 U# nHaltSig $end
$var wire 1 V# RegWrt $end
$var wire 1 W# ZeroExt $end
$var wire 1 X# ImmSrc $end
$var wire 1 Y# invA $end
$var wire 1 Z# invB $end
$var wire 1 [# ALUSign $end
$var wire 1 \# Cin $end
$var wire 1 ]# ALUJmp $end
$var wire 1 ^# MemWrt $end
$var wire 1 _# MemRead $end
$var wire 1 `# RegSrc [1] $end
$var wire 1 a# RegSrc [0] $end
$var wire 1 b# BSrc [1] $end
$var wire 1 c# BSrc [0] $end
$var wire 1 d# RegDst [1] $end
$var wire 1 e# RegDst [0] $end
$var wire 1 f# RD [2] $end
$var wire 1 g# RD [1] $end
$var wire 1 h# RD [0] $end

$scope module control0 $end
$var wire 1 C! instr [15] $end
$var wire 1 D! instr [14] $end
$var wire 1 E! instr [13] $end
$var wire 1 F! instr [12] $end
$var wire 1 G! instr [11] $end
$var wire 1 H! instr [10] $end
$var wire 1 I! instr [9] $end
$var wire 1 J! instr [8] $end
$var wire 1 K! instr [7] $end
$var wire 1 L! instr [6] $end
$var wire 1 M! instr [5] $end
$var wire 1 N! instr [4] $end
$var wire 1 O! instr [3] $end
$var wire 1 P! instr [2] $end
$var wire 1 Q! instr [1] $end
$var wire 1 R! instr [0] $end
$var reg 1 i# nHaltSig $end
$var reg 1 j# RegWrt $end
$var reg 1 k# ZeroExt $end
$var reg 1 l# MemRead $end
$var reg 1 m# ImmSrc $end
$var reg 1 n# ALUSign $end
$var reg 1 o# ALUJmp $end
$var reg 1 p# MemWrt $end
$var reg 1 q# err $end
$var reg 6 r# ALUOpr [5:0] $end
$var reg 2 s# RegSrc [1:0] $end
$var reg 2 t# BSrc [1:0] $end
$var reg 2 u# RegDst [1:0] $end
$var reg 4 v# BranchTaken [3:0] $end
$var wire 1 w# funct $end
$upscope $end

$scope module fetch0 $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 #! PC_B [15] $end
$var wire 1 $! PC_B [14] $end
$var wire 1 %! PC_B [13] $end
$var wire 1 &! PC_B [12] $end
$var wire 1 '! PC_B [11] $end
$var wire 1 (! PC_B [10] $end
$var wire 1 )! PC_B [9] $end
$var wire 1 *! PC_B [8] $end
$var wire 1 +! PC_B [7] $end
$var wire 1 ,! PC_B [6] $end
$var wire 1 -! PC_B [5] $end
$var wire 1 .! PC_B [4] $end
$var wire 1 /! PC_B [3] $end
$var wire 1 0! PC_B [2] $end
$var wire 1 1! PC_B [1] $end
$var wire 1 2! PC_B [0] $end
$var wire 1 U# nHaltSig $end
$var wire 1 C! instr [15] $end
$var wire 1 D! instr [14] $end
$var wire 1 E! instr [13] $end
$var wire 1 F! instr [12] $end
$var wire 1 G! instr [11] $end
$var wire 1 H! instr [10] $end
$var wire 1 I! instr [9] $end
$var wire 1 J! instr [8] $end
$var wire 1 K! instr [7] $end
$var wire 1 L! instr [6] $end
$var wire 1 M! instr [5] $end
$var wire 1 N! instr [4] $end
$var wire 1 O! instr [3] $end
$var wire 1 P! instr [2] $end
$var wire 1 Q! instr [1] $end
$var wire 1 R! instr [0] $end
$var wire 1 S! PC_Next [15] $end
$var wire 1 T! PC_Next [14] $end
$var wire 1 U! PC_Next [13] $end
$var wire 1 V! PC_Next [12] $end
$var wire 1 W! PC_Next [11] $end
$var wire 1 X! PC_Next [10] $end
$var wire 1 Y! PC_Next [9] $end
$var wire 1 Z! PC_Next [8] $end
$var wire 1 [! PC_Next [7] $end
$var wire 1 \! PC_Next [6] $end
$var wire 1 ]! PC_Next [5] $end
$var wire 1 ^! PC_Next [4] $end
$var wire 1 _! PC_Next [3] $end
$var wire 1 `! PC_Next [2] $end
$var wire 1 a! PC_Next [1] $end
$var wire 1 b! PC_Next [0] $end
$var wire 1 3! PC_curr [15] $end
$var wire 1 4! PC_curr [14] $end
$var wire 1 5! PC_curr [13] $end
$var wire 1 6! PC_curr [12] $end
$var wire 1 7! PC_curr [11] $end
$var wire 1 8! PC_curr [10] $end
$var wire 1 9! PC_curr [9] $end
$var wire 1 :! PC_curr [8] $end
$var wire 1 ;! PC_curr [7] $end
$var wire 1 <! PC_curr [6] $end
$var wire 1 =! PC_curr [5] $end
$var wire 1 >! PC_curr [4] $end
$var wire 1 ?! PC_curr [3] $end
$var wire 1 @! PC_curr [2] $end
$var wire 1 A! PC_curr [1] $end
$var wire 1 B! PC_curr [0] $end
$var wire 1 x# PC [15] $end
$var wire 1 y# PC [14] $end
$var wire 1 z# PC [13] $end
$var wire 1 {# PC [12] $end
$var wire 1 |# PC [11] $end
$var wire 1 }# PC [10] $end
$var wire 1 ~# PC [9] $end
$var wire 1 !$ PC [8] $end
$var wire 1 "$ PC [7] $end
$var wire 1 #$ PC [6] $end
$var wire 1 $$ PC [5] $end
$var wire 1 %$ PC [4] $end
$var wire 1 &$ PC [3] $end
$var wire 1 '$ PC [2] $end
$var wire 1 ($ PC [1] $end
$var wire 1 )$ PC [0] $end
$var wire 1 *$ err $end
$var wire 1 +$ add2 [15] $end
$var wire 1 ,$ add2 [14] $end
$var wire 1 -$ add2 [13] $end
$var wire 1 .$ add2 [12] $end
$var wire 1 /$ add2 [11] $end
$var wire 1 0$ add2 [10] $end
$var wire 1 1$ add2 [9] $end
$var wire 1 2$ add2 [8] $end
$var wire 1 3$ add2 [7] $end
$var wire 1 4$ add2 [6] $end
$var wire 1 5$ add2 [5] $end
$var wire 1 6$ add2 [4] $end
$var wire 1 7$ add2 [3] $end
$var wire 1 8$ add2 [2] $end
$var wire 1 9$ add2 [1] $end
$var wire 1 :$ add2 [0] $end
$var wire 1 ;$ PC_Sum [15] $end
$var wire 1 <$ PC_Sum [14] $end
$var wire 1 =$ PC_Sum [13] $end
$var wire 1 >$ PC_Sum [12] $end
$var wire 1 ?$ PC_Sum [11] $end
$var wire 1 @$ PC_Sum [10] $end
$var wire 1 A$ PC_Sum [9] $end
$var wire 1 B$ PC_Sum [8] $end
$var wire 1 C$ PC_Sum [7] $end
$var wire 1 D$ PC_Sum [6] $end
$var wire 1 E$ PC_Sum [5] $end
$var wire 1 F$ PC_Sum [4] $end
$var wire 1 G$ PC_Sum [3] $end
$var wire 1 H$ PC_Sum [2] $end
$var wire 1 I$ PC_Sum [1] $end
$var wire 1 J$ PC_Sum [0] $end
$var wire 1 K$ c_out $end

$scope module pc_reg $end
$var parameter 32 L$ BIT_WIDTH $end
$var parameter 32 M$ BIT_SIZE $end
$var parameter 32 N$ REG_NUMS $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 O$ we $end
$var wire 1 #! w [15] $end
$var wire 1 $! w [14] $end
$var wire 1 %! w [13] $end
$var wire 1 &! w [12] $end
$var wire 1 '! w [11] $end
$var wire 1 (! w [10] $end
$var wire 1 )! w [9] $end
$var wire 1 *! w [8] $end
$var wire 1 +! w [7] $end
$var wire 1 ,! w [6] $end
$var wire 1 -! w [5] $end
$var wire 1 .! w [4] $end
$var wire 1 /! w [3] $end
$var wire 1 0! w [2] $end
$var wire 1 1! w [1] $end
$var wire 1 2! w [0] $end
$var wire 1 x# r [15] $end
$var wire 1 y# r [14] $end
$var wire 1 z# r [13] $end
$var wire 1 {# r [12] $end
$var wire 1 |# r [11] $end
$var wire 1 }# r [10] $end
$var wire 1 ~# r [9] $end
$var wire 1 !$ r [8] $end
$var wire 1 "$ r [7] $end
$var wire 1 #$ r [6] $end
$var wire 1 $$ r [5] $end
$var wire 1 %$ r [4] $end
$var wire 1 &$ r [3] $end
$var wire 1 '$ r [2] $end
$var wire 1 ($ r [1] $end
$var wire 1 )$ r [0] $end

$scope module dff01[15] $end
$var wire 1 x# q $end
$var wire 1 P$ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 Q$ state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 y# q $end
$var wire 1 R$ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 S$ state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 z# q $end
$var wire 1 T$ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 U$ state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 {# q $end
$var wire 1 V$ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 W$ state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 |# q $end
$var wire 1 X$ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 Y$ state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 }# q $end
$var wire 1 Z$ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 [$ state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 ~# q $end
$var wire 1 \$ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ]$ state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 !$ q $end
$var wire 1 ^$ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 _$ state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 "$ q $end
$var wire 1 `$ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 a$ state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 #$ q $end
$var wire 1 b$ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 c$ state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 $$ q $end
$var wire 1 d$ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 e$ state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 %$ q $end
$var wire 1 f$ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 g$ state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 &$ q $end
$var wire 1 h$ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 i$ state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 '$ q $end
$var wire 1 j$ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 k$ state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 ($ q $end
$var wire 1 l$ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 m$ state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 )$ q $end
$var wire 1 n$ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 o$ state $end
$upscope $end
$upscope $end

$scope module instr_mem $end
$var wire 1 C! data_out [15] $end
$var wire 1 D! data_out [14] $end
$var wire 1 E! data_out [13] $end
$var wire 1 F! data_out [12] $end
$var wire 1 G! data_out [11] $end
$var wire 1 H! data_out [10] $end
$var wire 1 I! data_out [9] $end
$var wire 1 J! data_out [8] $end
$var wire 1 K! data_out [7] $end
$var wire 1 L! data_out [6] $end
$var wire 1 M! data_out [5] $end
$var wire 1 N! data_out [4] $end
$var wire 1 O! data_out [3] $end
$var wire 1 P! data_out [2] $end
$var wire 1 Q! data_out [1] $end
$var wire 1 R! data_out [0] $end
$var wire 1 p$ data_in [15] $end
$var wire 1 q$ data_in [14] $end
$var wire 1 r$ data_in [13] $end
$var wire 1 s$ data_in [12] $end
$var wire 1 t$ data_in [11] $end
$var wire 1 u$ data_in [10] $end
$var wire 1 v$ data_in [9] $end
$var wire 1 w$ data_in [8] $end
$var wire 1 x$ data_in [7] $end
$var wire 1 y$ data_in [6] $end
$var wire 1 z$ data_in [5] $end
$var wire 1 {$ data_in [4] $end
$var wire 1 |$ data_in [3] $end
$var wire 1 }$ data_in [2] $end
$var wire 1 ~$ data_in [1] $end
$var wire 1 !% data_in [0] $end
$var wire 1 x# addr [15] $end
$var wire 1 y# addr [14] $end
$var wire 1 z# addr [13] $end
$var wire 1 {# addr [12] $end
$var wire 1 |# addr [11] $end
$var wire 1 }# addr [10] $end
$var wire 1 ~# addr [9] $end
$var wire 1 !$ addr [8] $end
$var wire 1 "$ addr [7] $end
$var wire 1 #$ addr [6] $end
$var wire 1 $$ addr [5] $end
$var wire 1 %$ addr [4] $end
$var wire 1 &$ addr [3] $end
$var wire 1 '$ addr [2] $end
$var wire 1 ($ addr [1] $end
$var wire 1 )$ addr [0] $end
$var wire 1 "% enable $end
$var wire 1 #% wr $end
$var wire 1 $% createdump $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 %% loaded $end
$var reg 17 &% largest [16:0] $end
$var integer 32 '% mcd $end
$var integer 32 (% i $end
$upscope $end

$scope module pc_add2 $end
$var parameter 32 )% N $end
$var wire 1 ;$ sum [15] $end
$var wire 1 <$ sum [14] $end
$var wire 1 =$ sum [13] $end
$var wire 1 >$ sum [12] $end
$var wire 1 ?$ sum [11] $end
$var wire 1 @$ sum [10] $end
$var wire 1 A$ sum [9] $end
$var wire 1 B$ sum [8] $end
$var wire 1 C$ sum [7] $end
$var wire 1 D$ sum [6] $end
$var wire 1 E$ sum [5] $end
$var wire 1 F$ sum [4] $end
$var wire 1 G$ sum [3] $end
$var wire 1 H$ sum [2] $end
$var wire 1 I$ sum [1] $end
$var wire 1 J$ sum [0] $end
$var wire 1 K$ c_out $end
$var wire 1 x# a [15] $end
$var wire 1 y# a [14] $end
$var wire 1 z# a [13] $end
$var wire 1 {# a [12] $end
$var wire 1 |# a [11] $end
$var wire 1 }# a [10] $end
$var wire 1 ~# a [9] $end
$var wire 1 !$ a [8] $end
$var wire 1 "$ a [7] $end
$var wire 1 #$ a [6] $end
$var wire 1 $$ a [5] $end
$var wire 1 %$ a [4] $end
$var wire 1 &$ a [3] $end
$var wire 1 '$ a [2] $end
$var wire 1 ($ a [1] $end
$var wire 1 )$ a [0] $end
$var wire 1 +$ b [15] $end
$var wire 1 ,$ b [14] $end
$var wire 1 -$ b [13] $end
$var wire 1 .$ b [12] $end
$var wire 1 /$ b [11] $end
$var wire 1 0$ b [10] $end
$var wire 1 1$ b [9] $end
$var wire 1 2$ b [8] $end
$var wire 1 3$ b [7] $end
$var wire 1 4$ b [6] $end
$var wire 1 5$ b [5] $end
$var wire 1 6$ b [4] $end
$var wire 1 7$ b [3] $end
$var wire 1 8$ b [2] $end
$var wire 1 9$ b [1] $end
$var wire 1 :$ b [0] $end
$var wire 1 *% c_in $end
$var wire 1 +% carries [2] $end
$var wire 1 ,% carries [1] $end
$var wire 1 -% carries [0] $end

$scope module cla[3] $end
$var parameter 32 .% N $end
$var wire 1 ;$ sum [3] $end
$var wire 1 <$ sum [2] $end
$var wire 1 =$ sum [1] $end
$var wire 1 >$ sum [0] $end
$var wire 1 K$ c_out $end
$var wire 1 x# a [3] $end
$var wire 1 y# a [2] $end
$var wire 1 z# a [1] $end
$var wire 1 {# a [0] $end
$var wire 1 +$ b [3] $end
$var wire 1 ,$ b [2] $end
$var wire 1 -$ b [1] $end
$var wire 1 .$ b [0] $end
$var wire 1 +% c_in $end
$var wire 1 /% p [3] $end
$var wire 1 0% p [2] $end
$var wire 1 1% p [1] $end
$var wire 1 2% p [0] $end
$var wire 1 3% ng [3] $end
$var wire 1 4% ng [2] $end
$var wire 1 5% ng [1] $end
$var wire 1 6% ng [0] $end
$var wire 1 7% carries [4] $end
$var wire 1 8% carries [3] $end
$var wire 1 9% carries [2] $end
$var wire 1 :% carries [1] $end
$var wire 1 ;% carries [0] $end
$var wire 1 <% cp [3] $end
$var wire 1 =% cp [2] $end
$var wire 1 >% cp [1] $end
$var wire 1 ?% cp [0] $end

$scope module xor_1[3] $end
$var wire 1 /% out $end
$var wire 1 x# in1 $end
$var wire 1 +$ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 0% out $end
$var wire 1 y# in1 $end
$var wire 1 ,$ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 1% out $end
$var wire 1 z# in1 $end
$var wire 1 -$ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 2% out $end
$var wire 1 {# in1 $end
$var wire 1 .$ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 3% out $end
$var wire 1 x# in1 $end
$var wire 1 +$ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 4% out $end
$var wire 1 y# in1 $end
$var wire 1 ,$ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 5% out $end
$var wire 1 z# in1 $end
$var wire 1 -$ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 6% out $end
$var wire 1 {# in1 $end
$var wire 1 .$ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 <% out $end
$var wire 1 /% in1 $end
$var wire 1 8% in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 =% out $end
$var wire 1 0% in1 $end
$var wire 1 9% in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 >% out $end
$var wire 1 1% in1 $end
$var wire 1 :% in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 ?% out $end
$var wire 1 2% in1 $end
$var wire 1 +% in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 K$ out $end
$var wire 1 <% in1 $end
$var wire 1 3% in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 8% out $end
$var wire 1 =% in1 $end
$var wire 1 4% in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 9% out $end
$var wire 1 >% in1 $end
$var wire 1 5% in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 :% out $end
$var wire 1 ?% in1 $end
$var wire 1 6% in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 ;$ s $end
$var wire 1 @% c_out $end
$var wire 1 x# a $end
$var wire 1 +$ b $end
$var wire 1 8% c_in $end
$var wire 1 A% AxorB $end
$var wire 1 B% CnandAB $end
$var wire 1 C% AnandB $end

$scope module xor_1 $end
$var wire 1 A% out $end
$var wire 1 x# in1 $end
$var wire 1 +$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 ;$ out $end
$var wire 1 A% in1 $end
$var wire 1 8% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 B% out $end
$var wire 1 A% in1 $end
$var wire 1 8% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 C% out $end
$var wire 1 x# in1 $end
$var wire 1 +$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 @% out $end
$var wire 1 C% in1 $end
$var wire 1 B% in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 <$ s $end
$var wire 1 D% c_out $end
$var wire 1 y# a $end
$var wire 1 ,$ b $end
$var wire 1 9% c_in $end
$var wire 1 E% AxorB $end
$var wire 1 F% CnandAB $end
$var wire 1 G% AnandB $end

$scope module xor_1 $end
$var wire 1 E% out $end
$var wire 1 y# in1 $end
$var wire 1 ,$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 <$ out $end
$var wire 1 E% in1 $end
$var wire 1 9% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 F% out $end
$var wire 1 E% in1 $end
$var wire 1 9% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 G% out $end
$var wire 1 y# in1 $end
$var wire 1 ,$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 D% out $end
$var wire 1 G% in1 $end
$var wire 1 F% in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 =$ s $end
$var wire 1 H% c_out $end
$var wire 1 z# a $end
$var wire 1 -$ b $end
$var wire 1 :% c_in $end
$var wire 1 I% AxorB $end
$var wire 1 J% CnandAB $end
$var wire 1 K% AnandB $end

$scope module xor_1 $end
$var wire 1 I% out $end
$var wire 1 z# in1 $end
$var wire 1 -$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 =$ out $end
$var wire 1 I% in1 $end
$var wire 1 :% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 J% out $end
$var wire 1 I% in1 $end
$var wire 1 :% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 K% out $end
$var wire 1 z# in1 $end
$var wire 1 -$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 H% out $end
$var wire 1 K% in1 $end
$var wire 1 J% in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 >$ s $end
$var wire 1 L% c_out $end
$var wire 1 {# a $end
$var wire 1 .$ b $end
$var wire 1 +% c_in $end
$var wire 1 M% AxorB $end
$var wire 1 N% CnandAB $end
$var wire 1 O% AnandB $end

$scope module xor_1 $end
$var wire 1 M% out $end
$var wire 1 {# in1 $end
$var wire 1 .$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 >$ out $end
$var wire 1 M% in1 $end
$var wire 1 +% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 N% out $end
$var wire 1 M% in1 $end
$var wire 1 +% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 O% out $end
$var wire 1 {# in1 $end
$var wire 1 .$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 L% out $end
$var wire 1 O% in1 $end
$var wire 1 N% in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[2] $end
$var parameter 32 P% N $end
$var wire 1 ?$ sum [3] $end
$var wire 1 @$ sum [2] $end
$var wire 1 A$ sum [1] $end
$var wire 1 B$ sum [0] $end
$var wire 1 +% c_out $end
$var wire 1 |# a [3] $end
$var wire 1 }# a [2] $end
$var wire 1 ~# a [1] $end
$var wire 1 !$ a [0] $end
$var wire 1 /$ b [3] $end
$var wire 1 0$ b [2] $end
$var wire 1 1$ b [1] $end
$var wire 1 2$ b [0] $end
$var wire 1 ,% c_in $end
$var wire 1 Q% p [3] $end
$var wire 1 R% p [2] $end
$var wire 1 S% p [1] $end
$var wire 1 T% p [0] $end
$var wire 1 U% ng [3] $end
$var wire 1 V% ng [2] $end
$var wire 1 W% ng [1] $end
$var wire 1 X% ng [0] $end
$var wire 1 Y% carries [4] $end
$var wire 1 Z% carries [3] $end
$var wire 1 [% carries [2] $end
$var wire 1 \% carries [1] $end
$var wire 1 ]% carries [0] $end
$var wire 1 ^% cp [3] $end
$var wire 1 _% cp [2] $end
$var wire 1 `% cp [1] $end
$var wire 1 a% cp [0] $end

$scope module xor_1[3] $end
$var wire 1 Q% out $end
$var wire 1 |# in1 $end
$var wire 1 /$ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 R% out $end
$var wire 1 }# in1 $end
$var wire 1 0$ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 S% out $end
$var wire 1 ~# in1 $end
$var wire 1 1$ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 T% out $end
$var wire 1 !$ in1 $end
$var wire 1 2$ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 U% out $end
$var wire 1 |# in1 $end
$var wire 1 /$ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 V% out $end
$var wire 1 }# in1 $end
$var wire 1 0$ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 W% out $end
$var wire 1 ~# in1 $end
$var wire 1 1$ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 X% out $end
$var wire 1 !$ in1 $end
$var wire 1 2$ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 ^% out $end
$var wire 1 Q% in1 $end
$var wire 1 Z% in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 _% out $end
$var wire 1 R% in1 $end
$var wire 1 [% in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 `% out $end
$var wire 1 S% in1 $end
$var wire 1 \% in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 a% out $end
$var wire 1 T% in1 $end
$var wire 1 ,% in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 +% out $end
$var wire 1 ^% in1 $end
$var wire 1 U% in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 Z% out $end
$var wire 1 _% in1 $end
$var wire 1 V% in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 [% out $end
$var wire 1 `% in1 $end
$var wire 1 W% in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 \% out $end
$var wire 1 a% in1 $end
$var wire 1 X% in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 ?$ s $end
$var wire 1 b% c_out $end
$var wire 1 |# a $end
$var wire 1 /$ b $end
$var wire 1 Z% c_in $end
$var wire 1 c% AxorB $end
$var wire 1 d% CnandAB $end
$var wire 1 e% AnandB $end

$scope module xor_1 $end
$var wire 1 c% out $end
$var wire 1 |# in1 $end
$var wire 1 /$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 ?$ out $end
$var wire 1 c% in1 $end
$var wire 1 Z% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 d% out $end
$var wire 1 c% in1 $end
$var wire 1 Z% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 e% out $end
$var wire 1 |# in1 $end
$var wire 1 /$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 b% out $end
$var wire 1 e% in1 $end
$var wire 1 d% in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 @$ s $end
$var wire 1 f% c_out $end
$var wire 1 }# a $end
$var wire 1 0$ b $end
$var wire 1 [% c_in $end
$var wire 1 g% AxorB $end
$var wire 1 h% CnandAB $end
$var wire 1 i% AnandB $end

$scope module xor_1 $end
$var wire 1 g% out $end
$var wire 1 }# in1 $end
$var wire 1 0$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 @$ out $end
$var wire 1 g% in1 $end
$var wire 1 [% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 h% out $end
$var wire 1 g% in1 $end
$var wire 1 [% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 i% out $end
$var wire 1 }# in1 $end
$var wire 1 0$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 f% out $end
$var wire 1 i% in1 $end
$var wire 1 h% in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 A$ s $end
$var wire 1 j% c_out $end
$var wire 1 ~# a $end
$var wire 1 1$ b $end
$var wire 1 \% c_in $end
$var wire 1 k% AxorB $end
$var wire 1 l% CnandAB $end
$var wire 1 m% AnandB $end

$scope module xor_1 $end
$var wire 1 k% out $end
$var wire 1 ~# in1 $end
$var wire 1 1$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 A$ out $end
$var wire 1 k% in1 $end
$var wire 1 \% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 l% out $end
$var wire 1 k% in1 $end
$var wire 1 \% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 m% out $end
$var wire 1 ~# in1 $end
$var wire 1 1$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 j% out $end
$var wire 1 m% in1 $end
$var wire 1 l% in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 B$ s $end
$var wire 1 n% c_out $end
$var wire 1 !$ a $end
$var wire 1 2$ b $end
$var wire 1 ,% c_in $end
$var wire 1 o% AxorB $end
$var wire 1 p% CnandAB $end
$var wire 1 q% AnandB $end

$scope module xor_1 $end
$var wire 1 o% out $end
$var wire 1 !$ in1 $end
$var wire 1 2$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 B$ out $end
$var wire 1 o% in1 $end
$var wire 1 ,% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 p% out $end
$var wire 1 o% in1 $end
$var wire 1 ,% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 q% out $end
$var wire 1 !$ in1 $end
$var wire 1 2$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 n% out $end
$var wire 1 q% in1 $end
$var wire 1 p% in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[1] $end
$var parameter 32 r% N $end
$var wire 1 C$ sum [3] $end
$var wire 1 D$ sum [2] $end
$var wire 1 E$ sum [1] $end
$var wire 1 F$ sum [0] $end
$var wire 1 ,% c_out $end
$var wire 1 "$ a [3] $end
$var wire 1 #$ a [2] $end
$var wire 1 $$ a [1] $end
$var wire 1 %$ a [0] $end
$var wire 1 3$ b [3] $end
$var wire 1 4$ b [2] $end
$var wire 1 5$ b [1] $end
$var wire 1 6$ b [0] $end
$var wire 1 -% c_in $end
$var wire 1 s% p [3] $end
$var wire 1 t% p [2] $end
$var wire 1 u% p [1] $end
$var wire 1 v% p [0] $end
$var wire 1 w% ng [3] $end
$var wire 1 x% ng [2] $end
$var wire 1 y% ng [1] $end
$var wire 1 z% ng [0] $end
$var wire 1 {% carries [4] $end
$var wire 1 |% carries [3] $end
$var wire 1 }% carries [2] $end
$var wire 1 ~% carries [1] $end
$var wire 1 !& carries [0] $end
$var wire 1 "& cp [3] $end
$var wire 1 #& cp [2] $end
$var wire 1 $& cp [1] $end
$var wire 1 %& cp [0] $end

$scope module xor_1[3] $end
$var wire 1 s% out $end
$var wire 1 "$ in1 $end
$var wire 1 3$ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 t% out $end
$var wire 1 #$ in1 $end
$var wire 1 4$ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 u% out $end
$var wire 1 $$ in1 $end
$var wire 1 5$ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 v% out $end
$var wire 1 %$ in1 $end
$var wire 1 6$ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 w% out $end
$var wire 1 "$ in1 $end
$var wire 1 3$ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 x% out $end
$var wire 1 #$ in1 $end
$var wire 1 4$ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 y% out $end
$var wire 1 $$ in1 $end
$var wire 1 5$ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 z% out $end
$var wire 1 %$ in1 $end
$var wire 1 6$ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 "& out $end
$var wire 1 s% in1 $end
$var wire 1 |% in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 #& out $end
$var wire 1 t% in1 $end
$var wire 1 }% in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 $& out $end
$var wire 1 u% in1 $end
$var wire 1 ~% in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 %& out $end
$var wire 1 v% in1 $end
$var wire 1 -% in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 ,% out $end
$var wire 1 "& in1 $end
$var wire 1 w% in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 |% out $end
$var wire 1 #& in1 $end
$var wire 1 x% in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 }% out $end
$var wire 1 $& in1 $end
$var wire 1 y% in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 ~% out $end
$var wire 1 %& in1 $end
$var wire 1 z% in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 C$ s $end
$var wire 1 && c_out $end
$var wire 1 "$ a $end
$var wire 1 3$ b $end
$var wire 1 |% c_in $end
$var wire 1 '& AxorB $end
$var wire 1 (& CnandAB $end
$var wire 1 )& AnandB $end

$scope module xor_1 $end
$var wire 1 '& out $end
$var wire 1 "$ in1 $end
$var wire 1 3$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 C$ out $end
$var wire 1 '& in1 $end
$var wire 1 |% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 (& out $end
$var wire 1 '& in1 $end
$var wire 1 |% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 )& out $end
$var wire 1 "$ in1 $end
$var wire 1 3$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 && out $end
$var wire 1 )& in1 $end
$var wire 1 (& in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 D$ s $end
$var wire 1 *& c_out $end
$var wire 1 #$ a $end
$var wire 1 4$ b $end
$var wire 1 }% c_in $end
$var wire 1 +& AxorB $end
$var wire 1 ,& CnandAB $end
$var wire 1 -& AnandB $end

$scope module xor_1 $end
$var wire 1 +& out $end
$var wire 1 #$ in1 $end
$var wire 1 4$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 D$ out $end
$var wire 1 +& in1 $end
$var wire 1 }% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 ,& out $end
$var wire 1 +& in1 $end
$var wire 1 }% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 -& out $end
$var wire 1 #$ in1 $end
$var wire 1 4$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 *& out $end
$var wire 1 -& in1 $end
$var wire 1 ,& in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 E$ s $end
$var wire 1 .& c_out $end
$var wire 1 $$ a $end
$var wire 1 5$ b $end
$var wire 1 ~% c_in $end
$var wire 1 /& AxorB $end
$var wire 1 0& CnandAB $end
$var wire 1 1& AnandB $end

$scope module xor_1 $end
$var wire 1 /& out $end
$var wire 1 $$ in1 $end
$var wire 1 5$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 E$ out $end
$var wire 1 /& in1 $end
$var wire 1 ~% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 0& out $end
$var wire 1 /& in1 $end
$var wire 1 ~% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 1& out $end
$var wire 1 $$ in1 $end
$var wire 1 5$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 .& out $end
$var wire 1 1& in1 $end
$var wire 1 0& in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 F$ s $end
$var wire 1 2& c_out $end
$var wire 1 %$ a $end
$var wire 1 6$ b $end
$var wire 1 -% c_in $end
$var wire 1 3& AxorB $end
$var wire 1 4& CnandAB $end
$var wire 1 5& AnandB $end

$scope module xor_1 $end
$var wire 1 3& out $end
$var wire 1 %$ in1 $end
$var wire 1 6$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 F$ out $end
$var wire 1 3& in1 $end
$var wire 1 -% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 4& out $end
$var wire 1 3& in1 $end
$var wire 1 -% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 5& out $end
$var wire 1 %$ in1 $end
$var wire 1 6$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 2& out $end
$var wire 1 5& in1 $end
$var wire 1 4& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[0] $end
$var parameter 32 6& N $end
$var wire 1 G$ sum [3] $end
$var wire 1 H$ sum [2] $end
$var wire 1 I$ sum [1] $end
$var wire 1 J$ sum [0] $end
$var wire 1 -% c_out $end
$var wire 1 &$ a [3] $end
$var wire 1 '$ a [2] $end
$var wire 1 ($ a [1] $end
$var wire 1 )$ a [0] $end
$var wire 1 7$ b [3] $end
$var wire 1 8$ b [2] $end
$var wire 1 9$ b [1] $end
$var wire 1 :$ b [0] $end
$var wire 1 *% c_in $end
$var wire 1 7& p [3] $end
$var wire 1 8& p [2] $end
$var wire 1 9& p [1] $end
$var wire 1 :& p [0] $end
$var wire 1 ;& ng [3] $end
$var wire 1 <& ng [2] $end
$var wire 1 =& ng [1] $end
$var wire 1 >& ng [0] $end
$var wire 1 ?& carries [4] $end
$var wire 1 @& carries [3] $end
$var wire 1 A& carries [2] $end
$var wire 1 B& carries [1] $end
$var wire 1 C& carries [0] $end
$var wire 1 D& cp [3] $end
$var wire 1 E& cp [2] $end
$var wire 1 F& cp [1] $end
$var wire 1 G& cp [0] $end

$scope module xor_1[3] $end
$var wire 1 7& out $end
$var wire 1 &$ in1 $end
$var wire 1 7$ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 8& out $end
$var wire 1 '$ in1 $end
$var wire 1 8$ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 9& out $end
$var wire 1 ($ in1 $end
$var wire 1 9$ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 :& out $end
$var wire 1 )$ in1 $end
$var wire 1 :$ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 ;& out $end
$var wire 1 &$ in1 $end
$var wire 1 7$ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 <& out $end
$var wire 1 '$ in1 $end
$var wire 1 8$ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 =& out $end
$var wire 1 ($ in1 $end
$var wire 1 9$ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 >& out $end
$var wire 1 )$ in1 $end
$var wire 1 :$ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 D& out $end
$var wire 1 7& in1 $end
$var wire 1 @& in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 E& out $end
$var wire 1 8& in1 $end
$var wire 1 A& in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 F& out $end
$var wire 1 9& in1 $end
$var wire 1 B& in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 G& out $end
$var wire 1 :& in1 $end
$var wire 1 *% in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 -% out $end
$var wire 1 D& in1 $end
$var wire 1 ;& in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 @& out $end
$var wire 1 E& in1 $end
$var wire 1 <& in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 A& out $end
$var wire 1 F& in1 $end
$var wire 1 =& in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 B& out $end
$var wire 1 G& in1 $end
$var wire 1 >& in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 G$ s $end
$var wire 1 H& c_out $end
$var wire 1 &$ a $end
$var wire 1 7$ b $end
$var wire 1 @& c_in $end
$var wire 1 I& AxorB $end
$var wire 1 J& CnandAB $end
$var wire 1 K& AnandB $end

$scope module xor_1 $end
$var wire 1 I& out $end
$var wire 1 &$ in1 $end
$var wire 1 7$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 G$ out $end
$var wire 1 I& in1 $end
$var wire 1 @& in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 J& out $end
$var wire 1 I& in1 $end
$var wire 1 @& in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 K& out $end
$var wire 1 &$ in1 $end
$var wire 1 7$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 H& out $end
$var wire 1 K& in1 $end
$var wire 1 J& in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 H$ s $end
$var wire 1 L& c_out $end
$var wire 1 '$ a $end
$var wire 1 8$ b $end
$var wire 1 A& c_in $end
$var wire 1 M& AxorB $end
$var wire 1 N& CnandAB $end
$var wire 1 O& AnandB $end

$scope module xor_1 $end
$var wire 1 M& out $end
$var wire 1 '$ in1 $end
$var wire 1 8$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 H$ out $end
$var wire 1 M& in1 $end
$var wire 1 A& in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 N& out $end
$var wire 1 M& in1 $end
$var wire 1 A& in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 O& out $end
$var wire 1 '$ in1 $end
$var wire 1 8$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 L& out $end
$var wire 1 O& in1 $end
$var wire 1 N& in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 I$ s $end
$var wire 1 P& c_out $end
$var wire 1 ($ a $end
$var wire 1 9$ b $end
$var wire 1 B& c_in $end
$var wire 1 Q& AxorB $end
$var wire 1 R& CnandAB $end
$var wire 1 S& AnandB $end

$scope module xor_1 $end
$var wire 1 Q& out $end
$var wire 1 ($ in1 $end
$var wire 1 9$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 I$ out $end
$var wire 1 Q& in1 $end
$var wire 1 B& in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 R& out $end
$var wire 1 Q& in1 $end
$var wire 1 B& in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 S& out $end
$var wire 1 ($ in1 $end
$var wire 1 9$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 P& out $end
$var wire 1 S& in1 $end
$var wire 1 R& in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 J$ s $end
$var wire 1 T& c_out $end
$var wire 1 )$ a $end
$var wire 1 :$ b $end
$var wire 1 *% c_in $end
$var wire 1 U& AxorB $end
$var wire 1 V& CnandAB $end
$var wire 1 W& AnandB $end

$scope module xor_1 $end
$var wire 1 U& out $end
$var wire 1 )$ in1 $end
$var wire 1 :$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 J$ out $end
$var wire 1 U& in1 $end
$var wire 1 *% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 V& out $end
$var wire 1 U& in1 $end
$var wire 1 *% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 W& out $end
$var wire 1 )$ in1 $end
$var wire 1 :$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 T& out $end
$var wire 1 W& in1 $end
$var wire 1 V& in2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module decode0 $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 C! instr [15] $end
$var wire 1 D! instr [14] $end
$var wire 1 E! instr [13] $end
$var wire 1 F! instr [12] $end
$var wire 1 G! instr [11] $end
$var wire 1 H! instr [10] $end
$var wire 1 I! instr [9] $end
$var wire 1 J! instr [8] $end
$var wire 1 K! instr [7] $end
$var wire 1 L! instr [6] $end
$var wire 1 M! instr [5] $end
$var wire 1 N! instr [4] $end
$var wire 1 O! instr [3] $end
$var wire 1 P! instr [2] $end
$var wire 1 Q! instr [1] $end
$var wire 1 R! instr [0] $end
$var wire 1 #" WB [15] $end
$var wire 1 $" WB [14] $end
$var wire 1 %" WB [13] $end
$var wire 1 &" WB [12] $end
$var wire 1 '" WB [11] $end
$var wire 1 (" WB [10] $end
$var wire 1 )" WB [9] $end
$var wire 1 *" WB [8] $end
$var wire 1 +" WB [7] $end
$var wire 1 ," WB [6] $end
$var wire 1 -" WB [5] $end
$var wire 1 ." WB [4] $end
$var wire 1 /" WB [3] $end
$var wire 1 0" WB [2] $end
$var wire 1 1" WB [1] $end
$var wire 1 2" WB [0] $end
$var wire 1 S! PC [15] $end
$var wire 1 T! PC [14] $end
$var wire 1 U! PC [13] $end
$var wire 1 V! PC [12] $end
$var wire 1 W! PC [11] $end
$var wire 1 X! PC [10] $end
$var wire 1 Y! PC [9] $end
$var wire 1 Z! PC [8] $end
$var wire 1 [! PC [7] $end
$var wire 1 \! PC [6] $end
$var wire 1 ]! PC [5] $end
$var wire 1 ^! PC [4] $end
$var wire 1 _! PC [3] $end
$var wire 1 `! PC [2] $end
$var wire 1 a! PC [1] $end
$var wire 1 b! PC [0] $end
$var wire 1 d# RegDst [1] $end
$var wire 1 e# RegDst [0] $end
$var wire 1 W# ZeroExt $end
$var wire 1 V# RegWrt $end
$var wire 1 s! ALUOpr [5] $end
$var wire 1 t! ALUOpr [4] $end
$var wire 1 u! ALUOpr [3] $end
$var wire 1 v! ALUOpr [2] $end
$var wire 1 w! ALUOpr [1] $end
$var wire 1 x! ALUOpr [0] $end
$var wire 1 y! Oper [3] $end
$var wire 1 z! Oper [2] $end
$var wire 1 {! Oper [1] $end
$var wire 1 |! Oper [0] $end
$var wire 1 | err $end
$var wire 1 3" RSData [15] $end
$var wire 1 4" RSData [14] $end
$var wire 1 5" RSData [13] $end
$var wire 1 6" RSData [12] $end
$var wire 1 7" RSData [11] $end
$var wire 1 8" RSData [10] $end
$var wire 1 9" RSData [9] $end
$var wire 1 :" RSData [8] $end
$var wire 1 ;" RSData [7] $end
$var wire 1 <" RSData [6] $end
$var wire 1 =" RSData [5] $end
$var wire 1 >" RSData [4] $end
$var wire 1 ?" RSData [3] $end
$var wire 1 @" RSData [2] $end
$var wire 1 A" RSData [1] $end
$var wire 1 B" RSData [0] $end
$var wire 1 C" RTData [15] $end
$var wire 1 D" RTData [14] $end
$var wire 1 E" RTData [13] $end
$var wire 1 F" RTData [12] $end
$var wire 1 G" RTData [11] $end
$var wire 1 H" RTData [10] $end
$var wire 1 I" RTData [9] $end
$var wire 1 J" RTData [8] $end
$var wire 1 K" RTData [7] $end
$var wire 1 L" RTData [6] $end
$var wire 1 M" RTData [5] $end
$var wire 1 N" RTData [4] $end
$var wire 1 O" RTData [3] $end
$var wire 1 P" RTData [2] $end
$var wire 1 Q" RTData [1] $end
$var wire 1 R" RTData [0] $end
$var wire 1 s" Imm5 [15] $end
$var wire 1 t" Imm5 [14] $end
$var wire 1 u" Imm5 [13] $end
$var wire 1 v" Imm5 [12] $end
$var wire 1 w" Imm5 [11] $end
$var wire 1 x" Imm5 [10] $end
$var wire 1 y" Imm5 [9] $end
$var wire 1 z" Imm5 [8] $end
$var wire 1 {" Imm5 [7] $end
$var wire 1 |" Imm5 [6] $end
$var wire 1 }" Imm5 [5] $end
$var wire 1 ~" Imm5 [4] $end
$var wire 1 !# Imm5 [3] $end
$var wire 1 "# Imm5 [2] $end
$var wire 1 ## Imm5 [1] $end
$var wire 1 $# Imm5 [0] $end
$var wire 1 %# Imm8 [15] $end
$var wire 1 &# Imm8 [14] $end
$var wire 1 '# Imm8 [13] $end
$var wire 1 (# Imm8 [12] $end
$var wire 1 )# Imm8 [11] $end
$var wire 1 *# Imm8 [10] $end
$var wire 1 +# Imm8 [9] $end
$var wire 1 ,# Imm8 [8] $end
$var wire 1 -# Imm8 [7] $end
$var wire 1 .# Imm8 [6] $end
$var wire 1 /# Imm8 [5] $end
$var wire 1 0# Imm8 [4] $end
$var wire 1 1# Imm8 [3] $end
$var wire 1 2# Imm8 [2] $end
$var wire 1 3# Imm8 [1] $end
$var wire 1 4# Imm8 [0] $end
$var wire 1 5# sImm8 [15] $end
$var wire 1 6# sImm8 [14] $end
$var wire 1 7# sImm8 [13] $end
$var wire 1 8# sImm8 [12] $end
$var wire 1 9# sImm8 [11] $end
$var wire 1 :# sImm8 [10] $end
$var wire 1 ;# sImm8 [9] $end
$var wire 1 <# sImm8 [8] $end
$var wire 1 =# sImm8 [7] $end
$var wire 1 ># sImm8 [6] $end
$var wire 1 ?# sImm8 [5] $end
$var wire 1 @# sImm8 [4] $end
$var wire 1 A# sImm8 [3] $end
$var wire 1 B# sImm8 [2] $end
$var wire 1 C# sImm8 [1] $end
$var wire 1 D# sImm8 [0] $end
$var wire 1 E# sImm11 [15] $end
$var wire 1 F# sImm11 [14] $end
$var wire 1 G# sImm11 [13] $end
$var wire 1 H# sImm11 [12] $end
$var wire 1 I# sImm11 [11] $end
$var wire 1 J# sImm11 [10] $end
$var wire 1 K# sImm11 [9] $end
$var wire 1 L# sImm11 [8] $end
$var wire 1 M# sImm11 [7] $end
$var wire 1 N# sImm11 [6] $end
$var wire 1 O# sImm11 [5] $end
$var wire 1 P# sImm11 [4] $end
$var wire 1 Q# sImm11 [3] $end
$var wire 1 R# sImm11 [2] $end
$var wire 1 S# sImm11 [1] $end
$var wire 1 T# sImm11 [0] $end
$var wire 1 c! PC_Next [15] $end
$var wire 1 d! PC_Next [14] $end
$var wire 1 e! PC_Next [13] $end
$var wire 1 f! PC_Next [12] $end
$var wire 1 g! PC_Next [11] $end
$var wire 1 h! PC_Next [10] $end
$var wire 1 i! PC_Next [9] $end
$var wire 1 j! PC_Next [8] $end
$var wire 1 k! PC_Next [7] $end
$var wire 1 l! PC_Next [6] $end
$var wire 1 m! PC_Next [5] $end
$var wire 1 n! PC_Next [4] $end
$var wire 1 o! PC_Next [3] $end
$var wire 1 p! PC_Next [2] $end
$var wire 1 q! PC_Next [1] $end
$var wire 1 r! PC_Next [0] $end
$var wire 1 Y# invA $end
$var wire 1 Z# invB $end
$var wire 1 \# Cin $end
$var wire 1 f# RD [2] $end
$var wire 1 g# RD [1] $end
$var wire 1 h# RD [0] $end

$scope module regFile0 $end
$var parameter 32 X& BIT_WIDTH $end
$var parameter 32 Y& BIT_SIZE $end
$var parameter 32 Z& REG_NUMS $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 H! read1RegSel [2] $end
$var wire 1 I! read1RegSel [1] $end
$var wire 1 J! read1RegSel [0] $end
$var wire 1 K! read2RegSel [2] $end
$var wire 1 L! read2RegSel [1] $end
$var wire 1 M! read2RegSel [0] $end
$var wire 1 f# writeRegSel [2] $end
$var wire 1 g# writeRegSel [1] $end
$var wire 1 h# writeRegSel [0] $end
$var wire 1 #" writeData [15] $end
$var wire 1 $" writeData [14] $end
$var wire 1 %" writeData [13] $end
$var wire 1 &" writeData [12] $end
$var wire 1 '" writeData [11] $end
$var wire 1 (" writeData [10] $end
$var wire 1 )" writeData [9] $end
$var wire 1 *" writeData [8] $end
$var wire 1 +" writeData [7] $end
$var wire 1 ," writeData [6] $end
$var wire 1 -" writeData [5] $end
$var wire 1 ." writeData [4] $end
$var wire 1 /" writeData [3] $end
$var wire 1 0" writeData [2] $end
$var wire 1 1" writeData [1] $end
$var wire 1 2" writeData [0] $end
$var wire 1 V# writeEn $end
$var wire 1 3" read1Data [15] $end
$var wire 1 4" read1Data [14] $end
$var wire 1 5" read1Data [13] $end
$var wire 1 6" read1Data [12] $end
$var wire 1 7" read1Data [11] $end
$var wire 1 8" read1Data [10] $end
$var wire 1 9" read1Data [9] $end
$var wire 1 :" read1Data [8] $end
$var wire 1 ;" read1Data [7] $end
$var wire 1 <" read1Data [6] $end
$var wire 1 =" read1Data [5] $end
$var wire 1 >" read1Data [4] $end
$var wire 1 ?" read1Data [3] $end
$var wire 1 @" read1Data [2] $end
$var wire 1 A" read1Data [1] $end
$var wire 1 B" read1Data [0] $end
$var wire 1 C" read2Data [15] $end
$var wire 1 D" read2Data [14] $end
$var wire 1 E" read2Data [13] $end
$var wire 1 F" read2Data [12] $end
$var wire 1 G" read2Data [11] $end
$var wire 1 H" read2Data [10] $end
$var wire 1 I" read2Data [9] $end
$var wire 1 J" read2Data [8] $end
$var wire 1 K" read2Data [7] $end
$var wire 1 L" read2Data [6] $end
$var wire 1 M" read2Data [5] $end
$var wire 1 N" read2Data [4] $end
$var wire 1 O" read2Data [3] $end
$var wire 1 P" read2Data [2] $end
$var wire 1 Q" read2Data [1] $end
$var wire 1 R" read2Data [0] $end
$var wire 1 | err $end
$var wire 1 [& r0 [15] $end
$var wire 1 \& r0 [14] $end
$var wire 1 ]& r0 [13] $end
$var wire 1 ^& r0 [12] $end
$var wire 1 _& r0 [11] $end
$var wire 1 `& r0 [10] $end
$var wire 1 a& r0 [9] $end
$var wire 1 b& r0 [8] $end
$var wire 1 c& r0 [7] $end
$var wire 1 d& r0 [6] $end
$var wire 1 e& r0 [5] $end
$var wire 1 f& r0 [4] $end
$var wire 1 g& r0 [3] $end
$var wire 1 h& r0 [2] $end
$var wire 1 i& r0 [1] $end
$var wire 1 j& r0 [0] $end
$var wire 1 k& r1 [15] $end
$var wire 1 l& r1 [14] $end
$var wire 1 m& r1 [13] $end
$var wire 1 n& r1 [12] $end
$var wire 1 o& r1 [11] $end
$var wire 1 p& r1 [10] $end
$var wire 1 q& r1 [9] $end
$var wire 1 r& r1 [8] $end
$var wire 1 s& r1 [7] $end
$var wire 1 t& r1 [6] $end
$var wire 1 u& r1 [5] $end
$var wire 1 v& r1 [4] $end
$var wire 1 w& r1 [3] $end
$var wire 1 x& r1 [2] $end
$var wire 1 y& r1 [1] $end
$var wire 1 z& r1 [0] $end
$var wire 1 {& r2 [15] $end
$var wire 1 |& r2 [14] $end
$var wire 1 }& r2 [13] $end
$var wire 1 ~& r2 [12] $end
$var wire 1 !' r2 [11] $end
$var wire 1 "' r2 [10] $end
$var wire 1 #' r2 [9] $end
$var wire 1 $' r2 [8] $end
$var wire 1 %' r2 [7] $end
$var wire 1 &' r2 [6] $end
$var wire 1 '' r2 [5] $end
$var wire 1 (' r2 [4] $end
$var wire 1 )' r2 [3] $end
$var wire 1 *' r2 [2] $end
$var wire 1 +' r2 [1] $end
$var wire 1 ,' r2 [0] $end
$var wire 1 -' r3 [15] $end
$var wire 1 .' r3 [14] $end
$var wire 1 /' r3 [13] $end
$var wire 1 0' r3 [12] $end
$var wire 1 1' r3 [11] $end
$var wire 1 2' r3 [10] $end
$var wire 1 3' r3 [9] $end
$var wire 1 4' r3 [8] $end
$var wire 1 5' r3 [7] $end
$var wire 1 6' r3 [6] $end
$var wire 1 7' r3 [5] $end
$var wire 1 8' r3 [4] $end
$var wire 1 9' r3 [3] $end
$var wire 1 :' r3 [2] $end
$var wire 1 ;' r3 [1] $end
$var wire 1 <' r3 [0] $end
$var wire 1 =' r4 [15] $end
$var wire 1 >' r4 [14] $end
$var wire 1 ?' r4 [13] $end
$var wire 1 @' r4 [12] $end
$var wire 1 A' r4 [11] $end
$var wire 1 B' r4 [10] $end
$var wire 1 C' r4 [9] $end
$var wire 1 D' r4 [8] $end
$var wire 1 E' r4 [7] $end
$var wire 1 F' r4 [6] $end
$var wire 1 G' r4 [5] $end
$var wire 1 H' r4 [4] $end
$var wire 1 I' r4 [3] $end
$var wire 1 J' r4 [2] $end
$var wire 1 K' r4 [1] $end
$var wire 1 L' r4 [0] $end
$var wire 1 M' r5 [15] $end
$var wire 1 N' r5 [14] $end
$var wire 1 O' r5 [13] $end
$var wire 1 P' r5 [12] $end
$var wire 1 Q' r5 [11] $end
$var wire 1 R' r5 [10] $end
$var wire 1 S' r5 [9] $end
$var wire 1 T' r5 [8] $end
$var wire 1 U' r5 [7] $end
$var wire 1 V' r5 [6] $end
$var wire 1 W' r5 [5] $end
$var wire 1 X' r5 [4] $end
$var wire 1 Y' r5 [3] $end
$var wire 1 Z' r5 [2] $end
$var wire 1 [' r5 [1] $end
$var wire 1 \' r5 [0] $end
$var wire 1 ]' r6 [15] $end
$var wire 1 ^' r6 [14] $end
$var wire 1 _' r6 [13] $end
$var wire 1 `' r6 [12] $end
$var wire 1 a' r6 [11] $end
$var wire 1 b' r6 [10] $end
$var wire 1 c' r6 [9] $end
$var wire 1 d' r6 [8] $end
$var wire 1 e' r6 [7] $end
$var wire 1 f' r6 [6] $end
$var wire 1 g' r6 [5] $end
$var wire 1 h' r6 [4] $end
$var wire 1 i' r6 [3] $end
$var wire 1 j' r6 [2] $end
$var wire 1 k' r6 [1] $end
$var wire 1 l' r6 [0] $end
$var wire 1 m' r7 [15] $end
$var wire 1 n' r7 [14] $end
$var wire 1 o' r7 [13] $end
$var wire 1 p' r7 [12] $end
$var wire 1 q' r7 [11] $end
$var wire 1 r' r7 [10] $end
$var wire 1 s' r7 [9] $end
$var wire 1 t' r7 [8] $end
$var wire 1 u' r7 [7] $end
$var wire 1 v' r7 [6] $end
$var wire 1 w' r7 [5] $end
$var wire 1 x' r7 [4] $end
$var wire 1 y' r7 [3] $end
$var wire 1 z' r7 [2] $end
$var wire 1 {' r7 [1] $end
$var wire 1 |' r7 [0] $end
$var wire 1 }' we [15] $end
$var wire 1 ~' we [14] $end
$var wire 1 !( we [13] $end
$var wire 1 "( we [12] $end
$var wire 1 #( we [11] $end
$var wire 1 $( we [10] $end
$var wire 1 %( we [9] $end
$var wire 1 &( we [8] $end
$var wire 1 '( we [7] $end
$var wire 1 (( we [6] $end
$var wire 1 )( we [5] $end
$var wire 1 *( we [4] $end
$var wire 1 +( we [3] $end
$var wire 1 ,( we [2] $end
$var wire 1 -( we [1] $end
$var wire 1 .( we [0] $end

$scope module s1 $end
$var parameter 32 /( OPERAND_WIDTH $end
$var parameter 32 0( SHAMT_WIDTH $end
$var parameter 32 1( NUM_OPERATIONS $end
$var wire 1 2( In [15] $end
$var wire 1 3( In [14] $end
$var wire 1 4( In [13] $end
$var wire 1 5( In [12] $end
$var wire 1 6( In [11] $end
$var wire 1 7( In [10] $end
$var wire 1 8( In [9] $end
$var wire 1 9( In [8] $end
$var wire 1 :( In [7] $end
$var wire 1 ;( In [6] $end
$var wire 1 <( In [5] $end
$var wire 1 =( In [4] $end
$var wire 1 >( In [3] $end
$var wire 1 ?( In [2] $end
$var wire 1 @( In [1] $end
$var wire 1 V# In [0] $end
$var wire 1 A( ShAmt [3] $end
$var wire 1 f# ShAmt [2] $end
$var wire 1 g# ShAmt [1] $end
$var wire 1 h# ShAmt [0] $end
$var wire 1 B( Oper [1] $end
$var wire 1 C( Oper [0] $end
$var wire 1 }' Out [15] $end
$var wire 1 ~' Out [14] $end
$var wire 1 !( Out [13] $end
$var wire 1 "( Out [12] $end
$var wire 1 #( Out [11] $end
$var wire 1 $( Out [10] $end
$var wire 1 %( Out [9] $end
$var wire 1 &( Out [8] $end
$var wire 1 '( Out [7] $end
$var wire 1 (( Out [6] $end
$var wire 1 )( Out [5] $end
$var wire 1 *( Out [4] $end
$var wire 1 +( Out [3] $end
$var wire 1 ,( Out [2] $end
$var wire 1 -( Out [1] $end
$var wire 1 .( Out [0] $end
$var wire 1 D( s0 [15] $end
$var wire 1 E( s0 [14] $end
$var wire 1 F( s0 [13] $end
$var wire 1 G( s0 [12] $end
$var wire 1 H( s0 [11] $end
$var wire 1 I( s0 [10] $end
$var wire 1 J( s0 [9] $end
$var wire 1 K( s0 [8] $end
$var wire 1 L( s0 [7] $end
$var wire 1 M( s0 [6] $end
$var wire 1 N( s0 [5] $end
$var wire 1 O( s0 [4] $end
$var wire 1 P( s0 [3] $end
$var wire 1 Q( s0 [2] $end
$var wire 1 R( s0 [1] $end
$var wire 1 S( s0 [0] $end
$var wire 1 T( s1 [15] $end
$var wire 1 U( s1 [14] $end
$var wire 1 V( s1 [13] $end
$var wire 1 W( s1 [12] $end
$var wire 1 X( s1 [11] $end
$var wire 1 Y( s1 [10] $end
$var wire 1 Z( s1 [9] $end
$var wire 1 [( s1 [8] $end
$var wire 1 \( s1 [7] $end
$var wire 1 ]( s1 [6] $end
$var wire 1 ^( s1 [5] $end
$var wire 1 _( s1 [4] $end
$var wire 1 `( s1 [3] $end
$var wire 1 a( s1 [2] $end
$var wire 1 b( s1 [1] $end
$var wire 1 c( s1 [0] $end
$var wire 1 d( s2 [15] $end
$var wire 1 e( s2 [14] $end
$var wire 1 f( s2 [13] $end
$var wire 1 g( s2 [12] $end
$var wire 1 h( s2 [11] $end
$var wire 1 i( s2 [10] $end
$var wire 1 j( s2 [9] $end
$var wire 1 k( s2 [8] $end
$var wire 1 l( s2 [7] $end
$var wire 1 m( s2 [6] $end
$var wire 1 n( s2 [5] $end
$var wire 1 o( s2 [4] $end
$var wire 1 p( s2 [3] $end
$var wire 1 q( s2 [2] $end
$var wire 1 r( s2 [1] $end
$var wire 1 s( s2 [0] $end
$var wire 1 t( s3 [15] $end
$var wire 1 u( s3 [14] $end
$var wire 1 v( s3 [13] $end
$var wire 1 w( s3 [12] $end
$var wire 1 x( s3 [11] $end
$var wire 1 y( s3 [10] $end
$var wire 1 z( s3 [9] $end
$var wire 1 {( s3 [8] $end
$var wire 1 |( s3 [7] $end
$var wire 1 }( s3 [6] $end
$var wire 1 ~( s3 [5] $end
$var wire 1 !) s3 [4] $end
$var wire 1 ") s3 [3] $end
$var wire 1 #) s3 [2] $end
$var wire 1 $) s3 [1] $end
$var wire 1 %) s3 [0] $end
$var wire 1 &) temp_out_sh0 [15] $end
$var wire 1 ') temp_out_sh0 [14] $end
$var wire 1 () temp_out_sh0 [13] $end
$var wire 1 )) temp_out_sh0 [12] $end
$var wire 1 *) temp_out_sh0 [11] $end
$var wire 1 +) temp_out_sh0 [10] $end
$var wire 1 ,) temp_out_sh0 [9] $end
$var wire 1 -) temp_out_sh0 [8] $end
$var wire 1 .) temp_out_sh0 [7] $end
$var wire 1 /) temp_out_sh0 [6] $end
$var wire 1 0) temp_out_sh0 [5] $end
$var wire 1 1) temp_out_sh0 [4] $end
$var wire 1 2) temp_out_sh0 [3] $end
$var wire 1 3) temp_out_sh0 [2] $end
$var wire 1 4) temp_out_sh0 [1] $end
$var wire 1 5) temp_out_sh0 [0] $end
$var wire 1 6) temp_out_sh1 [15] $end
$var wire 1 7) temp_out_sh1 [14] $end
$var wire 1 8) temp_out_sh1 [13] $end
$var wire 1 9) temp_out_sh1 [12] $end
$var wire 1 :) temp_out_sh1 [11] $end
$var wire 1 ;) temp_out_sh1 [10] $end
$var wire 1 <) temp_out_sh1 [9] $end
$var wire 1 =) temp_out_sh1 [8] $end
$var wire 1 >) temp_out_sh1 [7] $end
$var wire 1 ?) temp_out_sh1 [6] $end
$var wire 1 @) temp_out_sh1 [5] $end
$var wire 1 A) temp_out_sh1 [4] $end
$var wire 1 B) temp_out_sh1 [3] $end
$var wire 1 C) temp_out_sh1 [2] $end
$var wire 1 D) temp_out_sh1 [1] $end
$var wire 1 E) temp_out_sh1 [0] $end
$var wire 1 F) temp_out_sh2 [15] $end
$var wire 1 G) temp_out_sh2 [14] $end
$var wire 1 H) temp_out_sh2 [13] $end
$var wire 1 I) temp_out_sh2 [12] $end
$var wire 1 J) temp_out_sh2 [11] $end
$var wire 1 K) temp_out_sh2 [10] $end
$var wire 1 L) temp_out_sh2 [9] $end
$var wire 1 M) temp_out_sh2 [8] $end
$var wire 1 N) temp_out_sh2 [7] $end
$var wire 1 O) temp_out_sh2 [6] $end
$var wire 1 P) temp_out_sh2 [5] $end
$var wire 1 Q) temp_out_sh2 [4] $end
$var wire 1 R) temp_out_sh2 [3] $end
$var wire 1 S) temp_out_sh2 [2] $end
$var wire 1 T) temp_out_sh2 [1] $end
$var wire 1 U) temp_out_sh2 [0] $end
$var wire 1 V) temp_out_sh3 [15] $end
$var wire 1 W) temp_out_sh3 [14] $end
$var wire 1 X) temp_out_sh3 [13] $end
$var wire 1 Y) temp_out_sh3 [12] $end
$var wire 1 Z) temp_out_sh3 [11] $end
$var wire 1 [) temp_out_sh3 [10] $end
$var wire 1 \) temp_out_sh3 [9] $end
$var wire 1 ]) temp_out_sh3 [8] $end
$var wire 1 ^) temp_out_sh3 [7] $end
$var wire 1 _) temp_out_sh3 [6] $end
$var wire 1 `) temp_out_sh3 [5] $end
$var wire 1 a) temp_out_sh3 [4] $end
$var wire 1 b) temp_out_sh3 [3] $end
$var wire 1 c) temp_out_sh3 [2] $end
$var wire 1 d) temp_out_sh3 [1] $end
$var wire 1 e) temp_out_sh3 [0] $end

$scope module bs0 $end
$var wire 1 2( in [15] $end
$var wire 1 3( in [14] $end
$var wire 1 4( in [13] $end
$var wire 1 5( in [12] $end
$var wire 1 6( in [11] $end
$var wire 1 7( in [10] $end
$var wire 1 8( in [9] $end
$var wire 1 9( in [8] $end
$var wire 1 :( in [7] $end
$var wire 1 ;( in [6] $end
$var wire 1 <( in [5] $end
$var wire 1 =( in [4] $end
$var wire 1 >( in [3] $end
$var wire 1 ?( in [2] $end
$var wire 1 @( in [1] $end
$var wire 1 V# in [0] $end
$var wire 1 B( oper [1] $end
$var wire 1 C( oper [0] $end
$var wire 1 &) out [15] $end
$var wire 1 ') out [14] $end
$var wire 1 () out [13] $end
$var wire 1 )) out [12] $end
$var wire 1 *) out [11] $end
$var wire 1 +) out [10] $end
$var wire 1 ,) out [9] $end
$var wire 1 -) out [8] $end
$var wire 1 .) out [7] $end
$var wire 1 /) out [6] $end
$var wire 1 0) out [5] $end
$var wire 1 1) out [4] $end
$var wire 1 2) out [3] $end
$var wire 1 3) out [2] $end
$var wire 1 4) out [1] $end
$var wire 1 5) out [0] $end
$upscope $end

$scope module bs1 $end
$var wire 1 D( in [15] $end
$var wire 1 E( in [14] $end
$var wire 1 F( in [13] $end
$var wire 1 G( in [12] $end
$var wire 1 H( in [11] $end
$var wire 1 I( in [10] $end
$var wire 1 J( in [9] $end
$var wire 1 K( in [8] $end
$var wire 1 L( in [7] $end
$var wire 1 M( in [6] $end
$var wire 1 N( in [5] $end
$var wire 1 O( in [4] $end
$var wire 1 P( in [3] $end
$var wire 1 Q( in [2] $end
$var wire 1 R( in [1] $end
$var wire 1 S( in [0] $end
$var wire 1 B( oper [1] $end
$var wire 1 C( oper [0] $end
$var wire 1 6) out [15] $end
$var wire 1 7) out [14] $end
$var wire 1 8) out [13] $end
$var wire 1 9) out [12] $end
$var wire 1 :) out [11] $end
$var wire 1 ;) out [10] $end
$var wire 1 <) out [9] $end
$var wire 1 =) out [8] $end
$var wire 1 >) out [7] $end
$var wire 1 ?) out [6] $end
$var wire 1 @) out [5] $end
$var wire 1 A) out [4] $end
$var wire 1 B) out [3] $end
$var wire 1 C) out [2] $end
$var wire 1 D) out [1] $end
$var wire 1 E) out [0] $end
$upscope $end

$scope module bs2 $end
$var wire 1 T( in [15] $end
$var wire 1 U( in [14] $end
$var wire 1 V( in [13] $end
$var wire 1 W( in [12] $end
$var wire 1 X( in [11] $end
$var wire 1 Y( in [10] $end
$var wire 1 Z( in [9] $end
$var wire 1 [( in [8] $end
$var wire 1 \( in [7] $end
$var wire 1 ]( in [6] $end
$var wire 1 ^( in [5] $end
$var wire 1 _( in [4] $end
$var wire 1 `( in [3] $end
$var wire 1 a( in [2] $end
$var wire 1 b( in [1] $end
$var wire 1 c( in [0] $end
$var wire 1 B( oper [1] $end
$var wire 1 C( oper [0] $end
$var wire 1 F) out [15] $end
$var wire 1 G) out [14] $end
$var wire 1 H) out [13] $end
$var wire 1 I) out [12] $end
$var wire 1 J) out [11] $end
$var wire 1 K) out [10] $end
$var wire 1 L) out [9] $end
$var wire 1 M) out [8] $end
$var wire 1 N) out [7] $end
$var wire 1 O) out [6] $end
$var wire 1 P) out [5] $end
$var wire 1 Q) out [4] $end
$var wire 1 R) out [3] $end
$var wire 1 S) out [2] $end
$var wire 1 T) out [1] $end
$var wire 1 U) out [0] $end
$upscope $end

$scope module bs3 $end
$var wire 1 d( in [15] $end
$var wire 1 e( in [14] $end
$var wire 1 f( in [13] $end
$var wire 1 g( in [12] $end
$var wire 1 h( in [11] $end
$var wire 1 i( in [10] $end
$var wire 1 j( in [9] $end
$var wire 1 k( in [8] $end
$var wire 1 l( in [7] $end
$var wire 1 m( in [6] $end
$var wire 1 n( in [5] $end
$var wire 1 o( in [4] $end
$var wire 1 p( in [3] $end
$var wire 1 q( in [2] $end
$var wire 1 r( in [1] $end
$var wire 1 s( in [0] $end
$var wire 1 B( oper [1] $end
$var wire 1 C( oper [0] $end
$var wire 1 V) out [15] $end
$var wire 1 W) out [14] $end
$var wire 1 X) out [13] $end
$var wire 1 Y) out [12] $end
$var wire 1 Z) out [11] $end
$var wire 1 [) out [10] $end
$var wire 1 \) out [9] $end
$var wire 1 ]) out [8] $end
$var wire 1 ^) out [7] $end
$var wire 1 _) out [6] $end
$var wire 1 `) out [5] $end
$var wire 1 a) out [4] $end
$var wire 1 b) out [3] $end
$var wire 1 c) out [2] $end
$var wire 1 d) out [1] $end
$var wire 1 e) out [0] $end
$upscope $end
$upscope $end

$scope module registers[7] $end
$var parameter 32 f) BIT_WIDTH $end
$var parameter 32 g) BIT_SIZE $end
$var parameter 32 h) REG_NUMS $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 '( we $end
$var wire 1 #" w [15] $end
$var wire 1 $" w [14] $end
$var wire 1 %" w [13] $end
$var wire 1 &" w [12] $end
$var wire 1 '" w [11] $end
$var wire 1 (" w [10] $end
$var wire 1 )" w [9] $end
$var wire 1 *" w [8] $end
$var wire 1 +" w [7] $end
$var wire 1 ," w [6] $end
$var wire 1 -" w [5] $end
$var wire 1 ." w [4] $end
$var wire 1 /" w [3] $end
$var wire 1 0" w [2] $end
$var wire 1 1" w [1] $end
$var wire 1 2" w [0] $end
$var wire 1 m' r [15] $end
$var wire 1 n' r [14] $end
$var wire 1 o' r [13] $end
$var wire 1 p' r [12] $end
$var wire 1 q' r [11] $end
$var wire 1 r' r [10] $end
$var wire 1 s' r [9] $end
$var wire 1 t' r [8] $end
$var wire 1 u' r [7] $end
$var wire 1 v' r [6] $end
$var wire 1 w' r [5] $end
$var wire 1 x' r [4] $end
$var wire 1 y' r [3] $end
$var wire 1 z' r [2] $end
$var wire 1 {' r [1] $end
$var wire 1 |' r [0] $end

$scope module dff01[15] $end
$var wire 1 m' q $end
$var wire 1 i) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 j) state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 n' q $end
$var wire 1 k) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 l) state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 o' q $end
$var wire 1 m) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 n) state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 p' q $end
$var wire 1 o) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 p) state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 q' q $end
$var wire 1 q) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 r) state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 r' q $end
$var wire 1 s) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 t) state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 s' q $end
$var wire 1 u) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 v) state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 t' q $end
$var wire 1 w) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 x) state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 u' q $end
$var wire 1 y) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 z) state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 v' q $end
$var wire 1 {) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 |) state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 w' q $end
$var wire 1 }) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ~) state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 x' q $end
$var wire 1 !* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 "* state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 y' q $end
$var wire 1 #* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 $* state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 z' q $end
$var wire 1 %* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 &* state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 {' q $end
$var wire 1 '* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 (* state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 |' q $end
$var wire 1 )* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ** state $end
$upscope $end
$upscope $end

$scope module registers[6] $end
$var parameter 32 +* BIT_WIDTH $end
$var parameter 32 ,* BIT_SIZE $end
$var parameter 32 -* REG_NUMS $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 (( we $end
$var wire 1 #" w [15] $end
$var wire 1 $" w [14] $end
$var wire 1 %" w [13] $end
$var wire 1 &" w [12] $end
$var wire 1 '" w [11] $end
$var wire 1 (" w [10] $end
$var wire 1 )" w [9] $end
$var wire 1 *" w [8] $end
$var wire 1 +" w [7] $end
$var wire 1 ," w [6] $end
$var wire 1 -" w [5] $end
$var wire 1 ." w [4] $end
$var wire 1 /" w [3] $end
$var wire 1 0" w [2] $end
$var wire 1 1" w [1] $end
$var wire 1 2" w [0] $end
$var wire 1 ]' r [15] $end
$var wire 1 ^' r [14] $end
$var wire 1 _' r [13] $end
$var wire 1 `' r [12] $end
$var wire 1 a' r [11] $end
$var wire 1 b' r [10] $end
$var wire 1 c' r [9] $end
$var wire 1 d' r [8] $end
$var wire 1 e' r [7] $end
$var wire 1 f' r [6] $end
$var wire 1 g' r [5] $end
$var wire 1 h' r [4] $end
$var wire 1 i' r [3] $end
$var wire 1 j' r [2] $end
$var wire 1 k' r [1] $end
$var wire 1 l' r [0] $end

$scope module dff01[15] $end
$var wire 1 ]' q $end
$var wire 1 .* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 /* state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 ^' q $end
$var wire 1 0* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 1* state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 _' q $end
$var wire 1 2* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 3* state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 `' q $end
$var wire 1 4* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 5* state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 a' q $end
$var wire 1 6* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 7* state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 b' q $end
$var wire 1 8* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 9* state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 c' q $end
$var wire 1 :* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ;* state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 d' q $end
$var wire 1 <* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 =* state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 e' q $end
$var wire 1 >* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ?* state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 f' q $end
$var wire 1 @* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 A* state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 g' q $end
$var wire 1 B* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 C* state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 h' q $end
$var wire 1 D* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 E* state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 i' q $end
$var wire 1 F* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 G* state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 j' q $end
$var wire 1 H* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 I* state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 k' q $end
$var wire 1 J* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 K* state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 l' q $end
$var wire 1 L* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 M* state $end
$upscope $end
$upscope $end

$scope module registers[5] $end
$var parameter 32 N* BIT_WIDTH $end
$var parameter 32 O* BIT_SIZE $end
$var parameter 32 P* REG_NUMS $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 )( we $end
$var wire 1 #" w [15] $end
$var wire 1 $" w [14] $end
$var wire 1 %" w [13] $end
$var wire 1 &" w [12] $end
$var wire 1 '" w [11] $end
$var wire 1 (" w [10] $end
$var wire 1 )" w [9] $end
$var wire 1 *" w [8] $end
$var wire 1 +" w [7] $end
$var wire 1 ," w [6] $end
$var wire 1 -" w [5] $end
$var wire 1 ." w [4] $end
$var wire 1 /" w [3] $end
$var wire 1 0" w [2] $end
$var wire 1 1" w [1] $end
$var wire 1 2" w [0] $end
$var wire 1 M' r [15] $end
$var wire 1 N' r [14] $end
$var wire 1 O' r [13] $end
$var wire 1 P' r [12] $end
$var wire 1 Q' r [11] $end
$var wire 1 R' r [10] $end
$var wire 1 S' r [9] $end
$var wire 1 T' r [8] $end
$var wire 1 U' r [7] $end
$var wire 1 V' r [6] $end
$var wire 1 W' r [5] $end
$var wire 1 X' r [4] $end
$var wire 1 Y' r [3] $end
$var wire 1 Z' r [2] $end
$var wire 1 [' r [1] $end
$var wire 1 \' r [0] $end

$scope module dff01[15] $end
$var wire 1 M' q $end
$var wire 1 Q* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 R* state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 N' q $end
$var wire 1 S* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 T* state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 O' q $end
$var wire 1 U* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 V* state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 P' q $end
$var wire 1 W* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 X* state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 Q' q $end
$var wire 1 Y* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 Z* state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 R' q $end
$var wire 1 [* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 \* state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 S' q $end
$var wire 1 ]* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ^* state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 T' q $end
$var wire 1 _* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 `* state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 U' q $end
$var wire 1 a* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 b* state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 V' q $end
$var wire 1 c* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 d* state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 W' q $end
$var wire 1 e* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 f* state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 X' q $end
$var wire 1 g* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 h* state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 Y' q $end
$var wire 1 i* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 j* state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 Z' q $end
$var wire 1 k* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 l* state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 [' q $end
$var wire 1 m* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 n* state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 \' q $end
$var wire 1 o* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 p* state $end
$upscope $end
$upscope $end

$scope module registers[4] $end
$var parameter 32 q* BIT_WIDTH $end
$var parameter 32 r* BIT_SIZE $end
$var parameter 32 s* REG_NUMS $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 *( we $end
$var wire 1 #" w [15] $end
$var wire 1 $" w [14] $end
$var wire 1 %" w [13] $end
$var wire 1 &" w [12] $end
$var wire 1 '" w [11] $end
$var wire 1 (" w [10] $end
$var wire 1 )" w [9] $end
$var wire 1 *" w [8] $end
$var wire 1 +" w [7] $end
$var wire 1 ," w [6] $end
$var wire 1 -" w [5] $end
$var wire 1 ." w [4] $end
$var wire 1 /" w [3] $end
$var wire 1 0" w [2] $end
$var wire 1 1" w [1] $end
$var wire 1 2" w [0] $end
$var wire 1 =' r [15] $end
$var wire 1 >' r [14] $end
$var wire 1 ?' r [13] $end
$var wire 1 @' r [12] $end
$var wire 1 A' r [11] $end
$var wire 1 B' r [10] $end
$var wire 1 C' r [9] $end
$var wire 1 D' r [8] $end
$var wire 1 E' r [7] $end
$var wire 1 F' r [6] $end
$var wire 1 G' r [5] $end
$var wire 1 H' r [4] $end
$var wire 1 I' r [3] $end
$var wire 1 J' r [2] $end
$var wire 1 K' r [1] $end
$var wire 1 L' r [0] $end

$scope module dff01[15] $end
$var wire 1 =' q $end
$var wire 1 t* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 u* state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 >' q $end
$var wire 1 v* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 w* state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 ?' q $end
$var wire 1 x* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 y* state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 @' q $end
$var wire 1 z* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 {* state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 A' q $end
$var wire 1 |* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 }* state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 B' q $end
$var wire 1 ~* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 !+ state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 C' q $end
$var wire 1 "+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 #+ state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 D' q $end
$var wire 1 $+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 %+ state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 E' q $end
$var wire 1 &+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 '+ state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 F' q $end
$var wire 1 (+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 )+ state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 G' q $end
$var wire 1 *+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ++ state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 H' q $end
$var wire 1 ,+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 -+ state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 I' q $end
$var wire 1 .+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 /+ state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 J' q $end
$var wire 1 0+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 1+ state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 K' q $end
$var wire 1 2+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 3+ state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 L' q $end
$var wire 1 4+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 5+ state $end
$upscope $end
$upscope $end

$scope module registers[3] $end
$var parameter 32 6+ BIT_WIDTH $end
$var parameter 32 7+ BIT_SIZE $end
$var parameter 32 8+ REG_NUMS $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 +( we $end
$var wire 1 #" w [15] $end
$var wire 1 $" w [14] $end
$var wire 1 %" w [13] $end
$var wire 1 &" w [12] $end
$var wire 1 '" w [11] $end
$var wire 1 (" w [10] $end
$var wire 1 )" w [9] $end
$var wire 1 *" w [8] $end
$var wire 1 +" w [7] $end
$var wire 1 ," w [6] $end
$var wire 1 -" w [5] $end
$var wire 1 ." w [4] $end
$var wire 1 /" w [3] $end
$var wire 1 0" w [2] $end
$var wire 1 1" w [1] $end
$var wire 1 2" w [0] $end
$var wire 1 -' r [15] $end
$var wire 1 .' r [14] $end
$var wire 1 /' r [13] $end
$var wire 1 0' r [12] $end
$var wire 1 1' r [11] $end
$var wire 1 2' r [10] $end
$var wire 1 3' r [9] $end
$var wire 1 4' r [8] $end
$var wire 1 5' r [7] $end
$var wire 1 6' r [6] $end
$var wire 1 7' r [5] $end
$var wire 1 8' r [4] $end
$var wire 1 9' r [3] $end
$var wire 1 :' r [2] $end
$var wire 1 ;' r [1] $end
$var wire 1 <' r [0] $end

$scope module dff01[15] $end
$var wire 1 -' q $end
$var wire 1 9+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 :+ state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 .' q $end
$var wire 1 ;+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 <+ state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 /' q $end
$var wire 1 =+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 >+ state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 0' q $end
$var wire 1 ?+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 @+ state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 1' q $end
$var wire 1 A+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 B+ state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 2' q $end
$var wire 1 C+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 D+ state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 3' q $end
$var wire 1 E+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 F+ state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 4' q $end
$var wire 1 G+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 H+ state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 5' q $end
$var wire 1 I+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 J+ state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 6' q $end
$var wire 1 K+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 L+ state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 7' q $end
$var wire 1 M+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 N+ state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 8' q $end
$var wire 1 O+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 P+ state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 9' q $end
$var wire 1 Q+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 R+ state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 :' q $end
$var wire 1 S+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 T+ state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 ;' q $end
$var wire 1 U+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 V+ state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 <' q $end
$var wire 1 W+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 X+ state $end
$upscope $end
$upscope $end

$scope module registers[2] $end
$var parameter 32 Y+ BIT_WIDTH $end
$var parameter 32 Z+ BIT_SIZE $end
$var parameter 32 [+ REG_NUMS $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 ,( we $end
$var wire 1 #" w [15] $end
$var wire 1 $" w [14] $end
$var wire 1 %" w [13] $end
$var wire 1 &" w [12] $end
$var wire 1 '" w [11] $end
$var wire 1 (" w [10] $end
$var wire 1 )" w [9] $end
$var wire 1 *" w [8] $end
$var wire 1 +" w [7] $end
$var wire 1 ," w [6] $end
$var wire 1 -" w [5] $end
$var wire 1 ." w [4] $end
$var wire 1 /" w [3] $end
$var wire 1 0" w [2] $end
$var wire 1 1" w [1] $end
$var wire 1 2" w [0] $end
$var wire 1 {& r [15] $end
$var wire 1 |& r [14] $end
$var wire 1 }& r [13] $end
$var wire 1 ~& r [12] $end
$var wire 1 !' r [11] $end
$var wire 1 "' r [10] $end
$var wire 1 #' r [9] $end
$var wire 1 $' r [8] $end
$var wire 1 %' r [7] $end
$var wire 1 &' r [6] $end
$var wire 1 '' r [5] $end
$var wire 1 (' r [4] $end
$var wire 1 )' r [3] $end
$var wire 1 *' r [2] $end
$var wire 1 +' r [1] $end
$var wire 1 ,' r [0] $end

$scope module dff01[15] $end
$var wire 1 {& q $end
$var wire 1 \+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ]+ state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 |& q $end
$var wire 1 ^+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 _+ state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 }& q $end
$var wire 1 `+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 a+ state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 ~& q $end
$var wire 1 b+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 c+ state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 !' q $end
$var wire 1 d+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 e+ state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 "' q $end
$var wire 1 f+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 g+ state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 #' q $end
$var wire 1 h+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 i+ state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 $' q $end
$var wire 1 j+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 k+ state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 %' q $end
$var wire 1 l+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 m+ state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 &' q $end
$var wire 1 n+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 o+ state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 '' q $end
$var wire 1 p+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 q+ state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 (' q $end
$var wire 1 r+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 s+ state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 )' q $end
$var wire 1 t+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 u+ state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 *' q $end
$var wire 1 v+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 w+ state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 +' q $end
$var wire 1 x+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 y+ state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 ,' q $end
$var wire 1 z+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 {+ state $end
$upscope $end
$upscope $end

$scope module registers[1] $end
$var parameter 32 |+ BIT_WIDTH $end
$var parameter 32 }+ BIT_SIZE $end
$var parameter 32 ~+ REG_NUMS $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 -( we $end
$var wire 1 #" w [15] $end
$var wire 1 $" w [14] $end
$var wire 1 %" w [13] $end
$var wire 1 &" w [12] $end
$var wire 1 '" w [11] $end
$var wire 1 (" w [10] $end
$var wire 1 )" w [9] $end
$var wire 1 *" w [8] $end
$var wire 1 +" w [7] $end
$var wire 1 ," w [6] $end
$var wire 1 -" w [5] $end
$var wire 1 ." w [4] $end
$var wire 1 /" w [3] $end
$var wire 1 0" w [2] $end
$var wire 1 1" w [1] $end
$var wire 1 2" w [0] $end
$var wire 1 k& r [15] $end
$var wire 1 l& r [14] $end
$var wire 1 m& r [13] $end
$var wire 1 n& r [12] $end
$var wire 1 o& r [11] $end
$var wire 1 p& r [10] $end
$var wire 1 q& r [9] $end
$var wire 1 r& r [8] $end
$var wire 1 s& r [7] $end
$var wire 1 t& r [6] $end
$var wire 1 u& r [5] $end
$var wire 1 v& r [4] $end
$var wire 1 w& r [3] $end
$var wire 1 x& r [2] $end
$var wire 1 y& r [1] $end
$var wire 1 z& r [0] $end

$scope module dff01[15] $end
$var wire 1 k& q $end
$var wire 1 !, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ", state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 l& q $end
$var wire 1 #, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 $, state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 m& q $end
$var wire 1 %, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 &, state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 n& q $end
$var wire 1 ', d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 (, state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 o& q $end
$var wire 1 ), d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 *, state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 p& q $end
$var wire 1 +, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ,, state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 q& q $end
$var wire 1 -, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ., state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 r& q $end
$var wire 1 /, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 0, state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 s& q $end
$var wire 1 1, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 2, state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 t& q $end
$var wire 1 3, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 4, state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 u& q $end
$var wire 1 5, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 6, state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 v& q $end
$var wire 1 7, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 8, state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 w& q $end
$var wire 1 9, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 :, state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 x& q $end
$var wire 1 ;, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 <, state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 y& q $end
$var wire 1 =, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 >, state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 z& q $end
$var wire 1 ?, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 @, state $end
$upscope $end
$upscope $end

$scope module registers[0] $end
$var parameter 32 A, BIT_WIDTH $end
$var parameter 32 B, BIT_SIZE $end
$var parameter 32 C, REG_NUMS $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 .( we $end
$var wire 1 #" w [15] $end
$var wire 1 $" w [14] $end
$var wire 1 %" w [13] $end
$var wire 1 &" w [12] $end
$var wire 1 '" w [11] $end
$var wire 1 (" w [10] $end
$var wire 1 )" w [9] $end
$var wire 1 *" w [8] $end
$var wire 1 +" w [7] $end
$var wire 1 ," w [6] $end
$var wire 1 -" w [5] $end
$var wire 1 ." w [4] $end
$var wire 1 /" w [3] $end
$var wire 1 0" w [2] $end
$var wire 1 1" w [1] $end
$var wire 1 2" w [0] $end
$var wire 1 [& r [15] $end
$var wire 1 \& r [14] $end
$var wire 1 ]& r [13] $end
$var wire 1 ^& r [12] $end
$var wire 1 _& r [11] $end
$var wire 1 `& r [10] $end
$var wire 1 a& r [9] $end
$var wire 1 b& r [8] $end
$var wire 1 c& r [7] $end
$var wire 1 d& r [6] $end
$var wire 1 e& r [5] $end
$var wire 1 f& r [4] $end
$var wire 1 g& r [3] $end
$var wire 1 h& r [2] $end
$var wire 1 i& r [1] $end
$var wire 1 j& r [0] $end

$scope module dff01[15] $end
$var wire 1 [& q $end
$var wire 1 D, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 E, state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 \& q $end
$var wire 1 F, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 G, state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 ]& q $end
$var wire 1 H, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 I, state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 ^& q $end
$var wire 1 J, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 K, state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 _& q $end
$var wire 1 L, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 M, state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 `& q $end
$var wire 1 N, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 O, state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 a& q $end
$var wire 1 P, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 Q, state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 b& q $end
$var wire 1 R, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 S, state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 c& q $end
$var wire 1 T, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 U, state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 d& q $end
$var wire 1 V, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 W, state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 e& q $end
$var wire 1 X, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 Y, state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 f& q $end
$var wire 1 Z, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 [, state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 g& q $end
$var wire 1 \, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ], state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 h& q $end
$var wire 1 ^, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 _, state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 i& q $end
$var wire 1 `, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 a, state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 j& q $end
$var wire 1 b, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 c, state $end
$upscope $end
$upscope $end
$upscope $end

$scope module aluc $end
$var wire 1 Q! instr [1] $end
$var wire 1 R! instr [0] $end
$var wire 1 s! aluoper [5] $end
$var wire 1 t! aluoper [4] $end
$var wire 1 u! aluoper [3] $end
$var wire 1 v! aluoper [2] $end
$var wire 1 w! aluoper [1] $end
$var wire 1 x! aluoper [0] $end
$var reg 1 d, invA $end
$var reg 1 e, invB $end
$var reg 1 f, Cin $end
$var reg 4 g, op [3:0] $end
$upscope $end
$upscope $end

$scope module execute0 $end
$var wire 1 3" RSData [15] $end
$var wire 1 4" RSData [14] $end
$var wire 1 5" RSData [13] $end
$var wire 1 6" RSData [12] $end
$var wire 1 7" RSData [11] $end
$var wire 1 8" RSData [10] $end
$var wire 1 9" RSData [9] $end
$var wire 1 :" RSData [8] $end
$var wire 1 ;" RSData [7] $end
$var wire 1 <" RSData [6] $end
$var wire 1 =" RSData [5] $end
$var wire 1 >" RSData [4] $end
$var wire 1 ?" RSData [3] $end
$var wire 1 @" RSData [2] $end
$var wire 1 A" RSData [1] $end
$var wire 1 B" RSData [0] $end
$var wire 1 C" RTData [15] $end
$var wire 1 D" RTData [14] $end
$var wire 1 E" RTData [13] $end
$var wire 1 F" RTData [12] $end
$var wire 1 G" RTData [11] $end
$var wire 1 H" RTData [10] $end
$var wire 1 I" RTData [9] $end
$var wire 1 J" RTData [8] $end
$var wire 1 K" RTData [7] $end
$var wire 1 L" RTData [6] $end
$var wire 1 M" RTData [5] $end
$var wire 1 N" RTData [4] $end
$var wire 1 O" RTData [3] $end
$var wire 1 P" RTData [2] $end
$var wire 1 Q" RTData [1] $end
$var wire 1 R" RTData [0] $end
$var wire 1 c! PC [15] $end
$var wire 1 d! PC [14] $end
$var wire 1 e! PC [13] $end
$var wire 1 f! PC [12] $end
$var wire 1 g! PC [11] $end
$var wire 1 h! PC [10] $end
$var wire 1 i! PC [9] $end
$var wire 1 j! PC [8] $end
$var wire 1 k! PC [7] $end
$var wire 1 l! PC [6] $end
$var wire 1 m! PC [5] $end
$var wire 1 n! PC [4] $end
$var wire 1 o! PC [3] $end
$var wire 1 p! PC [2] $end
$var wire 1 q! PC [1] $end
$var wire 1 r! PC [0] $end
$var wire 1 s" Imm5 [15] $end
$var wire 1 t" Imm5 [14] $end
$var wire 1 u" Imm5 [13] $end
$var wire 1 v" Imm5 [12] $end
$var wire 1 w" Imm5 [11] $end
$var wire 1 x" Imm5 [10] $end
$var wire 1 y" Imm5 [9] $end
$var wire 1 z" Imm5 [8] $end
$var wire 1 {" Imm5 [7] $end
$var wire 1 |" Imm5 [6] $end
$var wire 1 }" Imm5 [5] $end
$var wire 1 ~" Imm5 [4] $end
$var wire 1 !# Imm5 [3] $end
$var wire 1 "# Imm5 [2] $end
$var wire 1 ## Imm5 [1] $end
$var wire 1 $# Imm5 [0] $end
$var wire 1 %# Imm8 [15] $end
$var wire 1 &# Imm8 [14] $end
$var wire 1 '# Imm8 [13] $end
$var wire 1 (# Imm8 [12] $end
$var wire 1 )# Imm8 [11] $end
$var wire 1 *# Imm8 [10] $end
$var wire 1 +# Imm8 [9] $end
$var wire 1 ,# Imm8 [8] $end
$var wire 1 -# Imm8 [7] $end
$var wire 1 .# Imm8 [6] $end
$var wire 1 /# Imm8 [5] $end
$var wire 1 0# Imm8 [4] $end
$var wire 1 1# Imm8 [3] $end
$var wire 1 2# Imm8 [2] $end
$var wire 1 3# Imm8 [1] $end
$var wire 1 4# Imm8 [0] $end
$var wire 1 5# sImm8 [15] $end
$var wire 1 6# sImm8 [14] $end
$var wire 1 7# sImm8 [13] $end
$var wire 1 8# sImm8 [12] $end
$var wire 1 9# sImm8 [11] $end
$var wire 1 :# sImm8 [10] $end
$var wire 1 ;# sImm8 [9] $end
$var wire 1 <# sImm8 [8] $end
$var wire 1 =# sImm8 [7] $end
$var wire 1 ># sImm8 [6] $end
$var wire 1 ?# sImm8 [5] $end
$var wire 1 @# sImm8 [4] $end
$var wire 1 A# sImm8 [3] $end
$var wire 1 B# sImm8 [2] $end
$var wire 1 C# sImm8 [1] $end
$var wire 1 D# sImm8 [0] $end
$var wire 1 E# sImm11 [15] $end
$var wire 1 F# sImm11 [14] $end
$var wire 1 G# sImm11 [13] $end
$var wire 1 H# sImm11 [12] $end
$var wire 1 I# sImm11 [11] $end
$var wire 1 J# sImm11 [10] $end
$var wire 1 K# sImm11 [9] $end
$var wire 1 L# sImm11 [8] $end
$var wire 1 M# sImm11 [7] $end
$var wire 1 N# sImm11 [6] $end
$var wire 1 O# sImm11 [5] $end
$var wire 1 P# sImm11 [4] $end
$var wire 1 Q# sImm11 [3] $end
$var wire 1 R# sImm11 [2] $end
$var wire 1 S# sImm11 [1] $end
$var wire 1 T# sImm11 [0] $end
$var wire 1 b# BSrc [1] $end
$var wire 1 c# BSrc [0] $end
$var wire 1 y! Oper [3] $end
$var wire 1 z! Oper [2] $end
$var wire 1 {! Oper [1] $end
$var wire 1 |! Oper [0] $end
$var wire 1 }! BranchTaken [3] $end
$var wire 1 ~! BranchTaken [2] $end
$var wire 1 !" BranchTaken [1] $end
$var wire 1 "" BranchTaken [0] $end
$var wire 1 X# ImmSrc $end
$var wire 1 ]# ALUJmp $end
$var wire 1 Y# invA $end
$var wire 1 Z# invB $end
$var wire 1 [# ALUSign $end
$var wire 1 \# cin $end
$var wire 1 U# nHaltSig $end
$var wire 1 S" ALU_Out [15] $end
$var wire 1 T" ALU_Out [14] $end
$var wire 1 U" ALU_Out [13] $end
$var wire 1 V" ALU_Out [12] $end
$var wire 1 W" ALU_Out [11] $end
$var wire 1 X" ALU_Out [10] $end
$var wire 1 Y" ALU_Out [9] $end
$var wire 1 Z" ALU_Out [8] $end
$var wire 1 [" ALU_Out [7] $end
$var wire 1 \" ALU_Out [6] $end
$var wire 1 ]" ALU_Out [5] $end
$var wire 1 ^" ALU_Out [4] $end
$var wire 1 _" ALU_Out [3] $end
$var wire 1 `" ALU_Out [2] $end
$var wire 1 a" ALU_Out [1] $end
$var wire 1 b" ALU_Out [0] $end
$var wire 1 #! PC_Next [15] $end
$var wire 1 $! PC_Next [14] $end
$var wire 1 %! PC_Next [13] $end
$var wire 1 &! PC_Next [12] $end
$var wire 1 '! PC_Next [11] $end
$var wire 1 (! PC_Next [10] $end
$var wire 1 )! PC_Next [9] $end
$var wire 1 *! PC_Next [8] $end
$var wire 1 +! PC_Next [7] $end
$var wire 1 ,! PC_Next [6] $end
$var wire 1 -! PC_Next [5] $end
$var wire 1 .! PC_Next [4] $end
$var wire 1 /! PC_Next [3] $end
$var wire 1 0! PC_Next [2] $end
$var wire 1 1! PC_Next [1] $end
$var wire 1 2! PC_Next [0] $end
$var wire 1 h, ALUIn [15] $end
$var wire 1 i, ALUIn [14] $end
$var wire 1 j, ALUIn [13] $end
$var wire 1 k, ALUIn [12] $end
$var wire 1 l, ALUIn [11] $end
$var wire 1 m, ALUIn [10] $end
$var wire 1 n, ALUIn [9] $end
$var wire 1 o, ALUIn [8] $end
$var wire 1 p, ALUIn [7] $end
$var wire 1 q, ALUIn [6] $end
$var wire 1 r, ALUIn [5] $end
$var wire 1 s, ALUIn [4] $end
$var wire 1 t, ALUIn [3] $end
$var wire 1 u, ALUIn [2] $end
$var wire 1 v, ALUIn [1] $end
$var wire 1 w, ALUIn [0] $end
$var wire 1 x, PC_I [15] $end
$var wire 1 y, PC_I [14] $end
$var wire 1 z, PC_I [13] $end
$var wire 1 {, PC_I [12] $end
$var wire 1 |, PC_I [11] $end
$var wire 1 }, PC_I [10] $end
$var wire 1 ~, PC_I [9] $end
$var wire 1 !- PC_I [8] $end
$var wire 1 "- PC_I [7] $end
$var wire 1 #- PC_I [6] $end
$var wire 1 $- PC_I [5] $end
$var wire 1 %- PC_I [4] $end
$var wire 1 &- PC_I [3] $end
$var wire 1 '- PC_I [2] $end
$var wire 1 (- PC_I [1] $end
$var wire 1 )- PC_I [0] $end
$var wire 1 *- PC_Branch [15] $end
$var wire 1 +- PC_Branch [14] $end
$var wire 1 ,- PC_Branch [13] $end
$var wire 1 -- PC_Branch [12] $end
$var wire 1 .- PC_Branch [11] $end
$var wire 1 /- PC_Branch [10] $end
$var wire 1 0- PC_Branch [9] $end
$var wire 1 1- PC_Branch [8] $end
$var wire 1 2- PC_Branch [7] $end
$var wire 1 3- PC_Branch [6] $end
$var wire 1 4- PC_Branch [5] $end
$var wire 1 5- PC_Branch [4] $end
$var wire 1 6- PC_Branch [3] $end
$var wire 1 7- PC_Branch [2] $end
$var wire 1 8- PC_Branch [1] $end
$var wire 1 9- PC_Branch [0] $end
$var wire 1 :- Branch [15] $end
$var wire 1 ;- Branch [14] $end
$var wire 1 <- Branch [13] $end
$var wire 1 =- Branch [12] $end
$var wire 1 >- Branch [11] $end
$var wire 1 ?- Branch [10] $end
$var wire 1 @- Branch [9] $end
$var wire 1 A- Branch [8] $end
$var wire 1 B- Branch [7] $end
$var wire 1 C- Branch [6] $end
$var wire 1 D- Branch [5] $end
$var wire 1 E- Branch [4] $end
$var wire 1 F- Branch [3] $end
$var wire 1 G- Branch [2] $end
$var wire 1 H- Branch [1] $end
$var wire 1 I- Branch [0] $end
$var wire 1 J- BrchCnd $end
$var wire 1 K- SF $end
$var wire 1 L- CF $end
$var wire 1 M- OF $end
$var wire 1 N- ZF $end

$scope module pc_adder $end
$var parameter 32 O- N $end
$var wire 1 :- sum [15] $end
$var wire 1 ;- sum [14] $end
$var wire 1 <- sum [13] $end
$var wire 1 =- sum [12] $end
$var wire 1 >- sum [11] $end
$var wire 1 ?- sum [10] $end
$var wire 1 @- sum [9] $end
$var wire 1 A- sum [8] $end
$var wire 1 B- sum [7] $end
$var wire 1 C- sum [6] $end
$var wire 1 D- sum [5] $end
$var wire 1 E- sum [4] $end
$var wire 1 F- sum [3] $end
$var wire 1 G- sum [2] $end
$var wire 1 H- sum [1] $end
$var wire 1 I- sum [0] $end
$var wire 1 P- c_out $end
$var wire 1 c! a [15] $end
$var wire 1 d! a [14] $end
$var wire 1 e! a [13] $end
$var wire 1 f! a [12] $end
$var wire 1 g! a [11] $end
$var wire 1 h! a [10] $end
$var wire 1 i! a [9] $end
$var wire 1 j! a [8] $end
$var wire 1 k! a [7] $end
$var wire 1 l! a [6] $end
$var wire 1 m! a [5] $end
$var wire 1 n! a [4] $end
$var wire 1 o! a [3] $end
$var wire 1 p! a [2] $end
$var wire 1 q! a [1] $end
$var wire 1 r! a [0] $end
$var wire 1 x, b [15] $end
$var wire 1 y, b [14] $end
$var wire 1 z, b [13] $end
$var wire 1 {, b [12] $end
$var wire 1 |, b [11] $end
$var wire 1 }, b [10] $end
$var wire 1 ~, b [9] $end
$var wire 1 !- b [8] $end
$var wire 1 "- b [7] $end
$var wire 1 #- b [6] $end
$var wire 1 $- b [5] $end
$var wire 1 %- b [4] $end
$var wire 1 &- b [3] $end
$var wire 1 '- b [2] $end
$var wire 1 (- b [1] $end
$var wire 1 )- b [0] $end
$var wire 1 Q- c_in $end
$var wire 1 R- carries [2] $end
$var wire 1 S- carries [1] $end
$var wire 1 T- carries [0] $end

$scope module cla[3] $end
$var parameter 32 U- N $end
$var wire 1 :- sum [3] $end
$var wire 1 ;- sum [2] $end
$var wire 1 <- sum [1] $end
$var wire 1 =- sum [0] $end
$var wire 1 P- c_out $end
$var wire 1 c! a [3] $end
$var wire 1 d! a [2] $end
$var wire 1 e! a [1] $end
$var wire 1 f! a [0] $end
$var wire 1 x, b [3] $end
$var wire 1 y, b [2] $end
$var wire 1 z, b [1] $end
$var wire 1 {, b [0] $end
$var wire 1 R- c_in $end
$var wire 1 V- p [3] $end
$var wire 1 W- p [2] $end
$var wire 1 X- p [1] $end
$var wire 1 Y- p [0] $end
$var wire 1 Z- ng [3] $end
$var wire 1 [- ng [2] $end
$var wire 1 \- ng [1] $end
$var wire 1 ]- ng [0] $end
$var wire 1 ^- carries [4] $end
$var wire 1 _- carries [3] $end
$var wire 1 `- carries [2] $end
$var wire 1 a- carries [1] $end
$var wire 1 b- carries [0] $end
$var wire 1 c- cp [3] $end
$var wire 1 d- cp [2] $end
$var wire 1 e- cp [1] $end
$var wire 1 f- cp [0] $end

$scope module xor_1[3] $end
$var wire 1 V- out $end
$var wire 1 c! in1 $end
$var wire 1 x, in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 W- out $end
$var wire 1 d! in1 $end
$var wire 1 y, in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 X- out $end
$var wire 1 e! in1 $end
$var wire 1 z, in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 Y- out $end
$var wire 1 f! in1 $end
$var wire 1 {, in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 Z- out $end
$var wire 1 c! in1 $end
$var wire 1 x, in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 [- out $end
$var wire 1 d! in1 $end
$var wire 1 y, in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 \- out $end
$var wire 1 e! in1 $end
$var wire 1 z, in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 ]- out $end
$var wire 1 f! in1 $end
$var wire 1 {, in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 c- out $end
$var wire 1 V- in1 $end
$var wire 1 _- in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 d- out $end
$var wire 1 W- in1 $end
$var wire 1 `- in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 e- out $end
$var wire 1 X- in1 $end
$var wire 1 a- in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 f- out $end
$var wire 1 Y- in1 $end
$var wire 1 R- in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 P- out $end
$var wire 1 c- in1 $end
$var wire 1 Z- in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 _- out $end
$var wire 1 d- in1 $end
$var wire 1 [- in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 `- out $end
$var wire 1 e- in1 $end
$var wire 1 \- in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 a- out $end
$var wire 1 f- in1 $end
$var wire 1 ]- in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 :- s $end
$var wire 1 g- c_out $end
$var wire 1 c! a $end
$var wire 1 x, b $end
$var wire 1 _- c_in $end
$var wire 1 h- AxorB $end
$var wire 1 i- CnandAB $end
$var wire 1 j- AnandB $end

$scope module xor_1 $end
$var wire 1 h- out $end
$var wire 1 c! in1 $end
$var wire 1 x, in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 :- out $end
$var wire 1 h- in1 $end
$var wire 1 _- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 i- out $end
$var wire 1 h- in1 $end
$var wire 1 _- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 j- out $end
$var wire 1 c! in1 $end
$var wire 1 x, in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 g- out $end
$var wire 1 j- in1 $end
$var wire 1 i- in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 ;- s $end
$var wire 1 k- c_out $end
$var wire 1 d! a $end
$var wire 1 y, b $end
$var wire 1 `- c_in $end
$var wire 1 l- AxorB $end
$var wire 1 m- CnandAB $end
$var wire 1 n- AnandB $end

$scope module xor_1 $end
$var wire 1 l- out $end
$var wire 1 d! in1 $end
$var wire 1 y, in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 ;- out $end
$var wire 1 l- in1 $end
$var wire 1 `- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 m- out $end
$var wire 1 l- in1 $end
$var wire 1 `- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 n- out $end
$var wire 1 d! in1 $end
$var wire 1 y, in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 k- out $end
$var wire 1 n- in1 $end
$var wire 1 m- in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 <- s $end
$var wire 1 o- c_out $end
$var wire 1 e! a $end
$var wire 1 z, b $end
$var wire 1 a- c_in $end
$var wire 1 p- AxorB $end
$var wire 1 q- CnandAB $end
$var wire 1 r- AnandB $end

$scope module xor_1 $end
$var wire 1 p- out $end
$var wire 1 e! in1 $end
$var wire 1 z, in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 <- out $end
$var wire 1 p- in1 $end
$var wire 1 a- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 q- out $end
$var wire 1 p- in1 $end
$var wire 1 a- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 r- out $end
$var wire 1 e! in1 $end
$var wire 1 z, in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 o- out $end
$var wire 1 r- in1 $end
$var wire 1 q- in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 =- s $end
$var wire 1 s- c_out $end
$var wire 1 f! a $end
$var wire 1 {, b $end
$var wire 1 R- c_in $end
$var wire 1 t- AxorB $end
$var wire 1 u- CnandAB $end
$var wire 1 v- AnandB $end

$scope module xor_1 $end
$var wire 1 t- out $end
$var wire 1 f! in1 $end
$var wire 1 {, in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 =- out $end
$var wire 1 t- in1 $end
$var wire 1 R- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 u- out $end
$var wire 1 t- in1 $end
$var wire 1 R- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 v- out $end
$var wire 1 f! in1 $end
$var wire 1 {, in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 s- out $end
$var wire 1 v- in1 $end
$var wire 1 u- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[2] $end
$var parameter 32 w- N $end
$var wire 1 >- sum [3] $end
$var wire 1 ?- sum [2] $end
$var wire 1 @- sum [1] $end
$var wire 1 A- sum [0] $end
$var wire 1 R- c_out $end
$var wire 1 g! a [3] $end
$var wire 1 h! a [2] $end
$var wire 1 i! a [1] $end
$var wire 1 j! a [0] $end
$var wire 1 |, b [3] $end
$var wire 1 }, b [2] $end
$var wire 1 ~, b [1] $end
$var wire 1 !- b [0] $end
$var wire 1 S- c_in $end
$var wire 1 x- p [3] $end
$var wire 1 y- p [2] $end
$var wire 1 z- p [1] $end
$var wire 1 {- p [0] $end
$var wire 1 |- ng [3] $end
$var wire 1 }- ng [2] $end
$var wire 1 ~- ng [1] $end
$var wire 1 !. ng [0] $end
$var wire 1 ". carries [4] $end
$var wire 1 #. carries [3] $end
$var wire 1 $. carries [2] $end
$var wire 1 %. carries [1] $end
$var wire 1 &. carries [0] $end
$var wire 1 '. cp [3] $end
$var wire 1 (. cp [2] $end
$var wire 1 ). cp [1] $end
$var wire 1 *. cp [0] $end

$scope module xor_1[3] $end
$var wire 1 x- out $end
$var wire 1 g! in1 $end
$var wire 1 |, in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 y- out $end
$var wire 1 h! in1 $end
$var wire 1 }, in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 z- out $end
$var wire 1 i! in1 $end
$var wire 1 ~, in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 {- out $end
$var wire 1 j! in1 $end
$var wire 1 !- in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 |- out $end
$var wire 1 g! in1 $end
$var wire 1 |, in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 }- out $end
$var wire 1 h! in1 $end
$var wire 1 }, in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 ~- out $end
$var wire 1 i! in1 $end
$var wire 1 ~, in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 !. out $end
$var wire 1 j! in1 $end
$var wire 1 !- in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 '. out $end
$var wire 1 x- in1 $end
$var wire 1 #. in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 (. out $end
$var wire 1 y- in1 $end
$var wire 1 $. in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 ). out $end
$var wire 1 z- in1 $end
$var wire 1 %. in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 *. out $end
$var wire 1 {- in1 $end
$var wire 1 S- in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 R- out $end
$var wire 1 '. in1 $end
$var wire 1 |- in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 #. out $end
$var wire 1 (. in1 $end
$var wire 1 }- in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 $. out $end
$var wire 1 ). in1 $end
$var wire 1 ~- in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 %. out $end
$var wire 1 *. in1 $end
$var wire 1 !. in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 >- s $end
$var wire 1 +. c_out $end
$var wire 1 g! a $end
$var wire 1 |, b $end
$var wire 1 #. c_in $end
$var wire 1 ,. AxorB $end
$var wire 1 -. CnandAB $end
$var wire 1 .. AnandB $end

$scope module xor_1 $end
$var wire 1 ,. out $end
$var wire 1 g! in1 $end
$var wire 1 |, in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 >- out $end
$var wire 1 ,. in1 $end
$var wire 1 #. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 -. out $end
$var wire 1 ,. in1 $end
$var wire 1 #. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 .. out $end
$var wire 1 g! in1 $end
$var wire 1 |, in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 +. out $end
$var wire 1 .. in1 $end
$var wire 1 -. in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 ?- s $end
$var wire 1 /. c_out $end
$var wire 1 h! a $end
$var wire 1 }, b $end
$var wire 1 $. c_in $end
$var wire 1 0. AxorB $end
$var wire 1 1. CnandAB $end
$var wire 1 2. AnandB $end

$scope module xor_1 $end
$var wire 1 0. out $end
$var wire 1 h! in1 $end
$var wire 1 }, in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 ?- out $end
$var wire 1 0. in1 $end
$var wire 1 $. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 1. out $end
$var wire 1 0. in1 $end
$var wire 1 $. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 2. out $end
$var wire 1 h! in1 $end
$var wire 1 }, in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 /. out $end
$var wire 1 2. in1 $end
$var wire 1 1. in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 @- s $end
$var wire 1 3. c_out $end
$var wire 1 i! a $end
$var wire 1 ~, b $end
$var wire 1 %. c_in $end
$var wire 1 4. AxorB $end
$var wire 1 5. CnandAB $end
$var wire 1 6. AnandB $end

$scope module xor_1 $end
$var wire 1 4. out $end
$var wire 1 i! in1 $end
$var wire 1 ~, in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 @- out $end
$var wire 1 4. in1 $end
$var wire 1 %. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 5. out $end
$var wire 1 4. in1 $end
$var wire 1 %. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 6. out $end
$var wire 1 i! in1 $end
$var wire 1 ~, in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 3. out $end
$var wire 1 6. in1 $end
$var wire 1 5. in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 A- s $end
$var wire 1 7. c_out $end
$var wire 1 j! a $end
$var wire 1 !- b $end
$var wire 1 S- c_in $end
$var wire 1 8. AxorB $end
$var wire 1 9. CnandAB $end
$var wire 1 :. AnandB $end

$scope module xor_1 $end
$var wire 1 8. out $end
$var wire 1 j! in1 $end
$var wire 1 !- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 A- out $end
$var wire 1 8. in1 $end
$var wire 1 S- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 9. out $end
$var wire 1 8. in1 $end
$var wire 1 S- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 :. out $end
$var wire 1 j! in1 $end
$var wire 1 !- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 7. out $end
$var wire 1 :. in1 $end
$var wire 1 9. in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[1] $end
$var parameter 32 ;. N $end
$var wire 1 B- sum [3] $end
$var wire 1 C- sum [2] $end
$var wire 1 D- sum [1] $end
$var wire 1 E- sum [0] $end
$var wire 1 S- c_out $end
$var wire 1 k! a [3] $end
$var wire 1 l! a [2] $end
$var wire 1 m! a [1] $end
$var wire 1 n! a [0] $end
$var wire 1 "- b [3] $end
$var wire 1 #- b [2] $end
$var wire 1 $- b [1] $end
$var wire 1 %- b [0] $end
$var wire 1 T- c_in $end
$var wire 1 <. p [3] $end
$var wire 1 =. p [2] $end
$var wire 1 >. p [1] $end
$var wire 1 ?. p [0] $end
$var wire 1 @. ng [3] $end
$var wire 1 A. ng [2] $end
$var wire 1 B. ng [1] $end
$var wire 1 C. ng [0] $end
$var wire 1 D. carries [4] $end
$var wire 1 E. carries [3] $end
$var wire 1 F. carries [2] $end
$var wire 1 G. carries [1] $end
$var wire 1 H. carries [0] $end
$var wire 1 I. cp [3] $end
$var wire 1 J. cp [2] $end
$var wire 1 K. cp [1] $end
$var wire 1 L. cp [0] $end

$scope module xor_1[3] $end
$var wire 1 <. out $end
$var wire 1 k! in1 $end
$var wire 1 "- in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 =. out $end
$var wire 1 l! in1 $end
$var wire 1 #- in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 >. out $end
$var wire 1 m! in1 $end
$var wire 1 $- in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 ?. out $end
$var wire 1 n! in1 $end
$var wire 1 %- in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 @. out $end
$var wire 1 k! in1 $end
$var wire 1 "- in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 A. out $end
$var wire 1 l! in1 $end
$var wire 1 #- in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 B. out $end
$var wire 1 m! in1 $end
$var wire 1 $- in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 C. out $end
$var wire 1 n! in1 $end
$var wire 1 %- in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 I. out $end
$var wire 1 <. in1 $end
$var wire 1 E. in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 J. out $end
$var wire 1 =. in1 $end
$var wire 1 F. in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 K. out $end
$var wire 1 >. in1 $end
$var wire 1 G. in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 L. out $end
$var wire 1 ?. in1 $end
$var wire 1 T- in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 S- out $end
$var wire 1 I. in1 $end
$var wire 1 @. in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 E. out $end
$var wire 1 J. in1 $end
$var wire 1 A. in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 F. out $end
$var wire 1 K. in1 $end
$var wire 1 B. in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 G. out $end
$var wire 1 L. in1 $end
$var wire 1 C. in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 B- s $end
$var wire 1 M. c_out $end
$var wire 1 k! a $end
$var wire 1 "- b $end
$var wire 1 E. c_in $end
$var wire 1 N. AxorB $end
$var wire 1 O. CnandAB $end
$var wire 1 P. AnandB $end

$scope module xor_1 $end
$var wire 1 N. out $end
$var wire 1 k! in1 $end
$var wire 1 "- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 B- out $end
$var wire 1 N. in1 $end
$var wire 1 E. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 O. out $end
$var wire 1 N. in1 $end
$var wire 1 E. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 P. out $end
$var wire 1 k! in1 $end
$var wire 1 "- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 M. out $end
$var wire 1 P. in1 $end
$var wire 1 O. in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 C- s $end
$var wire 1 Q. c_out $end
$var wire 1 l! a $end
$var wire 1 #- b $end
$var wire 1 F. c_in $end
$var wire 1 R. AxorB $end
$var wire 1 S. CnandAB $end
$var wire 1 T. AnandB $end

$scope module xor_1 $end
$var wire 1 R. out $end
$var wire 1 l! in1 $end
$var wire 1 #- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 C- out $end
$var wire 1 R. in1 $end
$var wire 1 F. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 S. out $end
$var wire 1 R. in1 $end
$var wire 1 F. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 T. out $end
$var wire 1 l! in1 $end
$var wire 1 #- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 Q. out $end
$var wire 1 T. in1 $end
$var wire 1 S. in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 D- s $end
$var wire 1 U. c_out $end
$var wire 1 m! a $end
$var wire 1 $- b $end
$var wire 1 G. c_in $end
$var wire 1 V. AxorB $end
$var wire 1 W. CnandAB $end
$var wire 1 X. AnandB $end

$scope module xor_1 $end
$var wire 1 V. out $end
$var wire 1 m! in1 $end
$var wire 1 $- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 D- out $end
$var wire 1 V. in1 $end
$var wire 1 G. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 W. out $end
$var wire 1 V. in1 $end
$var wire 1 G. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 X. out $end
$var wire 1 m! in1 $end
$var wire 1 $- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 U. out $end
$var wire 1 X. in1 $end
$var wire 1 W. in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 E- s $end
$var wire 1 Y. c_out $end
$var wire 1 n! a $end
$var wire 1 %- b $end
$var wire 1 T- c_in $end
$var wire 1 Z. AxorB $end
$var wire 1 [. CnandAB $end
$var wire 1 \. AnandB $end

$scope module xor_1 $end
$var wire 1 Z. out $end
$var wire 1 n! in1 $end
$var wire 1 %- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 E- out $end
$var wire 1 Z. in1 $end
$var wire 1 T- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 [. out $end
$var wire 1 Z. in1 $end
$var wire 1 T- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 \. out $end
$var wire 1 n! in1 $end
$var wire 1 %- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 Y. out $end
$var wire 1 \. in1 $end
$var wire 1 [. in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[0] $end
$var parameter 32 ]. N $end
$var wire 1 F- sum [3] $end
$var wire 1 G- sum [2] $end
$var wire 1 H- sum [1] $end
$var wire 1 I- sum [0] $end
$var wire 1 T- c_out $end
$var wire 1 o! a [3] $end
$var wire 1 p! a [2] $end
$var wire 1 q! a [1] $end
$var wire 1 r! a [0] $end
$var wire 1 &- b [3] $end
$var wire 1 '- b [2] $end
$var wire 1 (- b [1] $end
$var wire 1 )- b [0] $end
$var wire 1 Q- c_in $end
$var wire 1 ^. p [3] $end
$var wire 1 _. p [2] $end
$var wire 1 `. p [1] $end
$var wire 1 a. p [0] $end
$var wire 1 b. ng [3] $end
$var wire 1 c. ng [2] $end
$var wire 1 d. ng [1] $end
$var wire 1 e. ng [0] $end
$var wire 1 f. carries [4] $end
$var wire 1 g. carries [3] $end
$var wire 1 h. carries [2] $end
$var wire 1 i. carries [1] $end
$var wire 1 j. carries [0] $end
$var wire 1 k. cp [3] $end
$var wire 1 l. cp [2] $end
$var wire 1 m. cp [1] $end
$var wire 1 n. cp [0] $end

$scope module xor_1[3] $end
$var wire 1 ^. out $end
$var wire 1 o! in1 $end
$var wire 1 &- in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 _. out $end
$var wire 1 p! in1 $end
$var wire 1 '- in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 `. out $end
$var wire 1 q! in1 $end
$var wire 1 (- in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 a. out $end
$var wire 1 r! in1 $end
$var wire 1 )- in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 b. out $end
$var wire 1 o! in1 $end
$var wire 1 &- in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 c. out $end
$var wire 1 p! in1 $end
$var wire 1 '- in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 d. out $end
$var wire 1 q! in1 $end
$var wire 1 (- in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 e. out $end
$var wire 1 r! in1 $end
$var wire 1 )- in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 k. out $end
$var wire 1 ^. in1 $end
$var wire 1 g. in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 l. out $end
$var wire 1 _. in1 $end
$var wire 1 h. in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 m. out $end
$var wire 1 `. in1 $end
$var wire 1 i. in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 n. out $end
$var wire 1 a. in1 $end
$var wire 1 Q- in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 T- out $end
$var wire 1 k. in1 $end
$var wire 1 b. in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 g. out $end
$var wire 1 l. in1 $end
$var wire 1 c. in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 h. out $end
$var wire 1 m. in1 $end
$var wire 1 d. in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 i. out $end
$var wire 1 n. in1 $end
$var wire 1 e. in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 F- s $end
$var wire 1 o. c_out $end
$var wire 1 o! a $end
$var wire 1 &- b $end
$var wire 1 g. c_in $end
$var wire 1 p. AxorB $end
$var wire 1 q. CnandAB $end
$var wire 1 r. AnandB $end

$scope module xor_1 $end
$var wire 1 p. out $end
$var wire 1 o! in1 $end
$var wire 1 &- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 F- out $end
$var wire 1 p. in1 $end
$var wire 1 g. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 q. out $end
$var wire 1 p. in1 $end
$var wire 1 g. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 r. out $end
$var wire 1 o! in1 $end
$var wire 1 &- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 o. out $end
$var wire 1 r. in1 $end
$var wire 1 q. in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 G- s $end
$var wire 1 s. c_out $end
$var wire 1 p! a $end
$var wire 1 '- b $end
$var wire 1 h. c_in $end
$var wire 1 t. AxorB $end
$var wire 1 u. CnandAB $end
$var wire 1 v. AnandB $end

$scope module xor_1 $end
$var wire 1 t. out $end
$var wire 1 p! in1 $end
$var wire 1 '- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 G- out $end
$var wire 1 t. in1 $end
$var wire 1 h. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 u. out $end
$var wire 1 t. in1 $end
$var wire 1 h. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 v. out $end
$var wire 1 p! in1 $end
$var wire 1 '- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 s. out $end
$var wire 1 v. in1 $end
$var wire 1 u. in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 H- s $end
$var wire 1 w. c_out $end
$var wire 1 q! a $end
$var wire 1 (- b $end
$var wire 1 i. c_in $end
$var wire 1 x. AxorB $end
$var wire 1 y. CnandAB $end
$var wire 1 z. AnandB $end

$scope module xor_1 $end
$var wire 1 x. out $end
$var wire 1 q! in1 $end
$var wire 1 (- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 H- out $end
$var wire 1 x. in1 $end
$var wire 1 i. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 y. out $end
$var wire 1 x. in1 $end
$var wire 1 i. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 z. out $end
$var wire 1 q! in1 $end
$var wire 1 (- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 w. out $end
$var wire 1 z. in1 $end
$var wire 1 y. in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 I- s $end
$var wire 1 {. c_out $end
$var wire 1 r! a $end
$var wire 1 )- b $end
$var wire 1 Q- c_in $end
$var wire 1 |. AxorB $end
$var wire 1 }. CnandAB $end
$var wire 1 ~. AnandB $end

$scope module xor_1 $end
$var wire 1 |. out $end
$var wire 1 r! in1 $end
$var wire 1 )- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 I- out $end
$var wire 1 |. in1 $end
$var wire 1 Q- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 }. out $end
$var wire 1 |. in1 $end
$var wire 1 Q- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 ~. out $end
$var wire 1 r! in1 $end
$var wire 1 )- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 {. out $end
$var wire 1 ~. in1 $end
$var wire 1 }. in2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module alu1 $end
$var parameter 32 !/ OPERAND_WIDTH $end
$var parameter 32 "/ NUM_OPERATIONS $end
$var wire 1 3" InA [15] $end
$var wire 1 4" InA [14] $end
$var wire 1 5" InA [13] $end
$var wire 1 6" InA [12] $end
$var wire 1 7" InA [11] $end
$var wire 1 8" InA [10] $end
$var wire 1 9" InA [9] $end
$var wire 1 :" InA [8] $end
$var wire 1 ;" InA [7] $end
$var wire 1 <" InA [6] $end
$var wire 1 =" InA [5] $end
$var wire 1 >" InA [4] $end
$var wire 1 ?" InA [3] $end
$var wire 1 @" InA [2] $end
$var wire 1 A" InA [1] $end
$var wire 1 B" InA [0] $end
$var wire 1 h, InB [15] $end
$var wire 1 i, InB [14] $end
$var wire 1 j, InB [13] $end
$var wire 1 k, InB [12] $end
$var wire 1 l, InB [11] $end
$var wire 1 m, InB [10] $end
$var wire 1 n, InB [9] $end
$var wire 1 o, InB [8] $end
$var wire 1 p, InB [7] $end
$var wire 1 q, InB [6] $end
$var wire 1 r, InB [5] $end
$var wire 1 s, InB [4] $end
$var wire 1 t, InB [3] $end
$var wire 1 u, InB [2] $end
$var wire 1 v, InB [1] $end
$var wire 1 w, InB [0] $end
$var wire 1 \# Cin $end
$var wire 1 y! Oper [3] $end
$var wire 1 z! Oper [2] $end
$var wire 1 {! Oper [1] $end
$var wire 1 |! Oper [0] $end
$var wire 1 Y# invA $end
$var wire 1 Z# invB $end
$var wire 1 [# sign $end
$var reg 16 #/ Out [15:0] $end
$var wire 1 M- OF $end
$var wire 1 N- ZF $end
$var wire 1 L- CF $end
$var wire 1 K- SF $end
$var wire 1 $/ Cout $end
$var wire 1 %/ S [15] $end
$var wire 1 &/ S [14] $end
$var wire 1 '/ S [13] $end
$var wire 1 (/ S [12] $end
$var wire 1 )/ S [11] $end
$var wire 1 */ S [10] $end
$var wire 1 +/ S [9] $end
$var wire 1 ,/ S [8] $end
$var wire 1 -/ S [7] $end
$var wire 1 ./ S [6] $end
$var wire 1 // S [5] $end
$var wire 1 0/ S [4] $end
$var wire 1 1/ S [3] $end
$var wire 1 2/ S [2] $end
$var wire 1 3/ S [1] $end
$var wire 1 4/ S [0] $end
$var wire 1 5/ ShOut [15] $end
$var wire 1 6/ ShOut [14] $end
$var wire 1 7/ ShOut [13] $end
$var wire 1 8/ ShOut [12] $end
$var wire 1 9/ ShOut [11] $end
$var wire 1 :/ ShOut [10] $end
$var wire 1 ;/ ShOut [9] $end
$var wire 1 </ ShOut [8] $end
$var wire 1 =/ ShOut [7] $end
$var wire 1 >/ ShOut [6] $end
$var wire 1 ?/ ShOut [5] $end
$var wire 1 @/ ShOut [4] $end
$var wire 1 A/ ShOut [3] $end
$var wire 1 B/ ShOut [2] $end
$var wire 1 C/ ShOut [1] $end
$var wire 1 D/ ShOut [0] $end
$var wire 1 E/ BitOut [15] $end
$var wire 1 F/ BitOut [14] $end
$var wire 1 G/ BitOut [13] $end
$var wire 1 H/ BitOut [12] $end
$var wire 1 I/ BitOut [11] $end
$var wire 1 J/ BitOut [10] $end
$var wire 1 K/ BitOut [9] $end
$var wire 1 L/ BitOut [8] $end
$var wire 1 M/ BitOut [7] $end
$var wire 1 N/ BitOut [6] $end
$var wire 1 O/ BitOut [5] $end
$var wire 1 P/ BitOut [4] $end
$var wire 1 Q/ BitOut [3] $end
$var wire 1 R/ BitOut [2] $end
$var wire 1 S/ BitOut [1] $end
$var wire 1 T/ BitOut [0] $end
$var wire 1 U/ A [15] $end
$var wire 1 V/ A [14] $end
$var wire 1 W/ A [13] $end
$var wire 1 X/ A [12] $end
$var wire 1 Y/ A [11] $end
$var wire 1 Z/ A [10] $end
$var wire 1 [/ A [9] $end
$var wire 1 \/ A [8] $end
$var wire 1 ]/ A [7] $end
$var wire 1 ^/ A [6] $end
$var wire 1 _/ A [5] $end
$var wire 1 `/ A [4] $end
$var wire 1 a/ A [3] $end
$var wire 1 b/ A [2] $end
$var wire 1 c/ A [1] $end
$var wire 1 d/ A [0] $end
$var wire 1 e/ B [15] $end
$var wire 1 f/ B [14] $end
$var wire 1 g/ B [13] $end
$var wire 1 h/ B [12] $end
$var wire 1 i/ B [11] $end
$var wire 1 j/ B [10] $end
$var wire 1 k/ B [9] $end
$var wire 1 l/ B [8] $end
$var wire 1 m/ B [7] $end
$var wire 1 n/ B [6] $end
$var wire 1 o/ B [5] $end
$var wire 1 p/ B [4] $end
$var wire 1 q/ B [3] $end
$var wire 1 r/ B [2] $end
$var wire 1 s/ B [1] $end
$var wire 1 t/ B [0] $end
$var wire 1 u/ sA [15] $end
$var wire 1 v/ sA [14] $end
$var wire 1 w/ sA [13] $end
$var wire 1 x/ sA [12] $end
$var wire 1 y/ sA [11] $end
$var wire 1 z/ sA [10] $end
$var wire 1 {/ sA [9] $end
$var wire 1 |/ sA [8] $end
$var wire 1 }/ sA [7] $end
$var wire 1 ~/ sA [6] $end
$var wire 1 !0 sA [5] $end
$var wire 1 "0 sA [4] $end
$var wire 1 #0 sA [3] $end
$var wire 1 $0 sA [2] $end
$var wire 1 %0 sA [1] $end
$var wire 1 &0 sA [0] $end
$var wire 1 '0 sB [15] $end
$var wire 1 (0 sB [14] $end
$var wire 1 )0 sB [13] $end
$var wire 1 *0 sB [12] $end
$var wire 1 +0 sB [11] $end
$var wire 1 ,0 sB [10] $end
$var wire 1 -0 sB [9] $end
$var wire 1 .0 sB [8] $end
$var wire 1 /0 sB [7] $end
$var wire 1 00 sB [6] $end
$var wire 1 10 sB [5] $end
$var wire 1 20 sB [4] $end
$var wire 1 30 sB [3] $end
$var wire 1 40 sB [2] $end
$var wire 1 50 sB [1] $end
$var wire 1 60 sB [0] $end

$scope module cla $end
$var parameter 32 70 N $end
$var wire 1 %/ sum [15] $end
$var wire 1 &/ sum [14] $end
$var wire 1 '/ sum [13] $end
$var wire 1 (/ sum [12] $end
$var wire 1 )/ sum [11] $end
$var wire 1 */ sum [10] $end
$var wire 1 +/ sum [9] $end
$var wire 1 ,/ sum [8] $end
$var wire 1 -/ sum [7] $end
$var wire 1 ./ sum [6] $end
$var wire 1 // sum [5] $end
$var wire 1 0/ sum [4] $end
$var wire 1 1/ sum [3] $end
$var wire 1 2/ sum [2] $end
$var wire 1 3/ sum [1] $end
$var wire 1 4/ sum [0] $end
$var wire 1 $/ c_out $end
$var wire 1 e/ a [15] $end
$var wire 1 f/ a [14] $end
$var wire 1 g/ a [13] $end
$var wire 1 h/ a [12] $end
$var wire 1 i/ a [11] $end
$var wire 1 j/ a [10] $end
$var wire 1 k/ a [9] $end
$var wire 1 l/ a [8] $end
$var wire 1 m/ a [7] $end
$var wire 1 n/ a [6] $end
$var wire 1 o/ a [5] $end
$var wire 1 p/ a [4] $end
$var wire 1 q/ a [3] $end
$var wire 1 r/ a [2] $end
$var wire 1 s/ a [1] $end
$var wire 1 t/ a [0] $end
$var wire 1 U/ b [15] $end
$var wire 1 V/ b [14] $end
$var wire 1 W/ b [13] $end
$var wire 1 X/ b [12] $end
$var wire 1 Y/ b [11] $end
$var wire 1 Z/ b [10] $end
$var wire 1 [/ b [9] $end
$var wire 1 \/ b [8] $end
$var wire 1 ]/ b [7] $end
$var wire 1 ^/ b [6] $end
$var wire 1 _/ b [5] $end
$var wire 1 `/ b [4] $end
$var wire 1 a/ b [3] $end
$var wire 1 b/ b [2] $end
$var wire 1 c/ b [1] $end
$var wire 1 d/ b [0] $end
$var wire 1 \# c_in $end
$var wire 1 80 carries [2] $end
$var wire 1 90 carries [1] $end
$var wire 1 :0 carries [0] $end

$scope module cla[3] $end
$var parameter 32 ;0 N $end
$var wire 1 %/ sum [3] $end
$var wire 1 &/ sum [2] $end
$var wire 1 '/ sum [1] $end
$var wire 1 (/ sum [0] $end
$var wire 1 $/ c_out $end
$var wire 1 e/ a [3] $end
$var wire 1 f/ a [2] $end
$var wire 1 g/ a [1] $end
$var wire 1 h/ a [0] $end
$var wire 1 U/ b [3] $end
$var wire 1 V/ b [2] $end
$var wire 1 W/ b [1] $end
$var wire 1 X/ b [0] $end
$var wire 1 80 c_in $end
$var wire 1 <0 p [3] $end
$var wire 1 =0 p [2] $end
$var wire 1 >0 p [1] $end
$var wire 1 ?0 p [0] $end
$var wire 1 @0 ng [3] $end
$var wire 1 A0 ng [2] $end
$var wire 1 B0 ng [1] $end
$var wire 1 C0 ng [0] $end
$var wire 1 D0 carries [4] $end
$var wire 1 E0 carries [3] $end
$var wire 1 F0 carries [2] $end
$var wire 1 G0 carries [1] $end
$var wire 1 H0 carries [0] $end
$var wire 1 I0 cp [3] $end
$var wire 1 J0 cp [2] $end
$var wire 1 K0 cp [1] $end
$var wire 1 L0 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 <0 out $end
$var wire 1 e/ in1 $end
$var wire 1 U/ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 =0 out $end
$var wire 1 f/ in1 $end
$var wire 1 V/ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 >0 out $end
$var wire 1 g/ in1 $end
$var wire 1 W/ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 ?0 out $end
$var wire 1 h/ in1 $end
$var wire 1 X/ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 @0 out $end
$var wire 1 e/ in1 $end
$var wire 1 U/ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 A0 out $end
$var wire 1 f/ in1 $end
$var wire 1 V/ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 B0 out $end
$var wire 1 g/ in1 $end
$var wire 1 W/ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 C0 out $end
$var wire 1 h/ in1 $end
$var wire 1 X/ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 I0 out $end
$var wire 1 <0 in1 $end
$var wire 1 E0 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 J0 out $end
$var wire 1 =0 in1 $end
$var wire 1 F0 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 K0 out $end
$var wire 1 >0 in1 $end
$var wire 1 G0 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 L0 out $end
$var wire 1 ?0 in1 $end
$var wire 1 80 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 $/ out $end
$var wire 1 I0 in1 $end
$var wire 1 @0 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 E0 out $end
$var wire 1 J0 in1 $end
$var wire 1 A0 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 F0 out $end
$var wire 1 K0 in1 $end
$var wire 1 B0 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 G0 out $end
$var wire 1 L0 in1 $end
$var wire 1 C0 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 %/ s $end
$var wire 1 M0 c_out $end
$var wire 1 e/ a $end
$var wire 1 U/ b $end
$var wire 1 E0 c_in $end
$var wire 1 N0 AxorB $end
$var wire 1 O0 CnandAB $end
$var wire 1 P0 AnandB $end

$scope module xor_1 $end
$var wire 1 N0 out $end
$var wire 1 e/ in1 $end
$var wire 1 U/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 %/ out $end
$var wire 1 N0 in1 $end
$var wire 1 E0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 O0 out $end
$var wire 1 N0 in1 $end
$var wire 1 E0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 P0 out $end
$var wire 1 e/ in1 $end
$var wire 1 U/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 M0 out $end
$var wire 1 P0 in1 $end
$var wire 1 O0 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 &/ s $end
$var wire 1 Q0 c_out $end
$var wire 1 f/ a $end
$var wire 1 V/ b $end
$var wire 1 F0 c_in $end
$var wire 1 R0 AxorB $end
$var wire 1 S0 CnandAB $end
$var wire 1 T0 AnandB $end

$scope module xor_1 $end
$var wire 1 R0 out $end
$var wire 1 f/ in1 $end
$var wire 1 V/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 &/ out $end
$var wire 1 R0 in1 $end
$var wire 1 F0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 S0 out $end
$var wire 1 R0 in1 $end
$var wire 1 F0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 T0 out $end
$var wire 1 f/ in1 $end
$var wire 1 V/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 Q0 out $end
$var wire 1 T0 in1 $end
$var wire 1 S0 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 '/ s $end
$var wire 1 U0 c_out $end
$var wire 1 g/ a $end
$var wire 1 W/ b $end
$var wire 1 G0 c_in $end
$var wire 1 V0 AxorB $end
$var wire 1 W0 CnandAB $end
$var wire 1 X0 AnandB $end

$scope module xor_1 $end
$var wire 1 V0 out $end
$var wire 1 g/ in1 $end
$var wire 1 W/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 '/ out $end
$var wire 1 V0 in1 $end
$var wire 1 G0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 W0 out $end
$var wire 1 V0 in1 $end
$var wire 1 G0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 X0 out $end
$var wire 1 g/ in1 $end
$var wire 1 W/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 U0 out $end
$var wire 1 X0 in1 $end
$var wire 1 W0 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 (/ s $end
$var wire 1 Y0 c_out $end
$var wire 1 h/ a $end
$var wire 1 X/ b $end
$var wire 1 80 c_in $end
$var wire 1 Z0 AxorB $end
$var wire 1 [0 CnandAB $end
$var wire 1 \0 AnandB $end

$scope module xor_1 $end
$var wire 1 Z0 out $end
$var wire 1 h/ in1 $end
$var wire 1 X/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 (/ out $end
$var wire 1 Z0 in1 $end
$var wire 1 80 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 [0 out $end
$var wire 1 Z0 in1 $end
$var wire 1 80 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 \0 out $end
$var wire 1 h/ in1 $end
$var wire 1 X/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 Y0 out $end
$var wire 1 \0 in1 $end
$var wire 1 [0 in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[2] $end
$var parameter 32 ]0 N $end
$var wire 1 )/ sum [3] $end
$var wire 1 */ sum [2] $end
$var wire 1 +/ sum [1] $end
$var wire 1 ,/ sum [0] $end
$var wire 1 80 c_out $end
$var wire 1 i/ a [3] $end
$var wire 1 j/ a [2] $end
$var wire 1 k/ a [1] $end
$var wire 1 l/ a [0] $end
$var wire 1 Y/ b [3] $end
$var wire 1 Z/ b [2] $end
$var wire 1 [/ b [1] $end
$var wire 1 \/ b [0] $end
$var wire 1 90 c_in $end
$var wire 1 ^0 p [3] $end
$var wire 1 _0 p [2] $end
$var wire 1 `0 p [1] $end
$var wire 1 a0 p [0] $end
$var wire 1 b0 ng [3] $end
$var wire 1 c0 ng [2] $end
$var wire 1 d0 ng [1] $end
$var wire 1 e0 ng [0] $end
$var wire 1 f0 carries [4] $end
$var wire 1 g0 carries [3] $end
$var wire 1 h0 carries [2] $end
$var wire 1 i0 carries [1] $end
$var wire 1 j0 carries [0] $end
$var wire 1 k0 cp [3] $end
$var wire 1 l0 cp [2] $end
$var wire 1 m0 cp [1] $end
$var wire 1 n0 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 ^0 out $end
$var wire 1 i/ in1 $end
$var wire 1 Y/ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 _0 out $end
$var wire 1 j/ in1 $end
$var wire 1 Z/ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 `0 out $end
$var wire 1 k/ in1 $end
$var wire 1 [/ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 a0 out $end
$var wire 1 l/ in1 $end
$var wire 1 \/ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 b0 out $end
$var wire 1 i/ in1 $end
$var wire 1 Y/ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 c0 out $end
$var wire 1 j/ in1 $end
$var wire 1 Z/ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 d0 out $end
$var wire 1 k/ in1 $end
$var wire 1 [/ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 e0 out $end
$var wire 1 l/ in1 $end
$var wire 1 \/ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 k0 out $end
$var wire 1 ^0 in1 $end
$var wire 1 g0 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 l0 out $end
$var wire 1 _0 in1 $end
$var wire 1 h0 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 m0 out $end
$var wire 1 `0 in1 $end
$var wire 1 i0 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 n0 out $end
$var wire 1 a0 in1 $end
$var wire 1 90 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 80 out $end
$var wire 1 k0 in1 $end
$var wire 1 b0 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 g0 out $end
$var wire 1 l0 in1 $end
$var wire 1 c0 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 h0 out $end
$var wire 1 m0 in1 $end
$var wire 1 d0 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 i0 out $end
$var wire 1 n0 in1 $end
$var wire 1 e0 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 )/ s $end
$var wire 1 o0 c_out $end
$var wire 1 i/ a $end
$var wire 1 Y/ b $end
$var wire 1 g0 c_in $end
$var wire 1 p0 AxorB $end
$var wire 1 q0 CnandAB $end
$var wire 1 r0 AnandB $end

$scope module xor_1 $end
$var wire 1 p0 out $end
$var wire 1 i/ in1 $end
$var wire 1 Y/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 )/ out $end
$var wire 1 p0 in1 $end
$var wire 1 g0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 q0 out $end
$var wire 1 p0 in1 $end
$var wire 1 g0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 r0 out $end
$var wire 1 i/ in1 $end
$var wire 1 Y/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 o0 out $end
$var wire 1 r0 in1 $end
$var wire 1 q0 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 */ s $end
$var wire 1 s0 c_out $end
$var wire 1 j/ a $end
$var wire 1 Z/ b $end
$var wire 1 h0 c_in $end
$var wire 1 t0 AxorB $end
$var wire 1 u0 CnandAB $end
$var wire 1 v0 AnandB $end

$scope module xor_1 $end
$var wire 1 t0 out $end
$var wire 1 j/ in1 $end
$var wire 1 Z/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 */ out $end
$var wire 1 t0 in1 $end
$var wire 1 h0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 u0 out $end
$var wire 1 t0 in1 $end
$var wire 1 h0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 v0 out $end
$var wire 1 j/ in1 $end
$var wire 1 Z/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 s0 out $end
$var wire 1 v0 in1 $end
$var wire 1 u0 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 +/ s $end
$var wire 1 w0 c_out $end
$var wire 1 k/ a $end
$var wire 1 [/ b $end
$var wire 1 i0 c_in $end
$var wire 1 x0 AxorB $end
$var wire 1 y0 CnandAB $end
$var wire 1 z0 AnandB $end

$scope module xor_1 $end
$var wire 1 x0 out $end
$var wire 1 k/ in1 $end
$var wire 1 [/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 +/ out $end
$var wire 1 x0 in1 $end
$var wire 1 i0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 y0 out $end
$var wire 1 x0 in1 $end
$var wire 1 i0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 z0 out $end
$var wire 1 k/ in1 $end
$var wire 1 [/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 w0 out $end
$var wire 1 z0 in1 $end
$var wire 1 y0 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 ,/ s $end
$var wire 1 {0 c_out $end
$var wire 1 l/ a $end
$var wire 1 \/ b $end
$var wire 1 90 c_in $end
$var wire 1 |0 AxorB $end
$var wire 1 }0 CnandAB $end
$var wire 1 ~0 AnandB $end

$scope module xor_1 $end
$var wire 1 |0 out $end
$var wire 1 l/ in1 $end
$var wire 1 \/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 ,/ out $end
$var wire 1 |0 in1 $end
$var wire 1 90 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 }0 out $end
$var wire 1 |0 in1 $end
$var wire 1 90 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 ~0 out $end
$var wire 1 l/ in1 $end
$var wire 1 \/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 {0 out $end
$var wire 1 ~0 in1 $end
$var wire 1 }0 in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[1] $end
$var parameter 32 !1 N $end
$var wire 1 -/ sum [3] $end
$var wire 1 ./ sum [2] $end
$var wire 1 // sum [1] $end
$var wire 1 0/ sum [0] $end
$var wire 1 90 c_out $end
$var wire 1 m/ a [3] $end
$var wire 1 n/ a [2] $end
$var wire 1 o/ a [1] $end
$var wire 1 p/ a [0] $end
$var wire 1 ]/ b [3] $end
$var wire 1 ^/ b [2] $end
$var wire 1 _/ b [1] $end
$var wire 1 `/ b [0] $end
$var wire 1 :0 c_in $end
$var wire 1 "1 p [3] $end
$var wire 1 #1 p [2] $end
$var wire 1 $1 p [1] $end
$var wire 1 %1 p [0] $end
$var wire 1 &1 ng [3] $end
$var wire 1 '1 ng [2] $end
$var wire 1 (1 ng [1] $end
$var wire 1 )1 ng [0] $end
$var wire 1 *1 carries [4] $end
$var wire 1 +1 carries [3] $end
$var wire 1 ,1 carries [2] $end
$var wire 1 -1 carries [1] $end
$var wire 1 .1 carries [0] $end
$var wire 1 /1 cp [3] $end
$var wire 1 01 cp [2] $end
$var wire 1 11 cp [1] $end
$var wire 1 21 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 "1 out $end
$var wire 1 m/ in1 $end
$var wire 1 ]/ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 #1 out $end
$var wire 1 n/ in1 $end
$var wire 1 ^/ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 $1 out $end
$var wire 1 o/ in1 $end
$var wire 1 _/ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 %1 out $end
$var wire 1 p/ in1 $end
$var wire 1 `/ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 &1 out $end
$var wire 1 m/ in1 $end
$var wire 1 ]/ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 '1 out $end
$var wire 1 n/ in1 $end
$var wire 1 ^/ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 (1 out $end
$var wire 1 o/ in1 $end
$var wire 1 _/ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 )1 out $end
$var wire 1 p/ in1 $end
$var wire 1 `/ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 /1 out $end
$var wire 1 "1 in1 $end
$var wire 1 +1 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 01 out $end
$var wire 1 #1 in1 $end
$var wire 1 ,1 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 11 out $end
$var wire 1 $1 in1 $end
$var wire 1 -1 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 21 out $end
$var wire 1 %1 in1 $end
$var wire 1 :0 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 90 out $end
$var wire 1 /1 in1 $end
$var wire 1 &1 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 +1 out $end
$var wire 1 01 in1 $end
$var wire 1 '1 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 ,1 out $end
$var wire 1 11 in1 $end
$var wire 1 (1 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 -1 out $end
$var wire 1 21 in1 $end
$var wire 1 )1 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 -/ s $end
$var wire 1 31 c_out $end
$var wire 1 m/ a $end
$var wire 1 ]/ b $end
$var wire 1 +1 c_in $end
$var wire 1 41 AxorB $end
$var wire 1 51 CnandAB $end
$var wire 1 61 AnandB $end

$scope module xor_1 $end
$var wire 1 41 out $end
$var wire 1 m/ in1 $end
$var wire 1 ]/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 -/ out $end
$var wire 1 41 in1 $end
$var wire 1 +1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 51 out $end
$var wire 1 41 in1 $end
$var wire 1 +1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 61 out $end
$var wire 1 m/ in1 $end
$var wire 1 ]/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 31 out $end
$var wire 1 61 in1 $end
$var wire 1 51 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 ./ s $end
$var wire 1 71 c_out $end
$var wire 1 n/ a $end
$var wire 1 ^/ b $end
$var wire 1 ,1 c_in $end
$var wire 1 81 AxorB $end
$var wire 1 91 CnandAB $end
$var wire 1 :1 AnandB $end

$scope module xor_1 $end
$var wire 1 81 out $end
$var wire 1 n/ in1 $end
$var wire 1 ^/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 ./ out $end
$var wire 1 81 in1 $end
$var wire 1 ,1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 91 out $end
$var wire 1 81 in1 $end
$var wire 1 ,1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 :1 out $end
$var wire 1 n/ in1 $end
$var wire 1 ^/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 71 out $end
$var wire 1 :1 in1 $end
$var wire 1 91 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 // s $end
$var wire 1 ;1 c_out $end
$var wire 1 o/ a $end
$var wire 1 _/ b $end
$var wire 1 -1 c_in $end
$var wire 1 <1 AxorB $end
$var wire 1 =1 CnandAB $end
$var wire 1 >1 AnandB $end

$scope module xor_1 $end
$var wire 1 <1 out $end
$var wire 1 o/ in1 $end
$var wire 1 _/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 // out $end
$var wire 1 <1 in1 $end
$var wire 1 -1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 =1 out $end
$var wire 1 <1 in1 $end
$var wire 1 -1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 >1 out $end
$var wire 1 o/ in1 $end
$var wire 1 _/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 ;1 out $end
$var wire 1 >1 in1 $end
$var wire 1 =1 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 0/ s $end
$var wire 1 ?1 c_out $end
$var wire 1 p/ a $end
$var wire 1 `/ b $end
$var wire 1 :0 c_in $end
$var wire 1 @1 AxorB $end
$var wire 1 A1 CnandAB $end
$var wire 1 B1 AnandB $end

$scope module xor_1 $end
$var wire 1 @1 out $end
$var wire 1 p/ in1 $end
$var wire 1 `/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 0/ out $end
$var wire 1 @1 in1 $end
$var wire 1 :0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 A1 out $end
$var wire 1 @1 in1 $end
$var wire 1 :0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 B1 out $end
$var wire 1 p/ in1 $end
$var wire 1 `/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 ?1 out $end
$var wire 1 B1 in1 $end
$var wire 1 A1 in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[0] $end
$var parameter 32 C1 N $end
$var wire 1 1/ sum [3] $end
$var wire 1 2/ sum [2] $end
$var wire 1 3/ sum [1] $end
$var wire 1 4/ sum [0] $end
$var wire 1 :0 c_out $end
$var wire 1 q/ a [3] $end
$var wire 1 r/ a [2] $end
$var wire 1 s/ a [1] $end
$var wire 1 t/ a [0] $end
$var wire 1 a/ b [3] $end
$var wire 1 b/ b [2] $end
$var wire 1 c/ b [1] $end
$var wire 1 d/ b [0] $end
$var wire 1 \# c_in $end
$var wire 1 D1 p [3] $end
$var wire 1 E1 p [2] $end
$var wire 1 F1 p [1] $end
$var wire 1 G1 p [0] $end
$var wire 1 H1 ng [3] $end
$var wire 1 I1 ng [2] $end
$var wire 1 J1 ng [1] $end
$var wire 1 K1 ng [0] $end
$var wire 1 L1 carries [4] $end
$var wire 1 M1 carries [3] $end
$var wire 1 N1 carries [2] $end
$var wire 1 O1 carries [1] $end
$var wire 1 P1 carries [0] $end
$var wire 1 Q1 cp [3] $end
$var wire 1 R1 cp [2] $end
$var wire 1 S1 cp [1] $end
$var wire 1 T1 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 D1 out $end
$var wire 1 q/ in1 $end
$var wire 1 a/ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 E1 out $end
$var wire 1 r/ in1 $end
$var wire 1 b/ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 F1 out $end
$var wire 1 s/ in1 $end
$var wire 1 c/ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 G1 out $end
$var wire 1 t/ in1 $end
$var wire 1 d/ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 H1 out $end
$var wire 1 q/ in1 $end
$var wire 1 a/ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 I1 out $end
$var wire 1 r/ in1 $end
$var wire 1 b/ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 J1 out $end
$var wire 1 s/ in1 $end
$var wire 1 c/ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 K1 out $end
$var wire 1 t/ in1 $end
$var wire 1 d/ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 Q1 out $end
$var wire 1 D1 in1 $end
$var wire 1 M1 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 R1 out $end
$var wire 1 E1 in1 $end
$var wire 1 N1 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 S1 out $end
$var wire 1 F1 in1 $end
$var wire 1 O1 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 T1 out $end
$var wire 1 G1 in1 $end
$var wire 1 \# in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 :0 out $end
$var wire 1 Q1 in1 $end
$var wire 1 H1 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 M1 out $end
$var wire 1 R1 in1 $end
$var wire 1 I1 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 N1 out $end
$var wire 1 S1 in1 $end
$var wire 1 J1 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 O1 out $end
$var wire 1 T1 in1 $end
$var wire 1 K1 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 1/ s $end
$var wire 1 U1 c_out $end
$var wire 1 q/ a $end
$var wire 1 a/ b $end
$var wire 1 M1 c_in $end
$var wire 1 V1 AxorB $end
$var wire 1 W1 CnandAB $end
$var wire 1 X1 AnandB $end

$scope module xor_1 $end
$var wire 1 V1 out $end
$var wire 1 q/ in1 $end
$var wire 1 a/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 1/ out $end
$var wire 1 V1 in1 $end
$var wire 1 M1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 W1 out $end
$var wire 1 V1 in1 $end
$var wire 1 M1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 X1 out $end
$var wire 1 q/ in1 $end
$var wire 1 a/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 U1 out $end
$var wire 1 X1 in1 $end
$var wire 1 W1 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 2/ s $end
$var wire 1 Y1 c_out $end
$var wire 1 r/ a $end
$var wire 1 b/ b $end
$var wire 1 N1 c_in $end
$var wire 1 Z1 AxorB $end
$var wire 1 [1 CnandAB $end
$var wire 1 \1 AnandB $end

$scope module xor_1 $end
$var wire 1 Z1 out $end
$var wire 1 r/ in1 $end
$var wire 1 b/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 2/ out $end
$var wire 1 Z1 in1 $end
$var wire 1 N1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 [1 out $end
$var wire 1 Z1 in1 $end
$var wire 1 N1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 \1 out $end
$var wire 1 r/ in1 $end
$var wire 1 b/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 Y1 out $end
$var wire 1 \1 in1 $end
$var wire 1 [1 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 3/ s $end
$var wire 1 ]1 c_out $end
$var wire 1 s/ a $end
$var wire 1 c/ b $end
$var wire 1 O1 c_in $end
$var wire 1 ^1 AxorB $end
$var wire 1 _1 CnandAB $end
$var wire 1 `1 AnandB $end

$scope module xor_1 $end
$var wire 1 ^1 out $end
$var wire 1 s/ in1 $end
$var wire 1 c/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 3/ out $end
$var wire 1 ^1 in1 $end
$var wire 1 O1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 _1 out $end
$var wire 1 ^1 in1 $end
$var wire 1 O1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 `1 out $end
$var wire 1 s/ in1 $end
$var wire 1 c/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 ]1 out $end
$var wire 1 `1 in1 $end
$var wire 1 _1 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 4/ s $end
$var wire 1 a1 c_out $end
$var wire 1 t/ a $end
$var wire 1 d/ b $end
$var wire 1 \# c_in $end
$var wire 1 b1 AxorB $end
$var wire 1 c1 CnandAB $end
$var wire 1 d1 AnandB $end

$scope module xor_1 $end
$var wire 1 b1 out $end
$var wire 1 t/ in1 $end
$var wire 1 d/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 4/ out $end
$var wire 1 b1 in1 $end
$var wire 1 \# in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 c1 out $end
$var wire 1 b1 in1 $end
$var wire 1 \# in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 d1 out $end
$var wire 1 t/ in1 $end
$var wire 1 d/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 a1 out $end
$var wire 1 d1 in1 $end
$var wire 1 c1 in2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module shift $end
$var parameter 32 e1 OPERAND_WIDTH $end
$var parameter 32 f1 SHAMT_WIDTH $end
$var parameter 32 g1 NUM_OPERATIONS $end
$var wire 1 U/ In [15] $end
$var wire 1 V/ In [14] $end
$var wire 1 W/ In [13] $end
$var wire 1 X/ In [12] $end
$var wire 1 Y/ In [11] $end
$var wire 1 Z/ In [10] $end
$var wire 1 [/ In [9] $end
$var wire 1 \/ In [8] $end
$var wire 1 ]/ In [7] $end
$var wire 1 ^/ In [6] $end
$var wire 1 _/ In [5] $end
$var wire 1 `/ In [4] $end
$var wire 1 a/ In [3] $end
$var wire 1 b/ In [2] $end
$var wire 1 c/ In [1] $end
$var wire 1 d/ In [0] $end
$var wire 1 q/ ShAmt [3] $end
$var wire 1 r/ ShAmt [2] $end
$var wire 1 s/ ShAmt [1] $end
$var wire 1 t/ ShAmt [0] $end
$var wire 1 {! Oper [1] $end
$var wire 1 |! Oper [0] $end
$var wire 1 5/ Out [15] $end
$var wire 1 6/ Out [14] $end
$var wire 1 7/ Out [13] $end
$var wire 1 8/ Out [12] $end
$var wire 1 9/ Out [11] $end
$var wire 1 :/ Out [10] $end
$var wire 1 ;/ Out [9] $end
$var wire 1 </ Out [8] $end
$var wire 1 =/ Out [7] $end
$var wire 1 >/ Out [6] $end
$var wire 1 ?/ Out [5] $end
$var wire 1 @/ Out [4] $end
$var wire 1 A/ Out [3] $end
$var wire 1 B/ Out [2] $end
$var wire 1 C/ Out [1] $end
$var wire 1 D/ Out [0] $end
$var wire 1 h1 s0 [15] $end
$var wire 1 i1 s0 [14] $end
$var wire 1 j1 s0 [13] $end
$var wire 1 k1 s0 [12] $end
$var wire 1 l1 s0 [11] $end
$var wire 1 m1 s0 [10] $end
$var wire 1 n1 s0 [9] $end
$var wire 1 o1 s0 [8] $end
$var wire 1 p1 s0 [7] $end
$var wire 1 q1 s0 [6] $end
$var wire 1 r1 s0 [5] $end
$var wire 1 s1 s0 [4] $end
$var wire 1 t1 s0 [3] $end
$var wire 1 u1 s0 [2] $end
$var wire 1 v1 s0 [1] $end
$var wire 1 w1 s0 [0] $end
$var wire 1 x1 s1 [15] $end
$var wire 1 y1 s1 [14] $end
$var wire 1 z1 s1 [13] $end
$var wire 1 {1 s1 [12] $end
$var wire 1 |1 s1 [11] $end
$var wire 1 }1 s1 [10] $end
$var wire 1 ~1 s1 [9] $end
$var wire 1 !2 s1 [8] $end
$var wire 1 "2 s1 [7] $end
$var wire 1 #2 s1 [6] $end
$var wire 1 $2 s1 [5] $end
$var wire 1 %2 s1 [4] $end
$var wire 1 &2 s1 [3] $end
$var wire 1 '2 s1 [2] $end
$var wire 1 (2 s1 [1] $end
$var wire 1 )2 s1 [0] $end
$var wire 1 *2 s2 [15] $end
$var wire 1 +2 s2 [14] $end
$var wire 1 ,2 s2 [13] $end
$var wire 1 -2 s2 [12] $end
$var wire 1 .2 s2 [11] $end
$var wire 1 /2 s2 [10] $end
$var wire 1 02 s2 [9] $end
$var wire 1 12 s2 [8] $end
$var wire 1 22 s2 [7] $end
$var wire 1 32 s2 [6] $end
$var wire 1 42 s2 [5] $end
$var wire 1 52 s2 [4] $end
$var wire 1 62 s2 [3] $end
$var wire 1 72 s2 [2] $end
$var wire 1 82 s2 [1] $end
$var wire 1 92 s2 [0] $end
$var wire 1 :2 s3 [15] $end
$var wire 1 ;2 s3 [14] $end
$var wire 1 <2 s3 [13] $end
$var wire 1 =2 s3 [12] $end
$var wire 1 >2 s3 [11] $end
$var wire 1 ?2 s3 [10] $end
$var wire 1 @2 s3 [9] $end
$var wire 1 A2 s3 [8] $end
$var wire 1 B2 s3 [7] $end
$var wire 1 C2 s3 [6] $end
$var wire 1 D2 s3 [5] $end
$var wire 1 E2 s3 [4] $end
$var wire 1 F2 s3 [3] $end
$var wire 1 G2 s3 [2] $end
$var wire 1 H2 s3 [1] $end
$var wire 1 I2 s3 [0] $end
$var wire 1 J2 temp_out_sh0 [15] $end
$var wire 1 K2 temp_out_sh0 [14] $end
$var wire 1 L2 temp_out_sh0 [13] $end
$var wire 1 M2 temp_out_sh0 [12] $end
$var wire 1 N2 temp_out_sh0 [11] $end
$var wire 1 O2 temp_out_sh0 [10] $end
$var wire 1 P2 temp_out_sh0 [9] $end
$var wire 1 Q2 temp_out_sh0 [8] $end
$var wire 1 R2 temp_out_sh0 [7] $end
$var wire 1 S2 temp_out_sh0 [6] $end
$var wire 1 T2 temp_out_sh0 [5] $end
$var wire 1 U2 temp_out_sh0 [4] $end
$var wire 1 V2 temp_out_sh0 [3] $end
$var wire 1 W2 temp_out_sh0 [2] $end
$var wire 1 X2 temp_out_sh0 [1] $end
$var wire 1 Y2 temp_out_sh0 [0] $end
$var wire 1 Z2 temp_out_sh1 [15] $end
$var wire 1 [2 temp_out_sh1 [14] $end
$var wire 1 \2 temp_out_sh1 [13] $end
$var wire 1 ]2 temp_out_sh1 [12] $end
$var wire 1 ^2 temp_out_sh1 [11] $end
$var wire 1 _2 temp_out_sh1 [10] $end
$var wire 1 `2 temp_out_sh1 [9] $end
$var wire 1 a2 temp_out_sh1 [8] $end
$var wire 1 b2 temp_out_sh1 [7] $end
$var wire 1 c2 temp_out_sh1 [6] $end
$var wire 1 d2 temp_out_sh1 [5] $end
$var wire 1 e2 temp_out_sh1 [4] $end
$var wire 1 f2 temp_out_sh1 [3] $end
$var wire 1 g2 temp_out_sh1 [2] $end
$var wire 1 h2 temp_out_sh1 [1] $end
$var wire 1 i2 temp_out_sh1 [0] $end
$var wire 1 j2 temp_out_sh2 [15] $end
$var wire 1 k2 temp_out_sh2 [14] $end
$var wire 1 l2 temp_out_sh2 [13] $end
$var wire 1 m2 temp_out_sh2 [12] $end
$var wire 1 n2 temp_out_sh2 [11] $end
$var wire 1 o2 temp_out_sh2 [10] $end
$var wire 1 p2 temp_out_sh2 [9] $end
$var wire 1 q2 temp_out_sh2 [8] $end
$var wire 1 r2 temp_out_sh2 [7] $end
$var wire 1 s2 temp_out_sh2 [6] $end
$var wire 1 t2 temp_out_sh2 [5] $end
$var wire 1 u2 temp_out_sh2 [4] $end
$var wire 1 v2 temp_out_sh2 [3] $end
$var wire 1 w2 temp_out_sh2 [2] $end
$var wire 1 x2 temp_out_sh2 [1] $end
$var wire 1 y2 temp_out_sh2 [0] $end
$var wire 1 z2 temp_out_sh3 [15] $end
$var wire 1 {2 temp_out_sh3 [14] $end
$var wire 1 |2 temp_out_sh3 [13] $end
$var wire 1 }2 temp_out_sh3 [12] $end
$var wire 1 ~2 temp_out_sh3 [11] $end
$var wire 1 !3 temp_out_sh3 [10] $end
$var wire 1 "3 temp_out_sh3 [9] $end
$var wire 1 #3 temp_out_sh3 [8] $end
$var wire 1 $3 temp_out_sh3 [7] $end
$var wire 1 %3 temp_out_sh3 [6] $end
$var wire 1 &3 temp_out_sh3 [5] $end
$var wire 1 '3 temp_out_sh3 [4] $end
$var wire 1 (3 temp_out_sh3 [3] $end
$var wire 1 )3 temp_out_sh3 [2] $end
$var wire 1 *3 temp_out_sh3 [1] $end
$var wire 1 +3 temp_out_sh3 [0] $end

$scope module bs0 $end
$var wire 1 U/ in [15] $end
$var wire 1 V/ in [14] $end
$var wire 1 W/ in [13] $end
$var wire 1 X/ in [12] $end
$var wire 1 Y/ in [11] $end
$var wire 1 Z/ in [10] $end
$var wire 1 [/ in [9] $end
$var wire 1 \/ in [8] $end
$var wire 1 ]/ in [7] $end
$var wire 1 ^/ in [6] $end
$var wire 1 _/ in [5] $end
$var wire 1 `/ in [4] $end
$var wire 1 a/ in [3] $end
$var wire 1 b/ in [2] $end
$var wire 1 c/ in [1] $end
$var wire 1 d/ in [0] $end
$var wire 1 {! oper [1] $end
$var wire 1 |! oper [0] $end
$var wire 1 J2 out [15] $end
$var wire 1 K2 out [14] $end
$var wire 1 L2 out [13] $end
$var wire 1 M2 out [12] $end
$var wire 1 N2 out [11] $end
$var wire 1 O2 out [10] $end
$var wire 1 P2 out [9] $end
$var wire 1 Q2 out [8] $end
$var wire 1 R2 out [7] $end
$var wire 1 S2 out [6] $end
$var wire 1 T2 out [5] $end
$var wire 1 U2 out [4] $end
$var wire 1 V2 out [3] $end
$var wire 1 W2 out [2] $end
$var wire 1 X2 out [1] $end
$var wire 1 Y2 out [0] $end
$upscope $end

$scope module bs1 $end
$var wire 1 h1 in [15] $end
$var wire 1 i1 in [14] $end
$var wire 1 j1 in [13] $end
$var wire 1 k1 in [12] $end
$var wire 1 l1 in [11] $end
$var wire 1 m1 in [10] $end
$var wire 1 n1 in [9] $end
$var wire 1 o1 in [8] $end
$var wire 1 p1 in [7] $end
$var wire 1 q1 in [6] $end
$var wire 1 r1 in [5] $end
$var wire 1 s1 in [4] $end
$var wire 1 t1 in [3] $end
$var wire 1 u1 in [2] $end
$var wire 1 v1 in [1] $end
$var wire 1 w1 in [0] $end
$var wire 1 {! oper [1] $end
$var wire 1 |! oper [0] $end
$var wire 1 Z2 out [15] $end
$var wire 1 [2 out [14] $end
$var wire 1 \2 out [13] $end
$var wire 1 ]2 out [12] $end
$var wire 1 ^2 out [11] $end
$var wire 1 _2 out [10] $end
$var wire 1 `2 out [9] $end
$var wire 1 a2 out [8] $end
$var wire 1 b2 out [7] $end
$var wire 1 c2 out [6] $end
$var wire 1 d2 out [5] $end
$var wire 1 e2 out [4] $end
$var wire 1 f2 out [3] $end
$var wire 1 g2 out [2] $end
$var wire 1 h2 out [1] $end
$var wire 1 i2 out [0] $end
$upscope $end

$scope module bs2 $end
$var wire 1 x1 in [15] $end
$var wire 1 y1 in [14] $end
$var wire 1 z1 in [13] $end
$var wire 1 {1 in [12] $end
$var wire 1 |1 in [11] $end
$var wire 1 }1 in [10] $end
$var wire 1 ~1 in [9] $end
$var wire 1 !2 in [8] $end
$var wire 1 "2 in [7] $end
$var wire 1 #2 in [6] $end
$var wire 1 $2 in [5] $end
$var wire 1 %2 in [4] $end
$var wire 1 &2 in [3] $end
$var wire 1 '2 in [2] $end
$var wire 1 (2 in [1] $end
$var wire 1 )2 in [0] $end
$var wire 1 {! oper [1] $end
$var wire 1 |! oper [0] $end
$var wire 1 j2 out [15] $end
$var wire 1 k2 out [14] $end
$var wire 1 l2 out [13] $end
$var wire 1 m2 out [12] $end
$var wire 1 n2 out [11] $end
$var wire 1 o2 out [10] $end
$var wire 1 p2 out [9] $end
$var wire 1 q2 out [8] $end
$var wire 1 r2 out [7] $end
$var wire 1 s2 out [6] $end
$var wire 1 t2 out [5] $end
$var wire 1 u2 out [4] $end
$var wire 1 v2 out [3] $end
$var wire 1 w2 out [2] $end
$var wire 1 x2 out [1] $end
$var wire 1 y2 out [0] $end
$upscope $end

$scope module bs3 $end
$var wire 1 *2 in [15] $end
$var wire 1 +2 in [14] $end
$var wire 1 ,2 in [13] $end
$var wire 1 -2 in [12] $end
$var wire 1 .2 in [11] $end
$var wire 1 /2 in [10] $end
$var wire 1 02 in [9] $end
$var wire 1 12 in [8] $end
$var wire 1 22 in [7] $end
$var wire 1 32 in [6] $end
$var wire 1 42 in [5] $end
$var wire 1 52 in [4] $end
$var wire 1 62 in [3] $end
$var wire 1 72 in [2] $end
$var wire 1 82 in [1] $end
$var wire 1 92 in [0] $end
$var wire 1 {! oper [1] $end
$var wire 1 |! oper [0] $end
$var wire 1 z2 out [15] $end
$var wire 1 {2 out [14] $end
$var wire 1 |2 out [13] $end
$var wire 1 }2 out [12] $end
$var wire 1 ~2 out [11] $end
$var wire 1 !3 out [10] $end
$var wire 1 "3 out [9] $end
$var wire 1 #3 out [8] $end
$var wire 1 $3 out [7] $end
$var wire 1 %3 out [6] $end
$var wire 1 &3 out [5] $end
$var wire 1 '3 out [4] $end
$var wire 1 (3 out [3] $end
$var wire 1 )3 out [2] $end
$var wire 1 *3 out [1] $end
$var wire 1 +3 out [0] $end
$upscope $end
$upscope $end
$upscope $end

$scope module branch_ctrl $end
$var wire 1 K- SF $end
$var wire 1 N- ZF $end
$var wire 1 }! brch_instr [3] $end
$var wire 1 ~! brch_instr [2] $end
$var wire 1 !" brch_instr [1] $end
$var wire 1 "" brch_instr [0] $end
$var wire 1 J- BrchCnd $end
$var reg 1 ,3 brch_sig $end
$upscope $end
$upscope $end

$scope module memory0 $end
$var wire 1 S" ALU [15] $end
$var wire 1 T" ALU [14] $end
$var wire 1 U" ALU [13] $end
$var wire 1 V" ALU [12] $end
$var wire 1 W" ALU [11] $end
$var wire 1 X" ALU [10] $end
$var wire 1 Y" ALU [9] $end
$var wire 1 Z" ALU [8] $end
$var wire 1 [" ALU [7] $end
$var wire 1 \" ALU [6] $end
$var wire 1 ]" ALU [5] $end
$var wire 1 ^" ALU [4] $end
$var wire 1 _" ALU [3] $end
$var wire 1 `" ALU [2] $end
$var wire 1 a" ALU [1] $end
$var wire 1 b" ALU [0] $end
$var wire 1 C" writeData [15] $end
$var wire 1 D" writeData [14] $end
$var wire 1 E" writeData [13] $end
$var wire 1 F" writeData [12] $end
$var wire 1 G" writeData [11] $end
$var wire 1 H" writeData [10] $end
$var wire 1 I" writeData [9] $end
$var wire 1 J" writeData [8] $end
$var wire 1 K" writeData [7] $end
$var wire 1 L" writeData [6] $end
$var wire 1 M" writeData [5] $end
$var wire 1 N" writeData [4] $end
$var wire 1 O" writeData [3] $end
$var wire 1 P" writeData [2] $end
$var wire 1 Q" writeData [1] $end
$var wire 1 R" writeData [0] $end
$var wire 1 ^# MemWrt $end
$var wire 1 _# readEn $end
$var wire 1 U# nHaltSig $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 c" readData [15] $end
$var wire 1 d" readData [14] $end
$var wire 1 e" readData [13] $end
$var wire 1 f" readData [12] $end
$var wire 1 g" readData [11] $end
$var wire 1 h" readData [10] $end
$var wire 1 i" readData [9] $end
$var wire 1 j" readData [8] $end
$var wire 1 k" readData [7] $end
$var wire 1 l" readData [6] $end
$var wire 1 m" readData [5] $end
$var wire 1 n" readData [4] $end
$var wire 1 o" readData [3] $end
$var wire 1 p" readData [2] $end
$var wire 1 q" readData [1] $end
$var wire 1 r" readData [0] $end

$scope module data_mem $end
$var wire 1 c" data_out [15] $end
$var wire 1 d" data_out [14] $end
$var wire 1 e" data_out [13] $end
$var wire 1 f" data_out [12] $end
$var wire 1 g" data_out [11] $end
$var wire 1 h" data_out [10] $end
$var wire 1 i" data_out [9] $end
$var wire 1 j" data_out [8] $end
$var wire 1 k" data_out [7] $end
$var wire 1 l" data_out [6] $end
$var wire 1 m" data_out [5] $end
$var wire 1 n" data_out [4] $end
$var wire 1 o" data_out [3] $end
$var wire 1 p" data_out [2] $end
$var wire 1 q" data_out [1] $end
$var wire 1 r" data_out [0] $end
$var wire 1 C" data_in [15] $end
$var wire 1 D" data_in [14] $end
$var wire 1 E" data_in [13] $end
$var wire 1 F" data_in [12] $end
$var wire 1 G" data_in [11] $end
$var wire 1 H" data_in [10] $end
$var wire 1 I" data_in [9] $end
$var wire 1 J" data_in [8] $end
$var wire 1 K" data_in [7] $end
$var wire 1 L" data_in [6] $end
$var wire 1 M" data_in [5] $end
$var wire 1 N" data_in [4] $end
$var wire 1 O" data_in [3] $end
$var wire 1 P" data_in [2] $end
$var wire 1 Q" data_in [1] $end
$var wire 1 R" data_in [0] $end
$var wire 1 S" addr [15] $end
$var wire 1 T" addr [14] $end
$var wire 1 U" addr [13] $end
$var wire 1 V" addr [12] $end
$var wire 1 W" addr [11] $end
$var wire 1 X" addr [10] $end
$var wire 1 Y" addr [9] $end
$var wire 1 Z" addr [8] $end
$var wire 1 [" addr [7] $end
$var wire 1 \" addr [6] $end
$var wire 1 ]" addr [5] $end
$var wire 1 ^" addr [4] $end
$var wire 1 _" addr [3] $end
$var wire 1 `" addr [2] $end
$var wire 1 a" addr [1] $end
$var wire 1 b" addr [0] $end
$var wire 1 -3 enable $end
$var wire 1 ^# wr $end
$var wire 1 .3 createdump $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 /3 loaded $end
$var reg 17 03 largest [16:0] $end
$var integer 32 13 mcd $end
$var integer 32 23 i $end
$upscope $end
$upscope $end

$scope module wb0 $end
$var wire 1 c" MemIn [15] $end
$var wire 1 d" MemIn [14] $end
$var wire 1 e" MemIn [13] $end
$var wire 1 f" MemIn [12] $end
$var wire 1 g" MemIn [11] $end
$var wire 1 h" MemIn [10] $end
$var wire 1 i" MemIn [9] $end
$var wire 1 j" MemIn [8] $end
$var wire 1 k" MemIn [7] $end
$var wire 1 l" MemIn [6] $end
$var wire 1 m" MemIn [5] $end
$var wire 1 n" MemIn [4] $end
$var wire 1 o" MemIn [3] $end
$var wire 1 p" MemIn [2] $end
$var wire 1 q" MemIn [1] $end
$var wire 1 r" MemIn [0] $end
$var wire 1 c! PcIn [15] $end
$var wire 1 d! PcIn [14] $end
$var wire 1 e! PcIn [13] $end
$var wire 1 f! PcIn [12] $end
$var wire 1 g! PcIn [11] $end
$var wire 1 h! PcIn [10] $end
$var wire 1 i! PcIn [9] $end
$var wire 1 j! PcIn [8] $end
$var wire 1 k! PcIn [7] $end
$var wire 1 l! PcIn [6] $end
$var wire 1 m! PcIn [5] $end
$var wire 1 n! PcIn [4] $end
$var wire 1 o! PcIn [3] $end
$var wire 1 p! PcIn [2] $end
$var wire 1 q! PcIn [1] $end
$var wire 1 r! PcIn [0] $end
$var wire 1 S" ALUIn [15] $end
$var wire 1 T" ALUIn [14] $end
$var wire 1 U" ALUIn [13] $end
$var wire 1 V" ALUIn [12] $end
$var wire 1 W" ALUIn [11] $end
$var wire 1 X" ALUIn [10] $end
$var wire 1 Y" ALUIn [9] $end
$var wire 1 Z" ALUIn [8] $end
$var wire 1 [" ALUIn [7] $end
$var wire 1 \" ALUIn [6] $end
$var wire 1 ]" ALUIn [5] $end
$var wire 1 ^" ALUIn [4] $end
$var wire 1 _" ALUIn [3] $end
$var wire 1 `" ALUIn [2] $end
$var wire 1 a" ALUIn [1] $end
$var wire 1 b" ALUIn [0] $end
$var wire 1 `# RegSrc [1] $end
$var wire 1 a# RegSrc [0] $end
$var wire 1 #" WB [15] $end
$var wire 1 $" WB [14] $end
$var wire 1 %" WB [13] $end
$var wire 1 &" WB [12] $end
$var wire 1 '" WB [11] $end
$var wire 1 (" WB [10] $end
$var wire 1 )" WB [9] $end
$var wire 1 *" WB [8] $end
$var wire 1 +" WB [7] $end
$var wire 1 ," WB [6] $end
$var wire 1 -" WB [5] $end
$var wire 1 ." WB [4] $end
$var wire 1 /" WB [3] $end
$var wire 1 0" WB [2] $end
$var wire 1 1" WB [1] $end
$var wire 1 2" WB [0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1~
1!!
xi#
xj#
xk#
xl#
xm#
xn#
xo#
xp#
xq#
bx r#
bx s#
bx t#
bx u#
bx v#
0o$
0m$
0k$
0i$
0g$
0e$
0c$
0a$
0_$
0]$
0[$
0Y$
0W$
0U$
0S$
0Q$
1%%
b0 &%
0c,
0a,
0_,
0],
0[,
0Y,
0W,
0U,
0S,
0Q,
0O,
0M,
0K,
0I,
0G,
0E,
0@,
0>,
0<,
0:,
08,
06,
04,
02,
00,
0.,
0,,
0*,
0(,
0&,
0$,
0",
0{+
0y+
0w+
0u+
0s+
0q+
0o+
0m+
0k+
0i+
0g+
0e+
0c+
0a+
0_+
0]+
0X+
0V+
0T+
0R+
0P+
0N+
0L+
0J+
0H+
0F+
0D+
0B+
0@+
0>+
0<+
0:+
05+
03+
01+
0/+
0-+
0++
0)+
0'+
0%+
0#+
0!+
0}*
0{*
0y*
0w*
0u*
0p*
0n*
0l*
0j*
0h*
0f*
0d*
0b*
0`*
0^*
0\*
0Z*
0X*
0V*
0T*
0R*
0M*
0K*
0I*
0G*
0E*
0C*
0A*
0?*
0=*
0;*
09*
07*
05*
03*
01*
0/*
0**
0(*
0&*
0$*
0"*
0~)
0|)
0z)
0x)
0v)
0t)
0r)
0p)
0n)
0l)
0j)
xd,
xe,
xf,
bx g,
bx #/
x,3
1/3
b0 03
b10000 L$
b11 M$
b1000 N$
b10000 )%
b10000 X&
b11 Y&
b1000 Z&
b10000 /(
b100 0(
b10 1(
b10000 O-
b10000 !/
b100 "/
b10000 70
b10000 e1
b100 f1
b10 g1
b100 .%
b100 P%
b100 r%
b100 6&
b10000 f)
b11 g)
b1000 h)
b10000 +*
b11 ,*
b1000 -*
b10000 N*
b11 O*
b1000 P*
b10000 q*
b11 r*
b1000 s*
b10000 6+
b11 7+
b1000 8+
b10000 Y+
b11 Z+
b1000 [+
b10000 |+
b11 }+
b1000 ~+
b10000 A,
b11 B,
b1000 C,
b100 U-
b100 w-
b100 ;.
b100 ].
b100 ;0
b100 ]0
b100 !1
b100 C1
b0 x
b10 y
b100 z
b1 "!
bx '%
b10000000000000000 (%
bx 13
b10000000000000000 23
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
x%
x$
x#
x"
x!
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
xA
xD
xC
xB
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xU
xV
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xw
1{
x|
1}
x2!
x1!
x0!
x/!
x.!
x-!
x,!
x+!
x*!
x)!
x(!
x'!
x&!
x%!
x$!
x#!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
x6!
x5!
x4!
x3!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xb!
xa!
x`!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xr!
xq!
xp!
xo!
xn!
xm!
xl!
xk!
xj!
xi!
xh!
xg!
xf!
xe!
xd!
xc!
xx!
xw!
xv!
xu!
xt!
xs!
x|!
x{!
xz!
xy!
x""
x!"
x~!
x}!
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
xT"
xS"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xU#
xV#
xW#
xX#
xY#
xZ#
x[#
x\#
x]#
x^#
x_#
xa#
x`#
xc#
xb#
xe#
xd#
xh#
xg#
xf#
xw#
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
x{#
xz#
xy#
xx#
z*$
0:$
19$
08$
07$
06$
05$
04$
03$
02$
01$
00$
0/$
0.$
0-$
0,$
0+$
xJ$
xI$
xH$
xG$
xF$
xE$
xD$
xC$
xB$
xA$
x@$
x?$
x>$
x=$
x<$
x;$
xK$
x-%
x,%
x+%
x:&
x9&
x8&
x7&
1>&
x=&
1<&
1;&
zC&
0B&
xA&
x@&
z?&
1G&
1F&
xE&
xD&
xU&
1V&
1W&
xQ&
1R&
xS&
xM&
xN&
1O&
xI&
xJ&
1K&
xv%
xu%
xt%
xs%
1z%
1y%
1x%
1w%
z!&
x~%
x}%
x|%
z{%
x%&
x$&
x#&
x"&
x3&
x4&
15&
x/&
x0&
11&
x+&
x,&
1-&
x'&
x(&
1)&
xT%
xS%
xR%
xQ%
1X%
1W%
1V%
1U%
z]%
x\%
x[%
xZ%
zY%
xa%
x`%
x_%
x^%
xo%
xp%
1q%
xk%
xl%
1m%
xg%
xh%
1i%
xc%
xd%
1e%
x2%
x1%
x0%
x/%
16%
15%
14%
13%
z;%
x:%
x9%
x8%
z7%
x?%
x>%
x=%
x<%
xM%
xN%
1O%
xI%
xJ%
1K%
xE%
xF%
1G%
xA%
xB%
1C%
xj&
xi&
xh&
xg&
xf&
xe&
xd&
xc&
xb&
xa&
x`&
x_&
x^&
x]&
x\&
x[&
xz&
xy&
xx&
xw&
xv&
xu&
xt&
xs&
xr&
xq&
xp&
xo&
xn&
xm&
xl&
xk&
x,'
x+'
x*'
x)'
x('
x''
x&'
x%'
x$'
x#'
x"'
x!'
x~&
x}&
x|&
x{&
x<'
x;'
x:'
x9'
x8'
x7'
x6'
x5'
x4'
x3'
x2'
x1'
x0'
x/'
x.'
x-'
xL'
xK'
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
xB'
xA'
x@'
x?'
x>'
x='
x\'
x['
xZ'
xY'
xX'
xW'
xV'
xU'
xT'
xS'
xR'
xQ'
xP'
xO'
xN'
xM'
xl'
xk'
xj'
xi'
xh'
xg'
xf'
xe'
xd'
xc'
xb'
xa'
x`'
x_'
x^'
x]'
x|'
x{'
xz'
xy'
xx'
xw'
xv'
xu'
xt'
xs'
xr'
xq'
xp'
xo'
xn'
xm'
x.(
x-(
x,(
x+(
x*(
x)(
x((
x'(
0&(
0%(
0$(
0#(
0"(
0!(
0~'
0}'
xS(
xR(
0Q(
0P(
0O(
0N(
0M(
0L(
0K(
0J(
0I(
0H(
0G(
0F(
0E(
0D(
xc(
xb(
xa(
x`(
0_(
0^(
0](
0\(
0[(
0Z(
0Y(
0X(
0W(
0V(
0U(
0T(
xs(
xr(
xq(
xp(
xo(
xn(
xm(
xl(
0k(
0j(
0i(
0h(
0g(
0f(
0e(
0d(
x%)
x$)
x#)
x")
x!)
x~(
x}(
x|(
0{(
0z(
0y(
0x(
0w(
0v(
0u(
0t(
05)
x4)
03)
02)
01)
00)
0/)
0.)
0-)
0,)
0+)
0*)
0))
0()
0')
0&)
0E)
0D)
xC)
xB)
0A)
0@)
0?)
0>)
0=)
0<)
0;)
0:)
09)
08)
07)
06)
0U)
0T)
0S)
0R)
xQ)
xP)
xO)
xN)
0M)
0L)
0K)
0J)
0I)
0H)
0G)
0F)
0e)
0d)
0c)
0b)
0a)
0`)
0_)
0^)
x])
x\)
x[)
xZ)
xY)
xX)
xW)
xV)
xw,
xv,
xu,
xt,
xs,
xr,
xq,
xp,
xo,
xn,
xm,
xl,
xk,
xj,
xi,
xh,
x)-
x(-
x'-
x&-
x%-
x$-
x#-
x"-
x!-
x~,
x},
x|,
x{,
xz,
xy,
xx,
x9-
x8-
x7-
x6-
x5-
x4-
x3-
x2-
x1-
x0-
x/-
x.-
x--
x,-
x+-
x*-
xI-
xH-
xG-
xF-
xE-
xD-
xC-
xB-
xA-
x@-
x?-
x>-
x=-
x<-
x;-
x:-
xJ-
xK-
xL-
xM-
xN-
xT-
xS-
xR-
xa.
x`.
x_.
x^.
xe.
xd.
xc.
xb.
zj.
xi.
xh.
xg.
zf.
1n.
xm.
xl.
xk.
x|.
1}.
x~.
xx.
xy.
xz.
xt.
xu.
xv.
xp.
xq.
xr.
x?.
x>.
x=.
x<.
xC.
xB.
xA.
x@.
zH.
xG.
xF.
xE.
zD.
xL.
xK.
xJ.
xI.
xZ.
x[.
x\.
xV.
xW.
xX.
xR.
xS.
xT.
xN.
xO.
xP.
x{-
xz-
xy-
xx-
x!.
x~-
x}-
x|-
z&.
x%.
x$.
x#.
z".
x*.
x).
x(.
x'.
x8.
x9.
x:.
x4.
x5.
x6.
x0.
x1.
x2.
x,.
x-.
x..
xY-
xX-
xW-
xV-
x]-
x\-
x[-
xZ-
zb-
xa-
x`-
x_-
z^-
xf-
xe-
xd-
xc-
xt-
xu-
xv-
xp-
xq-
xr-
xl-
xm-
xn-
xh-
xi-
xj-
x$/
x4/
x3/
x2/
x1/
x0/
x//
x./
x-/
x,/
x+/
x*/
x)/
x(/
x'/
x&/
x%/
xD/
xC/
xB/
xA/
x@/
x?/
x>/
x=/
x</
x;/
x:/
x9/
x8/
x7/
x6/
x5/
xT/
xS/
xR/
xQ/
xP/
xO/
xN/
xM/
xL/
xK/
xJ/
xI/
xH/
xG/
xF/
xE/
xd/
xc/
xb/
xa/
x`/
x_/
x^/
x]/
x\/
x[/
xZ/
xY/
xX/
xW/
xV/
xU/
xt/
xs/
xr/
xq/
xp/
xo/
xn/
xm/
xl/
xk/
xj/
xi/
xh/
xg/
xf/
xe/
z&0
z%0
z$0
z#0
z"0
z!0
z~/
z}/
z|/
z{/
zz/
zy/
zx/
zw/
zv/
zu/
z60
z50
z40
z30
z20
z10
z00
z/0
z.0
z-0
z,0
z+0
z*0
z)0
z(0
z'0
x:0
x90
x80
xG1
xF1
xE1
xD1
xK1
xJ1
xI1
xH1
zP1
xO1
xN1
xM1
zL1
xT1
xS1
xR1
xQ1
xb1
xc1
xd1
x^1
x_1
x`1
xZ1
x[1
x\1
xV1
xW1
xX1
x%1
x$1
x#1
x"1
x)1
x(1
x'1
x&1
z.1
x-1
x,1
x+1
z*1
x21
x11
x01
x/1
x@1
xA1
xB1
x<1
x=1
x>1
x81
x91
x:1
x41
x51
x61
xa0
x`0
x_0
x^0
xe0
xd0
xc0
xb0
zj0
xi0
xh0
xg0
zf0
xn0
xm0
xl0
xk0
x|0
x}0
x~0
xx0
xy0
xz0
xt0
xu0
xv0
xp0
xq0
xr0
x?0
x>0
x=0
x<0
xC0
xB0
xA0
x@0
zH0
xG0
xF0
xE0
zD0
xL0
xK0
xJ0
xI0
xZ0
x[0
x\0
xV0
xW0
xX0
xR0
xS0
xT0
xN0
xO0
xP0
xw1
xv1
xu1
xt1
xs1
xr1
xq1
xp1
xo1
xn1
xm1
xl1
xk1
xj1
xi1
xh1
x)2
x(2
x'2
x&2
x%2
x$2
x#2
x"2
x!2
x~1
x}1
x|1
x{1
xz1
xy1
xx1
x92
x82
x72
x62
x52
x42
x32
x22
x12
x02
x/2
x.2
x-2
x,2
x+2
x*2
xI2
xH2
xG2
xF2
xE2
xD2
xC2
xB2
xA2
x@2
x?2
x>2
x=2
x<2
x;2
x:2
xY2
xX2
xW2
xV2
xU2
xT2
xS2
xR2
xQ2
xP2
xO2
xN2
xM2
xL2
xK2
xJ2
xi2
xh2
xg2
xf2
xe2
xd2
xc2
xb2
xa2
x`2
x_2
x^2
x]2
x\2
x[2
xZ2
xy2
xx2
xw2
xv2
xu2
xt2
xs2
xr2
xq2
xp2
xo2
xn2
xm2
xl2
xk2
xj2
x+3
x*3
x)3
x(3
x'3
x&3
x%3
x$3
x#3
x"3
x!3
x~2
x}2
x|2
x{2
xz2
0*%
x$%
0#%
1"%
0!%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
0q$
0p$
1O$
xn$
xl$
xj$
xh$
xf$
xd$
xb$
x`$
x^$
x\$
xZ$
xX$
xV$
xT$
xR$
xP$
0T&
xP&
xL&
xH&
x2&
x.&
x*&
x&&
xn%
xj%
xf%
xb%
xL%
xH%
xD%
x@%
1C(
0B(
0A(
0@(
0?(
0>(
0=(
0<(
0;(
0:(
09(
08(
07(
06(
05(
04(
03(
02(
xb,
x`,
x^,
x\,
xZ,
xX,
xV,
xT,
xR,
xP,
xN,
xL,
xJ,
xH,
xF,
xD,
x?,
x=,
x;,
x9,
x7,
x5,
x3,
x1,
x/,
x-,
x+,
x),
x',
x%,
x#,
x!,
xz+
xx+
xv+
xt+
xr+
xp+
xn+
xl+
xj+
xh+
xf+
xd+
xb+
x`+
x^+
x\+
xW+
xU+
xS+
xQ+
xO+
xM+
xK+
xI+
xG+
xE+
xC+
xA+
x?+
x=+
x;+
x9+
x4+
x2+
x0+
x.+
x,+
x*+
x(+
x&+
x$+
x"+
x~*
x|*
xz*
xx*
xv*
xt*
xo*
xm*
xk*
xi*
xg*
xe*
xc*
xa*
x_*
x]*
x[*
xY*
xW*
xU*
xS*
xQ*
xL*
xJ*
xH*
xF*
xD*
xB*
x@*
x>*
x<*
x:*
x8*
x6*
x4*
x2*
x0*
x.*
x)*
x'*
x%*
x#*
x!*
x})
x{)
xy)
xw)
xu)
xs)
xq)
xo)
xm)
xk)
xi)
0Q-
xP-
x{.
xw.
xs.
xo.
xY.
xU.
xQ.
xM.
x7.
x3.
x/.
x+.
xs-
xo-
xk-
xg-
xa1
x]1
xY1
xU1
x?1
x;1
x71
x31
x{0
xw0
xs0
xo0
xY0
xU0
xQ0
xM0
x.3
x-3
$end
#1
0m'
0n'
0o'
0p'
0q'
0r'
0s'
0t'
0u'
0v'
0w'
0x'
0y'
0z'
0{'
0|'
0]'
0^'
0_'
0`'
0a'
0b'
0c'
0d'
0e'
0f'
0g'
0h'
0i'
0j'
0k'
0l'
0M'
0N'
0O'
0P'
0Q'
0R'
0S'
0T'
0U'
0V'
0W'
0X'
0Y'
0Z'
0['
0\'
0='
0>'
0?'
0@'
0A'
0B'
0C'
0D'
0E'
0F'
0G'
0H'
0I'
0J'
0K'
0L'
0-'
0.'
0/'
00'
01'
02'
03'
04'
05'
06'
07'
08'
09'
0:'
0;'
0<'
0{&
0|&
0}&
0~&
0!'
0"'
0#'
0$'
0%'
0&'
0''
0('
0)'
0*'
0+'
0,'
0k&
0l&
0m&
0n&
0o&
0p&
0q&
0r&
0s&
0t&
0u&
0v&
0w&
0x&
0y&
0z&
0[&
0\&
0]&
0^&
0_&
0`&
0a&
0b&
0c&
0d&
0e&
0f&
0g&
0h&
0i&
0j&
0x#
0y#
0z#
0{#
0|#
0}#
0~#
0!$
0"$
0#$
0$$
0%$
0&$
0'$
0($
0)$
0:&
0U&
19&
1=&
1Q&
1S&
08&
0M&
07&
0I&
0v%
03&
0u%
0/&
0t%
0+&
0s%
0'&
0T%
0o%
0S%
0k%
0R%
0g%
0Q%
0c%
02%
0M%
01%
0I%
00%
0E%
0/%
0A%
1B%
1<%
1F%
1=%
1J%
1>%
1N%
1?%
1d%
1^%
1h%
1_%
1l%
1`%
1p%
1a%
1(&
1"&
1,&
1#&
10&
1$&
14&
1%&
1J&
1D&
1N&
1E&
0P&
1I$
0A&
0J$
0H$
0@&
0L&
0-%
0H&
0~%
02&
0}%
0.&
0|%
0*&
0,%
0&&
0\%
0n%
0[%
0j%
0Z%
0f%
0+%
0b%
0:%
0L%
09%
0H%
08%
0D%
0K$
0@%
0;$
0<$
0=$
0>$
0?$
0@$
0A$
0B$
0C$
0D$
0E$
0F$
0G$
0B!
0A!
0@!
0?!
0>!
0=!
0<!
0;!
0:!
09!
08!
07!
06!
05!
04!
03!
0b!
0`!
0_!
0^!
0]!
0\!
0[!
0Z!
0Y!
0X!
0W!
0V!
0U!
0T!
0S!
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0r!
0p!
0o!
0n!
0m!
0l!
0k!
0j!
0i!
0h!
0g!
0f!
0e!
0d!
0c!
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0$
0#
0"
0!
1Z-
1j-
1[-
1n-
1\-
1r-
1]-
1v-
1|-
1..
1}-
12.
1~-
16.
1!.
1:.
1@.
1P.
1A.
1T.
1B.
1X.
1C.
1\.
1b.
1r.
1c.
1v.
1e.
1~.
0{.
0i.
1m.
1y.
0R!
0Q!
0P!
1O!
1N!
0M!
0L!
0K!
1J!
0I!
0H!
0G!
0F!
0E!
1D!
1C!
0$#
0##
0"#
1!#
1~"
0D#
0C#
0B#
1A#
1@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
0T#
0S#
0R#
1Q#
1P#
0O#
0N#
0M#
1L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0@
0?
0>
1=
1<
0;
0:
09
18
07
06
05
04
03
12
11
0w#
04#
03#
02#
11#
10#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0)-
0(-
0'-
1&-
1%-
0$-
0#-
0"-
0~,
0},
0|,
0{,
0z,
0y,
0x,
0V-
0h-
0W-
0l-
0X-
0p-
0Y-
0t-
0x-
0,.
0y-
00.
0z-
04.
0<.
0N.
0=.
0R.
0>.
0V.
1?.
1Z.
1^.
1p.
0_.
0t.
1d.
1z.
0a.
0|.
0I-
0w.
0h.
1u.
1l.
1W.
1K.
1S.
1J.
1O.
1I.
15.
1).
11.
1(.
1-.
1'.
1u-
1f-
1q-
1e-
1m-
1d-
1i-
1c-
0P-
0g-
0_-
0k-
0`-
0o-
0a-
0s-
0R-
0+.
0#.
0/.
0$.
03.
0S-
0M.
0E.
0Q.
0F.
0U.
0g.
0s.
0G-
1k.
1F-
1q.
0C-
0B-
1*.
19.
0?-
0>-
0=-
0<-
0;-
0:-
07.
0%.
0o.
0T-
1L.
1E-
1[.
0@-
0Y.
0G.
0D-
09-
07-
04-
03-
02-
00-
0/-
0.-
0--
0,-
0+-
0*-
0w,
0v,
0u,
1i#
0j#
0k#
0m#
0n#
0o#
0p#
1l#
0q#
b0 r#
b10 s#
b0 u#
b0 t#
0l#
b0 v#
1j#
b1 u#
1m#
b10 t#
b101x r#
0d,
0e,
0f,
1d,
1f,
0w
1U#
1V#
0W#
1X#
0[#
0]#
0^#
0_#
0c#
1b#
1e#
0d#
0a#
1`#
1Y#
0Z#
1\#
0-3
0$%
0.3
1A
0U
0V
1h#
0g#
0f#
1t,
1s,
0r,
0q,
0p,
0o,
0n,
0m,
0l,
0k,
0j,
0i,
0h,
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
02!
00!
0-!
0,!
0+!
0)!
0(!
0'!
0&!
0%!
0$!
0#!
0!-
1}"
1|"
1{"
1z"
1y"
1x"
1w"
1v"
1u"
1t"
1s"
14)
1a!
0{-
08.
0A-
01-
1q!
0n$
0j$
0d$
0b$
0`$
0\$
0Z$
0X$
0V$
0T$
0R$
0P$
0o(
0n(
0m(
0l(
0a(
0`(
0S(
1R(
1D
0C
0B
1`.
1x.
1H-
0C)
1B)
0c(
1b(
0O)
0N)
0q(
0p(
0Y)
0X)
0W)
0V)
0!)
0~(
0}(
0|(
18-
0*!
0^$
11!
0*(
0)(
0((
0'(
0[)
0Z)
0#)
0")
0Q)
1P)
0s(
1r(
0])
1\)
0,(
0+(
0%)
1$)
0)*
0'*
0%*
0#*
0!*
0})
0{)
0y)
0w)
0u)
0s)
0q)
0o)
0m)
0k)
0i)
0L*
0J*
0H*
0F*
0D*
0B*
0@*
0>*
0<*
0:*
08*
06*
04*
02*
00*
0.*
0o*
0m*
0k*
0i*
0g*
0e*
0c*
0a*
0_*
0]*
0[*
0Y*
0W*
0U*
0S*
0Q*
04+
02+
00+
0.+
0,+
0*+
0(+
0&+
0$+
0"+
0~*
0|*
0z*
0x*
0v*
0t*
1l$
0.(
1-(
0W+
0U+
0S+
0Q+
0O+
0M+
0K+
0I+
0G+
0E+
0C+
0A+
0?+
0=+
0;+
09+
0z+
0x+
0v+
0t+
0r+
0p+
0n+
0l+
0j+
0h+
0f+
0d+
0b+
0`+
0^+
0\+
0b,
0`,
0^,
0\,
0Z,
0X,
0V,
0T,
0R,
0P,
0N,
0L,
0J,
0H,
0F,
0D,
0t/
0s/
0r/
1q/
1p/
0o/
0n/
0m/
0l/
0k/
0j/
0i/
0h/
0g/
0f/
0e/
1d/
1c/
1b/
1a/
1`/
1_/
1^/
1]/
1\/
1[/
1Z/
1Y/
1X/
1W/
1V/
1U/
0""
0!"
0~!
0}!
1w!
0v!
1u!
0t!
0s!
0J-
1<0
1N0
1=0
1R0
1>0
1V0
1?0
1Z0
1^0
1p0
1_0
1t0
1`0
1x0
1a0
1|0
1"1
141
1#1
181
1$1
1<1
0%1
0)1
0@1
0B1
0D1
0H1
0V1
0X1
1E1
1Z1
1F1
1^1
1G1
1b1
1@0
1P0
1A0
1T0
1B0
1X0
1C0
1\0
1b0
1r0
1c0
1v0
1d0
1z0
1e0
1~0
1&1
161
1'1
1:1
1(1
1>1
1I1
1\1
1J1
1`1
1K1
1d1
04/
0c1
0T1
1U1
1W1
1:0
1Q1
1?1
1A1
1-1
121
011
0//
0=1
10/
1O1
1a1
0S1
03/
0_1
1;1
1,1
001
0./
091
1]1
1N1
0R1
02/
0[1
171
1+1
0/1
0-/
051
1Y1
1M1
11/
131
190
0n0
0,/
0}0
1{0
1i0
0m0
0+/
0y0
1w0
1h0
0l0
0*/
0u0
1s0
1g0
0k0
0)/
0q0
1o0
180
0L0
0(/
0[0
1Y0
1G0
0K0
0'/
0W0
1U0
1F0
0J0
0&/
0S0
1Q0
1E0
0I0
0%/
0O0
1M0
1$/
1M-
06-
05-
1X2
1W2
1V2
1U2
1T2
1S2
1R2
1Q2
1P2
1O2
1N2
1M2
1L2
1K2
1w1
1v1
1u1
1t1
1s1
1r1
1q1
1p1
1o1
1n1
1m1
1l1
1k1
1j1
1i1
1h1
1g2
1f2
1e2
1d2
1c2
1b2
1a2
1`2
1_2
1^2
1]2
1\2
1)2
1(2
1'2
1&2
1%2
1$2
1#2
1"2
1!2
1~1
1}1
1|1
1{1
1z1
1y1
1x1
0/!
0.!
0h$
0f$
1u2
1t2
1s2
1r2
1q2
1p2
1o2
1n2
192
182
172
162
152
142
132
122
112
102
1/2
1.2
1-2
1,2
1+2
1*2
0N-
0K-
1L-
0d,
0f,
b1101 g,
0,3
0Y#
0\#
1T1
14/
1c1
0a1
0O1
1S1
13/
1_1
0]1
0N1
1R1
12/
1[1
0Y1
0M1
01/
0d/
0c/
0b/
0a/
0`/
0_/
0^/
0]/
0\/
0[/
0Z/
0Y/
0X/
0W/
0V/
0U/
1|!
0{!
1z!
1y!
0<0
0N0
0=0
0R0
0>0
0V0
0?0
0Z0
0^0
0p0
0_0
0t0
0`0
0x0
0a0
0|0
0"1
041
0#1
081
0$1
0<1
1%1
1)1
1@1
1B1
1D1
1H1
1V1
1X1
0E1
0Z1
0F1
0^1
0G1
0b1
04/
03/
02/
0U1
11/
0:0
0?1
0-1
1=1
111
1./
191
101
1-/
151
1/1
1,/
1}0
1n0
1+/
1y0
1m0
1*/
1u0
1l0
1)/
1q0
1k0
1(/
1[0
1L0
1'/
1W0
1K0
1&/
1S0
1J0
1%/
1O0
1I0
0$/
0M0
0E0
0Q0
0F0
0U0
0G0
0Y0
080
0o0
0g0
0s0
0h0
0w0
0i0
0{0
090
031
0+1
071
0,1
0;1
0./
0-/
0,/
0+/
0*/
0)/
0(/
0'/
0&/
0%/
0M-
0i2
0h2
1[2
1Z2
0y2
0x2
0w2
0v2
1m2
1l2
1k2
1j2
0+3
0*3
0)3
0(3
0'3
0&3
0%3
0$3
1#3
1"3
1!3
1~2
1}2
1|2
1{2
1z2
0Y2
0X2
0W2
0V2
0U2
0T2
0S2
0R2
0Q2
0P2
0O2
0N2
0M2
0L2
0K2
0J2
0w1
0v1
0u1
0t1
0s1
0r1
0q1
0p1
0o1
0n1
0m1
0l1
0k1
0j1
0i1
0h1
0g2
0f2
0e2
0d2
0c2
0b2
0a2
0`2
0_2
0^2
0]2
0\2
0[2
0Z2
0I2
0H2
0G2
0F2
0E2
0D2
0C2
0B2
1A2
1@2
1?2
1>2
1=2
1<2
1;2
1:2
0)2
0(2
0'2
0&2
0%2
0$2
0#2
0"2
0!2
0~1
0}1
0|1
0{1
0z1
0y1
0x1
0u2
0t2
0s2
0r2
0q2
0p2
0o2
0n2
0m2
0l2
0k2
0j2
092
082
072
062
052
042
032
022
012
002
0/2
0.2
0-2
0,2
0+2
0*2
0#3
0"3
0!3
0~2
0}2
0|2
0{2
0z2
0A2
0@2
0?2
0>2
0=2
0<2
0;2
0:2
0L-
0D/
0C/
0B/
0A/
0@/
0?/
0>/
0=/
0</
0;/
0:/
09/
08/
07/
06/
05/
0T/
0S/
0R/
1Q/
1P/
0O/
0N/
0M/
0L/
0K/
0J/
0I/
0H/
0G/
0F/
0E/
b11000 #/
0b"
0a"
0`"
1_"
1^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
02"
01"
00"
1/"
1."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0f
0e
0d
1c
1b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0?,
0=,
0;,
19,
17,
05,
03,
01,
0/,
0-,
0+,
0),
0',
0%,
0#,
0!,
0T
0S
0R
1Q
1P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
#50
0~
0{
#100
1~
1{
b10 "!
#150
0~
0{
#200
1~
1{
b11 "!
#201
0!!
0}
#250
0~
0{
#300
1~
1{
1m$
1:,
18,
b100 "!
b1 x
#301
1v&
1w&
1($
09&
0=&
0Q&
0S&
1P&
0I$
1A&
1H$
1A!
0a!
1`!
1?"
1>"
0q!
1p!
1/
1_.
1t.
0`.
0x.
0H-
1G-
08-
17-
01!
10!
0l$
1j$
1a/
1`/
1R!
1Q!
1P!
0O!
0N!
1L!
1F!
0C!
0%1
0)1
0@1
0B1
0D1
0H1
0V1
0X1
1U1
01/
1:0
1?1
1-1
1//
1$#
1##
1"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
1D#
1C#
1B#
0A#
0@#
1>#
1T#
1S#
1R#
0Q#
0P#
1N#
1@
1?
1>
0=
0<
1:
14
01
1U2
1T2
1t1
1s1
1w#
1d2
1c2
1&2
1%2
14#
13#
12#
01#
00#
1.#
1)-
1(-
1'-
0&-
0%-
1#-
1=.
1R.
0?.
0Z.
0^.
0p.
0_.
0c.
0t.
0v.
1`.
1x.
1a.
1|.
1I-
1H-
1s.
0G-
1g.
0E-
1C-
1w,
1v,
1u,
0t,
0s,
1q,
1r2
1q2
162
152
1~2
1}2
1>2
1=2
19/
18/
1t/
1s/
1r/
0q/
0p/
1n/
0Q/
1O/
1#1
181
1%1
1)1
1@1
1B1
1D1
1H1
1V1
1X1
1E1
1Z1
1F1
1^1
1G1
1b1
14/
13/
12/
0U1
11/
0:0
0?1
0-1
1./
0//
1F2
1E2
0>2
0=2
062
052
122
112
0&2
0%2
1$2
1#2
0t1
1r1
0d2
1b2
0r2
0q2
1p2
1o2
0~2
0}2
1z2
0F2
0E2
1B2
1A2
022
012
102
1/2
0$2
1"2
0p2
1n2
0z2
0B2
0A2
1@2
1?2
002
1.2
0@2
1>2
1:/
08/
1T/
1S/
1R/
1Q/
0O/
1N/
0j#
0m#
1l#
b0 r#
b0 u#
b0 t#
0l#
1j#
b1 t#
b10 r#
1k#
b1000111 #/
0X#
1W#
1b"
1a"
1`"
0_"
0^"
1\"
1c#
0b#
0e#
0h#
1g#
0q,
12"
11"
10"
0/"
0."
1,"
1f
1e
1d
0c
0b
1`
1!-
1{-
18.
1A-
1?,
1=,
1;,
09,
07,
13,
1T
1S
1R
0Q
0P
1N
0b(
1`(
1S(
0R(
0D
1C
1C)
0B)
0P)
1N)
0r(
1p(
0\)
1Z)
0$)
1")
1a(
0`(
1O)
0N)
1q(
0p(
0-(
1+(
1W+
1U+
1S+
1K+
0?,
0=,
0;,
19,
17,
03,
1[)
0Z)
1#)
0")
1,(
0+(
0W+
0U+
0S+
0K+
1z+
1x+
1v+
1n+
0n/
0x!
0u!
0#1
081
0./
0N/
b10 g,
b111 #/
0\"
0,"
0`
0n+
0N
0|!
1{!
0z!
0y!
1W2
1V2
0U2
0T2
1g2
1f2
0c2
0b2
1w2
1v2
0o2
0n2
1)3
1(3
172
162
0/2
0.2
1'2
1&2
0#2
0"2
1u1
1t1
0s1
0r1
1i2
1h2
0g2
0f2
0w2
0v2
1k2
1j2
0)3
0(3
1!3
1~2
1G2
1F2
0?2
0>2
072
062
1+2
1*2
1)2
1(2
0'2
0&2
1m2
1l2
0k2
0j2
1%3
1$3
0!3
0~2
0G2
0F2
1;2
1:2
1-2
1,2
0+2
0*2
1'3
1&3
0%3
0$3
1=2
1<2
0;2
0:2
0:/
09/
18/
17/
b11111 #/
1_"
1^"
1/"
1."
1c
1b
1t+
1r+
1Q
1P
#350
0~
0{
#400
1~
1{
0m$
1k$
1{+
1y+
1w+
1u+
1s+
b101 "!
b10 x
#401
1('
1)'
1*'
1+'
1,'
1'$
0($
19&
1=&
1Q&
1S&
18&
1M&
0H$
0N&
0E&
0P&
1I$
0A&
1E&
1H$
1N&
0A!
1@!
1a!
1R"
1Q"
1P"
1O"
1N"
1v
1u
1t
1s
1r
1q!
0/
1.
0`.
0d.
0x.
0z.
1w.
0H-
1h.
1G-
18-
11!
1l$
0R!
0Q!
0P!
0L!
0J!
0F!
0D!
0w#
0?"
0>"
0R"
0Q"
0P"
0O"
0N"
0g#
0$#
0##
0"#
0D#
0C#
0B#
0>#
04#
03#
02#
0.#
0T#
0S#
0R#
0N#
0L#
0@
0?
0>
0:
08
04
02
0)-
0(-
0'-
0#-
0!-
1c(
0a(
0C
0w,
0v,
0u,
0v
0u
0t
0s
0r
0{-
08.
0=.
0R.
1_.
1c.
1t.
1v.
1`.
1d.
1x.
1z.
0a.
0|.
0I-
0w.
1H-
0h.
0s.
0g.
0C-
0A-
0F-
1Q)
0O)
1s(
0q(
1])
0[)
1%)
0#)
1.(
0,(
1b,
1`,
1^,
1\,
1Z,
0t/
0s/
0r/
0a/
0`/
0%1
0@1
0D1
0V1
0E1
0Z1
0F1
0^1
0G1
0b1
04/
03/
02/
01/
00/
0W2
0V2
192
182
0-2
0,2
0)2
0(2
1'2
1&2
0u1
0t1
0i2
0h2
0'2
0&2
0m2
0l2
1k2
1j2
092
082
172
162
0'3
0&3
1#3
1"3
1I2
1H2
0=2
0<2
0#3
0"3
1!3
1~2
0I2
0H2
1G2
1F2
0k2
0j2
072
062
0!3
0~2
0G2
0F2
1N-
08/
07/
0T/
0S/
0R/
0Q/
0P/
1,3
b0 #/
0j#
0k#
1l#
b0 r#
b0 t#
0l#
0i#
0V#
0W#
0c#
0b"
0a"
0`"
0_"
0^"
1w
0U#
1$%
1.3
0A
0a!
02"
01"
00"
0/"
0."
0f
0e
0d
0c
0b
04)
0S(
0C)
0c(
0b,
0`,
0^,
0\,
0Z,
0T
0S
0R
0Q
0P
0q!
0`.
0x.
0H-
08-
0Q)
0s(
0])
0%)
01!
0l$
0.(
0w!
b0 g,
0{!
#450
0~
0{
#500
1~
1{
b10000000000000000000000000000011 '%
b0 (%
b1 (%
b10 (%
b10000000000000000000000000000011 13
b0 23
b1 23
b10 23
b110 "!
b11 x
