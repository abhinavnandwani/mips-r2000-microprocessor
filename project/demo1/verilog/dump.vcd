$date
	Sat Oct 19 22:44:30 2024
$end
$version
	ModelSim Version 10.7c
$end
$timescale
	1ns
$end

$scope module proc_hier_bench $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemData [15] $end
$var wire 1 h MemData [14] $end
$var wire 1 i MemData [13] $end
$var wire 1 j MemData [12] $end
$var wire 1 k MemData [11] $end
$var wire 1 l MemData [10] $end
$var wire 1 m MemData [9] $end
$var wire 1 n MemData [8] $end
$var wire 1 o MemData [7] $end
$var wire 1 p MemData [6] $end
$var wire 1 q MemData [5] $end
$var wire 1 r MemData [4] $end
$var wire 1 s MemData [3] $end
$var wire 1 t MemData [2] $end
$var wire 1 u MemData [1] $end
$var wire 1 v MemData [0] $end
$var wire 1 w Halt $end
$var integer 32 x inst_count $end
$var integer 32 y trace_file $end
$var integer 32 z sim_log_file $end
$var wire 1 { ZeroExt $end
$var wire 1 | BSrc $end
$var wire 1 } ImmSrc $end
$var wire 1 ~ ALUOpr $end
$var wire 1 !! invA $end
$var wire 1 "! invB $end
$var wire 1 #! ALUSign $end
$var wire 1 $! ALUJmp $end
$var wire 1 %! RegSrc $end
$var wire 1 &! BranchTaken $end
$var wire 1 '! err $end
$var wire 1 (! RSData $end
$var wire 1 )! RTData $end
$var wire 1 *! Imm5 $end
$var wire 1 +! Imm8 $end
$var wire 1 ,! sImm8 $end
$var wire 1 -! sImm11 $end
$var wire 1 .! ALU_Out $end

$scope module DUT $end
$var wire 1 /! clk $end
$var wire 1 0! err $end
$var wire 1 1! rst $end

$scope module c0 $end
$var reg 1 2! clk $end
$var reg 1 3! rst $end
$var wire 1 0! err $end
$var integer 32 4! cycle_count $end
$upscope $end

$scope module p0 $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 0! err $end
$var wire 1 5! PC_Jump [15] $end
$var wire 1 6! PC_Jump [14] $end
$var wire 1 7! PC_Jump [13] $end
$var wire 1 8! PC_Jump [12] $end
$var wire 1 9! PC_Jump [11] $end
$var wire 1 :! PC_Jump [10] $end
$var wire 1 ;! PC_Jump [9] $end
$var wire 1 <! PC_Jump [8] $end
$var wire 1 =! PC_Jump [7] $end
$var wire 1 >! PC_Jump [6] $end
$var wire 1 ?! PC_Jump [5] $end
$var wire 1 @! PC_Jump [4] $end
$var wire 1 A! PC_Jump [3] $end
$var wire 1 B! PC_Jump [2] $end
$var wire 1 C! PC_Jump [1] $end
$var wire 1 D! PC_Jump [0] $end
$var wire 1 E! PC [15] $end
$var wire 1 F! PC [14] $end
$var wire 1 G! PC [13] $end
$var wire 1 H! PC [12] $end
$var wire 1 I! PC [11] $end
$var wire 1 J! PC [10] $end
$var wire 1 K! PC [9] $end
$var wire 1 L! PC [8] $end
$var wire 1 M! PC [7] $end
$var wire 1 N! PC [6] $end
$var wire 1 O! PC [5] $end
$var wire 1 P! PC [4] $end
$var wire 1 Q! PC [3] $end
$var wire 1 R! PC [2] $end
$var wire 1 S! PC [1] $end
$var wire 1 T! PC [0] $end
$var wire 1 U! instr [15] $end
$var wire 1 V! instr [14] $end
$var wire 1 W! instr [13] $end
$var wire 1 X! instr [12] $end
$var wire 1 Y! instr [11] $end
$var wire 1 Z! instr [10] $end
$var wire 1 [! instr [9] $end
$var wire 1 \! instr [8] $end
$var wire 1 ]! instr [7] $end
$var wire 1 ^! instr [6] $end
$var wire 1 _! instr [5] $end
$var wire 1 `! instr [4] $end
$var wire 1 a! instr [3] $end
$var wire 1 b! instr [2] $end
$var wire 1 c! instr [1] $end
$var wire 1 d! instr [0] $end
$var wire 1 e! PC_f [15] $end
$var wire 1 f! PC_f [14] $end
$var wire 1 g! PC_f [13] $end
$var wire 1 h! PC_f [12] $end
$var wire 1 i! PC_f [11] $end
$var wire 1 j! PC_f [10] $end
$var wire 1 k! PC_f [9] $end
$var wire 1 l! PC_f [8] $end
$var wire 1 m! PC_f [7] $end
$var wire 1 n! PC_f [6] $end
$var wire 1 o! PC_f [5] $end
$var wire 1 p! PC_f [4] $end
$var wire 1 q! PC_f [3] $end
$var wire 1 r! PC_f [2] $end
$var wire 1 s! PC_f [1] $end
$var wire 1 t! PC_f [0] $end
$var wire 1 u! PC_d [15] $end
$var wire 1 v! PC_d [14] $end
$var wire 1 w! PC_d [13] $end
$var wire 1 x! PC_d [12] $end
$var wire 1 y! PC_d [11] $end
$var wire 1 z! PC_d [10] $end
$var wire 1 {! PC_d [9] $end
$var wire 1 |! PC_d [8] $end
$var wire 1 }! PC_d [7] $end
$var wire 1 ~! PC_d [6] $end
$var wire 1 !" PC_d [5] $end
$var wire 1 "" PC_d [4] $end
$var wire 1 #" PC_d [3] $end
$var wire 1 $" PC_d [2] $end
$var wire 1 %" PC_d [1] $end
$var wire 1 &" PC_d [0] $end
$var wire 1 '" ALUOpr [5] $end
$var wire 1 (" ALUOpr [4] $end
$var wire 1 )" ALUOpr [3] $end
$var wire 1 *" ALUOpr [2] $end
$var wire 1 +" ALUOpr [1] $end
$var wire 1 ," ALUOpr [0] $end
$var wire 1 -" Oper [3] $end
$var wire 1 ." Oper [2] $end
$var wire 1 /" Oper [1] $end
$var wire 1 0" Oper [0] $end
$var wire 1 1" WB [15] $end
$var wire 1 2" WB [14] $end
$var wire 1 3" WB [13] $end
$var wire 1 4" WB [12] $end
$var wire 1 5" WB [11] $end
$var wire 1 6" WB [10] $end
$var wire 1 7" WB [9] $end
$var wire 1 8" WB [8] $end
$var wire 1 9" WB [7] $end
$var wire 1 :" WB [6] $end
$var wire 1 ;" WB [5] $end
$var wire 1 <" WB [4] $end
$var wire 1 =" WB [3] $end
$var wire 1 >" WB [2] $end
$var wire 1 ?" WB [1] $end
$var wire 1 @" WB [0] $end
$var wire 1 A" RSData [15] $end
$var wire 1 B" RSData [14] $end
$var wire 1 C" RSData [13] $end
$var wire 1 D" RSData [12] $end
$var wire 1 E" RSData [11] $end
$var wire 1 F" RSData [10] $end
$var wire 1 G" RSData [9] $end
$var wire 1 H" RSData [8] $end
$var wire 1 I" RSData [7] $end
$var wire 1 J" RSData [6] $end
$var wire 1 K" RSData [5] $end
$var wire 1 L" RSData [4] $end
$var wire 1 M" RSData [3] $end
$var wire 1 N" RSData [2] $end
$var wire 1 O" RSData [1] $end
$var wire 1 P" RSData [0] $end
$var wire 1 Q" RTData [15] $end
$var wire 1 R" RTData [14] $end
$var wire 1 S" RTData [13] $end
$var wire 1 T" RTData [12] $end
$var wire 1 U" RTData [11] $end
$var wire 1 V" RTData [10] $end
$var wire 1 W" RTData [9] $end
$var wire 1 X" RTData [8] $end
$var wire 1 Y" RTData [7] $end
$var wire 1 Z" RTData [6] $end
$var wire 1 [" RTData [5] $end
$var wire 1 \" RTData [4] $end
$var wire 1 ]" RTData [3] $end
$var wire 1 ^" RTData [2] $end
$var wire 1 _" RTData [1] $end
$var wire 1 `" RTData [0] $end
$var wire 1 a" ALU [15] $end
$var wire 1 b" ALU [14] $end
$var wire 1 c" ALU [13] $end
$var wire 1 d" ALU [12] $end
$var wire 1 e" ALU [11] $end
$var wire 1 f" ALU [10] $end
$var wire 1 g" ALU [9] $end
$var wire 1 h" ALU [8] $end
$var wire 1 i" ALU [7] $end
$var wire 1 j" ALU [6] $end
$var wire 1 k" ALU [5] $end
$var wire 1 l" ALU [4] $end
$var wire 1 m" ALU [3] $end
$var wire 1 n" ALU [2] $end
$var wire 1 o" ALU [1] $end
$var wire 1 p" ALU [0] $end
$var wire 1 q" readData [15] $end
$var wire 1 r" readData [14] $end
$var wire 1 s" readData [13] $end
$var wire 1 t" readData [12] $end
$var wire 1 u" readData [11] $end
$var wire 1 v" readData [10] $end
$var wire 1 w" readData [9] $end
$var wire 1 x" readData [8] $end
$var wire 1 y" readData [7] $end
$var wire 1 z" readData [6] $end
$var wire 1 {" readData [5] $end
$var wire 1 |" readData [4] $end
$var wire 1 }" readData [3] $end
$var wire 1 ~" readData [2] $end
$var wire 1 !# readData [1] $end
$var wire 1 "# readData [0] $end
$var wire 1 ## Imm5 [15] $end
$var wire 1 $# Imm5 [14] $end
$var wire 1 %# Imm5 [13] $end
$var wire 1 &# Imm5 [12] $end
$var wire 1 '# Imm5 [11] $end
$var wire 1 (# Imm5 [10] $end
$var wire 1 )# Imm5 [9] $end
$var wire 1 *# Imm5 [8] $end
$var wire 1 +# Imm5 [7] $end
$var wire 1 ,# Imm5 [6] $end
$var wire 1 -# Imm5 [5] $end
$var wire 1 .# Imm5 [4] $end
$var wire 1 /# Imm5 [3] $end
$var wire 1 0# Imm5 [2] $end
$var wire 1 1# Imm5 [1] $end
$var wire 1 2# Imm5 [0] $end
$var wire 1 3# Imm8 [15] $end
$var wire 1 4# Imm8 [14] $end
$var wire 1 5# Imm8 [13] $end
$var wire 1 6# Imm8 [12] $end
$var wire 1 7# Imm8 [11] $end
$var wire 1 8# Imm8 [10] $end
$var wire 1 9# Imm8 [9] $end
$var wire 1 :# Imm8 [8] $end
$var wire 1 ;# Imm8 [7] $end
$var wire 1 <# Imm8 [6] $end
$var wire 1 =# Imm8 [5] $end
$var wire 1 ># Imm8 [4] $end
$var wire 1 ?# Imm8 [3] $end
$var wire 1 @# Imm8 [2] $end
$var wire 1 A# Imm8 [1] $end
$var wire 1 B# Imm8 [0] $end
$var wire 1 C# sImm8 [15] $end
$var wire 1 D# sImm8 [14] $end
$var wire 1 E# sImm8 [13] $end
$var wire 1 F# sImm8 [12] $end
$var wire 1 G# sImm8 [11] $end
$var wire 1 H# sImm8 [10] $end
$var wire 1 I# sImm8 [9] $end
$var wire 1 J# sImm8 [8] $end
$var wire 1 K# sImm8 [7] $end
$var wire 1 L# sImm8 [6] $end
$var wire 1 M# sImm8 [5] $end
$var wire 1 N# sImm8 [4] $end
$var wire 1 O# sImm8 [3] $end
$var wire 1 P# sImm8 [2] $end
$var wire 1 Q# sImm8 [1] $end
$var wire 1 R# sImm8 [0] $end
$var wire 1 S# sImm11 [15] $end
$var wire 1 T# sImm11 [14] $end
$var wire 1 U# sImm11 [13] $end
$var wire 1 V# sImm11 [12] $end
$var wire 1 W# sImm11 [11] $end
$var wire 1 X# sImm11 [10] $end
$var wire 1 Y# sImm11 [9] $end
$var wire 1 Z# sImm11 [8] $end
$var wire 1 [# sImm11 [7] $end
$var wire 1 \# sImm11 [6] $end
$var wire 1 ]# sImm11 [5] $end
$var wire 1 ^# sImm11 [4] $end
$var wire 1 _# sImm11 [3] $end
$var wire 1 `# sImm11 [2] $end
$var wire 1 a# sImm11 [1] $end
$var wire 1 b# sImm11 [0] $end
$var wire 1 c# nHaltSig $end
$var wire 1 d# RegWrt $end
$var wire 1 e# ZeroExt $end
$var wire 1 f# ImmSrc $end
$var wire 1 g# invA $end
$var wire 1 h# invB $end
$var wire 1 i# ALUSign $end
$var wire 1 j# Cin $end
$var wire 1 k# ALUJmp $end
$var wire 1 l# MemWrt $end
$var wire 1 m# MemRead $end
$var wire 1 n# RegSrc [1] $end
$var wire 1 o# RegSrc [0] $end
$var wire 1 p# BSrc [1] $end
$var wire 1 q# BSrc [0] $end
$var wire 1 r# RegDst [1] $end
$var wire 1 s# RegDst [0] $end
$var wire 1 t# BranchTaken [2] $end
$var wire 1 u# BranchTaken [1] $end
$var wire 1 v# BranchTaken [0] $end
$var wire 1 w# RD [2] $end
$var wire 1 x# RD [1] $end
$var wire 1 y# RD [0] $end

$scope module control0 $end
$var wire 1 U! instr [15] $end
$var wire 1 V! instr [14] $end
$var wire 1 W! instr [13] $end
$var wire 1 X! instr [12] $end
$var wire 1 Y! instr [11] $end
$var wire 1 Z! instr [10] $end
$var wire 1 [! instr [9] $end
$var wire 1 \! instr [8] $end
$var wire 1 ]! instr [7] $end
$var wire 1 ^! instr [6] $end
$var wire 1 _! instr [5] $end
$var wire 1 `! instr [4] $end
$var wire 1 a! instr [3] $end
$var wire 1 b! instr [2] $end
$var wire 1 c! instr [1] $end
$var wire 1 d! instr [0] $end
$var reg 1 z# nHaltSig $end
$var reg 1 {# RegWrt $end
$var reg 1 |# ZeroExt $end
$var reg 1 }# MemRead $end
$var reg 1 ~# ImmSrc $end
$var reg 1 !$ invA $end
$var reg 1 "$ invB $end
$var reg 1 #$ ALUSign $end
$var reg 1 $$ Cin $end
$var reg 1 %$ ALUJmp $end
$var reg 1 &$ MemWrt $end
$var reg 1 '$ err $end
$var reg 6 ($ ALUOpr [5:0] $end
$var reg 2 )$ RegSrc [1:0] $end
$var reg 2 *$ BSrc [1:0] $end
$var reg 2 +$ RegDst [1:0] $end
$var reg 3 ,$ BranchTaken [2:0] $end
$var wire 1 -$ funct $end
$upscope $end

$scope module fetch0 $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 5! PC_B [15] $end
$var wire 1 6! PC_B [14] $end
$var wire 1 7! PC_B [13] $end
$var wire 1 8! PC_B [12] $end
$var wire 1 9! PC_B [11] $end
$var wire 1 :! PC_B [10] $end
$var wire 1 ;! PC_B [9] $end
$var wire 1 <! PC_B [8] $end
$var wire 1 =! PC_B [7] $end
$var wire 1 >! PC_B [6] $end
$var wire 1 ?! PC_B [5] $end
$var wire 1 @! PC_B [4] $end
$var wire 1 A! PC_B [3] $end
$var wire 1 B! PC_B [2] $end
$var wire 1 C! PC_B [1] $end
$var wire 1 D! PC_B [0] $end
$var wire 1 c# nHaltSig $end
$var wire 1 U! instr [15] $end
$var wire 1 V! instr [14] $end
$var wire 1 W! instr [13] $end
$var wire 1 X! instr [12] $end
$var wire 1 Y! instr [11] $end
$var wire 1 Z! instr [10] $end
$var wire 1 [! instr [9] $end
$var wire 1 \! instr [8] $end
$var wire 1 ]! instr [7] $end
$var wire 1 ^! instr [6] $end
$var wire 1 _! instr [5] $end
$var wire 1 `! instr [4] $end
$var wire 1 a! instr [3] $end
$var wire 1 b! instr [2] $end
$var wire 1 c! instr [1] $end
$var wire 1 d! instr [0] $end
$var wire 1 e! PC_Next [15] $end
$var wire 1 f! PC_Next [14] $end
$var wire 1 g! PC_Next [13] $end
$var wire 1 h! PC_Next [12] $end
$var wire 1 i! PC_Next [11] $end
$var wire 1 j! PC_Next [10] $end
$var wire 1 k! PC_Next [9] $end
$var wire 1 l! PC_Next [8] $end
$var wire 1 m! PC_Next [7] $end
$var wire 1 n! PC_Next [6] $end
$var wire 1 o! PC_Next [5] $end
$var wire 1 p! PC_Next [4] $end
$var wire 1 q! PC_Next [3] $end
$var wire 1 r! PC_Next [2] $end
$var wire 1 s! PC_Next [1] $end
$var wire 1 t! PC_Next [0] $end
$var wire 1 E! PC_curr [15] $end
$var wire 1 F! PC_curr [14] $end
$var wire 1 G! PC_curr [13] $end
$var wire 1 H! PC_curr [12] $end
$var wire 1 I! PC_curr [11] $end
$var wire 1 J! PC_curr [10] $end
$var wire 1 K! PC_curr [9] $end
$var wire 1 L! PC_curr [8] $end
$var wire 1 M! PC_curr [7] $end
$var wire 1 N! PC_curr [6] $end
$var wire 1 O! PC_curr [5] $end
$var wire 1 P! PC_curr [4] $end
$var wire 1 Q! PC_curr [3] $end
$var wire 1 R! PC_curr [2] $end
$var wire 1 S! PC_curr [1] $end
$var wire 1 T! PC_curr [0] $end
$var wire 1 .$ PC [15] $end
$var wire 1 /$ PC [14] $end
$var wire 1 0$ PC [13] $end
$var wire 1 1$ PC [12] $end
$var wire 1 2$ PC [11] $end
$var wire 1 3$ PC [10] $end
$var wire 1 4$ PC [9] $end
$var wire 1 5$ PC [8] $end
$var wire 1 6$ PC [7] $end
$var wire 1 7$ PC [6] $end
$var wire 1 8$ PC [5] $end
$var wire 1 9$ PC [4] $end
$var wire 1 :$ PC [3] $end
$var wire 1 ;$ PC [2] $end
$var wire 1 <$ PC [1] $end
$var wire 1 =$ PC [0] $end
$var wire 1 >$ err $end
$var wire 1 ?$ add2 [15] $end
$var wire 1 @$ add2 [14] $end
$var wire 1 A$ add2 [13] $end
$var wire 1 B$ add2 [12] $end
$var wire 1 C$ add2 [11] $end
$var wire 1 D$ add2 [10] $end
$var wire 1 E$ add2 [9] $end
$var wire 1 F$ add2 [8] $end
$var wire 1 G$ add2 [7] $end
$var wire 1 H$ add2 [6] $end
$var wire 1 I$ add2 [5] $end
$var wire 1 J$ add2 [4] $end
$var wire 1 K$ add2 [3] $end
$var wire 1 L$ add2 [2] $end
$var wire 1 M$ add2 [1] $end
$var wire 1 N$ add2 [0] $end
$var wire 1 O$ PC_Sum [15] $end
$var wire 1 P$ PC_Sum [14] $end
$var wire 1 Q$ PC_Sum [13] $end
$var wire 1 R$ PC_Sum [12] $end
$var wire 1 S$ PC_Sum [11] $end
$var wire 1 T$ PC_Sum [10] $end
$var wire 1 U$ PC_Sum [9] $end
$var wire 1 V$ PC_Sum [8] $end
$var wire 1 W$ PC_Sum [7] $end
$var wire 1 X$ PC_Sum [6] $end
$var wire 1 Y$ PC_Sum [5] $end
$var wire 1 Z$ PC_Sum [4] $end
$var wire 1 [$ PC_Sum [3] $end
$var wire 1 \$ PC_Sum [2] $end
$var wire 1 ]$ PC_Sum [1] $end
$var wire 1 ^$ PC_Sum [0] $end
$var wire 1 _$ c_out $end

$scope module pc_reg $end
$var parameter 32 `$ BIT_WIDTH $end
$var parameter 32 a$ BIT_SIZE $end
$var parameter 32 b$ REG_NUMS $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 c$ we $end
$var wire 1 5! w [15] $end
$var wire 1 6! w [14] $end
$var wire 1 7! w [13] $end
$var wire 1 8! w [12] $end
$var wire 1 9! w [11] $end
$var wire 1 :! w [10] $end
$var wire 1 ;! w [9] $end
$var wire 1 <! w [8] $end
$var wire 1 =! w [7] $end
$var wire 1 >! w [6] $end
$var wire 1 ?! w [5] $end
$var wire 1 @! w [4] $end
$var wire 1 A! w [3] $end
$var wire 1 B! w [2] $end
$var wire 1 C! w [1] $end
$var wire 1 D! w [0] $end
$var wire 1 .$ r [15] $end
$var wire 1 /$ r [14] $end
$var wire 1 0$ r [13] $end
$var wire 1 1$ r [12] $end
$var wire 1 2$ r [11] $end
$var wire 1 3$ r [10] $end
$var wire 1 4$ r [9] $end
$var wire 1 5$ r [8] $end
$var wire 1 6$ r [7] $end
$var wire 1 7$ r [6] $end
$var wire 1 8$ r [5] $end
$var wire 1 9$ r [4] $end
$var wire 1 :$ r [3] $end
$var wire 1 ;$ r [2] $end
$var wire 1 <$ r [1] $end
$var wire 1 =$ r [0] $end

$scope module dff01[15] $end
$var wire 1 .$ q $end
$var wire 1 d$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 e$ state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 /$ q $end
$var wire 1 f$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 g$ state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 0$ q $end
$var wire 1 h$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 i$ state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 1$ q $end
$var wire 1 j$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 k$ state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 2$ q $end
$var wire 1 l$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 m$ state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 3$ q $end
$var wire 1 n$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 o$ state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 4$ q $end
$var wire 1 p$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 q$ state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 5$ q $end
$var wire 1 r$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 s$ state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 6$ q $end
$var wire 1 t$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 u$ state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 7$ q $end
$var wire 1 v$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 w$ state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 8$ q $end
$var wire 1 x$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 y$ state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 9$ q $end
$var wire 1 z$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 {$ state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 :$ q $end
$var wire 1 |$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 }$ state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 ;$ q $end
$var wire 1 ~$ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 !% state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 <$ q $end
$var wire 1 "% d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 #% state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 =$ q $end
$var wire 1 $% d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 %% state $end
$upscope $end
$upscope $end

$scope module instr_mem $end
$var wire 1 U! data_out [15] $end
$var wire 1 V! data_out [14] $end
$var wire 1 W! data_out [13] $end
$var wire 1 X! data_out [12] $end
$var wire 1 Y! data_out [11] $end
$var wire 1 Z! data_out [10] $end
$var wire 1 [! data_out [9] $end
$var wire 1 \! data_out [8] $end
$var wire 1 ]! data_out [7] $end
$var wire 1 ^! data_out [6] $end
$var wire 1 _! data_out [5] $end
$var wire 1 `! data_out [4] $end
$var wire 1 a! data_out [3] $end
$var wire 1 b! data_out [2] $end
$var wire 1 c! data_out [1] $end
$var wire 1 d! data_out [0] $end
$var wire 1 &% data_in [15] $end
$var wire 1 '% data_in [14] $end
$var wire 1 (% data_in [13] $end
$var wire 1 )% data_in [12] $end
$var wire 1 *% data_in [11] $end
$var wire 1 +% data_in [10] $end
$var wire 1 ,% data_in [9] $end
$var wire 1 -% data_in [8] $end
$var wire 1 .% data_in [7] $end
$var wire 1 /% data_in [6] $end
$var wire 1 0% data_in [5] $end
$var wire 1 1% data_in [4] $end
$var wire 1 2% data_in [3] $end
$var wire 1 3% data_in [2] $end
$var wire 1 4% data_in [1] $end
$var wire 1 5% data_in [0] $end
$var wire 1 .$ addr [15] $end
$var wire 1 /$ addr [14] $end
$var wire 1 0$ addr [13] $end
$var wire 1 1$ addr [12] $end
$var wire 1 2$ addr [11] $end
$var wire 1 3$ addr [10] $end
$var wire 1 4$ addr [9] $end
$var wire 1 5$ addr [8] $end
$var wire 1 6$ addr [7] $end
$var wire 1 7$ addr [6] $end
$var wire 1 8$ addr [5] $end
$var wire 1 9$ addr [4] $end
$var wire 1 :$ addr [3] $end
$var wire 1 ;$ addr [2] $end
$var wire 1 <$ addr [1] $end
$var wire 1 =$ addr [0] $end
$var wire 1 6% enable $end
$var wire 1 7% wr $end
$var wire 1 8% createdump $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 9% loaded $end
$var reg 17 :% largest [16:0] $end
$var integer 32 ;% mcd $end
$var integer 32 <% i $end
$upscope $end

$scope module pc_add2 $end
$var parameter 32 =% N $end
$var wire 1 O$ sum [15] $end
$var wire 1 P$ sum [14] $end
$var wire 1 Q$ sum [13] $end
$var wire 1 R$ sum [12] $end
$var wire 1 S$ sum [11] $end
$var wire 1 T$ sum [10] $end
$var wire 1 U$ sum [9] $end
$var wire 1 V$ sum [8] $end
$var wire 1 W$ sum [7] $end
$var wire 1 X$ sum [6] $end
$var wire 1 Y$ sum [5] $end
$var wire 1 Z$ sum [4] $end
$var wire 1 [$ sum [3] $end
$var wire 1 \$ sum [2] $end
$var wire 1 ]$ sum [1] $end
$var wire 1 ^$ sum [0] $end
$var wire 1 _$ c_out $end
$var wire 1 .$ a [15] $end
$var wire 1 /$ a [14] $end
$var wire 1 0$ a [13] $end
$var wire 1 1$ a [12] $end
$var wire 1 2$ a [11] $end
$var wire 1 3$ a [10] $end
$var wire 1 4$ a [9] $end
$var wire 1 5$ a [8] $end
$var wire 1 6$ a [7] $end
$var wire 1 7$ a [6] $end
$var wire 1 8$ a [5] $end
$var wire 1 9$ a [4] $end
$var wire 1 :$ a [3] $end
$var wire 1 ;$ a [2] $end
$var wire 1 <$ a [1] $end
$var wire 1 =$ a [0] $end
$var wire 1 ?$ b [15] $end
$var wire 1 @$ b [14] $end
$var wire 1 A$ b [13] $end
$var wire 1 B$ b [12] $end
$var wire 1 C$ b [11] $end
$var wire 1 D$ b [10] $end
$var wire 1 E$ b [9] $end
$var wire 1 F$ b [8] $end
$var wire 1 G$ b [7] $end
$var wire 1 H$ b [6] $end
$var wire 1 I$ b [5] $end
$var wire 1 J$ b [4] $end
$var wire 1 K$ b [3] $end
$var wire 1 L$ b [2] $end
$var wire 1 M$ b [1] $end
$var wire 1 N$ b [0] $end
$var wire 1 >% c_in $end
$var wire 1 ?% carries [2] $end
$var wire 1 @% carries [1] $end
$var wire 1 A% carries [0] $end

$scope module cla[3] $end
$var parameter 32 B% N $end
$var wire 1 O$ sum [3] $end
$var wire 1 P$ sum [2] $end
$var wire 1 Q$ sum [1] $end
$var wire 1 R$ sum [0] $end
$var wire 1 _$ c_out $end
$var wire 1 .$ a [3] $end
$var wire 1 /$ a [2] $end
$var wire 1 0$ a [1] $end
$var wire 1 1$ a [0] $end
$var wire 1 ?$ b [3] $end
$var wire 1 @$ b [2] $end
$var wire 1 A$ b [1] $end
$var wire 1 B$ b [0] $end
$var wire 1 ?% c_in $end
$var wire 1 C% p [3] $end
$var wire 1 D% p [2] $end
$var wire 1 E% p [1] $end
$var wire 1 F% p [0] $end
$var wire 1 G% ng [3] $end
$var wire 1 H% ng [2] $end
$var wire 1 I% ng [1] $end
$var wire 1 J% ng [0] $end
$var wire 1 K% carries [4] $end
$var wire 1 L% carries [3] $end
$var wire 1 M% carries [2] $end
$var wire 1 N% carries [1] $end
$var wire 1 O% carries [0] $end
$var wire 1 P% cp [3] $end
$var wire 1 Q% cp [2] $end
$var wire 1 R% cp [1] $end
$var wire 1 S% cp [0] $end

$scope module xor_1[3] $end
$var wire 1 C% out $end
$var wire 1 .$ in1 $end
$var wire 1 ?$ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 D% out $end
$var wire 1 /$ in1 $end
$var wire 1 @$ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 E% out $end
$var wire 1 0$ in1 $end
$var wire 1 A$ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 F% out $end
$var wire 1 1$ in1 $end
$var wire 1 B$ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 G% out $end
$var wire 1 .$ in1 $end
$var wire 1 ?$ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 H% out $end
$var wire 1 /$ in1 $end
$var wire 1 @$ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 I% out $end
$var wire 1 0$ in1 $end
$var wire 1 A$ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 J% out $end
$var wire 1 1$ in1 $end
$var wire 1 B$ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 P% out $end
$var wire 1 C% in1 $end
$var wire 1 L% in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 Q% out $end
$var wire 1 D% in1 $end
$var wire 1 M% in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 R% out $end
$var wire 1 E% in1 $end
$var wire 1 N% in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 S% out $end
$var wire 1 F% in1 $end
$var wire 1 ?% in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 _$ out $end
$var wire 1 P% in1 $end
$var wire 1 G% in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 L% out $end
$var wire 1 Q% in1 $end
$var wire 1 H% in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 M% out $end
$var wire 1 R% in1 $end
$var wire 1 I% in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 N% out $end
$var wire 1 S% in1 $end
$var wire 1 J% in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 O$ s $end
$var wire 1 T% c_out $end
$var wire 1 .$ a $end
$var wire 1 ?$ b $end
$var wire 1 L% c_in $end
$var wire 1 U% AxorB $end
$var wire 1 V% CnandAB $end
$var wire 1 W% AnandB $end

$scope module xor_1 $end
$var wire 1 U% out $end
$var wire 1 .$ in1 $end
$var wire 1 ?$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 O$ out $end
$var wire 1 U% in1 $end
$var wire 1 L% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 V% out $end
$var wire 1 U% in1 $end
$var wire 1 L% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 W% out $end
$var wire 1 .$ in1 $end
$var wire 1 ?$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 T% out $end
$var wire 1 W% in1 $end
$var wire 1 V% in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 P$ s $end
$var wire 1 X% c_out $end
$var wire 1 /$ a $end
$var wire 1 @$ b $end
$var wire 1 M% c_in $end
$var wire 1 Y% AxorB $end
$var wire 1 Z% CnandAB $end
$var wire 1 [% AnandB $end

$scope module xor_1 $end
$var wire 1 Y% out $end
$var wire 1 /$ in1 $end
$var wire 1 @$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 P$ out $end
$var wire 1 Y% in1 $end
$var wire 1 M% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 Z% out $end
$var wire 1 Y% in1 $end
$var wire 1 M% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 [% out $end
$var wire 1 /$ in1 $end
$var wire 1 @$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 X% out $end
$var wire 1 [% in1 $end
$var wire 1 Z% in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 Q$ s $end
$var wire 1 \% c_out $end
$var wire 1 0$ a $end
$var wire 1 A$ b $end
$var wire 1 N% c_in $end
$var wire 1 ]% AxorB $end
$var wire 1 ^% CnandAB $end
$var wire 1 _% AnandB $end

$scope module xor_1 $end
$var wire 1 ]% out $end
$var wire 1 0$ in1 $end
$var wire 1 A$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 Q$ out $end
$var wire 1 ]% in1 $end
$var wire 1 N% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 ^% out $end
$var wire 1 ]% in1 $end
$var wire 1 N% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 _% out $end
$var wire 1 0$ in1 $end
$var wire 1 A$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 \% out $end
$var wire 1 _% in1 $end
$var wire 1 ^% in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 R$ s $end
$var wire 1 `% c_out $end
$var wire 1 1$ a $end
$var wire 1 B$ b $end
$var wire 1 ?% c_in $end
$var wire 1 a% AxorB $end
$var wire 1 b% CnandAB $end
$var wire 1 c% AnandB $end

$scope module xor_1 $end
$var wire 1 a% out $end
$var wire 1 1$ in1 $end
$var wire 1 B$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 R$ out $end
$var wire 1 a% in1 $end
$var wire 1 ?% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 b% out $end
$var wire 1 a% in1 $end
$var wire 1 ?% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 c% out $end
$var wire 1 1$ in1 $end
$var wire 1 B$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 `% out $end
$var wire 1 c% in1 $end
$var wire 1 b% in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[2] $end
$var parameter 32 d% N $end
$var wire 1 S$ sum [3] $end
$var wire 1 T$ sum [2] $end
$var wire 1 U$ sum [1] $end
$var wire 1 V$ sum [0] $end
$var wire 1 ?% c_out $end
$var wire 1 2$ a [3] $end
$var wire 1 3$ a [2] $end
$var wire 1 4$ a [1] $end
$var wire 1 5$ a [0] $end
$var wire 1 C$ b [3] $end
$var wire 1 D$ b [2] $end
$var wire 1 E$ b [1] $end
$var wire 1 F$ b [0] $end
$var wire 1 @% c_in $end
$var wire 1 e% p [3] $end
$var wire 1 f% p [2] $end
$var wire 1 g% p [1] $end
$var wire 1 h% p [0] $end
$var wire 1 i% ng [3] $end
$var wire 1 j% ng [2] $end
$var wire 1 k% ng [1] $end
$var wire 1 l% ng [0] $end
$var wire 1 m% carries [4] $end
$var wire 1 n% carries [3] $end
$var wire 1 o% carries [2] $end
$var wire 1 p% carries [1] $end
$var wire 1 q% carries [0] $end
$var wire 1 r% cp [3] $end
$var wire 1 s% cp [2] $end
$var wire 1 t% cp [1] $end
$var wire 1 u% cp [0] $end

$scope module xor_1[3] $end
$var wire 1 e% out $end
$var wire 1 2$ in1 $end
$var wire 1 C$ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 f% out $end
$var wire 1 3$ in1 $end
$var wire 1 D$ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 g% out $end
$var wire 1 4$ in1 $end
$var wire 1 E$ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 h% out $end
$var wire 1 5$ in1 $end
$var wire 1 F$ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 i% out $end
$var wire 1 2$ in1 $end
$var wire 1 C$ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 j% out $end
$var wire 1 3$ in1 $end
$var wire 1 D$ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 k% out $end
$var wire 1 4$ in1 $end
$var wire 1 E$ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 l% out $end
$var wire 1 5$ in1 $end
$var wire 1 F$ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 r% out $end
$var wire 1 e% in1 $end
$var wire 1 n% in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 s% out $end
$var wire 1 f% in1 $end
$var wire 1 o% in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 t% out $end
$var wire 1 g% in1 $end
$var wire 1 p% in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 u% out $end
$var wire 1 h% in1 $end
$var wire 1 @% in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 ?% out $end
$var wire 1 r% in1 $end
$var wire 1 i% in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 n% out $end
$var wire 1 s% in1 $end
$var wire 1 j% in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 o% out $end
$var wire 1 t% in1 $end
$var wire 1 k% in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 p% out $end
$var wire 1 u% in1 $end
$var wire 1 l% in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 S$ s $end
$var wire 1 v% c_out $end
$var wire 1 2$ a $end
$var wire 1 C$ b $end
$var wire 1 n% c_in $end
$var wire 1 w% AxorB $end
$var wire 1 x% CnandAB $end
$var wire 1 y% AnandB $end

$scope module xor_1 $end
$var wire 1 w% out $end
$var wire 1 2$ in1 $end
$var wire 1 C$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 S$ out $end
$var wire 1 w% in1 $end
$var wire 1 n% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 x% out $end
$var wire 1 w% in1 $end
$var wire 1 n% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 y% out $end
$var wire 1 2$ in1 $end
$var wire 1 C$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 v% out $end
$var wire 1 y% in1 $end
$var wire 1 x% in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 T$ s $end
$var wire 1 z% c_out $end
$var wire 1 3$ a $end
$var wire 1 D$ b $end
$var wire 1 o% c_in $end
$var wire 1 {% AxorB $end
$var wire 1 |% CnandAB $end
$var wire 1 }% AnandB $end

$scope module xor_1 $end
$var wire 1 {% out $end
$var wire 1 3$ in1 $end
$var wire 1 D$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 T$ out $end
$var wire 1 {% in1 $end
$var wire 1 o% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 |% out $end
$var wire 1 {% in1 $end
$var wire 1 o% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 }% out $end
$var wire 1 3$ in1 $end
$var wire 1 D$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 z% out $end
$var wire 1 }% in1 $end
$var wire 1 |% in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 U$ s $end
$var wire 1 ~% c_out $end
$var wire 1 4$ a $end
$var wire 1 E$ b $end
$var wire 1 p% c_in $end
$var wire 1 !& AxorB $end
$var wire 1 "& CnandAB $end
$var wire 1 #& AnandB $end

$scope module xor_1 $end
$var wire 1 !& out $end
$var wire 1 4$ in1 $end
$var wire 1 E$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 U$ out $end
$var wire 1 !& in1 $end
$var wire 1 p% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 "& out $end
$var wire 1 !& in1 $end
$var wire 1 p% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 #& out $end
$var wire 1 4$ in1 $end
$var wire 1 E$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 ~% out $end
$var wire 1 #& in1 $end
$var wire 1 "& in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 V$ s $end
$var wire 1 $& c_out $end
$var wire 1 5$ a $end
$var wire 1 F$ b $end
$var wire 1 @% c_in $end
$var wire 1 %& AxorB $end
$var wire 1 && CnandAB $end
$var wire 1 '& AnandB $end

$scope module xor_1 $end
$var wire 1 %& out $end
$var wire 1 5$ in1 $end
$var wire 1 F$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 V$ out $end
$var wire 1 %& in1 $end
$var wire 1 @% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 && out $end
$var wire 1 %& in1 $end
$var wire 1 @% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 '& out $end
$var wire 1 5$ in1 $end
$var wire 1 F$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 $& out $end
$var wire 1 '& in1 $end
$var wire 1 && in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[1] $end
$var parameter 32 (& N $end
$var wire 1 W$ sum [3] $end
$var wire 1 X$ sum [2] $end
$var wire 1 Y$ sum [1] $end
$var wire 1 Z$ sum [0] $end
$var wire 1 @% c_out $end
$var wire 1 6$ a [3] $end
$var wire 1 7$ a [2] $end
$var wire 1 8$ a [1] $end
$var wire 1 9$ a [0] $end
$var wire 1 G$ b [3] $end
$var wire 1 H$ b [2] $end
$var wire 1 I$ b [1] $end
$var wire 1 J$ b [0] $end
$var wire 1 A% c_in $end
$var wire 1 )& p [3] $end
$var wire 1 *& p [2] $end
$var wire 1 +& p [1] $end
$var wire 1 ,& p [0] $end
$var wire 1 -& ng [3] $end
$var wire 1 .& ng [2] $end
$var wire 1 /& ng [1] $end
$var wire 1 0& ng [0] $end
$var wire 1 1& carries [4] $end
$var wire 1 2& carries [3] $end
$var wire 1 3& carries [2] $end
$var wire 1 4& carries [1] $end
$var wire 1 5& carries [0] $end
$var wire 1 6& cp [3] $end
$var wire 1 7& cp [2] $end
$var wire 1 8& cp [1] $end
$var wire 1 9& cp [0] $end

$scope module xor_1[3] $end
$var wire 1 )& out $end
$var wire 1 6$ in1 $end
$var wire 1 G$ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 *& out $end
$var wire 1 7$ in1 $end
$var wire 1 H$ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 +& out $end
$var wire 1 8$ in1 $end
$var wire 1 I$ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 ,& out $end
$var wire 1 9$ in1 $end
$var wire 1 J$ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 -& out $end
$var wire 1 6$ in1 $end
$var wire 1 G$ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 .& out $end
$var wire 1 7$ in1 $end
$var wire 1 H$ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 /& out $end
$var wire 1 8$ in1 $end
$var wire 1 I$ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 0& out $end
$var wire 1 9$ in1 $end
$var wire 1 J$ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 6& out $end
$var wire 1 )& in1 $end
$var wire 1 2& in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 7& out $end
$var wire 1 *& in1 $end
$var wire 1 3& in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 8& out $end
$var wire 1 +& in1 $end
$var wire 1 4& in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 9& out $end
$var wire 1 ,& in1 $end
$var wire 1 A% in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 @% out $end
$var wire 1 6& in1 $end
$var wire 1 -& in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 2& out $end
$var wire 1 7& in1 $end
$var wire 1 .& in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 3& out $end
$var wire 1 8& in1 $end
$var wire 1 /& in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 4& out $end
$var wire 1 9& in1 $end
$var wire 1 0& in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 W$ s $end
$var wire 1 :& c_out $end
$var wire 1 6$ a $end
$var wire 1 G$ b $end
$var wire 1 2& c_in $end
$var wire 1 ;& AxorB $end
$var wire 1 <& CnandAB $end
$var wire 1 =& AnandB $end

$scope module xor_1 $end
$var wire 1 ;& out $end
$var wire 1 6$ in1 $end
$var wire 1 G$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 W$ out $end
$var wire 1 ;& in1 $end
$var wire 1 2& in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 <& out $end
$var wire 1 ;& in1 $end
$var wire 1 2& in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 =& out $end
$var wire 1 6$ in1 $end
$var wire 1 G$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 :& out $end
$var wire 1 =& in1 $end
$var wire 1 <& in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 X$ s $end
$var wire 1 >& c_out $end
$var wire 1 7$ a $end
$var wire 1 H$ b $end
$var wire 1 3& c_in $end
$var wire 1 ?& AxorB $end
$var wire 1 @& CnandAB $end
$var wire 1 A& AnandB $end

$scope module xor_1 $end
$var wire 1 ?& out $end
$var wire 1 7$ in1 $end
$var wire 1 H$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 X$ out $end
$var wire 1 ?& in1 $end
$var wire 1 3& in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 @& out $end
$var wire 1 ?& in1 $end
$var wire 1 3& in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 A& out $end
$var wire 1 7$ in1 $end
$var wire 1 H$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 >& out $end
$var wire 1 A& in1 $end
$var wire 1 @& in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 Y$ s $end
$var wire 1 B& c_out $end
$var wire 1 8$ a $end
$var wire 1 I$ b $end
$var wire 1 4& c_in $end
$var wire 1 C& AxorB $end
$var wire 1 D& CnandAB $end
$var wire 1 E& AnandB $end

$scope module xor_1 $end
$var wire 1 C& out $end
$var wire 1 8$ in1 $end
$var wire 1 I$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 Y$ out $end
$var wire 1 C& in1 $end
$var wire 1 4& in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 D& out $end
$var wire 1 C& in1 $end
$var wire 1 4& in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 E& out $end
$var wire 1 8$ in1 $end
$var wire 1 I$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 B& out $end
$var wire 1 E& in1 $end
$var wire 1 D& in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 Z$ s $end
$var wire 1 F& c_out $end
$var wire 1 9$ a $end
$var wire 1 J$ b $end
$var wire 1 A% c_in $end
$var wire 1 G& AxorB $end
$var wire 1 H& CnandAB $end
$var wire 1 I& AnandB $end

$scope module xor_1 $end
$var wire 1 G& out $end
$var wire 1 9$ in1 $end
$var wire 1 J$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 Z$ out $end
$var wire 1 G& in1 $end
$var wire 1 A% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 H& out $end
$var wire 1 G& in1 $end
$var wire 1 A% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 I& out $end
$var wire 1 9$ in1 $end
$var wire 1 J$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 F& out $end
$var wire 1 I& in1 $end
$var wire 1 H& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[0] $end
$var parameter 32 J& N $end
$var wire 1 [$ sum [3] $end
$var wire 1 \$ sum [2] $end
$var wire 1 ]$ sum [1] $end
$var wire 1 ^$ sum [0] $end
$var wire 1 A% c_out $end
$var wire 1 :$ a [3] $end
$var wire 1 ;$ a [2] $end
$var wire 1 <$ a [1] $end
$var wire 1 =$ a [0] $end
$var wire 1 K$ b [3] $end
$var wire 1 L$ b [2] $end
$var wire 1 M$ b [1] $end
$var wire 1 N$ b [0] $end
$var wire 1 >% c_in $end
$var wire 1 K& p [3] $end
$var wire 1 L& p [2] $end
$var wire 1 M& p [1] $end
$var wire 1 N& p [0] $end
$var wire 1 O& ng [3] $end
$var wire 1 P& ng [2] $end
$var wire 1 Q& ng [1] $end
$var wire 1 R& ng [0] $end
$var wire 1 S& carries [4] $end
$var wire 1 T& carries [3] $end
$var wire 1 U& carries [2] $end
$var wire 1 V& carries [1] $end
$var wire 1 W& carries [0] $end
$var wire 1 X& cp [3] $end
$var wire 1 Y& cp [2] $end
$var wire 1 Z& cp [1] $end
$var wire 1 [& cp [0] $end

$scope module xor_1[3] $end
$var wire 1 K& out $end
$var wire 1 :$ in1 $end
$var wire 1 K$ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 L& out $end
$var wire 1 ;$ in1 $end
$var wire 1 L$ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 M& out $end
$var wire 1 <$ in1 $end
$var wire 1 M$ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 N& out $end
$var wire 1 =$ in1 $end
$var wire 1 N$ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 O& out $end
$var wire 1 :$ in1 $end
$var wire 1 K$ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 P& out $end
$var wire 1 ;$ in1 $end
$var wire 1 L$ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 Q& out $end
$var wire 1 <$ in1 $end
$var wire 1 M$ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 R& out $end
$var wire 1 =$ in1 $end
$var wire 1 N$ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 X& out $end
$var wire 1 K& in1 $end
$var wire 1 T& in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 Y& out $end
$var wire 1 L& in1 $end
$var wire 1 U& in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 Z& out $end
$var wire 1 M& in1 $end
$var wire 1 V& in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 [& out $end
$var wire 1 N& in1 $end
$var wire 1 >% in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 A% out $end
$var wire 1 X& in1 $end
$var wire 1 O& in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 T& out $end
$var wire 1 Y& in1 $end
$var wire 1 P& in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 U& out $end
$var wire 1 Z& in1 $end
$var wire 1 Q& in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 V& out $end
$var wire 1 [& in1 $end
$var wire 1 R& in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 [$ s $end
$var wire 1 \& c_out $end
$var wire 1 :$ a $end
$var wire 1 K$ b $end
$var wire 1 T& c_in $end
$var wire 1 ]& AxorB $end
$var wire 1 ^& CnandAB $end
$var wire 1 _& AnandB $end

$scope module xor_1 $end
$var wire 1 ]& out $end
$var wire 1 :$ in1 $end
$var wire 1 K$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 [$ out $end
$var wire 1 ]& in1 $end
$var wire 1 T& in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 ^& out $end
$var wire 1 ]& in1 $end
$var wire 1 T& in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 _& out $end
$var wire 1 :$ in1 $end
$var wire 1 K$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 \& out $end
$var wire 1 _& in1 $end
$var wire 1 ^& in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 \$ s $end
$var wire 1 `& c_out $end
$var wire 1 ;$ a $end
$var wire 1 L$ b $end
$var wire 1 U& c_in $end
$var wire 1 a& AxorB $end
$var wire 1 b& CnandAB $end
$var wire 1 c& AnandB $end

$scope module xor_1 $end
$var wire 1 a& out $end
$var wire 1 ;$ in1 $end
$var wire 1 L$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 \$ out $end
$var wire 1 a& in1 $end
$var wire 1 U& in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 b& out $end
$var wire 1 a& in1 $end
$var wire 1 U& in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 c& out $end
$var wire 1 ;$ in1 $end
$var wire 1 L$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 `& out $end
$var wire 1 c& in1 $end
$var wire 1 b& in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 ]$ s $end
$var wire 1 d& c_out $end
$var wire 1 <$ a $end
$var wire 1 M$ b $end
$var wire 1 V& c_in $end
$var wire 1 e& AxorB $end
$var wire 1 f& CnandAB $end
$var wire 1 g& AnandB $end

$scope module xor_1 $end
$var wire 1 e& out $end
$var wire 1 <$ in1 $end
$var wire 1 M$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 ]$ out $end
$var wire 1 e& in1 $end
$var wire 1 V& in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 f& out $end
$var wire 1 e& in1 $end
$var wire 1 V& in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 g& out $end
$var wire 1 <$ in1 $end
$var wire 1 M$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 d& out $end
$var wire 1 g& in1 $end
$var wire 1 f& in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 ^$ s $end
$var wire 1 h& c_out $end
$var wire 1 =$ a $end
$var wire 1 N$ b $end
$var wire 1 >% c_in $end
$var wire 1 i& AxorB $end
$var wire 1 j& CnandAB $end
$var wire 1 k& AnandB $end

$scope module xor_1 $end
$var wire 1 i& out $end
$var wire 1 =$ in1 $end
$var wire 1 N$ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 ^$ out $end
$var wire 1 i& in1 $end
$var wire 1 >% in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 j& out $end
$var wire 1 i& in1 $end
$var wire 1 >% in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 k& out $end
$var wire 1 =$ in1 $end
$var wire 1 N$ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 h& out $end
$var wire 1 k& in1 $end
$var wire 1 j& in2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module decode0 $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 U! instr [15] $end
$var wire 1 V! instr [14] $end
$var wire 1 W! instr [13] $end
$var wire 1 X! instr [12] $end
$var wire 1 Y! instr [11] $end
$var wire 1 Z! instr [10] $end
$var wire 1 [! instr [9] $end
$var wire 1 \! instr [8] $end
$var wire 1 ]! instr [7] $end
$var wire 1 ^! instr [6] $end
$var wire 1 _! instr [5] $end
$var wire 1 `! instr [4] $end
$var wire 1 a! instr [3] $end
$var wire 1 b! instr [2] $end
$var wire 1 c! instr [1] $end
$var wire 1 d! instr [0] $end
$var wire 1 1" WB [15] $end
$var wire 1 2" WB [14] $end
$var wire 1 3" WB [13] $end
$var wire 1 4" WB [12] $end
$var wire 1 5" WB [11] $end
$var wire 1 6" WB [10] $end
$var wire 1 7" WB [9] $end
$var wire 1 8" WB [8] $end
$var wire 1 9" WB [7] $end
$var wire 1 :" WB [6] $end
$var wire 1 ;" WB [5] $end
$var wire 1 <" WB [4] $end
$var wire 1 =" WB [3] $end
$var wire 1 >" WB [2] $end
$var wire 1 ?" WB [1] $end
$var wire 1 @" WB [0] $end
$var wire 1 e! PC [15] $end
$var wire 1 f! PC [14] $end
$var wire 1 g! PC [13] $end
$var wire 1 h! PC [12] $end
$var wire 1 i! PC [11] $end
$var wire 1 j! PC [10] $end
$var wire 1 k! PC [9] $end
$var wire 1 l! PC [8] $end
$var wire 1 m! PC [7] $end
$var wire 1 n! PC [6] $end
$var wire 1 o! PC [5] $end
$var wire 1 p! PC [4] $end
$var wire 1 q! PC [3] $end
$var wire 1 r! PC [2] $end
$var wire 1 s! PC [1] $end
$var wire 1 t! PC [0] $end
$var wire 1 r# RegDst [1] $end
$var wire 1 s# RegDst [0] $end
$var wire 1 e# ZeroExt $end
$var wire 1 d# RegWrt $end
$var wire 1 '" ALUOpr [5] $end
$var wire 1 (" ALUOpr [4] $end
$var wire 1 )" ALUOpr [3] $end
$var wire 1 *" ALUOpr [2] $end
$var wire 1 +" ALUOpr [1] $end
$var wire 1 ," ALUOpr [0] $end
$var wire 1 -" Oper [3] $end
$var wire 1 ." Oper [2] $end
$var wire 1 /" Oper [1] $end
$var wire 1 0" Oper [0] $end
$var wire 1 0! err $end
$var wire 1 A" RSData [15] $end
$var wire 1 B" RSData [14] $end
$var wire 1 C" RSData [13] $end
$var wire 1 D" RSData [12] $end
$var wire 1 E" RSData [11] $end
$var wire 1 F" RSData [10] $end
$var wire 1 G" RSData [9] $end
$var wire 1 H" RSData [8] $end
$var wire 1 I" RSData [7] $end
$var wire 1 J" RSData [6] $end
$var wire 1 K" RSData [5] $end
$var wire 1 L" RSData [4] $end
$var wire 1 M" RSData [3] $end
$var wire 1 N" RSData [2] $end
$var wire 1 O" RSData [1] $end
$var wire 1 P" RSData [0] $end
$var wire 1 Q" RTData [15] $end
$var wire 1 R" RTData [14] $end
$var wire 1 S" RTData [13] $end
$var wire 1 T" RTData [12] $end
$var wire 1 U" RTData [11] $end
$var wire 1 V" RTData [10] $end
$var wire 1 W" RTData [9] $end
$var wire 1 X" RTData [8] $end
$var wire 1 Y" RTData [7] $end
$var wire 1 Z" RTData [6] $end
$var wire 1 [" RTData [5] $end
$var wire 1 \" RTData [4] $end
$var wire 1 ]" RTData [3] $end
$var wire 1 ^" RTData [2] $end
$var wire 1 _" RTData [1] $end
$var wire 1 `" RTData [0] $end
$var wire 1 ## Imm5 [15] $end
$var wire 1 $# Imm5 [14] $end
$var wire 1 %# Imm5 [13] $end
$var wire 1 &# Imm5 [12] $end
$var wire 1 '# Imm5 [11] $end
$var wire 1 (# Imm5 [10] $end
$var wire 1 )# Imm5 [9] $end
$var wire 1 *# Imm5 [8] $end
$var wire 1 +# Imm5 [7] $end
$var wire 1 ,# Imm5 [6] $end
$var wire 1 -# Imm5 [5] $end
$var wire 1 .# Imm5 [4] $end
$var wire 1 /# Imm5 [3] $end
$var wire 1 0# Imm5 [2] $end
$var wire 1 1# Imm5 [1] $end
$var wire 1 2# Imm5 [0] $end
$var wire 1 3# Imm8 [15] $end
$var wire 1 4# Imm8 [14] $end
$var wire 1 5# Imm8 [13] $end
$var wire 1 6# Imm8 [12] $end
$var wire 1 7# Imm8 [11] $end
$var wire 1 8# Imm8 [10] $end
$var wire 1 9# Imm8 [9] $end
$var wire 1 :# Imm8 [8] $end
$var wire 1 ;# Imm8 [7] $end
$var wire 1 <# Imm8 [6] $end
$var wire 1 =# Imm8 [5] $end
$var wire 1 ># Imm8 [4] $end
$var wire 1 ?# Imm8 [3] $end
$var wire 1 @# Imm8 [2] $end
$var wire 1 A# Imm8 [1] $end
$var wire 1 B# Imm8 [0] $end
$var wire 1 C# sImm8 [15] $end
$var wire 1 D# sImm8 [14] $end
$var wire 1 E# sImm8 [13] $end
$var wire 1 F# sImm8 [12] $end
$var wire 1 G# sImm8 [11] $end
$var wire 1 H# sImm8 [10] $end
$var wire 1 I# sImm8 [9] $end
$var wire 1 J# sImm8 [8] $end
$var wire 1 K# sImm8 [7] $end
$var wire 1 L# sImm8 [6] $end
$var wire 1 M# sImm8 [5] $end
$var wire 1 N# sImm8 [4] $end
$var wire 1 O# sImm8 [3] $end
$var wire 1 P# sImm8 [2] $end
$var wire 1 Q# sImm8 [1] $end
$var wire 1 R# sImm8 [0] $end
$var wire 1 S# sImm11 [15] $end
$var wire 1 T# sImm11 [14] $end
$var wire 1 U# sImm11 [13] $end
$var wire 1 V# sImm11 [12] $end
$var wire 1 W# sImm11 [11] $end
$var wire 1 X# sImm11 [10] $end
$var wire 1 Y# sImm11 [9] $end
$var wire 1 Z# sImm11 [8] $end
$var wire 1 [# sImm11 [7] $end
$var wire 1 \# sImm11 [6] $end
$var wire 1 ]# sImm11 [5] $end
$var wire 1 ^# sImm11 [4] $end
$var wire 1 _# sImm11 [3] $end
$var wire 1 `# sImm11 [2] $end
$var wire 1 a# sImm11 [1] $end
$var wire 1 b# sImm11 [0] $end
$var wire 1 u! PC_Next [15] $end
$var wire 1 v! PC_Next [14] $end
$var wire 1 w! PC_Next [13] $end
$var wire 1 x! PC_Next [12] $end
$var wire 1 y! PC_Next [11] $end
$var wire 1 z! PC_Next [10] $end
$var wire 1 {! PC_Next [9] $end
$var wire 1 |! PC_Next [8] $end
$var wire 1 }! PC_Next [7] $end
$var wire 1 ~! PC_Next [6] $end
$var wire 1 !" PC_Next [5] $end
$var wire 1 "" PC_Next [4] $end
$var wire 1 #" PC_Next [3] $end
$var wire 1 $" PC_Next [2] $end
$var wire 1 %" PC_Next [1] $end
$var wire 1 &" PC_Next [0] $end
$var wire 1 w# RD [2] $end
$var wire 1 x# RD [1] $end
$var wire 1 y# RD [0] $end

$scope module regFile0 $end
$var parameter 32 l& BIT_WIDTH $end
$var parameter 32 m& BIT_SIZE $end
$var parameter 32 n& REG_NUMS $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 Z! read1RegSel [2] $end
$var wire 1 [! read1RegSel [1] $end
$var wire 1 \! read1RegSel [0] $end
$var wire 1 ]! read2RegSel [2] $end
$var wire 1 ^! read2RegSel [1] $end
$var wire 1 _! read2RegSel [0] $end
$var wire 1 w# writeRegSel [2] $end
$var wire 1 x# writeRegSel [1] $end
$var wire 1 y# writeRegSel [0] $end
$var wire 1 1" writeData [15] $end
$var wire 1 2" writeData [14] $end
$var wire 1 3" writeData [13] $end
$var wire 1 4" writeData [12] $end
$var wire 1 5" writeData [11] $end
$var wire 1 6" writeData [10] $end
$var wire 1 7" writeData [9] $end
$var wire 1 8" writeData [8] $end
$var wire 1 9" writeData [7] $end
$var wire 1 :" writeData [6] $end
$var wire 1 ;" writeData [5] $end
$var wire 1 <" writeData [4] $end
$var wire 1 =" writeData [3] $end
$var wire 1 >" writeData [2] $end
$var wire 1 ?" writeData [1] $end
$var wire 1 @" writeData [0] $end
$var wire 1 d# writeEn $end
$var wire 1 A" read1Data [15] $end
$var wire 1 B" read1Data [14] $end
$var wire 1 C" read1Data [13] $end
$var wire 1 D" read1Data [12] $end
$var wire 1 E" read1Data [11] $end
$var wire 1 F" read1Data [10] $end
$var wire 1 G" read1Data [9] $end
$var wire 1 H" read1Data [8] $end
$var wire 1 I" read1Data [7] $end
$var wire 1 J" read1Data [6] $end
$var wire 1 K" read1Data [5] $end
$var wire 1 L" read1Data [4] $end
$var wire 1 M" read1Data [3] $end
$var wire 1 N" read1Data [2] $end
$var wire 1 O" read1Data [1] $end
$var wire 1 P" read1Data [0] $end
$var wire 1 Q" read2Data [15] $end
$var wire 1 R" read2Data [14] $end
$var wire 1 S" read2Data [13] $end
$var wire 1 T" read2Data [12] $end
$var wire 1 U" read2Data [11] $end
$var wire 1 V" read2Data [10] $end
$var wire 1 W" read2Data [9] $end
$var wire 1 X" read2Data [8] $end
$var wire 1 Y" read2Data [7] $end
$var wire 1 Z" read2Data [6] $end
$var wire 1 [" read2Data [5] $end
$var wire 1 \" read2Data [4] $end
$var wire 1 ]" read2Data [3] $end
$var wire 1 ^" read2Data [2] $end
$var wire 1 _" read2Data [1] $end
$var wire 1 `" read2Data [0] $end
$var wire 1 0! err $end
$var wire 1 o& r0 [15] $end
$var wire 1 p& r0 [14] $end
$var wire 1 q& r0 [13] $end
$var wire 1 r& r0 [12] $end
$var wire 1 s& r0 [11] $end
$var wire 1 t& r0 [10] $end
$var wire 1 u& r0 [9] $end
$var wire 1 v& r0 [8] $end
$var wire 1 w& r0 [7] $end
$var wire 1 x& r0 [6] $end
$var wire 1 y& r0 [5] $end
$var wire 1 z& r0 [4] $end
$var wire 1 {& r0 [3] $end
$var wire 1 |& r0 [2] $end
$var wire 1 }& r0 [1] $end
$var wire 1 ~& r0 [0] $end
$var wire 1 !' r1 [15] $end
$var wire 1 "' r1 [14] $end
$var wire 1 #' r1 [13] $end
$var wire 1 $' r1 [12] $end
$var wire 1 %' r1 [11] $end
$var wire 1 &' r1 [10] $end
$var wire 1 '' r1 [9] $end
$var wire 1 (' r1 [8] $end
$var wire 1 )' r1 [7] $end
$var wire 1 *' r1 [6] $end
$var wire 1 +' r1 [5] $end
$var wire 1 ,' r1 [4] $end
$var wire 1 -' r1 [3] $end
$var wire 1 .' r1 [2] $end
$var wire 1 /' r1 [1] $end
$var wire 1 0' r1 [0] $end
$var wire 1 1' r2 [15] $end
$var wire 1 2' r2 [14] $end
$var wire 1 3' r2 [13] $end
$var wire 1 4' r2 [12] $end
$var wire 1 5' r2 [11] $end
$var wire 1 6' r2 [10] $end
$var wire 1 7' r2 [9] $end
$var wire 1 8' r2 [8] $end
$var wire 1 9' r2 [7] $end
$var wire 1 :' r2 [6] $end
$var wire 1 ;' r2 [5] $end
$var wire 1 <' r2 [4] $end
$var wire 1 =' r2 [3] $end
$var wire 1 >' r2 [2] $end
$var wire 1 ?' r2 [1] $end
$var wire 1 @' r2 [0] $end
$var wire 1 A' r3 [15] $end
$var wire 1 B' r3 [14] $end
$var wire 1 C' r3 [13] $end
$var wire 1 D' r3 [12] $end
$var wire 1 E' r3 [11] $end
$var wire 1 F' r3 [10] $end
$var wire 1 G' r3 [9] $end
$var wire 1 H' r3 [8] $end
$var wire 1 I' r3 [7] $end
$var wire 1 J' r3 [6] $end
$var wire 1 K' r3 [5] $end
$var wire 1 L' r3 [4] $end
$var wire 1 M' r3 [3] $end
$var wire 1 N' r3 [2] $end
$var wire 1 O' r3 [1] $end
$var wire 1 P' r3 [0] $end
$var wire 1 Q' r4 [15] $end
$var wire 1 R' r4 [14] $end
$var wire 1 S' r4 [13] $end
$var wire 1 T' r4 [12] $end
$var wire 1 U' r4 [11] $end
$var wire 1 V' r4 [10] $end
$var wire 1 W' r4 [9] $end
$var wire 1 X' r4 [8] $end
$var wire 1 Y' r4 [7] $end
$var wire 1 Z' r4 [6] $end
$var wire 1 [' r4 [5] $end
$var wire 1 \' r4 [4] $end
$var wire 1 ]' r4 [3] $end
$var wire 1 ^' r4 [2] $end
$var wire 1 _' r4 [1] $end
$var wire 1 `' r4 [0] $end
$var wire 1 a' r5 [15] $end
$var wire 1 b' r5 [14] $end
$var wire 1 c' r5 [13] $end
$var wire 1 d' r5 [12] $end
$var wire 1 e' r5 [11] $end
$var wire 1 f' r5 [10] $end
$var wire 1 g' r5 [9] $end
$var wire 1 h' r5 [8] $end
$var wire 1 i' r5 [7] $end
$var wire 1 j' r5 [6] $end
$var wire 1 k' r5 [5] $end
$var wire 1 l' r5 [4] $end
$var wire 1 m' r5 [3] $end
$var wire 1 n' r5 [2] $end
$var wire 1 o' r5 [1] $end
$var wire 1 p' r5 [0] $end
$var wire 1 q' r6 [15] $end
$var wire 1 r' r6 [14] $end
$var wire 1 s' r6 [13] $end
$var wire 1 t' r6 [12] $end
$var wire 1 u' r6 [11] $end
$var wire 1 v' r6 [10] $end
$var wire 1 w' r6 [9] $end
$var wire 1 x' r6 [8] $end
$var wire 1 y' r6 [7] $end
$var wire 1 z' r6 [6] $end
$var wire 1 {' r6 [5] $end
$var wire 1 |' r6 [4] $end
$var wire 1 }' r6 [3] $end
$var wire 1 ~' r6 [2] $end
$var wire 1 !( r6 [1] $end
$var wire 1 "( r6 [0] $end
$var wire 1 #( r7 [15] $end
$var wire 1 $( r7 [14] $end
$var wire 1 %( r7 [13] $end
$var wire 1 &( r7 [12] $end
$var wire 1 '( r7 [11] $end
$var wire 1 (( r7 [10] $end
$var wire 1 )( r7 [9] $end
$var wire 1 *( r7 [8] $end
$var wire 1 +( r7 [7] $end
$var wire 1 ,( r7 [6] $end
$var wire 1 -( r7 [5] $end
$var wire 1 .( r7 [4] $end
$var wire 1 /( r7 [3] $end
$var wire 1 0( r7 [2] $end
$var wire 1 1( r7 [1] $end
$var wire 1 2( r7 [0] $end
$var wire 1 3( we [15] $end
$var wire 1 4( we [14] $end
$var wire 1 5( we [13] $end
$var wire 1 6( we [12] $end
$var wire 1 7( we [11] $end
$var wire 1 8( we [10] $end
$var wire 1 9( we [9] $end
$var wire 1 :( we [8] $end
$var wire 1 ;( we [7] $end
$var wire 1 <( we [6] $end
$var wire 1 =( we [5] $end
$var wire 1 >( we [4] $end
$var wire 1 ?( we [3] $end
$var wire 1 @( we [2] $end
$var wire 1 A( we [1] $end
$var wire 1 B( we [0] $end

$scope module s1 $end
$var parameter 32 C( OPERAND_WIDTH $end
$var parameter 32 D( SHAMT_WIDTH $end
$var parameter 32 E( NUM_OPERATIONS $end
$var wire 1 F( In [15] $end
$var wire 1 G( In [14] $end
$var wire 1 H( In [13] $end
$var wire 1 I( In [12] $end
$var wire 1 J( In [11] $end
$var wire 1 K( In [10] $end
$var wire 1 L( In [9] $end
$var wire 1 M( In [8] $end
$var wire 1 N( In [7] $end
$var wire 1 O( In [6] $end
$var wire 1 P( In [5] $end
$var wire 1 Q( In [4] $end
$var wire 1 R( In [3] $end
$var wire 1 S( In [2] $end
$var wire 1 T( In [1] $end
$var wire 1 d# In [0] $end
$var wire 1 U( ShAmt [3] $end
$var wire 1 w# ShAmt [2] $end
$var wire 1 x# ShAmt [1] $end
$var wire 1 y# ShAmt [0] $end
$var wire 1 V( Oper [1] $end
$var wire 1 W( Oper [0] $end
$var wire 1 3( Out [15] $end
$var wire 1 4( Out [14] $end
$var wire 1 5( Out [13] $end
$var wire 1 6( Out [12] $end
$var wire 1 7( Out [11] $end
$var wire 1 8( Out [10] $end
$var wire 1 9( Out [9] $end
$var wire 1 :( Out [8] $end
$var wire 1 ;( Out [7] $end
$var wire 1 <( Out [6] $end
$var wire 1 =( Out [5] $end
$var wire 1 >( Out [4] $end
$var wire 1 ?( Out [3] $end
$var wire 1 @( Out [2] $end
$var wire 1 A( Out [1] $end
$var wire 1 B( Out [0] $end
$var wire 1 X( s0 [15] $end
$var wire 1 Y( s0 [14] $end
$var wire 1 Z( s0 [13] $end
$var wire 1 [( s0 [12] $end
$var wire 1 \( s0 [11] $end
$var wire 1 ]( s0 [10] $end
$var wire 1 ^( s0 [9] $end
$var wire 1 _( s0 [8] $end
$var wire 1 `( s0 [7] $end
$var wire 1 a( s0 [6] $end
$var wire 1 b( s0 [5] $end
$var wire 1 c( s0 [4] $end
$var wire 1 d( s0 [3] $end
$var wire 1 e( s0 [2] $end
$var wire 1 f( s0 [1] $end
$var wire 1 g( s0 [0] $end
$var wire 1 h( s1 [15] $end
$var wire 1 i( s1 [14] $end
$var wire 1 j( s1 [13] $end
$var wire 1 k( s1 [12] $end
$var wire 1 l( s1 [11] $end
$var wire 1 m( s1 [10] $end
$var wire 1 n( s1 [9] $end
$var wire 1 o( s1 [8] $end
$var wire 1 p( s1 [7] $end
$var wire 1 q( s1 [6] $end
$var wire 1 r( s1 [5] $end
$var wire 1 s( s1 [4] $end
$var wire 1 t( s1 [3] $end
$var wire 1 u( s1 [2] $end
$var wire 1 v( s1 [1] $end
$var wire 1 w( s1 [0] $end
$var wire 1 x( s2 [15] $end
$var wire 1 y( s2 [14] $end
$var wire 1 z( s2 [13] $end
$var wire 1 {( s2 [12] $end
$var wire 1 |( s2 [11] $end
$var wire 1 }( s2 [10] $end
$var wire 1 ~( s2 [9] $end
$var wire 1 !) s2 [8] $end
$var wire 1 ") s2 [7] $end
$var wire 1 #) s2 [6] $end
$var wire 1 $) s2 [5] $end
$var wire 1 %) s2 [4] $end
$var wire 1 &) s2 [3] $end
$var wire 1 ') s2 [2] $end
$var wire 1 () s2 [1] $end
$var wire 1 )) s2 [0] $end
$var wire 1 *) s3 [15] $end
$var wire 1 +) s3 [14] $end
$var wire 1 ,) s3 [13] $end
$var wire 1 -) s3 [12] $end
$var wire 1 .) s3 [11] $end
$var wire 1 /) s3 [10] $end
$var wire 1 0) s3 [9] $end
$var wire 1 1) s3 [8] $end
$var wire 1 2) s3 [7] $end
$var wire 1 3) s3 [6] $end
$var wire 1 4) s3 [5] $end
$var wire 1 5) s3 [4] $end
$var wire 1 6) s3 [3] $end
$var wire 1 7) s3 [2] $end
$var wire 1 8) s3 [1] $end
$var wire 1 9) s3 [0] $end
$var wire 1 :) temp_out_sh0 [15] $end
$var wire 1 ;) temp_out_sh0 [14] $end
$var wire 1 <) temp_out_sh0 [13] $end
$var wire 1 =) temp_out_sh0 [12] $end
$var wire 1 >) temp_out_sh0 [11] $end
$var wire 1 ?) temp_out_sh0 [10] $end
$var wire 1 @) temp_out_sh0 [9] $end
$var wire 1 A) temp_out_sh0 [8] $end
$var wire 1 B) temp_out_sh0 [7] $end
$var wire 1 C) temp_out_sh0 [6] $end
$var wire 1 D) temp_out_sh0 [5] $end
$var wire 1 E) temp_out_sh0 [4] $end
$var wire 1 F) temp_out_sh0 [3] $end
$var wire 1 G) temp_out_sh0 [2] $end
$var wire 1 H) temp_out_sh0 [1] $end
$var wire 1 I) temp_out_sh0 [0] $end
$var wire 1 J) temp_out_sh1 [15] $end
$var wire 1 K) temp_out_sh1 [14] $end
$var wire 1 L) temp_out_sh1 [13] $end
$var wire 1 M) temp_out_sh1 [12] $end
$var wire 1 N) temp_out_sh1 [11] $end
$var wire 1 O) temp_out_sh1 [10] $end
$var wire 1 P) temp_out_sh1 [9] $end
$var wire 1 Q) temp_out_sh1 [8] $end
$var wire 1 R) temp_out_sh1 [7] $end
$var wire 1 S) temp_out_sh1 [6] $end
$var wire 1 T) temp_out_sh1 [5] $end
$var wire 1 U) temp_out_sh1 [4] $end
$var wire 1 V) temp_out_sh1 [3] $end
$var wire 1 W) temp_out_sh1 [2] $end
$var wire 1 X) temp_out_sh1 [1] $end
$var wire 1 Y) temp_out_sh1 [0] $end
$var wire 1 Z) temp_out_sh2 [15] $end
$var wire 1 [) temp_out_sh2 [14] $end
$var wire 1 \) temp_out_sh2 [13] $end
$var wire 1 ]) temp_out_sh2 [12] $end
$var wire 1 ^) temp_out_sh2 [11] $end
$var wire 1 _) temp_out_sh2 [10] $end
$var wire 1 `) temp_out_sh2 [9] $end
$var wire 1 a) temp_out_sh2 [8] $end
$var wire 1 b) temp_out_sh2 [7] $end
$var wire 1 c) temp_out_sh2 [6] $end
$var wire 1 d) temp_out_sh2 [5] $end
$var wire 1 e) temp_out_sh2 [4] $end
$var wire 1 f) temp_out_sh2 [3] $end
$var wire 1 g) temp_out_sh2 [2] $end
$var wire 1 h) temp_out_sh2 [1] $end
$var wire 1 i) temp_out_sh2 [0] $end
$var wire 1 j) temp_out_sh3 [15] $end
$var wire 1 k) temp_out_sh3 [14] $end
$var wire 1 l) temp_out_sh3 [13] $end
$var wire 1 m) temp_out_sh3 [12] $end
$var wire 1 n) temp_out_sh3 [11] $end
$var wire 1 o) temp_out_sh3 [10] $end
$var wire 1 p) temp_out_sh3 [9] $end
$var wire 1 q) temp_out_sh3 [8] $end
$var wire 1 r) temp_out_sh3 [7] $end
$var wire 1 s) temp_out_sh3 [6] $end
$var wire 1 t) temp_out_sh3 [5] $end
$var wire 1 u) temp_out_sh3 [4] $end
$var wire 1 v) temp_out_sh3 [3] $end
$var wire 1 w) temp_out_sh3 [2] $end
$var wire 1 x) temp_out_sh3 [1] $end
$var wire 1 y) temp_out_sh3 [0] $end

$scope module bs0 $end
$var wire 1 F( in [15] $end
$var wire 1 G( in [14] $end
$var wire 1 H( in [13] $end
$var wire 1 I( in [12] $end
$var wire 1 J( in [11] $end
$var wire 1 K( in [10] $end
$var wire 1 L( in [9] $end
$var wire 1 M( in [8] $end
$var wire 1 N( in [7] $end
$var wire 1 O( in [6] $end
$var wire 1 P( in [5] $end
$var wire 1 Q( in [4] $end
$var wire 1 R( in [3] $end
$var wire 1 S( in [2] $end
$var wire 1 T( in [1] $end
$var wire 1 d# in [0] $end
$var wire 1 V( oper [1] $end
$var wire 1 W( oper [0] $end
$var wire 1 :) out [15] $end
$var wire 1 ;) out [14] $end
$var wire 1 <) out [13] $end
$var wire 1 =) out [12] $end
$var wire 1 >) out [11] $end
$var wire 1 ?) out [10] $end
$var wire 1 @) out [9] $end
$var wire 1 A) out [8] $end
$var wire 1 B) out [7] $end
$var wire 1 C) out [6] $end
$var wire 1 D) out [5] $end
$var wire 1 E) out [4] $end
$var wire 1 F) out [3] $end
$var wire 1 G) out [2] $end
$var wire 1 H) out [1] $end
$var wire 1 I) out [0] $end
$upscope $end

$scope module bs1 $end
$var wire 1 X( in [15] $end
$var wire 1 Y( in [14] $end
$var wire 1 Z( in [13] $end
$var wire 1 [( in [12] $end
$var wire 1 \( in [11] $end
$var wire 1 ]( in [10] $end
$var wire 1 ^( in [9] $end
$var wire 1 _( in [8] $end
$var wire 1 `( in [7] $end
$var wire 1 a( in [6] $end
$var wire 1 b( in [5] $end
$var wire 1 c( in [4] $end
$var wire 1 d( in [3] $end
$var wire 1 e( in [2] $end
$var wire 1 f( in [1] $end
$var wire 1 g( in [0] $end
$var wire 1 V( oper [1] $end
$var wire 1 W( oper [0] $end
$var wire 1 J) out [15] $end
$var wire 1 K) out [14] $end
$var wire 1 L) out [13] $end
$var wire 1 M) out [12] $end
$var wire 1 N) out [11] $end
$var wire 1 O) out [10] $end
$var wire 1 P) out [9] $end
$var wire 1 Q) out [8] $end
$var wire 1 R) out [7] $end
$var wire 1 S) out [6] $end
$var wire 1 T) out [5] $end
$var wire 1 U) out [4] $end
$var wire 1 V) out [3] $end
$var wire 1 W) out [2] $end
$var wire 1 X) out [1] $end
$var wire 1 Y) out [0] $end
$upscope $end

$scope module bs2 $end
$var wire 1 h( in [15] $end
$var wire 1 i( in [14] $end
$var wire 1 j( in [13] $end
$var wire 1 k( in [12] $end
$var wire 1 l( in [11] $end
$var wire 1 m( in [10] $end
$var wire 1 n( in [9] $end
$var wire 1 o( in [8] $end
$var wire 1 p( in [7] $end
$var wire 1 q( in [6] $end
$var wire 1 r( in [5] $end
$var wire 1 s( in [4] $end
$var wire 1 t( in [3] $end
$var wire 1 u( in [2] $end
$var wire 1 v( in [1] $end
$var wire 1 w( in [0] $end
$var wire 1 V( oper [1] $end
$var wire 1 W( oper [0] $end
$var wire 1 Z) out [15] $end
$var wire 1 [) out [14] $end
$var wire 1 \) out [13] $end
$var wire 1 ]) out [12] $end
$var wire 1 ^) out [11] $end
$var wire 1 _) out [10] $end
$var wire 1 `) out [9] $end
$var wire 1 a) out [8] $end
$var wire 1 b) out [7] $end
$var wire 1 c) out [6] $end
$var wire 1 d) out [5] $end
$var wire 1 e) out [4] $end
$var wire 1 f) out [3] $end
$var wire 1 g) out [2] $end
$var wire 1 h) out [1] $end
$var wire 1 i) out [0] $end
$upscope $end

$scope module bs3 $end
$var wire 1 x( in [15] $end
$var wire 1 y( in [14] $end
$var wire 1 z( in [13] $end
$var wire 1 {( in [12] $end
$var wire 1 |( in [11] $end
$var wire 1 }( in [10] $end
$var wire 1 ~( in [9] $end
$var wire 1 !) in [8] $end
$var wire 1 ") in [7] $end
$var wire 1 #) in [6] $end
$var wire 1 $) in [5] $end
$var wire 1 %) in [4] $end
$var wire 1 &) in [3] $end
$var wire 1 ') in [2] $end
$var wire 1 () in [1] $end
$var wire 1 )) in [0] $end
$var wire 1 V( oper [1] $end
$var wire 1 W( oper [0] $end
$var wire 1 j) out [15] $end
$var wire 1 k) out [14] $end
$var wire 1 l) out [13] $end
$var wire 1 m) out [12] $end
$var wire 1 n) out [11] $end
$var wire 1 o) out [10] $end
$var wire 1 p) out [9] $end
$var wire 1 q) out [8] $end
$var wire 1 r) out [7] $end
$var wire 1 s) out [6] $end
$var wire 1 t) out [5] $end
$var wire 1 u) out [4] $end
$var wire 1 v) out [3] $end
$var wire 1 w) out [2] $end
$var wire 1 x) out [1] $end
$var wire 1 y) out [0] $end
$upscope $end
$upscope $end

$scope module registers[7] $end
$var parameter 32 z) BIT_WIDTH $end
$var parameter 32 {) BIT_SIZE $end
$var parameter 32 |) REG_NUMS $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 ;( we $end
$var wire 1 1" w [15] $end
$var wire 1 2" w [14] $end
$var wire 1 3" w [13] $end
$var wire 1 4" w [12] $end
$var wire 1 5" w [11] $end
$var wire 1 6" w [10] $end
$var wire 1 7" w [9] $end
$var wire 1 8" w [8] $end
$var wire 1 9" w [7] $end
$var wire 1 :" w [6] $end
$var wire 1 ;" w [5] $end
$var wire 1 <" w [4] $end
$var wire 1 =" w [3] $end
$var wire 1 >" w [2] $end
$var wire 1 ?" w [1] $end
$var wire 1 @" w [0] $end
$var wire 1 #( r [15] $end
$var wire 1 $( r [14] $end
$var wire 1 %( r [13] $end
$var wire 1 &( r [12] $end
$var wire 1 '( r [11] $end
$var wire 1 (( r [10] $end
$var wire 1 )( r [9] $end
$var wire 1 *( r [8] $end
$var wire 1 +( r [7] $end
$var wire 1 ,( r [6] $end
$var wire 1 -( r [5] $end
$var wire 1 .( r [4] $end
$var wire 1 /( r [3] $end
$var wire 1 0( r [2] $end
$var wire 1 1( r [1] $end
$var wire 1 2( r [0] $end

$scope module dff01[15] $end
$var wire 1 #( q $end
$var wire 1 }) d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ~) state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 $( q $end
$var wire 1 !* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 "* state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 %( q $end
$var wire 1 #* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 $* state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 &( q $end
$var wire 1 %* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 &* state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 '( q $end
$var wire 1 '* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 (* state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 (( q $end
$var wire 1 )* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ** state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 )( q $end
$var wire 1 +* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ,* state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 *( q $end
$var wire 1 -* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 .* state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 +( q $end
$var wire 1 /* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 0* state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 ,( q $end
$var wire 1 1* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 2* state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 -( q $end
$var wire 1 3* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 4* state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 .( q $end
$var wire 1 5* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 6* state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 /( q $end
$var wire 1 7* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 8* state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 0( q $end
$var wire 1 9* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 :* state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 1( q $end
$var wire 1 ;* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 <* state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 2( q $end
$var wire 1 =* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 >* state $end
$upscope $end
$upscope $end

$scope module registers[6] $end
$var parameter 32 ?* BIT_WIDTH $end
$var parameter 32 @* BIT_SIZE $end
$var parameter 32 A* REG_NUMS $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 <( we $end
$var wire 1 1" w [15] $end
$var wire 1 2" w [14] $end
$var wire 1 3" w [13] $end
$var wire 1 4" w [12] $end
$var wire 1 5" w [11] $end
$var wire 1 6" w [10] $end
$var wire 1 7" w [9] $end
$var wire 1 8" w [8] $end
$var wire 1 9" w [7] $end
$var wire 1 :" w [6] $end
$var wire 1 ;" w [5] $end
$var wire 1 <" w [4] $end
$var wire 1 =" w [3] $end
$var wire 1 >" w [2] $end
$var wire 1 ?" w [1] $end
$var wire 1 @" w [0] $end
$var wire 1 q' r [15] $end
$var wire 1 r' r [14] $end
$var wire 1 s' r [13] $end
$var wire 1 t' r [12] $end
$var wire 1 u' r [11] $end
$var wire 1 v' r [10] $end
$var wire 1 w' r [9] $end
$var wire 1 x' r [8] $end
$var wire 1 y' r [7] $end
$var wire 1 z' r [6] $end
$var wire 1 {' r [5] $end
$var wire 1 |' r [4] $end
$var wire 1 }' r [3] $end
$var wire 1 ~' r [2] $end
$var wire 1 !( r [1] $end
$var wire 1 "( r [0] $end

$scope module dff01[15] $end
$var wire 1 q' q $end
$var wire 1 B* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 C* state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 r' q $end
$var wire 1 D* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 E* state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 s' q $end
$var wire 1 F* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 G* state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 t' q $end
$var wire 1 H* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 I* state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 u' q $end
$var wire 1 J* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 K* state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 v' q $end
$var wire 1 L* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 M* state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 w' q $end
$var wire 1 N* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 O* state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 x' q $end
$var wire 1 P* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 Q* state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 y' q $end
$var wire 1 R* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 S* state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 z' q $end
$var wire 1 T* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 U* state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 {' q $end
$var wire 1 V* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 W* state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 |' q $end
$var wire 1 X* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 Y* state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 }' q $end
$var wire 1 Z* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 [* state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 ~' q $end
$var wire 1 \* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ]* state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 !( q $end
$var wire 1 ^* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 _* state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 "( q $end
$var wire 1 `* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 a* state $end
$upscope $end
$upscope $end

$scope module registers[5] $end
$var parameter 32 b* BIT_WIDTH $end
$var parameter 32 c* BIT_SIZE $end
$var parameter 32 d* REG_NUMS $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 =( we $end
$var wire 1 1" w [15] $end
$var wire 1 2" w [14] $end
$var wire 1 3" w [13] $end
$var wire 1 4" w [12] $end
$var wire 1 5" w [11] $end
$var wire 1 6" w [10] $end
$var wire 1 7" w [9] $end
$var wire 1 8" w [8] $end
$var wire 1 9" w [7] $end
$var wire 1 :" w [6] $end
$var wire 1 ;" w [5] $end
$var wire 1 <" w [4] $end
$var wire 1 =" w [3] $end
$var wire 1 >" w [2] $end
$var wire 1 ?" w [1] $end
$var wire 1 @" w [0] $end
$var wire 1 a' r [15] $end
$var wire 1 b' r [14] $end
$var wire 1 c' r [13] $end
$var wire 1 d' r [12] $end
$var wire 1 e' r [11] $end
$var wire 1 f' r [10] $end
$var wire 1 g' r [9] $end
$var wire 1 h' r [8] $end
$var wire 1 i' r [7] $end
$var wire 1 j' r [6] $end
$var wire 1 k' r [5] $end
$var wire 1 l' r [4] $end
$var wire 1 m' r [3] $end
$var wire 1 n' r [2] $end
$var wire 1 o' r [1] $end
$var wire 1 p' r [0] $end

$scope module dff01[15] $end
$var wire 1 a' q $end
$var wire 1 e* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 f* state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 b' q $end
$var wire 1 g* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 h* state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 c' q $end
$var wire 1 i* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 j* state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 d' q $end
$var wire 1 k* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 l* state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 e' q $end
$var wire 1 m* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 n* state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 f' q $end
$var wire 1 o* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 p* state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 g' q $end
$var wire 1 q* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 r* state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 h' q $end
$var wire 1 s* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 t* state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 i' q $end
$var wire 1 u* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 v* state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 j' q $end
$var wire 1 w* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 x* state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 k' q $end
$var wire 1 y* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 z* state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 l' q $end
$var wire 1 {* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 |* state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 m' q $end
$var wire 1 }* d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ~* state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 n' q $end
$var wire 1 !+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 "+ state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 o' q $end
$var wire 1 #+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 $+ state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 p' q $end
$var wire 1 %+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 &+ state $end
$upscope $end
$upscope $end

$scope module registers[4] $end
$var parameter 32 '+ BIT_WIDTH $end
$var parameter 32 (+ BIT_SIZE $end
$var parameter 32 )+ REG_NUMS $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 >( we $end
$var wire 1 1" w [15] $end
$var wire 1 2" w [14] $end
$var wire 1 3" w [13] $end
$var wire 1 4" w [12] $end
$var wire 1 5" w [11] $end
$var wire 1 6" w [10] $end
$var wire 1 7" w [9] $end
$var wire 1 8" w [8] $end
$var wire 1 9" w [7] $end
$var wire 1 :" w [6] $end
$var wire 1 ;" w [5] $end
$var wire 1 <" w [4] $end
$var wire 1 =" w [3] $end
$var wire 1 >" w [2] $end
$var wire 1 ?" w [1] $end
$var wire 1 @" w [0] $end
$var wire 1 Q' r [15] $end
$var wire 1 R' r [14] $end
$var wire 1 S' r [13] $end
$var wire 1 T' r [12] $end
$var wire 1 U' r [11] $end
$var wire 1 V' r [10] $end
$var wire 1 W' r [9] $end
$var wire 1 X' r [8] $end
$var wire 1 Y' r [7] $end
$var wire 1 Z' r [6] $end
$var wire 1 [' r [5] $end
$var wire 1 \' r [4] $end
$var wire 1 ]' r [3] $end
$var wire 1 ^' r [2] $end
$var wire 1 _' r [1] $end
$var wire 1 `' r [0] $end

$scope module dff01[15] $end
$var wire 1 Q' q $end
$var wire 1 *+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ++ state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 R' q $end
$var wire 1 ,+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 -+ state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 S' q $end
$var wire 1 .+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 /+ state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 T' q $end
$var wire 1 0+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 1+ state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 U' q $end
$var wire 1 2+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 3+ state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 V' q $end
$var wire 1 4+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 5+ state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 W' q $end
$var wire 1 6+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 7+ state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 X' q $end
$var wire 1 8+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 9+ state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 Y' q $end
$var wire 1 :+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ;+ state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 Z' q $end
$var wire 1 <+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 =+ state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 [' q $end
$var wire 1 >+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ?+ state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 \' q $end
$var wire 1 @+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 A+ state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 ]' q $end
$var wire 1 B+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 C+ state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 ^' q $end
$var wire 1 D+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 E+ state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 _' q $end
$var wire 1 F+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 G+ state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 `' q $end
$var wire 1 H+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 I+ state $end
$upscope $end
$upscope $end

$scope module registers[3] $end
$var parameter 32 J+ BIT_WIDTH $end
$var parameter 32 K+ BIT_SIZE $end
$var parameter 32 L+ REG_NUMS $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 ?( we $end
$var wire 1 1" w [15] $end
$var wire 1 2" w [14] $end
$var wire 1 3" w [13] $end
$var wire 1 4" w [12] $end
$var wire 1 5" w [11] $end
$var wire 1 6" w [10] $end
$var wire 1 7" w [9] $end
$var wire 1 8" w [8] $end
$var wire 1 9" w [7] $end
$var wire 1 :" w [6] $end
$var wire 1 ;" w [5] $end
$var wire 1 <" w [4] $end
$var wire 1 =" w [3] $end
$var wire 1 >" w [2] $end
$var wire 1 ?" w [1] $end
$var wire 1 @" w [0] $end
$var wire 1 A' r [15] $end
$var wire 1 B' r [14] $end
$var wire 1 C' r [13] $end
$var wire 1 D' r [12] $end
$var wire 1 E' r [11] $end
$var wire 1 F' r [10] $end
$var wire 1 G' r [9] $end
$var wire 1 H' r [8] $end
$var wire 1 I' r [7] $end
$var wire 1 J' r [6] $end
$var wire 1 K' r [5] $end
$var wire 1 L' r [4] $end
$var wire 1 M' r [3] $end
$var wire 1 N' r [2] $end
$var wire 1 O' r [1] $end
$var wire 1 P' r [0] $end

$scope module dff01[15] $end
$var wire 1 A' q $end
$var wire 1 M+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 N+ state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 B' q $end
$var wire 1 O+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 P+ state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 C' q $end
$var wire 1 Q+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 R+ state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 D' q $end
$var wire 1 S+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 T+ state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 E' q $end
$var wire 1 U+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 V+ state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 F' q $end
$var wire 1 W+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 X+ state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 G' q $end
$var wire 1 Y+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 Z+ state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 H' q $end
$var wire 1 [+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 \+ state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 I' q $end
$var wire 1 ]+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ^+ state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 J' q $end
$var wire 1 _+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 `+ state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 K' q $end
$var wire 1 a+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 b+ state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 L' q $end
$var wire 1 c+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 d+ state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 M' q $end
$var wire 1 e+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 f+ state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 N' q $end
$var wire 1 g+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 h+ state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 O' q $end
$var wire 1 i+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 j+ state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 P' q $end
$var wire 1 k+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 l+ state $end
$upscope $end
$upscope $end

$scope module registers[2] $end
$var parameter 32 m+ BIT_WIDTH $end
$var parameter 32 n+ BIT_SIZE $end
$var parameter 32 o+ REG_NUMS $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 @( we $end
$var wire 1 1" w [15] $end
$var wire 1 2" w [14] $end
$var wire 1 3" w [13] $end
$var wire 1 4" w [12] $end
$var wire 1 5" w [11] $end
$var wire 1 6" w [10] $end
$var wire 1 7" w [9] $end
$var wire 1 8" w [8] $end
$var wire 1 9" w [7] $end
$var wire 1 :" w [6] $end
$var wire 1 ;" w [5] $end
$var wire 1 <" w [4] $end
$var wire 1 =" w [3] $end
$var wire 1 >" w [2] $end
$var wire 1 ?" w [1] $end
$var wire 1 @" w [0] $end
$var wire 1 1' r [15] $end
$var wire 1 2' r [14] $end
$var wire 1 3' r [13] $end
$var wire 1 4' r [12] $end
$var wire 1 5' r [11] $end
$var wire 1 6' r [10] $end
$var wire 1 7' r [9] $end
$var wire 1 8' r [8] $end
$var wire 1 9' r [7] $end
$var wire 1 :' r [6] $end
$var wire 1 ;' r [5] $end
$var wire 1 <' r [4] $end
$var wire 1 =' r [3] $end
$var wire 1 >' r [2] $end
$var wire 1 ?' r [1] $end
$var wire 1 @' r [0] $end

$scope module dff01[15] $end
$var wire 1 1' q $end
$var wire 1 p+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 q+ state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 2' q $end
$var wire 1 r+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 s+ state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 3' q $end
$var wire 1 t+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 u+ state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 4' q $end
$var wire 1 v+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 w+ state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 5' q $end
$var wire 1 x+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 y+ state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 6' q $end
$var wire 1 z+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 {+ state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 7' q $end
$var wire 1 |+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 }+ state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 8' q $end
$var wire 1 ~+ d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 !, state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 9' q $end
$var wire 1 ", d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 #, state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 :' q $end
$var wire 1 $, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 %, state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 ;' q $end
$var wire 1 &, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ', state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 <' q $end
$var wire 1 (, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ), state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 =' q $end
$var wire 1 *, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 +, state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 >' q $end
$var wire 1 ,, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 -, state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 ?' q $end
$var wire 1 ., d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 /, state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 @' q $end
$var wire 1 0, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 1, state $end
$upscope $end
$upscope $end

$scope module registers[1] $end
$var parameter 32 2, BIT_WIDTH $end
$var parameter 32 3, BIT_SIZE $end
$var parameter 32 4, REG_NUMS $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 A( we $end
$var wire 1 1" w [15] $end
$var wire 1 2" w [14] $end
$var wire 1 3" w [13] $end
$var wire 1 4" w [12] $end
$var wire 1 5" w [11] $end
$var wire 1 6" w [10] $end
$var wire 1 7" w [9] $end
$var wire 1 8" w [8] $end
$var wire 1 9" w [7] $end
$var wire 1 :" w [6] $end
$var wire 1 ;" w [5] $end
$var wire 1 <" w [4] $end
$var wire 1 =" w [3] $end
$var wire 1 >" w [2] $end
$var wire 1 ?" w [1] $end
$var wire 1 @" w [0] $end
$var wire 1 !' r [15] $end
$var wire 1 "' r [14] $end
$var wire 1 #' r [13] $end
$var wire 1 $' r [12] $end
$var wire 1 %' r [11] $end
$var wire 1 &' r [10] $end
$var wire 1 '' r [9] $end
$var wire 1 (' r [8] $end
$var wire 1 )' r [7] $end
$var wire 1 *' r [6] $end
$var wire 1 +' r [5] $end
$var wire 1 ,' r [4] $end
$var wire 1 -' r [3] $end
$var wire 1 .' r [2] $end
$var wire 1 /' r [1] $end
$var wire 1 0' r [0] $end

$scope module dff01[15] $end
$var wire 1 !' q $end
$var wire 1 5, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 6, state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 "' q $end
$var wire 1 7, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 8, state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 #' q $end
$var wire 1 9, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 :, state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 $' q $end
$var wire 1 ;, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 <, state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 %' q $end
$var wire 1 =, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 >, state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 &' q $end
$var wire 1 ?, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 @, state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 '' q $end
$var wire 1 A, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 B, state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 (' q $end
$var wire 1 C, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 D, state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 )' q $end
$var wire 1 E, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 F, state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 *' q $end
$var wire 1 G, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 H, state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 +' q $end
$var wire 1 I, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 J, state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 ,' q $end
$var wire 1 K, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 L, state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 -' q $end
$var wire 1 M, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 N, state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 .' q $end
$var wire 1 O, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 P, state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 /' q $end
$var wire 1 Q, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 R, state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 0' q $end
$var wire 1 S, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 T, state $end
$upscope $end
$upscope $end

$scope module registers[0] $end
$var parameter 32 U, BIT_WIDTH $end
$var parameter 32 V, BIT_SIZE $end
$var parameter 32 W, REG_NUMS $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 B( we $end
$var wire 1 1" w [15] $end
$var wire 1 2" w [14] $end
$var wire 1 3" w [13] $end
$var wire 1 4" w [12] $end
$var wire 1 5" w [11] $end
$var wire 1 6" w [10] $end
$var wire 1 7" w [9] $end
$var wire 1 8" w [8] $end
$var wire 1 9" w [7] $end
$var wire 1 :" w [6] $end
$var wire 1 ;" w [5] $end
$var wire 1 <" w [4] $end
$var wire 1 =" w [3] $end
$var wire 1 >" w [2] $end
$var wire 1 ?" w [1] $end
$var wire 1 @" w [0] $end
$var wire 1 o& r [15] $end
$var wire 1 p& r [14] $end
$var wire 1 q& r [13] $end
$var wire 1 r& r [12] $end
$var wire 1 s& r [11] $end
$var wire 1 t& r [10] $end
$var wire 1 u& r [9] $end
$var wire 1 v& r [8] $end
$var wire 1 w& r [7] $end
$var wire 1 x& r [6] $end
$var wire 1 y& r [5] $end
$var wire 1 z& r [4] $end
$var wire 1 {& r [3] $end
$var wire 1 |& r [2] $end
$var wire 1 }& r [1] $end
$var wire 1 ~& r [0] $end

$scope module dff01[15] $end
$var wire 1 o& q $end
$var wire 1 X, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 Y, state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 p& q $end
$var wire 1 Z, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 [, state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 q& q $end
$var wire 1 \, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 ], state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 r& q $end
$var wire 1 ^, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 _, state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 s& q $end
$var wire 1 `, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 a, state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 t& q $end
$var wire 1 b, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 c, state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 u& q $end
$var wire 1 d, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 e, state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 v& q $end
$var wire 1 f, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 g, state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 w& q $end
$var wire 1 h, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 i, state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 x& q $end
$var wire 1 j, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 k, state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 y& q $end
$var wire 1 l, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 m, state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 z& q $end
$var wire 1 n, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 o, state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 {& q $end
$var wire 1 p, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 q, state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 |& q $end
$var wire 1 r, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 s, state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 }& q $end
$var wire 1 t, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 u, state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 ~& q $end
$var wire 1 v, d $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 w, state $end
$upscope $end
$upscope $end
$upscope $end

$scope module aluc $end
$var wire 1 c! instr [1] $end
$var wire 1 d! instr [0] $end
$var wire 1 '" aluoper [5] $end
$var wire 1 (" aluoper [4] $end
$var wire 1 )" aluoper [3] $end
$var wire 1 *" aluoper [2] $end
$var wire 1 +" aluoper [1] $end
$var wire 1 ," aluoper [0] $end
$var reg 4 x, op [3:0] $end
$upscope $end
$upscope $end

$scope module execute0 $end
$var wire 1 A" RSData [15] $end
$var wire 1 B" RSData [14] $end
$var wire 1 C" RSData [13] $end
$var wire 1 D" RSData [12] $end
$var wire 1 E" RSData [11] $end
$var wire 1 F" RSData [10] $end
$var wire 1 G" RSData [9] $end
$var wire 1 H" RSData [8] $end
$var wire 1 I" RSData [7] $end
$var wire 1 J" RSData [6] $end
$var wire 1 K" RSData [5] $end
$var wire 1 L" RSData [4] $end
$var wire 1 M" RSData [3] $end
$var wire 1 N" RSData [2] $end
$var wire 1 O" RSData [1] $end
$var wire 1 P" RSData [0] $end
$var wire 1 Q" RTData [15] $end
$var wire 1 R" RTData [14] $end
$var wire 1 S" RTData [13] $end
$var wire 1 T" RTData [12] $end
$var wire 1 U" RTData [11] $end
$var wire 1 V" RTData [10] $end
$var wire 1 W" RTData [9] $end
$var wire 1 X" RTData [8] $end
$var wire 1 Y" RTData [7] $end
$var wire 1 Z" RTData [6] $end
$var wire 1 [" RTData [5] $end
$var wire 1 \" RTData [4] $end
$var wire 1 ]" RTData [3] $end
$var wire 1 ^" RTData [2] $end
$var wire 1 _" RTData [1] $end
$var wire 1 `" RTData [0] $end
$var wire 1 u! PC [15] $end
$var wire 1 v! PC [14] $end
$var wire 1 w! PC [13] $end
$var wire 1 x! PC [12] $end
$var wire 1 y! PC [11] $end
$var wire 1 z! PC [10] $end
$var wire 1 {! PC [9] $end
$var wire 1 |! PC [8] $end
$var wire 1 }! PC [7] $end
$var wire 1 ~! PC [6] $end
$var wire 1 !" PC [5] $end
$var wire 1 "" PC [4] $end
$var wire 1 #" PC [3] $end
$var wire 1 $" PC [2] $end
$var wire 1 %" PC [1] $end
$var wire 1 &" PC [0] $end
$var wire 1 ## Imm5 [15] $end
$var wire 1 $# Imm5 [14] $end
$var wire 1 %# Imm5 [13] $end
$var wire 1 &# Imm5 [12] $end
$var wire 1 '# Imm5 [11] $end
$var wire 1 (# Imm5 [10] $end
$var wire 1 )# Imm5 [9] $end
$var wire 1 *# Imm5 [8] $end
$var wire 1 +# Imm5 [7] $end
$var wire 1 ,# Imm5 [6] $end
$var wire 1 -# Imm5 [5] $end
$var wire 1 .# Imm5 [4] $end
$var wire 1 /# Imm5 [3] $end
$var wire 1 0# Imm5 [2] $end
$var wire 1 1# Imm5 [1] $end
$var wire 1 2# Imm5 [0] $end
$var wire 1 3# Imm8 [15] $end
$var wire 1 4# Imm8 [14] $end
$var wire 1 5# Imm8 [13] $end
$var wire 1 6# Imm8 [12] $end
$var wire 1 7# Imm8 [11] $end
$var wire 1 8# Imm8 [10] $end
$var wire 1 9# Imm8 [9] $end
$var wire 1 :# Imm8 [8] $end
$var wire 1 ;# Imm8 [7] $end
$var wire 1 <# Imm8 [6] $end
$var wire 1 =# Imm8 [5] $end
$var wire 1 ># Imm8 [4] $end
$var wire 1 ?# Imm8 [3] $end
$var wire 1 @# Imm8 [2] $end
$var wire 1 A# Imm8 [1] $end
$var wire 1 B# Imm8 [0] $end
$var wire 1 C# sImm8 [15] $end
$var wire 1 D# sImm8 [14] $end
$var wire 1 E# sImm8 [13] $end
$var wire 1 F# sImm8 [12] $end
$var wire 1 G# sImm8 [11] $end
$var wire 1 H# sImm8 [10] $end
$var wire 1 I# sImm8 [9] $end
$var wire 1 J# sImm8 [8] $end
$var wire 1 K# sImm8 [7] $end
$var wire 1 L# sImm8 [6] $end
$var wire 1 M# sImm8 [5] $end
$var wire 1 N# sImm8 [4] $end
$var wire 1 O# sImm8 [3] $end
$var wire 1 P# sImm8 [2] $end
$var wire 1 Q# sImm8 [1] $end
$var wire 1 R# sImm8 [0] $end
$var wire 1 S# sImm11 [15] $end
$var wire 1 T# sImm11 [14] $end
$var wire 1 U# sImm11 [13] $end
$var wire 1 V# sImm11 [12] $end
$var wire 1 W# sImm11 [11] $end
$var wire 1 X# sImm11 [10] $end
$var wire 1 Y# sImm11 [9] $end
$var wire 1 Z# sImm11 [8] $end
$var wire 1 [# sImm11 [7] $end
$var wire 1 \# sImm11 [6] $end
$var wire 1 ]# sImm11 [5] $end
$var wire 1 ^# sImm11 [4] $end
$var wire 1 _# sImm11 [3] $end
$var wire 1 `# sImm11 [2] $end
$var wire 1 a# sImm11 [1] $end
$var wire 1 b# sImm11 [0] $end
$var wire 1 p# BSrc [1] $end
$var wire 1 q# BSrc [0] $end
$var wire 1 -" Oper [3] $end
$var wire 1 ." Oper [2] $end
$var wire 1 /" Oper [1] $end
$var wire 1 0" Oper [0] $end
$var wire 1 t# BranchTaken [2] $end
$var wire 1 u# BranchTaken [1] $end
$var wire 1 v# BranchTaken [0] $end
$var wire 1 f# ImmSrc $end
$var wire 1 k# ALUJmp $end
$var wire 1 g# invA $end
$var wire 1 h# invB $end
$var wire 1 i# ALUSign $end
$var wire 1 j# cin $end
$var wire 1 c# nHaltSig $end
$var wire 1 a" ALU_Out [15] $end
$var wire 1 b" ALU_Out [14] $end
$var wire 1 c" ALU_Out [13] $end
$var wire 1 d" ALU_Out [12] $end
$var wire 1 e" ALU_Out [11] $end
$var wire 1 f" ALU_Out [10] $end
$var wire 1 g" ALU_Out [9] $end
$var wire 1 h" ALU_Out [8] $end
$var wire 1 i" ALU_Out [7] $end
$var wire 1 j" ALU_Out [6] $end
$var wire 1 k" ALU_Out [5] $end
$var wire 1 l" ALU_Out [4] $end
$var wire 1 m" ALU_Out [3] $end
$var wire 1 n" ALU_Out [2] $end
$var wire 1 o" ALU_Out [1] $end
$var wire 1 p" ALU_Out [0] $end
$var wire 1 5! PC_Next [15] $end
$var wire 1 6! PC_Next [14] $end
$var wire 1 7! PC_Next [13] $end
$var wire 1 8! PC_Next [12] $end
$var wire 1 9! PC_Next [11] $end
$var wire 1 :! PC_Next [10] $end
$var wire 1 ;! PC_Next [9] $end
$var wire 1 <! PC_Next [8] $end
$var wire 1 =! PC_Next [7] $end
$var wire 1 >! PC_Next [6] $end
$var wire 1 ?! PC_Next [5] $end
$var wire 1 @! PC_Next [4] $end
$var wire 1 A! PC_Next [3] $end
$var wire 1 B! PC_Next [2] $end
$var wire 1 C! PC_Next [1] $end
$var wire 1 D! PC_Next [0] $end
$var wire 1 y, ALUIn [15] $end
$var wire 1 z, ALUIn [14] $end
$var wire 1 {, ALUIn [13] $end
$var wire 1 |, ALUIn [12] $end
$var wire 1 }, ALUIn [11] $end
$var wire 1 ~, ALUIn [10] $end
$var wire 1 !- ALUIn [9] $end
$var wire 1 "- ALUIn [8] $end
$var wire 1 #- ALUIn [7] $end
$var wire 1 $- ALUIn [6] $end
$var wire 1 %- ALUIn [5] $end
$var wire 1 &- ALUIn [4] $end
$var wire 1 '- ALUIn [3] $end
$var wire 1 (- ALUIn [2] $end
$var wire 1 )- ALUIn [1] $end
$var wire 1 *- ALUIn [0] $end
$var wire 1 +- PC_I [15] $end
$var wire 1 ,- PC_I [14] $end
$var wire 1 -- PC_I [13] $end
$var wire 1 .- PC_I [12] $end
$var wire 1 /- PC_I [11] $end
$var wire 1 0- PC_I [10] $end
$var wire 1 1- PC_I [9] $end
$var wire 1 2- PC_I [8] $end
$var wire 1 3- PC_I [7] $end
$var wire 1 4- PC_I [6] $end
$var wire 1 5- PC_I [5] $end
$var wire 1 6- PC_I [4] $end
$var wire 1 7- PC_I [3] $end
$var wire 1 8- PC_I [2] $end
$var wire 1 9- PC_I [1] $end
$var wire 1 :- PC_I [0] $end
$var wire 1 ;- PC_Branch [15] $end
$var wire 1 <- PC_Branch [14] $end
$var wire 1 =- PC_Branch [13] $end
$var wire 1 >- PC_Branch [12] $end
$var wire 1 ?- PC_Branch [11] $end
$var wire 1 @- PC_Branch [10] $end
$var wire 1 A- PC_Branch [9] $end
$var wire 1 B- PC_Branch [8] $end
$var wire 1 C- PC_Branch [7] $end
$var wire 1 D- PC_Branch [6] $end
$var wire 1 E- PC_Branch [5] $end
$var wire 1 F- PC_Branch [4] $end
$var wire 1 G- PC_Branch [3] $end
$var wire 1 H- PC_Branch [2] $end
$var wire 1 I- PC_Branch [1] $end
$var wire 1 J- PC_Branch [0] $end
$var wire 1 K- Branch [15] $end
$var wire 1 L- Branch [14] $end
$var wire 1 M- Branch [13] $end
$var wire 1 N- Branch [12] $end
$var wire 1 O- Branch [11] $end
$var wire 1 P- Branch [10] $end
$var wire 1 Q- Branch [9] $end
$var wire 1 R- Branch [8] $end
$var wire 1 S- Branch [7] $end
$var wire 1 T- Branch [6] $end
$var wire 1 U- Branch [5] $end
$var wire 1 V- Branch [4] $end
$var wire 1 W- Branch [3] $end
$var wire 1 X- Branch [2] $end
$var wire 1 Y- Branch [1] $end
$var wire 1 Z- Branch [0] $end
$var wire 1 [- BrchCnd $end
$var wire 1 \- SF $end
$var wire 1 ]- CF $end
$var wire 1 ^- OF $end
$var wire 1 _- ZF $end

$scope module pc_adder $end
$var parameter 32 `- N $end
$var wire 1 K- sum [15] $end
$var wire 1 L- sum [14] $end
$var wire 1 M- sum [13] $end
$var wire 1 N- sum [12] $end
$var wire 1 O- sum [11] $end
$var wire 1 P- sum [10] $end
$var wire 1 Q- sum [9] $end
$var wire 1 R- sum [8] $end
$var wire 1 S- sum [7] $end
$var wire 1 T- sum [6] $end
$var wire 1 U- sum [5] $end
$var wire 1 V- sum [4] $end
$var wire 1 W- sum [3] $end
$var wire 1 X- sum [2] $end
$var wire 1 Y- sum [1] $end
$var wire 1 Z- sum [0] $end
$var wire 1 a- c_out $end
$var wire 1 u! a [15] $end
$var wire 1 v! a [14] $end
$var wire 1 w! a [13] $end
$var wire 1 x! a [12] $end
$var wire 1 y! a [11] $end
$var wire 1 z! a [10] $end
$var wire 1 {! a [9] $end
$var wire 1 |! a [8] $end
$var wire 1 }! a [7] $end
$var wire 1 ~! a [6] $end
$var wire 1 !" a [5] $end
$var wire 1 "" a [4] $end
$var wire 1 #" a [3] $end
$var wire 1 $" a [2] $end
$var wire 1 %" a [1] $end
$var wire 1 &" a [0] $end
$var wire 1 +- b [15] $end
$var wire 1 ,- b [14] $end
$var wire 1 -- b [13] $end
$var wire 1 .- b [12] $end
$var wire 1 /- b [11] $end
$var wire 1 0- b [10] $end
$var wire 1 1- b [9] $end
$var wire 1 2- b [8] $end
$var wire 1 3- b [7] $end
$var wire 1 4- b [6] $end
$var wire 1 5- b [5] $end
$var wire 1 6- b [4] $end
$var wire 1 7- b [3] $end
$var wire 1 8- b [2] $end
$var wire 1 9- b [1] $end
$var wire 1 :- b [0] $end
$var wire 1 b- c_in $end
$var wire 1 c- carries [2] $end
$var wire 1 d- carries [1] $end
$var wire 1 e- carries [0] $end

$scope module cla[3] $end
$var parameter 32 f- N $end
$var wire 1 K- sum [3] $end
$var wire 1 L- sum [2] $end
$var wire 1 M- sum [1] $end
$var wire 1 N- sum [0] $end
$var wire 1 a- c_out $end
$var wire 1 u! a [3] $end
$var wire 1 v! a [2] $end
$var wire 1 w! a [1] $end
$var wire 1 x! a [0] $end
$var wire 1 +- b [3] $end
$var wire 1 ,- b [2] $end
$var wire 1 -- b [1] $end
$var wire 1 .- b [0] $end
$var wire 1 c- c_in $end
$var wire 1 g- p [3] $end
$var wire 1 h- p [2] $end
$var wire 1 i- p [1] $end
$var wire 1 j- p [0] $end
$var wire 1 k- ng [3] $end
$var wire 1 l- ng [2] $end
$var wire 1 m- ng [1] $end
$var wire 1 n- ng [0] $end
$var wire 1 o- carries [4] $end
$var wire 1 p- carries [3] $end
$var wire 1 q- carries [2] $end
$var wire 1 r- carries [1] $end
$var wire 1 s- carries [0] $end
$var wire 1 t- cp [3] $end
$var wire 1 u- cp [2] $end
$var wire 1 v- cp [1] $end
$var wire 1 w- cp [0] $end

$scope module xor_1[3] $end
$var wire 1 g- out $end
$var wire 1 u! in1 $end
$var wire 1 +- in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 h- out $end
$var wire 1 v! in1 $end
$var wire 1 ,- in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 i- out $end
$var wire 1 w! in1 $end
$var wire 1 -- in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 j- out $end
$var wire 1 x! in1 $end
$var wire 1 .- in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 k- out $end
$var wire 1 u! in1 $end
$var wire 1 +- in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 l- out $end
$var wire 1 v! in1 $end
$var wire 1 ,- in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 m- out $end
$var wire 1 w! in1 $end
$var wire 1 -- in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 n- out $end
$var wire 1 x! in1 $end
$var wire 1 .- in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 t- out $end
$var wire 1 g- in1 $end
$var wire 1 p- in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 u- out $end
$var wire 1 h- in1 $end
$var wire 1 q- in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 v- out $end
$var wire 1 i- in1 $end
$var wire 1 r- in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 w- out $end
$var wire 1 j- in1 $end
$var wire 1 c- in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 a- out $end
$var wire 1 t- in1 $end
$var wire 1 k- in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 p- out $end
$var wire 1 u- in1 $end
$var wire 1 l- in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 q- out $end
$var wire 1 v- in1 $end
$var wire 1 m- in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 r- out $end
$var wire 1 w- in1 $end
$var wire 1 n- in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 K- s $end
$var wire 1 x- c_out $end
$var wire 1 u! a $end
$var wire 1 +- b $end
$var wire 1 p- c_in $end
$var wire 1 y- AxorB $end
$var wire 1 z- CnandAB $end
$var wire 1 {- AnandB $end

$scope module xor_1 $end
$var wire 1 y- out $end
$var wire 1 u! in1 $end
$var wire 1 +- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 K- out $end
$var wire 1 y- in1 $end
$var wire 1 p- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 z- out $end
$var wire 1 y- in1 $end
$var wire 1 p- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 {- out $end
$var wire 1 u! in1 $end
$var wire 1 +- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 x- out $end
$var wire 1 {- in1 $end
$var wire 1 z- in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 L- s $end
$var wire 1 |- c_out $end
$var wire 1 v! a $end
$var wire 1 ,- b $end
$var wire 1 q- c_in $end
$var wire 1 }- AxorB $end
$var wire 1 ~- CnandAB $end
$var wire 1 !. AnandB $end

$scope module xor_1 $end
$var wire 1 }- out $end
$var wire 1 v! in1 $end
$var wire 1 ,- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 L- out $end
$var wire 1 }- in1 $end
$var wire 1 q- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 ~- out $end
$var wire 1 }- in1 $end
$var wire 1 q- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 !. out $end
$var wire 1 v! in1 $end
$var wire 1 ,- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 |- out $end
$var wire 1 !. in1 $end
$var wire 1 ~- in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 M- s $end
$var wire 1 ". c_out $end
$var wire 1 w! a $end
$var wire 1 -- b $end
$var wire 1 r- c_in $end
$var wire 1 #. AxorB $end
$var wire 1 $. CnandAB $end
$var wire 1 %. AnandB $end

$scope module xor_1 $end
$var wire 1 #. out $end
$var wire 1 w! in1 $end
$var wire 1 -- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 M- out $end
$var wire 1 #. in1 $end
$var wire 1 r- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 $. out $end
$var wire 1 #. in1 $end
$var wire 1 r- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 %. out $end
$var wire 1 w! in1 $end
$var wire 1 -- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 ". out $end
$var wire 1 %. in1 $end
$var wire 1 $. in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 N- s $end
$var wire 1 &. c_out $end
$var wire 1 x! a $end
$var wire 1 .- b $end
$var wire 1 c- c_in $end
$var wire 1 '. AxorB $end
$var wire 1 (. CnandAB $end
$var wire 1 ). AnandB $end

$scope module xor_1 $end
$var wire 1 '. out $end
$var wire 1 x! in1 $end
$var wire 1 .- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 N- out $end
$var wire 1 '. in1 $end
$var wire 1 c- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 (. out $end
$var wire 1 '. in1 $end
$var wire 1 c- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 ). out $end
$var wire 1 x! in1 $end
$var wire 1 .- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 &. out $end
$var wire 1 ). in1 $end
$var wire 1 (. in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[2] $end
$var parameter 32 *. N $end
$var wire 1 O- sum [3] $end
$var wire 1 P- sum [2] $end
$var wire 1 Q- sum [1] $end
$var wire 1 R- sum [0] $end
$var wire 1 c- c_out $end
$var wire 1 y! a [3] $end
$var wire 1 z! a [2] $end
$var wire 1 {! a [1] $end
$var wire 1 |! a [0] $end
$var wire 1 /- b [3] $end
$var wire 1 0- b [2] $end
$var wire 1 1- b [1] $end
$var wire 1 2- b [0] $end
$var wire 1 d- c_in $end
$var wire 1 +. p [3] $end
$var wire 1 ,. p [2] $end
$var wire 1 -. p [1] $end
$var wire 1 .. p [0] $end
$var wire 1 /. ng [3] $end
$var wire 1 0. ng [2] $end
$var wire 1 1. ng [1] $end
$var wire 1 2. ng [0] $end
$var wire 1 3. carries [4] $end
$var wire 1 4. carries [3] $end
$var wire 1 5. carries [2] $end
$var wire 1 6. carries [1] $end
$var wire 1 7. carries [0] $end
$var wire 1 8. cp [3] $end
$var wire 1 9. cp [2] $end
$var wire 1 :. cp [1] $end
$var wire 1 ;. cp [0] $end

$scope module xor_1[3] $end
$var wire 1 +. out $end
$var wire 1 y! in1 $end
$var wire 1 /- in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 ,. out $end
$var wire 1 z! in1 $end
$var wire 1 0- in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 -. out $end
$var wire 1 {! in1 $end
$var wire 1 1- in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 .. out $end
$var wire 1 |! in1 $end
$var wire 1 2- in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 /. out $end
$var wire 1 y! in1 $end
$var wire 1 /- in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 0. out $end
$var wire 1 z! in1 $end
$var wire 1 0- in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 1. out $end
$var wire 1 {! in1 $end
$var wire 1 1- in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 2. out $end
$var wire 1 |! in1 $end
$var wire 1 2- in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 8. out $end
$var wire 1 +. in1 $end
$var wire 1 4. in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 9. out $end
$var wire 1 ,. in1 $end
$var wire 1 5. in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 :. out $end
$var wire 1 -. in1 $end
$var wire 1 6. in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 ;. out $end
$var wire 1 .. in1 $end
$var wire 1 d- in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 c- out $end
$var wire 1 8. in1 $end
$var wire 1 /. in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 4. out $end
$var wire 1 9. in1 $end
$var wire 1 0. in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 5. out $end
$var wire 1 :. in1 $end
$var wire 1 1. in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 6. out $end
$var wire 1 ;. in1 $end
$var wire 1 2. in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 O- s $end
$var wire 1 <. c_out $end
$var wire 1 y! a $end
$var wire 1 /- b $end
$var wire 1 4. c_in $end
$var wire 1 =. AxorB $end
$var wire 1 >. CnandAB $end
$var wire 1 ?. AnandB $end

$scope module xor_1 $end
$var wire 1 =. out $end
$var wire 1 y! in1 $end
$var wire 1 /- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 O- out $end
$var wire 1 =. in1 $end
$var wire 1 4. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 >. out $end
$var wire 1 =. in1 $end
$var wire 1 4. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 ?. out $end
$var wire 1 y! in1 $end
$var wire 1 /- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 <. out $end
$var wire 1 ?. in1 $end
$var wire 1 >. in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 P- s $end
$var wire 1 @. c_out $end
$var wire 1 z! a $end
$var wire 1 0- b $end
$var wire 1 5. c_in $end
$var wire 1 A. AxorB $end
$var wire 1 B. CnandAB $end
$var wire 1 C. AnandB $end

$scope module xor_1 $end
$var wire 1 A. out $end
$var wire 1 z! in1 $end
$var wire 1 0- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 P- out $end
$var wire 1 A. in1 $end
$var wire 1 5. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 B. out $end
$var wire 1 A. in1 $end
$var wire 1 5. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 C. out $end
$var wire 1 z! in1 $end
$var wire 1 0- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 @. out $end
$var wire 1 C. in1 $end
$var wire 1 B. in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 Q- s $end
$var wire 1 D. c_out $end
$var wire 1 {! a $end
$var wire 1 1- b $end
$var wire 1 6. c_in $end
$var wire 1 E. AxorB $end
$var wire 1 F. CnandAB $end
$var wire 1 G. AnandB $end

$scope module xor_1 $end
$var wire 1 E. out $end
$var wire 1 {! in1 $end
$var wire 1 1- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 Q- out $end
$var wire 1 E. in1 $end
$var wire 1 6. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 F. out $end
$var wire 1 E. in1 $end
$var wire 1 6. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 G. out $end
$var wire 1 {! in1 $end
$var wire 1 1- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 D. out $end
$var wire 1 G. in1 $end
$var wire 1 F. in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 R- s $end
$var wire 1 H. c_out $end
$var wire 1 |! a $end
$var wire 1 2- b $end
$var wire 1 d- c_in $end
$var wire 1 I. AxorB $end
$var wire 1 J. CnandAB $end
$var wire 1 K. AnandB $end

$scope module xor_1 $end
$var wire 1 I. out $end
$var wire 1 |! in1 $end
$var wire 1 2- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 R- out $end
$var wire 1 I. in1 $end
$var wire 1 d- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 J. out $end
$var wire 1 I. in1 $end
$var wire 1 d- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 K. out $end
$var wire 1 |! in1 $end
$var wire 1 2- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 H. out $end
$var wire 1 K. in1 $end
$var wire 1 J. in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[1] $end
$var parameter 32 L. N $end
$var wire 1 S- sum [3] $end
$var wire 1 T- sum [2] $end
$var wire 1 U- sum [1] $end
$var wire 1 V- sum [0] $end
$var wire 1 d- c_out $end
$var wire 1 }! a [3] $end
$var wire 1 ~! a [2] $end
$var wire 1 !" a [1] $end
$var wire 1 "" a [0] $end
$var wire 1 3- b [3] $end
$var wire 1 4- b [2] $end
$var wire 1 5- b [1] $end
$var wire 1 6- b [0] $end
$var wire 1 e- c_in $end
$var wire 1 M. p [3] $end
$var wire 1 N. p [2] $end
$var wire 1 O. p [1] $end
$var wire 1 P. p [0] $end
$var wire 1 Q. ng [3] $end
$var wire 1 R. ng [2] $end
$var wire 1 S. ng [1] $end
$var wire 1 T. ng [0] $end
$var wire 1 U. carries [4] $end
$var wire 1 V. carries [3] $end
$var wire 1 W. carries [2] $end
$var wire 1 X. carries [1] $end
$var wire 1 Y. carries [0] $end
$var wire 1 Z. cp [3] $end
$var wire 1 [. cp [2] $end
$var wire 1 \. cp [1] $end
$var wire 1 ]. cp [0] $end

$scope module xor_1[3] $end
$var wire 1 M. out $end
$var wire 1 }! in1 $end
$var wire 1 3- in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 N. out $end
$var wire 1 ~! in1 $end
$var wire 1 4- in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 O. out $end
$var wire 1 !" in1 $end
$var wire 1 5- in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 P. out $end
$var wire 1 "" in1 $end
$var wire 1 6- in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 Q. out $end
$var wire 1 }! in1 $end
$var wire 1 3- in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 R. out $end
$var wire 1 ~! in1 $end
$var wire 1 4- in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 S. out $end
$var wire 1 !" in1 $end
$var wire 1 5- in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 T. out $end
$var wire 1 "" in1 $end
$var wire 1 6- in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 Z. out $end
$var wire 1 M. in1 $end
$var wire 1 V. in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 [. out $end
$var wire 1 N. in1 $end
$var wire 1 W. in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 \. out $end
$var wire 1 O. in1 $end
$var wire 1 X. in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 ]. out $end
$var wire 1 P. in1 $end
$var wire 1 e- in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 d- out $end
$var wire 1 Z. in1 $end
$var wire 1 Q. in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 V. out $end
$var wire 1 [. in1 $end
$var wire 1 R. in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 W. out $end
$var wire 1 \. in1 $end
$var wire 1 S. in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 X. out $end
$var wire 1 ]. in1 $end
$var wire 1 T. in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 S- s $end
$var wire 1 ^. c_out $end
$var wire 1 }! a $end
$var wire 1 3- b $end
$var wire 1 V. c_in $end
$var wire 1 _. AxorB $end
$var wire 1 `. CnandAB $end
$var wire 1 a. AnandB $end

$scope module xor_1 $end
$var wire 1 _. out $end
$var wire 1 }! in1 $end
$var wire 1 3- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 S- out $end
$var wire 1 _. in1 $end
$var wire 1 V. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 `. out $end
$var wire 1 _. in1 $end
$var wire 1 V. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 a. out $end
$var wire 1 }! in1 $end
$var wire 1 3- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 ^. out $end
$var wire 1 a. in1 $end
$var wire 1 `. in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 T- s $end
$var wire 1 b. c_out $end
$var wire 1 ~! a $end
$var wire 1 4- b $end
$var wire 1 W. c_in $end
$var wire 1 c. AxorB $end
$var wire 1 d. CnandAB $end
$var wire 1 e. AnandB $end

$scope module xor_1 $end
$var wire 1 c. out $end
$var wire 1 ~! in1 $end
$var wire 1 4- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 T- out $end
$var wire 1 c. in1 $end
$var wire 1 W. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 d. out $end
$var wire 1 c. in1 $end
$var wire 1 W. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 e. out $end
$var wire 1 ~! in1 $end
$var wire 1 4- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 b. out $end
$var wire 1 e. in1 $end
$var wire 1 d. in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 U- s $end
$var wire 1 f. c_out $end
$var wire 1 !" a $end
$var wire 1 5- b $end
$var wire 1 X. c_in $end
$var wire 1 g. AxorB $end
$var wire 1 h. CnandAB $end
$var wire 1 i. AnandB $end

$scope module xor_1 $end
$var wire 1 g. out $end
$var wire 1 !" in1 $end
$var wire 1 5- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 U- out $end
$var wire 1 g. in1 $end
$var wire 1 X. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 h. out $end
$var wire 1 g. in1 $end
$var wire 1 X. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 i. out $end
$var wire 1 !" in1 $end
$var wire 1 5- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 f. out $end
$var wire 1 i. in1 $end
$var wire 1 h. in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 V- s $end
$var wire 1 j. c_out $end
$var wire 1 "" a $end
$var wire 1 6- b $end
$var wire 1 e- c_in $end
$var wire 1 k. AxorB $end
$var wire 1 l. CnandAB $end
$var wire 1 m. AnandB $end

$scope module xor_1 $end
$var wire 1 k. out $end
$var wire 1 "" in1 $end
$var wire 1 6- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 V- out $end
$var wire 1 k. in1 $end
$var wire 1 e- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 l. out $end
$var wire 1 k. in1 $end
$var wire 1 e- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 m. out $end
$var wire 1 "" in1 $end
$var wire 1 6- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 j. out $end
$var wire 1 m. in1 $end
$var wire 1 l. in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[0] $end
$var parameter 32 n. N $end
$var wire 1 W- sum [3] $end
$var wire 1 X- sum [2] $end
$var wire 1 Y- sum [1] $end
$var wire 1 Z- sum [0] $end
$var wire 1 e- c_out $end
$var wire 1 #" a [3] $end
$var wire 1 $" a [2] $end
$var wire 1 %" a [1] $end
$var wire 1 &" a [0] $end
$var wire 1 7- b [3] $end
$var wire 1 8- b [2] $end
$var wire 1 9- b [1] $end
$var wire 1 :- b [0] $end
$var wire 1 b- c_in $end
$var wire 1 o. p [3] $end
$var wire 1 p. p [2] $end
$var wire 1 q. p [1] $end
$var wire 1 r. p [0] $end
$var wire 1 s. ng [3] $end
$var wire 1 t. ng [2] $end
$var wire 1 u. ng [1] $end
$var wire 1 v. ng [0] $end
$var wire 1 w. carries [4] $end
$var wire 1 x. carries [3] $end
$var wire 1 y. carries [2] $end
$var wire 1 z. carries [1] $end
$var wire 1 {. carries [0] $end
$var wire 1 |. cp [3] $end
$var wire 1 }. cp [2] $end
$var wire 1 ~. cp [1] $end
$var wire 1 !/ cp [0] $end

$scope module xor_1[3] $end
$var wire 1 o. out $end
$var wire 1 #" in1 $end
$var wire 1 7- in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 p. out $end
$var wire 1 $" in1 $end
$var wire 1 8- in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 q. out $end
$var wire 1 %" in1 $end
$var wire 1 9- in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 r. out $end
$var wire 1 &" in1 $end
$var wire 1 :- in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 s. out $end
$var wire 1 #" in1 $end
$var wire 1 7- in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 t. out $end
$var wire 1 $" in1 $end
$var wire 1 8- in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 u. out $end
$var wire 1 %" in1 $end
$var wire 1 9- in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 v. out $end
$var wire 1 &" in1 $end
$var wire 1 :- in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 |. out $end
$var wire 1 o. in1 $end
$var wire 1 x. in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 }. out $end
$var wire 1 p. in1 $end
$var wire 1 y. in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 ~. out $end
$var wire 1 q. in1 $end
$var wire 1 z. in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 !/ out $end
$var wire 1 r. in1 $end
$var wire 1 b- in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 e- out $end
$var wire 1 |. in1 $end
$var wire 1 s. in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 x. out $end
$var wire 1 }. in1 $end
$var wire 1 t. in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 y. out $end
$var wire 1 ~. in1 $end
$var wire 1 u. in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 z. out $end
$var wire 1 !/ in1 $end
$var wire 1 v. in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 W- s $end
$var wire 1 "/ c_out $end
$var wire 1 #" a $end
$var wire 1 7- b $end
$var wire 1 x. c_in $end
$var wire 1 #/ AxorB $end
$var wire 1 $/ CnandAB $end
$var wire 1 %/ AnandB $end

$scope module xor_1 $end
$var wire 1 #/ out $end
$var wire 1 #" in1 $end
$var wire 1 7- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 W- out $end
$var wire 1 #/ in1 $end
$var wire 1 x. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 $/ out $end
$var wire 1 #/ in1 $end
$var wire 1 x. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 %/ out $end
$var wire 1 #" in1 $end
$var wire 1 7- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 "/ out $end
$var wire 1 %/ in1 $end
$var wire 1 $/ in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 X- s $end
$var wire 1 &/ c_out $end
$var wire 1 $" a $end
$var wire 1 8- b $end
$var wire 1 y. c_in $end
$var wire 1 '/ AxorB $end
$var wire 1 (/ CnandAB $end
$var wire 1 )/ AnandB $end

$scope module xor_1 $end
$var wire 1 '/ out $end
$var wire 1 $" in1 $end
$var wire 1 8- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 X- out $end
$var wire 1 '/ in1 $end
$var wire 1 y. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 (/ out $end
$var wire 1 '/ in1 $end
$var wire 1 y. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 )/ out $end
$var wire 1 $" in1 $end
$var wire 1 8- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 &/ out $end
$var wire 1 )/ in1 $end
$var wire 1 (/ in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 Y- s $end
$var wire 1 */ c_out $end
$var wire 1 %" a $end
$var wire 1 9- b $end
$var wire 1 z. c_in $end
$var wire 1 +/ AxorB $end
$var wire 1 ,/ CnandAB $end
$var wire 1 -/ AnandB $end

$scope module xor_1 $end
$var wire 1 +/ out $end
$var wire 1 %" in1 $end
$var wire 1 9- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 Y- out $end
$var wire 1 +/ in1 $end
$var wire 1 z. in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 ,/ out $end
$var wire 1 +/ in1 $end
$var wire 1 z. in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 -/ out $end
$var wire 1 %" in1 $end
$var wire 1 9- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 */ out $end
$var wire 1 -/ in1 $end
$var wire 1 ,/ in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 Z- s $end
$var wire 1 ./ c_out $end
$var wire 1 &" a $end
$var wire 1 :- b $end
$var wire 1 b- c_in $end
$var wire 1 // AxorB $end
$var wire 1 0/ CnandAB $end
$var wire 1 1/ AnandB $end

$scope module xor_1 $end
$var wire 1 // out $end
$var wire 1 &" in1 $end
$var wire 1 :- in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 Z- out $end
$var wire 1 // in1 $end
$var wire 1 b- in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 0/ out $end
$var wire 1 // in1 $end
$var wire 1 b- in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 1/ out $end
$var wire 1 &" in1 $end
$var wire 1 :- in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 ./ out $end
$var wire 1 1/ in1 $end
$var wire 1 0/ in2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module alu1 $end
$var parameter 32 2/ OPERAND_WIDTH $end
$var parameter 32 3/ NUM_OPERATIONS $end
$var wire 1 A" InA [15] $end
$var wire 1 B" InA [14] $end
$var wire 1 C" InA [13] $end
$var wire 1 D" InA [12] $end
$var wire 1 E" InA [11] $end
$var wire 1 F" InA [10] $end
$var wire 1 G" InA [9] $end
$var wire 1 H" InA [8] $end
$var wire 1 I" InA [7] $end
$var wire 1 J" InA [6] $end
$var wire 1 K" InA [5] $end
$var wire 1 L" InA [4] $end
$var wire 1 M" InA [3] $end
$var wire 1 N" InA [2] $end
$var wire 1 O" InA [1] $end
$var wire 1 P" InA [0] $end
$var wire 1 y, InB [15] $end
$var wire 1 z, InB [14] $end
$var wire 1 {, InB [13] $end
$var wire 1 |, InB [12] $end
$var wire 1 }, InB [11] $end
$var wire 1 ~, InB [10] $end
$var wire 1 !- InB [9] $end
$var wire 1 "- InB [8] $end
$var wire 1 #- InB [7] $end
$var wire 1 $- InB [6] $end
$var wire 1 %- InB [5] $end
$var wire 1 &- InB [4] $end
$var wire 1 '- InB [3] $end
$var wire 1 (- InB [2] $end
$var wire 1 )- InB [1] $end
$var wire 1 *- InB [0] $end
$var wire 1 j# Cin $end
$var wire 1 -" Oper [3] $end
$var wire 1 ." Oper [2] $end
$var wire 1 /" Oper [1] $end
$var wire 1 0" Oper [0] $end
$var wire 1 g# invA $end
$var wire 1 h# invB $end
$var wire 1 i# sign $end
$var reg 16 4/ Out [15:0] $end
$var wire 1 ^- OF $end
$var wire 1 _- ZF $end
$var wire 1 ]- CF $end
$var wire 1 \- SF $end
$var wire 1 5/ Cout $end
$var wire 1 6/ S [15] $end
$var wire 1 7/ S [14] $end
$var wire 1 8/ S [13] $end
$var wire 1 9/ S [12] $end
$var wire 1 :/ S [11] $end
$var wire 1 ;/ S [10] $end
$var wire 1 </ S [9] $end
$var wire 1 =/ S [8] $end
$var wire 1 >/ S [7] $end
$var wire 1 ?/ S [6] $end
$var wire 1 @/ S [5] $end
$var wire 1 A/ S [4] $end
$var wire 1 B/ S [3] $end
$var wire 1 C/ S [2] $end
$var wire 1 D/ S [1] $end
$var wire 1 E/ S [0] $end
$var wire 1 F/ ShOut [15] $end
$var wire 1 G/ ShOut [14] $end
$var wire 1 H/ ShOut [13] $end
$var wire 1 I/ ShOut [12] $end
$var wire 1 J/ ShOut [11] $end
$var wire 1 K/ ShOut [10] $end
$var wire 1 L/ ShOut [9] $end
$var wire 1 M/ ShOut [8] $end
$var wire 1 N/ ShOut [7] $end
$var wire 1 O/ ShOut [6] $end
$var wire 1 P/ ShOut [5] $end
$var wire 1 Q/ ShOut [4] $end
$var wire 1 R/ ShOut [3] $end
$var wire 1 S/ ShOut [2] $end
$var wire 1 T/ ShOut [1] $end
$var wire 1 U/ ShOut [0] $end
$var wire 1 V/ BitOut [15] $end
$var wire 1 W/ BitOut [14] $end
$var wire 1 X/ BitOut [13] $end
$var wire 1 Y/ BitOut [12] $end
$var wire 1 Z/ BitOut [11] $end
$var wire 1 [/ BitOut [10] $end
$var wire 1 \/ BitOut [9] $end
$var wire 1 ]/ BitOut [8] $end
$var wire 1 ^/ BitOut [7] $end
$var wire 1 _/ BitOut [6] $end
$var wire 1 `/ BitOut [5] $end
$var wire 1 a/ BitOut [4] $end
$var wire 1 b/ BitOut [3] $end
$var wire 1 c/ BitOut [2] $end
$var wire 1 d/ BitOut [1] $end
$var wire 1 e/ BitOut [0] $end
$var wire 1 f/ A [15] $end
$var wire 1 g/ A [14] $end
$var wire 1 h/ A [13] $end
$var wire 1 i/ A [12] $end
$var wire 1 j/ A [11] $end
$var wire 1 k/ A [10] $end
$var wire 1 l/ A [9] $end
$var wire 1 m/ A [8] $end
$var wire 1 n/ A [7] $end
$var wire 1 o/ A [6] $end
$var wire 1 p/ A [5] $end
$var wire 1 q/ A [4] $end
$var wire 1 r/ A [3] $end
$var wire 1 s/ A [2] $end
$var wire 1 t/ A [1] $end
$var wire 1 u/ A [0] $end
$var wire 1 v/ B [15] $end
$var wire 1 w/ B [14] $end
$var wire 1 x/ B [13] $end
$var wire 1 y/ B [12] $end
$var wire 1 z/ B [11] $end
$var wire 1 {/ B [10] $end
$var wire 1 |/ B [9] $end
$var wire 1 }/ B [8] $end
$var wire 1 ~/ B [7] $end
$var wire 1 !0 B [6] $end
$var wire 1 "0 B [5] $end
$var wire 1 #0 B [4] $end
$var wire 1 $0 B [3] $end
$var wire 1 %0 B [2] $end
$var wire 1 &0 B [1] $end
$var wire 1 '0 B [0] $end
$var wire 1 (0 sA [15] $end
$var wire 1 )0 sA [14] $end
$var wire 1 *0 sA [13] $end
$var wire 1 +0 sA [12] $end
$var wire 1 ,0 sA [11] $end
$var wire 1 -0 sA [10] $end
$var wire 1 .0 sA [9] $end
$var wire 1 /0 sA [8] $end
$var wire 1 00 sA [7] $end
$var wire 1 10 sA [6] $end
$var wire 1 20 sA [5] $end
$var wire 1 30 sA [4] $end
$var wire 1 40 sA [3] $end
$var wire 1 50 sA [2] $end
$var wire 1 60 sA [1] $end
$var wire 1 70 sA [0] $end
$var wire 1 80 sB [15] $end
$var wire 1 90 sB [14] $end
$var wire 1 :0 sB [13] $end
$var wire 1 ;0 sB [12] $end
$var wire 1 <0 sB [11] $end
$var wire 1 =0 sB [10] $end
$var wire 1 >0 sB [9] $end
$var wire 1 ?0 sB [8] $end
$var wire 1 @0 sB [7] $end
$var wire 1 A0 sB [6] $end
$var wire 1 B0 sB [5] $end
$var wire 1 C0 sB [4] $end
$var wire 1 D0 sB [3] $end
$var wire 1 E0 sB [2] $end
$var wire 1 F0 sB [1] $end
$var wire 1 G0 sB [0] $end

$scope module cla $end
$var parameter 32 H0 N $end
$var wire 1 6/ sum [15] $end
$var wire 1 7/ sum [14] $end
$var wire 1 8/ sum [13] $end
$var wire 1 9/ sum [12] $end
$var wire 1 :/ sum [11] $end
$var wire 1 ;/ sum [10] $end
$var wire 1 </ sum [9] $end
$var wire 1 =/ sum [8] $end
$var wire 1 >/ sum [7] $end
$var wire 1 ?/ sum [6] $end
$var wire 1 @/ sum [5] $end
$var wire 1 A/ sum [4] $end
$var wire 1 B/ sum [3] $end
$var wire 1 C/ sum [2] $end
$var wire 1 D/ sum [1] $end
$var wire 1 E/ sum [0] $end
$var wire 1 5/ c_out $end
$var wire 1 v/ a [15] $end
$var wire 1 w/ a [14] $end
$var wire 1 x/ a [13] $end
$var wire 1 y/ a [12] $end
$var wire 1 z/ a [11] $end
$var wire 1 {/ a [10] $end
$var wire 1 |/ a [9] $end
$var wire 1 }/ a [8] $end
$var wire 1 ~/ a [7] $end
$var wire 1 !0 a [6] $end
$var wire 1 "0 a [5] $end
$var wire 1 #0 a [4] $end
$var wire 1 $0 a [3] $end
$var wire 1 %0 a [2] $end
$var wire 1 &0 a [1] $end
$var wire 1 '0 a [0] $end
$var wire 1 f/ b [15] $end
$var wire 1 g/ b [14] $end
$var wire 1 h/ b [13] $end
$var wire 1 i/ b [12] $end
$var wire 1 j/ b [11] $end
$var wire 1 k/ b [10] $end
$var wire 1 l/ b [9] $end
$var wire 1 m/ b [8] $end
$var wire 1 n/ b [7] $end
$var wire 1 o/ b [6] $end
$var wire 1 p/ b [5] $end
$var wire 1 q/ b [4] $end
$var wire 1 r/ b [3] $end
$var wire 1 s/ b [2] $end
$var wire 1 t/ b [1] $end
$var wire 1 u/ b [0] $end
$var wire 1 j# c_in $end
$var wire 1 I0 carries [2] $end
$var wire 1 J0 carries [1] $end
$var wire 1 K0 carries [0] $end

$scope module cla[3] $end
$var parameter 32 L0 N $end
$var wire 1 6/ sum [3] $end
$var wire 1 7/ sum [2] $end
$var wire 1 8/ sum [1] $end
$var wire 1 9/ sum [0] $end
$var wire 1 5/ c_out $end
$var wire 1 v/ a [3] $end
$var wire 1 w/ a [2] $end
$var wire 1 x/ a [1] $end
$var wire 1 y/ a [0] $end
$var wire 1 f/ b [3] $end
$var wire 1 g/ b [2] $end
$var wire 1 h/ b [1] $end
$var wire 1 i/ b [0] $end
$var wire 1 I0 c_in $end
$var wire 1 M0 p [3] $end
$var wire 1 N0 p [2] $end
$var wire 1 O0 p [1] $end
$var wire 1 P0 p [0] $end
$var wire 1 Q0 ng [3] $end
$var wire 1 R0 ng [2] $end
$var wire 1 S0 ng [1] $end
$var wire 1 T0 ng [0] $end
$var wire 1 U0 carries [4] $end
$var wire 1 V0 carries [3] $end
$var wire 1 W0 carries [2] $end
$var wire 1 X0 carries [1] $end
$var wire 1 Y0 carries [0] $end
$var wire 1 Z0 cp [3] $end
$var wire 1 [0 cp [2] $end
$var wire 1 \0 cp [1] $end
$var wire 1 ]0 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 M0 out $end
$var wire 1 v/ in1 $end
$var wire 1 f/ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 N0 out $end
$var wire 1 w/ in1 $end
$var wire 1 g/ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 O0 out $end
$var wire 1 x/ in1 $end
$var wire 1 h/ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 P0 out $end
$var wire 1 y/ in1 $end
$var wire 1 i/ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 Q0 out $end
$var wire 1 v/ in1 $end
$var wire 1 f/ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 R0 out $end
$var wire 1 w/ in1 $end
$var wire 1 g/ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 S0 out $end
$var wire 1 x/ in1 $end
$var wire 1 h/ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 T0 out $end
$var wire 1 y/ in1 $end
$var wire 1 i/ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 Z0 out $end
$var wire 1 M0 in1 $end
$var wire 1 V0 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 [0 out $end
$var wire 1 N0 in1 $end
$var wire 1 W0 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 \0 out $end
$var wire 1 O0 in1 $end
$var wire 1 X0 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 ]0 out $end
$var wire 1 P0 in1 $end
$var wire 1 I0 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 5/ out $end
$var wire 1 Z0 in1 $end
$var wire 1 Q0 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 V0 out $end
$var wire 1 [0 in1 $end
$var wire 1 R0 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 W0 out $end
$var wire 1 \0 in1 $end
$var wire 1 S0 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 X0 out $end
$var wire 1 ]0 in1 $end
$var wire 1 T0 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 6/ s $end
$var wire 1 ^0 c_out $end
$var wire 1 v/ a $end
$var wire 1 f/ b $end
$var wire 1 V0 c_in $end
$var wire 1 _0 AxorB $end
$var wire 1 `0 CnandAB $end
$var wire 1 a0 AnandB $end

$scope module xor_1 $end
$var wire 1 _0 out $end
$var wire 1 v/ in1 $end
$var wire 1 f/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 6/ out $end
$var wire 1 _0 in1 $end
$var wire 1 V0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 `0 out $end
$var wire 1 _0 in1 $end
$var wire 1 V0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 a0 out $end
$var wire 1 v/ in1 $end
$var wire 1 f/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 ^0 out $end
$var wire 1 a0 in1 $end
$var wire 1 `0 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 7/ s $end
$var wire 1 b0 c_out $end
$var wire 1 w/ a $end
$var wire 1 g/ b $end
$var wire 1 W0 c_in $end
$var wire 1 c0 AxorB $end
$var wire 1 d0 CnandAB $end
$var wire 1 e0 AnandB $end

$scope module xor_1 $end
$var wire 1 c0 out $end
$var wire 1 w/ in1 $end
$var wire 1 g/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 7/ out $end
$var wire 1 c0 in1 $end
$var wire 1 W0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 d0 out $end
$var wire 1 c0 in1 $end
$var wire 1 W0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 e0 out $end
$var wire 1 w/ in1 $end
$var wire 1 g/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 b0 out $end
$var wire 1 e0 in1 $end
$var wire 1 d0 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 8/ s $end
$var wire 1 f0 c_out $end
$var wire 1 x/ a $end
$var wire 1 h/ b $end
$var wire 1 X0 c_in $end
$var wire 1 g0 AxorB $end
$var wire 1 h0 CnandAB $end
$var wire 1 i0 AnandB $end

$scope module xor_1 $end
$var wire 1 g0 out $end
$var wire 1 x/ in1 $end
$var wire 1 h/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 8/ out $end
$var wire 1 g0 in1 $end
$var wire 1 X0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 h0 out $end
$var wire 1 g0 in1 $end
$var wire 1 X0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 i0 out $end
$var wire 1 x/ in1 $end
$var wire 1 h/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 f0 out $end
$var wire 1 i0 in1 $end
$var wire 1 h0 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 9/ s $end
$var wire 1 j0 c_out $end
$var wire 1 y/ a $end
$var wire 1 i/ b $end
$var wire 1 I0 c_in $end
$var wire 1 k0 AxorB $end
$var wire 1 l0 CnandAB $end
$var wire 1 m0 AnandB $end

$scope module xor_1 $end
$var wire 1 k0 out $end
$var wire 1 y/ in1 $end
$var wire 1 i/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 9/ out $end
$var wire 1 k0 in1 $end
$var wire 1 I0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 l0 out $end
$var wire 1 k0 in1 $end
$var wire 1 I0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 m0 out $end
$var wire 1 y/ in1 $end
$var wire 1 i/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 j0 out $end
$var wire 1 m0 in1 $end
$var wire 1 l0 in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[2] $end
$var parameter 32 n0 N $end
$var wire 1 :/ sum [3] $end
$var wire 1 ;/ sum [2] $end
$var wire 1 </ sum [1] $end
$var wire 1 =/ sum [0] $end
$var wire 1 I0 c_out $end
$var wire 1 z/ a [3] $end
$var wire 1 {/ a [2] $end
$var wire 1 |/ a [1] $end
$var wire 1 }/ a [0] $end
$var wire 1 j/ b [3] $end
$var wire 1 k/ b [2] $end
$var wire 1 l/ b [1] $end
$var wire 1 m/ b [0] $end
$var wire 1 J0 c_in $end
$var wire 1 o0 p [3] $end
$var wire 1 p0 p [2] $end
$var wire 1 q0 p [1] $end
$var wire 1 r0 p [0] $end
$var wire 1 s0 ng [3] $end
$var wire 1 t0 ng [2] $end
$var wire 1 u0 ng [1] $end
$var wire 1 v0 ng [0] $end
$var wire 1 w0 carries [4] $end
$var wire 1 x0 carries [3] $end
$var wire 1 y0 carries [2] $end
$var wire 1 z0 carries [1] $end
$var wire 1 {0 carries [0] $end
$var wire 1 |0 cp [3] $end
$var wire 1 }0 cp [2] $end
$var wire 1 ~0 cp [1] $end
$var wire 1 !1 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 o0 out $end
$var wire 1 z/ in1 $end
$var wire 1 j/ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 p0 out $end
$var wire 1 {/ in1 $end
$var wire 1 k/ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 q0 out $end
$var wire 1 |/ in1 $end
$var wire 1 l/ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 r0 out $end
$var wire 1 }/ in1 $end
$var wire 1 m/ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 s0 out $end
$var wire 1 z/ in1 $end
$var wire 1 j/ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 t0 out $end
$var wire 1 {/ in1 $end
$var wire 1 k/ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 u0 out $end
$var wire 1 |/ in1 $end
$var wire 1 l/ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 v0 out $end
$var wire 1 }/ in1 $end
$var wire 1 m/ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 |0 out $end
$var wire 1 o0 in1 $end
$var wire 1 x0 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 }0 out $end
$var wire 1 p0 in1 $end
$var wire 1 y0 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 ~0 out $end
$var wire 1 q0 in1 $end
$var wire 1 z0 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 !1 out $end
$var wire 1 r0 in1 $end
$var wire 1 J0 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 I0 out $end
$var wire 1 |0 in1 $end
$var wire 1 s0 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 x0 out $end
$var wire 1 }0 in1 $end
$var wire 1 t0 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 y0 out $end
$var wire 1 ~0 in1 $end
$var wire 1 u0 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 z0 out $end
$var wire 1 !1 in1 $end
$var wire 1 v0 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 :/ s $end
$var wire 1 "1 c_out $end
$var wire 1 z/ a $end
$var wire 1 j/ b $end
$var wire 1 x0 c_in $end
$var wire 1 #1 AxorB $end
$var wire 1 $1 CnandAB $end
$var wire 1 %1 AnandB $end

$scope module xor_1 $end
$var wire 1 #1 out $end
$var wire 1 z/ in1 $end
$var wire 1 j/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 :/ out $end
$var wire 1 #1 in1 $end
$var wire 1 x0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 $1 out $end
$var wire 1 #1 in1 $end
$var wire 1 x0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 %1 out $end
$var wire 1 z/ in1 $end
$var wire 1 j/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 "1 out $end
$var wire 1 %1 in1 $end
$var wire 1 $1 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 ;/ s $end
$var wire 1 &1 c_out $end
$var wire 1 {/ a $end
$var wire 1 k/ b $end
$var wire 1 y0 c_in $end
$var wire 1 '1 AxorB $end
$var wire 1 (1 CnandAB $end
$var wire 1 )1 AnandB $end

$scope module xor_1 $end
$var wire 1 '1 out $end
$var wire 1 {/ in1 $end
$var wire 1 k/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 ;/ out $end
$var wire 1 '1 in1 $end
$var wire 1 y0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 (1 out $end
$var wire 1 '1 in1 $end
$var wire 1 y0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 )1 out $end
$var wire 1 {/ in1 $end
$var wire 1 k/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 &1 out $end
$var wire 1 )1 in1 $end
$var wire 1 (1 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 </ s $end
$var wire 1 *1 c_out $end
$var wire 1 |/ a $end
$var wire 1 l/ b $end
$var wire 1 z0 c_in $end
$var wire 1 +1 AxorB $end
$var wire 1 ,1 CnandAB $end
$var wire 1 -1 AnandB $end

$scope module xor_1 $end
$var wire 1 +1 out $end
$var wire 1 |/ in1 $end
$var wire 1 l/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 </ out $end
$var wire 1 +1 in1 $end
$var wire 1 z0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 ,1 out $end
$var wire 1 +1 in1 $end
$var wire 1 z0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 -1 out $end
$var wire 1 |/ in1 $end
$var wire 1 l/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 *1 out $end
$var wire 1 -1 in1 $end
$var wire 1 ,1 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 =/ s $end
$var wire 1 .1 c_out $end
$var wire 1 }/ a $end
$var wire 1 m/ b $end
$var wire 1 J0 c_in $end
$var wire 1 /1 AxorB $end
$var wire 1 01 CnandAB $end
$var wire 1 11 AnandB $end

$scope module xor_1 $end
$var wire 1 /1 out $end
$var wire 1 }/ in1 $end
$var wire 1 m/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 =/ out $end
$var wire 1 /1 in1 $end
$var wire 1 J0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 01 out $end
$var wire 1 /1 in1 $end
$var wire 1 J0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 11 out $end
$var wire 1 }/ in1 $end
$var wire 1 m/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 .1 out $end
$var wire 1 11 in1 $end
$var wire 1 01 in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[1] $end
$var parameter 32 21 N $end
$var wire 1 >/ sum [3] $end
$var wire 1 ?/ sum [2] $end
$var wire 1 @/ sum [1] $end
$var wire 1 A/ sum [0] $end
$var wire 1 J0 c_out $end
$var wire 1 ~/ a [3] $end
$var wire 1 !0 a [2] $end
$var wire 1 "0 a [1] $end
$var wire 1 #0 a [0] $end
$var wire 1 n/ b [3] $end
$var wire 1 o/ b [2] $end
$var wire 1 p/ b [1] $end
$var wire 1 q/ b [0] $end
$var wire 1 K0 c_in $end
$var wire 1 31 p [3] $end
$var wire 1 41 p [2] $end
$var wire 1 51 p [1] $end
$var wire 1 61 p [0] $end
$var wire 1 71 ng [3] $end
$var wire 1 81 ng [2] $end
$var wire 1 91 ng [1] $end
$var wire 1 :1 ng [0] $end
$var wire 1 ;1 carries [4] $end
$var wire 1 <1 carries [3] $end
$var wire 1 =1 carries [2] $end
$var wire 1 >1 carries [1] $end
$var wire 1 ?1 carries [0] $end
$var wire 1 @1 cp [3] $end
$var wire 1 A1 cp [2] $end
$var wire 1 B1 cp [1] $end
$var wire 1 C1 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 31 out $end
$var wire 1 ~/ in1 $end
$var wire 1 n/ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 41 out $end
$var wire 1 !0 in1 $end
$var wire 1 o/ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 51 out $end
$var wire 1 "0 in1 $end
$var wire 1 p/ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 61 out $end
$var wire 1 #0 in1 $end
$var wire 1 q/ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 71 out $end
$var wire 1 ~/ in1 $end
$var wire 1 n/ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 81 out $end
$var wire 1 !0 in1 $end
$var wire 1 o/ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 91 out $end
$var wire 1 "0 in1 $end
$var wire 1 p/ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 :1 out $end
$var wire 1 #0 in1 $end
$var wire 1 q/ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 @1 out $end
$var wire 1 31 in1 $end
$var wire 1 <1 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 A1 out $end
$var wire 1 41 in1 $end
$var wire 1 =1 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 B1 out $end
$var wire 1 51 in1 $end
$var wire 1 >1 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 C1 out $end
$var wire 1 61 in1 $end
$var wire 1 K0 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 J0 out $end
$var wire 1 @1 in1 $end
$var wire 1 71 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 <1 out $end
$var wire 1 A1 in1 $end
$var wire 1 81 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 =1 out $end
$var wire 1 B1 in1 $end
$var wire 1 91 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 >1 out $end
$var wire 1 C1 in1 $end
$var wire 1 :1 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 >/ s $end
$var wire 1 D1 c_out $end
$var wire 1 ~/ a $end
$var wire 1 n/ b $end
$var wire 1 <1 c_in $end
$var wire 1 E1 AxorB $end
$var wire 1 F1 CnandAB $end
$var wire 1 G1 AnandB $end

$scope module xor_1 $end
$var wire 1 E1 out $end
$var wire 1 ~/ in1 $end
$var wire 1 n/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 >/ out $end
$var wire 1 E1 in1 $end
$var wire 1 <1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 F1 out $end
$var wire 1 E1 in1 $end
$var wire 1 <1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 G1 out $end
$var wire 1 ~/ in1 $end
$var wire 1 n/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 D1 out $end
$var wire 1 G1 in1 $end
$var wire 1 F1 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 ?/ s $end
$var wire 1 H1 c_out $end
$var wire 1 !0 a $end
$var wire 1 o/ b $end
$var wire 1 =1 c_in $end
$var wire 1 I1 AxorB $end
$var wire 1 J1 CnandAB $end
$var wire 1 K1 AnandB $end

$scope module xor_1 $end
$var wire 1 I1 out $end
$var wire 1 !0 in1 $end
$var wire 1 o/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 ?/ out $end
$var wire 1 I1 in1 $end
$var wire 1 =1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 J1 out $end
$var wire 1 I1 in1 $end
$var wire 1 =1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 K1 out $end
$var wire 1 !0 in1 $end
$var wire 1 o/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 H1 out $end
$var wire 1 K1 in1 $end
$var wire 1 J1 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 @/ s $end
$var wire 1 L1 c_out $end
$var wire 1 "0 a $end
$var wire 1 p/ b $end
$var wire 1 >1 c_in $end
$var wire 1 M1 AxorB $end
$var wire 1 N1 CnandAB $end
$var wire 1 O1 AnandB $end

$scope module xor_1 $end
$var wire 1 M1 out $end
$var wire 1 "0 in1 $end
$var wire 1 p/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 @/ out $end
$var wire 1 M1 in1 $end
$var wire 1 >1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 N1 out $end
$var wire 1 M1 in1 $end
$var wire 1 >1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 O1 out $end
$var wire 1 "0 in1 $end
$var wire 1 p/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 L1 out $end
$var wire 1 O1 in1 $end
$var wire 1 N1 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 A/ s $end
$var wire 1 P1 c_out $end
$var wire 1 #0 a $end
$var wire 1 q/ b $end
$var wire 1 K0 c_in $end
$var wire 1 Q1 AxorB $end
$var wire 1 R1 CnandAB $end
$var wire 1 S1 AnandB $end

$scope module xor_1 $end
$var wire 1 Q1 out $end
$var wire 1 #0 in1 $end
$var wire 1 q/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 A/ out $end
$var wire 1 Q1 in1 $end
$var wire 1 K0 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 R1 out $end
$var wire 1 Q1 in1 $end
$var wire 1 K0 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 S1 out $end
$var wire 1 #0 in1 $end
$var wire 1 q/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 P1 out $end
$var wire 1 S1 in1 $end
$var wire 1 R1 in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[0] $end
$var parameter 32 T1 N $end
$var wire 1 B/ sum [3] $end
$var wire 1 C/ sum [2] $end
$var wire 1 D/ sum [1] $end
$var wire 1 E/ sum [0] $end
$var wire 1 K0 c_out $end
$var wire 1 $0 a [3] $end
$var wire 1 %0 a [2] $end
$var wire 1 &0 a [1] $end
$var wire 1 '0 a [0] $end
$var wire 1 r/ b [3] $end
$var wire 1 s/ b [2] $end
$var wire 1 t/ b [1] $end
$var wire 1 u/ b [0] $end
$var wire 1 j# c_in $end
$var wire 1 U1 p [3] $end
$var wire 1 V1 p [2] $end
$var wire 1 W1 p [1] $end
$var wire 1 X1 p [0] $end
$var wire 1 Y1 ng [3] $end
$var wire 1 Z1 ng [2] $end
$var wire 1 [1 ng [1] $end
$var wire 1 \1 ng [0] $end
$var wire 1 ]1 carries [4] $end
$var wire 1 ^1 carries [3] $end
$var wire 1 _1 carries [2] $end
$var wire 1 `1 carries [1] $end
$var wire 1 a1 carries [0] $end
$var wire 1 b1 cp [3] $end
$var wire 1 c1 cp [2] $end
$var wire 1 d1 cp [1] $end
$var wire 1 e1 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 U1 out $end
$var wire 1 $0 in1 $end
$var wire 1 r/ in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 V1 out $end
$var wire 1 %0 in1 $end
$var wire 1 s/ in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 W1 out $end
$var wire 1 &0 in1 $end
$var wire 1 t/ in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 X1 out $end
$var wire 1 '0 in1 $end
$var wire 1 u/ in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 Y1 out $end
$var wire 1 $0 in1 $end
$var wire 1 r/ in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 Z1 out $end
$var wire 1 %0 in1 $end
$var wire 1 s/ in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 [1 out $end
$var wire 1 &0 in1 $end
$var wire 1 t/ in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 \1 out $end
$var wire 1 '0 in1 $end
$var wire 1 u/ in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 b1 out $end
$var wire 1 U1 in1 $end
$var wire 1 ^1 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 c1 out $end
$var wire 1 V1 in1 $end
$var wire 1 _1 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 d1 out $end
$var wire 1 W1 in1 $end
$var wire 1 `1 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 e1 out $end
$var wire 1 X1 in1 $end
$var wire 1 j# in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 K0 out $end
$var wire 1 b1 in1 $end
$var wire 1 Y1 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 ^1 out $end
$var wire 1 c1 in1 $end
$var wire 1 Z1 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 _1 out $end
$var wire 1 d1 in1 $end
$var wire 1 [1 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 `1 out $end
$var wire 1 e1 in1 $end
$var wire 1 \1 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 B/ s $end
$var wire 1 f1 c_out $end
$var wire 1 $0 a $end
$var wire 1 r/ b $end
$var wire 1 ^1 c_in $end
$var wire 1 g1 AxorB $end
$var wire 1 h1 CnandAB $end
$var wire 1 i1 AnandB $end

$scope module xor_1 $end
$var wire 1 g1 out $end
$var wire 1 $0 in1 $end
$var wire 1 r/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 B/ out $end
$var wire 1 g1 in1 $end
$var wire 1 ^1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 h1 out $end
$var wire 1 g1 in1 $end
$var wire 1 ^1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 i1 out $end
$var wire 1 $0 in1 $end
$var wire 1 r/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 f1 out $end
$var wire 1 i1 in1 $end
$var wire 1 h1 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 C/ s $end
$var wire 1 j1 c_out $end
$var wire 1 %0 a $end
$var wire 1 s/ b $end
$var wire 1 _1 c_in $end
$var wire 1 k1 AxorB $end
$var wire 1 l1 CnandAB $end
$var wire 1 m1 AnandB $end

$scope module xor_1 $end
$var wire 1 k1 out $end
$var wire 1 %0 in1 $end
$var wire 1 s/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 C/ out $end
$var wire 1 k1 in1 $end
$var wire 1 _1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 l1 out $end
$var wire 1 k1 in1 $end
$var wire 1 _1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 m1 out $end
$var wire 1 %0 in1 $end
$var wire 1 s/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 j1 out $end
$var wire 1 m1 in1 $end
$var wire 1 l1 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 D/ s $end
$var wire 1 n1 c_out $end
$var wire 1 &0 a $end
$var wire 1 t/ b $end
$var wire 1 `1 c_in $end
$var wire 1 o1 AxorB $end
$var wire 1 p1 CnandAB $end
$var wire 1 q1 AnandB $end

$scope module xor_1 $end
$var wire 1 o1 out $end
$var wire 1 &0 in1 $end
$var wire 1 t/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 D/ out $end
$var wire 1 o1 in1 $end
$var wire 1 `1 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 p1 out $end
$var wire 1 o1 in1 $end
$var wire 1 `1 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 q1 out $end
$var wire 1 &0 in1 $end
$var wire 1 t/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 n1 out $end
$var wire 1 q1 in1 $end
$var wire 1 p1 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 E/ s $end
$var wire 1 r1 c_out $end
$var wire 1 '0 a $end
$var wire 1 u/ b $end
$var wire 1 j# c_in $end
$var wire 1 s1 AxorB $end
$var wire 1 t1 CnandAB $end
$var wire 1 u1 AnandB $end

$scope module xor_1 $end
$var wire 1 s1 out $end
$var wire 1 '0 in1 $end
$var wire 1 u/ in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 E/ out $end
$var wire 1 s1 in1 $end
$var wire 1 j# in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 t1 out $end
$var wire 1 s1 in1 $end
$var wire 1 j# in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 u1 out $end
$var wire 1 '0 in1 $end
$var wire 1 u/ in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 r1 out $end
$var wire 1 u1 in1 $end
$var wire 1 t1 in2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module shift $end
$var parameter 32 v1 OPERAND_WIDTH $end
$var parameter 32 w1 SHAMT_WIDTH $end
$var parameter 32 x1 NUM_OPERATIONS $end
$var wire 1 f/ In [15] $end
$var wire 1 g/ In [14] $end
$var wire 1 h/ In [13] $end
$var wire 1 i/ In [12] $end
$var wire 1 j/ In [11] $end
$var wire 1 k/ In [10] $end
$var wire 1 l/ In [9] $end
$var wire 1 m/ In [8] $end
$var wire 1 n/ In [7] $end
$var wire 1 o/ In [6] $end
$var wire 1 p/ In [5] $end
$var wire 1 q/ In [4] $end
$var wire 1 r/ In [3] $end
$var wire 1 s/ In [2] $end
$var wire 1 t/ In [1] $end
$var wire 1 u/ In [0] $end
$var wire 1 $0 ShAmt [3] $end
$var wire 1 %0 ShAmt [2] $end
$var wire 1 &0 ShAmt [1] $end
$var wire 1 '0 ShAmt [0] $end
$var wire 1 /" Oper [1] $end
$var wire 1 0" Oper [0] $end
$var wire 1 F/ Out [15] $end
$var wire 1 G/ Out [14] $end
$var wire 1 H/ Out [13] $end
$var wire 1 I/ Out [12] $end
$var wire 1 J/ Out [11] $end
$var wire 1 K/ Out [10] $end
$var wire 1 L/ Out [9] $end
$var wire 1 M/ Out [8] $end
$var wire 1 N/ Out [7] $end
$var wire 1 O/ Out [6] $end
$var wire 1 P/ Out [5] $end
$var wire 1 Q/ Out [4] $end
$var wire 1 R/ Out [3] $end
$var wire 1 S/ Out [2] $end
$var wire 1 T/ Out [1] $end
$var wire 1 U/ Out [0] $end
$var wire 1 y1 s0 [15] $end
$var wire 1 z1 s0 [14] $end
$var wire 1 {1 s0 [13] $end
$var wire 1 |1 s0 [12] $end
$var wire 1 }1 s0 [11] $end
$var wire 1 ~1 s0 [10] $end
$var wire 1 !2 s0 [9] $end
$var wire 1 "2 s0 [8] $end
$var wire 1 #2 s0 [7] $end
$var wire 1 $2 s0 [6] $end
$var wire 1 %2 s0 [5] $end
$var wire 1 &2 s0 [4] $end
$var wire 1 '2 s0 [3] $end
$var wire 1 (2 s0 [2] $end
$var wire 1 )2 s0 [1] $end
$var wire 1 *2 s0 [0] $end
$var wire 1 +2 s1 [15] $end
$var wire 1 ,2 s1 [14] $end
$var wire 1 -2 s1 [13] $end
$var wire 1 .2 s1 [12] $end
$var wire 1 /2 s1 [11] $end
$var wire 1 02 s1 [10] $end
$var wire 1 12 s1 [9] $end
$var wire 1 22 s1 [8] $end
$var wire 1 32 s1 [7] $end
$var wire 1 42 s1 [6] $end
$var wire 1 52 s1 [5] $end
$var wire 1 62 s1 [4] $end
$var wire 1 72 s1 [3] $end
$var wire 1 82 s1 [2] $end
$var wire 1 92 s1 [1] $end
$var wire 1 :2 s1 [0] $end
$var wire 1 ;2 s2 [15] $end
$var wire 1 <2 s2 [14] $end
$var wire 1 =2 s2 [13] $end
$var wire 1 >2 s2 [12] $end
$var wire 1 ?2 s2 [11] $end
$var wire 1 @2 s2 [10] $end
$var wire 1 A2 s2 [9] $end
$var wire 1 B2 s2 [8] $end
$var wire 1 C2 s2 [7] $end
$var wire 1 D2 s2 [6] $end
$var wire 1 E2 s2 [5] $end
$var wire 1 F2 s2 [4] $end
$var wire 1 G2 s2 [3] $end
$var wire 1 H2 s2 [2] $end
$var wire 1 I2 s2 [1] $end
$var wire 1 J2 s2 [0] $end
$var wire 1 K2 s3 [15] $end
$var wire 1 L2 s3 [14] $end
$var wire 1 M2 s3 [13] $end
$var wire 1 N2 s3 [12] $end
$var wire 1 O2 s3 [11] $end
$var wire 1 P2 s3 [10] $end
$var wire 1 Q2 s3 [9] $end
$var wire 1 R2 s3 [8] $end
$var wire 1 S2 s3 [7] $end
$var wire 1 T2 s3 [6] $end
$var wire 1 U2 s3 [5] $end
$var wire 1 V2 s3 [4] $end
$var wire 1 W2 s3 [3] $end
$var wire 1 X2 s3 [2] $end
$var wire 1 Y2 s3 [1] $end
$var wire 1 Z2 s3 [0] $end
$var wire 1 [2 temp_out_sh0 [15] $end
$var wire 1 \2 temp_out_sh0 [14] $end
$var wire 1 ]2 temp_out_sh0 [13] $end
$var wire 1 ^2 temp_out_sh0 [12] $end
$var wire 1 _2 temp_out_sh0 [11] $end
$var wire 1 `2 temp_out_sh0 [10] $end
$var wire 1 a2 temp_out_sh0 [9] $end
$var wire 1 b2 temp_out_sh0 [8] $end
$var wire 1 c2 temp_out_sh0 [7] $end
$var wire 1 d2 temp_out_sh0 [6] $end
$var wire 1 e2 temp_out_sh0 [5] $end
$var wire 1 f2 temp_out_sh0 [4] $end
$var wire 1 g2 temp_out_sh0 [3] $end
$var wire 1 h2 temp_out_sh0 [2] $end
$var wire 1 i2 temp_out_sh0 [1] $end
$var wire 1 j2 temp_out_sh0 [0] $end
$var wire 1 k2 temp_out_sh1 [15] $end
$var wire 1 l2 temp_out_sh1 [14] $end
$var wire 1 m2 temp_out_sh1 [13] $end
$var wire 1 n2 temp_out_sh1 [12] $end
$var wire 1 o2 temp_out_sh1 [11] $end
$var wire 1 p2 temp_out_sh1 [10] $end
$var wire 1 q2 temp_out_sh1 [9] $end
$var wire 1 r2 temp_out_sh1 [8] $end
$var wire 1 s2 temp_out_sh1 [7] $end
$var wire 1 t2 temp_out_sh1 [6] $end
$var wire 1 u2 temp_out_sh1 [5] $end
$var wire 1 v2 temp_out_sh1 [4] $end
$var wire 1 w2 temp_out_sh1 [3] $end
$var wire 1 x2 temp_out_sh1 [2] $end
$var wire 1 y2 temp_out_sh1 [1] $end
$var wire 1 z2 temp_out_sh1 [0] $end
$var wire 1 {2 temp_out_sh2 [15] $end
$var wire 1 |2 temp_out_sh2 [14] $end
$var wire 1 }2 temp_out_sh2 [13] $end
$var wire 1 ~2 temp_out_sh2 [12] $end
$var wire 1 !3 temp_out_sh2 [11] $end
$var wire 1 "3 temp_out_sh2 [10] $end
$var wire 1 #3 temp_out_sh2 [9] $end
$var wire 1 $3 temp_out_sh2 [8] $end
$var wire 1 %3 temp_out_sh2 [7] $end
$var wire 1 &3 temp_out_sh2 [6] $end
$var wire 1 '3 temp_out_sh2 [5] $end
$var wire 1 (3 temp_out_sh2 [4] $end
$var wire 1 )3 temp_out_sh2 [3] $end
$var wire 1 *3 temp_out_sh2 [2] $end
$var wire 1 +3 temp_out_sh2 [1] $end
$var wire 1 ,3 temp_out_sh2 [0] $end
$var wire 1 -3 temp_out_sh3 [15] $end
$var wire 1 .3 temp_out_sh3 [14] $end
$var wire 1 /3 temp_out_sh3 [13] $end
$var wire 1 03 temp_out_sh3 [12] $end
$var wire 1 13 temp_out_sh3 [11] $end
$var wire 1 23 temp_out_sh3 [10] $end
$var wire 1 33 temp_out_sh3 [9] $end
$var wire 1 43 temp_out_sh3 [8] $end
$var wire 1 53 temp_out_sh3 [7] $end
$var wire 1 63 temp_out_sh3 [6] $end
$var wire 1 73 temp_out_sh3 [5] $end
$var wire 1 83 temp_out_sh3 [4] $end
$var wire 1 93 temp_out_sh3 [3] $end
$var wire 1 :3 temp_out_sh3 [2] $end
$var wire 1 ;3 temp_out_sh3 [1] $end
$var wire 1 <3 temp_out_sh3 [0] $end

$scope module bs0 $end
$var wire 1 f/ in [15] $end
$var wire 1 g/ in [14] $end
$var wire 1 h/ in [13] $end
$var wire 1 i/ in [12] $end
$var wire 1 j/ in [11] $end
$var wire 1 k/ in [10] $end
$var wire 1 l/ in [9] $end
$var wire 1 m/ in [8] $end
$var wire 1 n/ in [7] $end
$var wire 1 o/ in [6] $end
$var wire 1 p/ in [5] $end
$var wire 1 q/ in [4] $end
$var wire 1 r/ in [3] $end
$var wire 1 s/ in [2] $end
$var wire 1 t/ in [1] $end
$var wire 1 u/ in [0] $end
$var wire 1 /" oper [1] $end
$var wire 1 0" oper [0] $end
$var wire 1 [2 out [15] $end
$var wire 1 \2 out [14] $end
$var wire 1 ]2 out [13] $end
$var wire 1 ^2 out [12] $end
$var wire 1 _2 out [11] $end
$var wire 1 `2 out [10] $end
$var wire 1 a2 out [9] $end
$var wire 1 b2 out [8] $end
$var wire 1 c2 out [7] $end
$var wire 1 d2 out [6] $end
$var wire 1 e2 out [5] $end
$var wire 1 f2 out [4] $end
$var wire 1 g2 out [3] $end
$var wire 1 h2 out [2] $end
$var wire 1 i2 out [1] $end
$var wire 1 j2 out [0] $end
$upscope $end

$scope module bs1 $end
$var wire 1 y1 in [15] $end
$var wire 1 z1 in [14] $end
$var wire 1 {1 in [13] $end
$var wire 1 |1 in [12] $end
$var wire 1 }1 in [11] $end
$var wire 1 ~1 in [10] $end
$var wire 1 !2 in [9] $end
$var wire 1 "2 in [8] $end
$var wire 1 #2 in [7] $end
$var wire 1 $2 in [6] $end
$var wire 1 %2 in [5] $end
$var wire 1 &2 in [4] $end
$var wire 1 '2 in [3] $end
$var wire 1 (2 in [2] $end
$var wire 1 )2 in [1] $end
$var wire 1 *2 in [0] $end
$var wire 1 /" oper [1] $end
$var wire 1 0" oper [0] $end
$var wire 1 k2 out [15] $end
$var wire 1 l2 out [14] $end
$var wire 1 m2 out [13] $end
$var wire 1 n2 out [12] $end
$var wire 1 o2 out [11] $end
$var wire 1 p2 out [10] $end
$var wire 1 q2 out [9] $end
$var wire 1 r2 out [8] $end
$var wire 1 s2 out [7] $end
$var wire 1 t2 out [6] $end
$var wire 1 u2 out [5] $end
$var wire 1 v2 out [4] $end
$var wire 1 w2 out [3] $end
$var wire 1 x2 out [2] $end
$var wire 1 y2 out [1] $end
$var wire 1 z2 out [0] $end
$upscope $end

$scope module bs2 $end
$var wire 1 +2 in [15] $end
$var wire 1 ,2 in [14] $end
$var wire 1 -2 in [13] $end
$var wire 1 .2 in [12] $end
$var wire 1 /2 in [11] $end
$var wire 1 02 in [10] $end
$var wire 1 12 in [9] $end
$var wire 1 22 in [8] $end
$var wire 1 32 in [7] $end
$var wire 1 42 in [6] $end
$var wire 1 52 in [5] $end
$var wire 1 62 in [4] $end
$var wire 1 72 in [3] $end
$var wire 1 82 in [2] $end
$var wire 1 92 in [1] $end
$var wire 1 :2 in [0] $end
$var wire 1 /" oper [1] $end
$var wire 1 0" oper [0] $end
$var wire 1 {2 out [15] $end
$var wire 1 |2 out [14] $end
$var wire 1 }2 out [13] $end
$var wire 1 ~2 out [12] $end
$var wire 1 !3 out [11] $end
$var wire 1 "3 out [10] $end
$var wire 1 #3 out [9] $end
$var wire 1 $3 out [8] $end
$var wire 1 %3 out [7] $end
$var wire 1 &3 out [6] $end
$var wire 1 '3 out [5] $end
$var wire 1 (3 out [4] $end
$var wire 1 )3 out [3] $end
$var wire 1 *3 out [2] $end
$var wire 1 +3 out [1] $end
$var wire 1 ,3 out [0] $end
$upscope $end

$scope module bs3 $end
$var wire 1 ;2 in [15] $end
$var wire 1 <2 in [14] $end
$var wire 1 =2 in [13] $end
$var wire 1 >2 in [12] $end
$var wire 1 ?2 in [11] $end
$var wire 1 @2 in [10] $end
$var wire 1 A2 in [9] $end
$var wire 1 B2 in [8] $end
$var wire 1 C2 in [7] $end
$var wire 1 D2 in [6] $end
$var wire 1 E2 in [5] $end
$var wire 1 F2 in [4] $end
$var wire 1 G2 in [3] $end
$var wire 1 H2 in [2] $end
$var wire 1 I2 in [1] $end
$var wire 1 J2 in [0] $end
$var wire 1 /" oper [1] $end
$var wire 1 0" oper [0] $end
$var wire 1 -3 out [15] $end
$var wire 1 .3 out [14] $end
$var wire 1 /3 out [13] $end
$var wire 1 03 out [12] $end
$var wire 1 13 out [11] $end
$var wire 1 23 out [10] $end
$var wire 1 33 out [9] $end
$var wire 1 43 out [8] $end
$var wire 1 53 out [7] $end
$var wire 1 63 out [6] $end
$var wire 1 73 out [5] $end
$var wire 1 83 out [4] $end
$var wire 1 93 out [3] $end
$var wire 1 :3 out [2] $end
$var wire 1 ;3 out [1] $end
$var wire 1 <3 out [0] $end
$upscope $end
$upscope $end
$upscope $end

$scope module branch_ctrl $end
$var wire 1 \- SF $end
$var wire 1 _- ZF $end
$var wire 1 t# brch_instr [2] $end
$var wire 1 u# brch_instr [1] $end
$var wire 1 v# brch_instr [0] $end
$var wire 1 [- BrchCnd $end
$var reg 1 =3 brch_sig $end
$upscope $end
$upscope $end

$scope module memory0 $end
$var wire 1 a" ALU [15] $end
$var wire 1 b" ALU [14] $end
$var wire 1 c" ALU [13] $end
$var wire 1 d" ALU [12] $end
$var wire 1 e" ALU [11] $end
$var wire 1 f" ALU [10] $end
$var wire 1 g" ALU [9] $end
$var wire 1 h" ALU [8] $end
$var wire 1 i" ALU [7] $end
$var wire 1 j" ALU [6] $end
$var wire 1 k" ALU [5] $end
$var wire 1 l" ALU [4] $end
$var wire 1 m" ALU [3] $end
$var wire 1 n" ALU [2] $end
$var wire 1 o" ALU [1] $end
$var wire 1 p" ALU [0] $end
$var wire 1 Q" writeData [15] $end
$var wire 1 R" writeData [14] $end
$var wire 1 S" writeData [13] $end
$var wire 1 T" writeData [12] $end
$var wire 1 U" writeData [11] $end
$var wire 1 V" writeData [10] $end
$var wire 1 W" writeData [9] $end
$var wire 1 X" writeData [8] $end
$var wire 1 Y" writeData [7] $end
$var wire 1 Z" writeData [6] $end
$var wire 1 [" writeData [5] $end
$var wire 1 \" writeData [4] $end
$var wire 1 ]" writeData [3] $end
$var wire 1 ^" writeData [2] $end
$var wire 1 _" writeData [1] $end
$var wire 1 `" writeData [0] $end
$var wire 1 l# MemWrt $end
$var wire 1 m# readEn $end
$var wire 1 c# nHaltSig $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var wire 1 q" readData [15] $end
$var wire 1 r" readData [14] $end
$var wire 1 s" readData [13] $end
$var wire 1 t" readData [12] $end
$var wire 1 u" readData [11] $end
$var wire 1 v" readData [10] $end
$var wire 1 w" readData [9] $end
$var wire 1 x" readData [8] $end
$var wire 1 y" readData [7] $end
$var wire 1 z" readData [6] $end
$var wire 1 {" readData [5] $end
$var wire 1 |" readData [4] $end
$var wire 1 }" readData [3] $end
$var wire 1 ~" readData [2] $end
$var wire 1 !# readData [1] $end
$var wire 1 "# readData [0] $end

$scope module data_mem $end
$var wire 1 q" data_out [15] $end
$var wire 1 r" data_out [14] $end
$var wire 1 s" data_out [13] $end
$var wire 1 t" data_out [12] $end
$var wire 1 u" data_out [11] $end
$var wire 1 v" data_out [10] $end
$var wire 1 w" data_out [9] $end
$var wire 1 x" data_out [8] $end
$var wire 1 y" data_out [7] $end
$var wire 1 z" data_out [6] $end
$var wire 1 {" data_out [5] $end
$var wire 1 |" data_out [4] $end
$var wire 1 }" data_out [3] $end
$var wire 1 ~" data_out [2] $end
$var wire 1 !# data_out [1] $end
$var wire 1 "# data_out [0] $end
$var wire 1 Q" data_in [15] $end
$var wire 1 R" data_in [14] $end
$var wire 1 S" data_in [13] $end
$var wire 1 T" data_in [12] $end
$var wire 1 U" data_in [11] $end
$var wire 1 V" data_in [10] $end
$var wire 1 W" data_in [9] $end
$var wire 1 X" data_in [8] $end
$var wire 1 Y" data_in [7] $end
$var wire 1 Z" data_in [6] $end
$var wire 1 [" data_in [5] $end
$var wire 1 \" data_in [4] $end
$var wire 1 ]" data_in [3] $end
$var wire 1 ^" data_in [2] $end
$var wire 1 _" data_in [1] $end
$var wire 1 `" data_in [0] $end
$var wire 1 a" addr [15] $end
$var wire 1 b" addr [14] $end
$var wire 1 c" addr [13] $end
$var wire 1 d" addr [12] $end
$var wire 1 e" addr [11] $end
$var wire 1 f" addr [10] $end
$var wire 1 g" addr [9] $end
$var wire 1 h" addr [8] $end
$var wire 1 i" addr [7] $end
$var wire 1 j" addr [6] $end
$var wire 1 k" addr [5] $end
$var wire 1 l" addr [4] $end
$var wire 1 m" addr [3] $end
$var wire 1 n" addr [2] $end
$var wire 1 o" addr [1] $end
$var wire 1 p" addr [0] $end
$var wire 1 >3 enable $end
$var wire 1 l# wr $end
$var wire 1 ?3 createdump $end
$var wire 1 /! clk $end
$var wire 1 1! rst $end
$var reg 1 @3 loaded $end
$var reg 17 A3 largest [16:0] $end
$var integer 32 B3 mcd $end
$var integer 32 C3 i $end
$upscope $end
$upscope $end

$scope module wb0 $end
$var wire 1 q" MemIn [15] $end
$var wire 1 r" MemIn [14] $end
$var wire 1 s" MemIn [13] $end
$var wire 1 t" MemIn [12] $end
$var wire 1 u" MemIn [11] $end
$var wire 1 v" MemIn [10] $end
$var wire 1 w" MemIn [9] $end
$var wire 1 x" MemIn [8] $end
$var wire 1 y" MemIn [7] $end
$var wire 1 z" MemIn [6] $end
$var wire 1 {" MemIn [5] $end
$var wire 1 |" MemIn [4] $end
$var wire 1 }" MemIn [3] $end
$var wire 1 ~" MemIn [2] $end
$var wire 1 !# MemIn [1] $end
$var wire 1 "# MemIn [0] $end
$var wire 1 u! PcIn [15] $end
$var wire 1 v! PcIn [14] $end
$var wire 1 w! PcIn [13] $end
$var wire 1 x! PcIn [12] $end
$var wire 1 y! PcIn [11] $end
$var wire 1 z! PcIn [10] $end
$var wire 1 {! PcIn [9] $end
$var wire 1 |! PcIn [8] $end
$var wire 1 }! PcIn [7] $end
$var wire 1 ~! PcIn [6] $end
$var wire 1 !" PcIn [5] $end
$var wire 1 "" PcIn [4] $end
$var wire 1 #" PcIn [3] $end
$var wire 1 $" PcIn [2] $end
$var wire 1 %" PcIn [1] $end
$var wire 1 &" PcIn [0] $end
$var wire 1 a" ALUIn [15] $end
$var wire 1 b" ALUIn [14] $end
$var wire 1 c" ALUIn [13] $end
$var wire 1 d" ALUIn [12] $end
$var wire 1 e" ALUIn [11] $end
$var wire 1 f" ALUIn [10] $end
$var wire 1 g" ALUIn [9] $end
$var wire 1 h" ALUIn [8] $end
$var wire 1 i" ALUIn [7] $end
$var wire 1 j" ALUIn [6] $end
$var wire 1 k" ALUIn [5] $end
$var wire 1 l" ALUIn [4] $end
$var wire 1 m" ALUIn [3] $end
$var wire 1 n" ALUIn [2] $end
$var wire 1 o" ALUIn [1] $end
$var wire 1 p" ALUIn [0] $end
$var wire 1 n# RegSrc [1] $end
$var wire 1 o# RegSrc [0] $end
$var wire 1 1" WB [15] $end
$var wire 1 2" WB [14] $end
$var wire 1 3" WB [13] $end
$var wire 1 4" WB [12] $end
$var wire 1 5" WB [11] $end
$var wire 1 6" WB [10] $end
$var wire 1 7" WB [9] $end
$var wire 1 8" WB [8] $end
$var wire 1 9" WB [7] $end
$var wire 1 :" WB [6] $end
$var wire 1 ;" WB [5] $end
$var wire 1 <" WB [4] $end
$var wire 1 =" WB [3] $end
$var wire 1 >" WB [2] $end
$var wire 1 ?" WB [1] $end
$var wire 1 @" WB [0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
12!
13!
xz#
x{#
x|#
x}#
x~#
x!$
x"$
x#$
x$$
x%$
x&$
x'$
bx ($
bx )$
bx *$
bx +$
bx ,$
0%%
0#%
0!%
0}$
0{$
0y$
0w$
0u$
0s$
0q$
0o$
0m$
0k$
0i$
0g$
0e$
19%
b0 :%
0w,
0u,
0s,
0q,
0o,
0m,
0k,
0i,
0g,
0e,
0c,
0a,
0_,
0],
0[,
0Y,
0T,
0R,
0P,
0N,
0L,
0J,
0H,
0F,
0D,
0B,
0@,
0>,
0<,
0:,
08,
06,
01,
0/,
0-,
0+,
0),
0',
0%,
0#,
0!,
0}+
0{+
0y+
0w+
0u+
0s+
0q+
0l+
0j+
0h+
0f+
0d+
0b+
0`+
0^+
0\+
0Z+
0X+
0V+
0T+
0R+
0P+
0N+
0I+
0G+
0E+
0C+
0A+
0?+
0=+
0;+
09+
07+
05+
03+
01+
0/+
0-+
0++
0&+
0$+
0"+
0~*
0|*
0z*
0x*
0v*
0t*
0r*
0p*
0n*
0l*
0j*
0h*
0f*
0a*
0_*
0]*
0[*
0Y*
0W*
0U*
0S*
0Q*
0O*
0M*
0K*
0I*
0G*
0E*
0C*
0>*
0<*
0:*
08*
06*
04*
02*
00*
0.*
0,*
0**
0(*
0&*
0$*
0"*
0~)
bx x,
bx 4/
x=3
1@3
b0 A3
b10000 `$
b11 a$
b1000 b$
b10000 =%
b10000 l&
b11 m&
b1000 n&
b10000 C(
b100 D(
b10 E(
b10000 `-
b10000 2/
b100 3/
b10000 H0
b10000 v1
b100 w1
b10 x1
b100 B%
b100 d%
b100 (&
b100 J&
b10000 z)
b11 {)
b1000 |)
b10000 ?*
b11 @*
b1000 A*
b10000 b*
b11 c*
b1000 d*
b10000 '+
b11 (+
b1000 )+
b10000 J+
b11 K+
b1000 L+
b10000 m+
b11 n+
b1000 o+
b10000 2,
b11 3,
b1000 4,
b10000 U,
b11 V,
b1000 W,
b100 f-
b100 *.
b100 L.
b100 n.
b100 L0
b100 n0
b100 21
b100 T1
b0 x
b10 y
b100 z
b1 4!
bx ;%
b10000000000000000 <%
bx B3
b10000000000000000 C3
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
x%
x$
x#
x"
x!
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
xA
xD
xC
xB
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xU
xV
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xw
1/!
x0!
11!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
x6!
x5!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
xd!
xc!
xb!
xa!
x`!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xt!
xs!
xr!
xq!
xp!
xo!
xn!
xm!
xl!
xk!
xj!
xi!
xh!
xg!
xf!
xe!
x&"
x%"
x$"
x#"
x""
x!"
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
x,"
x+"
x*"
x)"
x("
x'"
x0"
x/"
x."
x-"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x"#
x!#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xb#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xc#
xd#
xe#
xf#
xg#
xh#
xi#
xj#
xk#
xl#
xm#
xo#
xn#
xq#
xp#
xs#
xr#
xv#
xu#
xt#
xy#
xx#
xw#
x-$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
z>$
0N$
1M$
0L$
0K$
0J$
0I$
0H$
0G$
0F$
0E$
0D$
0C$
0B$
0A$
0@$
0?$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xO$
x_$
xA%
x@%
x?%
xN&
xM&
xL&
xK&
1R&
xQ&
1P&
1O&
zW&
0V&
xU&
xT&
zS&
1[&
1Z&
xY&
xX&
xi&
1j&
1k&
xe&
1f&
xg&
xa&
xb&
1c&
x]&
x^&
1_&
x,&
x+&
x*&
x)&
10&
1/&
1.&
1-&
z5&
x4&
x3&
x2&
z1&
x9&
x8&
x7&
x6&
xG&
xH&
1I&
xC&
xD&
1E&
x?&
x@&
1A&
x;&
x<&
1=&
xh%
xg%
xf%
xe%
1l%
1k%
1j%
1i%
zq%
xp%
xo%
xn%
zm%
xu%
xt%
xs%
xr%
x%&
x&&
1'&
x!&
x"&
1#&
x{%
x|%
1}%
xw%
xx%
1y%
xF%
xE%
xD%
xC%
1J%
1I%
1H%
1G%
zO%
xN%
xM%
xL%
zK%
xS%
xR%
xQ%
xP%
xa%
xb%
1c%
x]%
x^%
1_%
xY%
xZ%
1[%
xU%
xV%
1W%
x~&
x}&
x|&
x{&
xz&
xy&
xx&
xw&
xv&
xu&
xt&
xs&
xr&
xq&
xp&
xo&
x0'
x/'
x.'
x-'
x,'
x+'
x*'
x)'
x('
x''
x&'
x%'
x$'
x#'
x"'
x!'
x@'
x?'
x>'
x='
x<'
x;'
x:'
x9'
x8'
x7'
x6'
x5'
x4'
x3'
x2'
x1'
xP'
xO'
xN'
xM'
xL'
xK'
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
xB'
xA'
x`'
x_'
x^'
x]'
x\'
x['
xZ'
xY'
xX'
xW'
xV'
xU'
xT'
xS'
xR'
xQ'
xp'
xo'
xn'
xm'
xl'
xk'
xj'
xi'
xh'
xg'
xf'
xe'
xd'
xc'
xb'
xa'
x"(
x!(
x~'
x}'
x|'
x{'
xz'
xy'
xx'
xw'
xv'
xu'
xt'
xs'
xr'
xq'
x2(
x1(
x0(
x/(
x.(
x-(
x,(
x+(
x*(
x)(
x((
x'(
x&(
x%(
x$(
x#(
xB(
xA(
x@(
x?(
x>(
x=(
x<(
x;(
0:(
09(
08(
07(
06(
05(
04(
03(
xg(
xf(
0e(
0d(
0c(
0b(
0a(
0`(
0_(
0^(
0](
0\(
0[(
0Z(
0Y(
0X(
xw(
xv(
xu(
xt(
0s(
0r(
0q(
0p(
0o(
0n(
0m(
0l(
0k(
0j(
0i(
0h(
x))
x()
x')
x&)
x%)
x$)
x#)
x")
0!)
0~(
0}(
0|(
0{(
0z(
0y(
0x(
x9)
x8)
x7)
x6)
x5)
x4)
x3)
x2)
01)
00)
0/)
0.)
0-)
0,)
0+)
0*)
0I)
xH)
0G)
0F)
0E)
0D)
0C)
0B)
0A)
0@)
0?)
0>)
0=)
0<)
0;)
0:)
0Y)
0X)
xW)
xV)
0U)
0T)
0S)
0R)
0Q)
0P)
0O)
0N)
0M)
0L)
0K)
0J)
0i)
0h)
0g)
0f)
xe)
xd)
xc)
xb)
0a)
0`)
0_)
0^)
0])
0\)
0[)
0Z)
0y)
0x)
0w)
0v)
0u)
0t)
0s)
0r)
xq)
xp)
xo)
xn)
xm)
xl)
xk)
xj)
x*-
x)-
x(-
x'-
x&-
x%-
x$-
x#-
x"-
x!-
x~,
x},
x|,
x{,
xz,
xy,
x:-
x9-
x8-
x7-
x6-
x5-
x4-
x3-
x2-
x1-
x0-
x/-
x.-
x--
x,-
x+-
xJ-
xI-
xH-
xG-
xF-
xE-
xD-
xC-
xB-
xA-
x@-
x?-
x>-
x=-
x<-
x;-
xZ-
xY-
xX-
xW-
xV-
xU-
xT-
xS-
xR-
xQ-
xP-
xO-
xN-
xM-
xL-
xK-
x[-
x\-
x]-
x^-
x_-
xe-
xd-
xc-
xr.
xq.
xp.
xo.
xv.
xu.
xt.
xs.
z{.
xz.
xy.
xx.
zw.
1!/
x~.
x}.
x|.
x//
10/
x1/
x+/
x,/
x-/
x'/
x(/
x)/
x#/
x$/
x%/
xP.
xO.
xN.
xM.
xT.
xS.
xR.
xQ.
zY.
xX.
xW.
xV.
zU.
x].
x\.
x[.
xZ.
xk.
xl.
xm.
xg.
xh.
xi.
xc.
xd.
xe.
x_.
x`.
xa.
x..
x-.
x,.
x+.
x2.
x1.
x0.
x/.
z7.
x6.
x5.
x4.
z3.
x;.
x:.
x9.
x8.
xI.
xJ.
xK.
xE.
xF.
xG.
xA.
xB.
xC.
x=.
x>.
x?.
xj-
xi-
xh-
xg-
xn-
xm-
xl-
xk-
zs-
xr-
xq-
xp-
zo-
xw-
xv-
xu-
xt-
x'.
x(.
x).
x#.
x$.
x%.
x}-
x~-
x!.
xy-
xz-
x{-
x5/
xE/
xD/
xC/
xB/
xA/
x@/
x?/
x>/
x=/
x</
x;/
x:/
x9/
x8/
x7/
x6/
xU/
xT/
xS/
xR/
xQ/
xP/
xO/
xN/
xM/
xL/
xK/
xJ/
xI/
xH/
xG/
xF/
xe/
xd/
xc/
xb/
xa/
x`/
x_/
x^/
x]/
x\/
x[/
xZ/
xY/
xX/
xW/
xV/
xu/
xt/
xs/
xr/
xq/
xp/
xo/
xn/
xm/
xl/
xk/
xj/
xi/
xh/
xg/
xf/
x'0
x&0
x%0
x$0
x#0
x"0
x!0
x~/
x}/
x|/
x{/
xz/
xy/
xx/
xw/
xv/
z70
z60
z50
z40
z30
z20
z10
z00
z/0
z.0
z-0
z,0
z+0
z*0
z)0
z(0
zG0
zF0
zE0
zD0
zC0
zB0
zA0
z@0
z?0
z>0
z=0
z<0
z;0
z:0
z90
z80
xK0
xJ0
xI0
xX1
xW1
xV1
xU1
x\1
x[1
xZ1
xY1
za1
x`1
x_1
x^1
z]1
xe1
xd1
xc1
xb1
xs1
xt1
xu1
xo1
xp1
xq1
xk1
xl1
xm1
xg1
xh1
xi1
x61
x51
x41
x31
x:1
x91
x81
x71
z?1
x>1
x=1
x<1
z;1
xC1
xB1
xA1
x@1
xQ1
xR1
xS1
xM1
xN1
xO1
xI1
xJ1
xK1
xE1
xF1
xG1
xr0
xq0
xp0
xo0
xv0
xu0
xt0
xs0
z{0
xz0
xy0
xx0
zw0
x!1
x~0
x}0
x|0
x/1
x01
x11
x+1
x,1
x-1
x'1
x(1
x)1
x#1
x$1
x%1
xP0
xO0
xN0
xM0
xT0
xS0
xR0
xQ0
zY0
xX0
xW0
xV0
zU0
x]0
x\0
x[0
xZ0
xk0
xl0
xm0
xg0
xh0
xi0
xc0
xd0
xe0
x_0
x`0
xa0
x*2
x)2
x(2
x'2
x&2
x%2
x$2
x#2
x"2
x!2
x~1
x}1
x|1
x{1
xz1
xy1
x:2
x92
x82
x72
x62
x52
x42
x32
x22
x12
x02
x/2
x.2
x-2
x,2
x+2
xJ2
xI2
xH2
xG2
xF2
xE2
xD2
xC2
xB2
xA2
x@2
x?2
x>2
x=2
x<2
x;2
xZ2
xY2
xX2
xW2
xV2
xU2
xT2
xS2
xR2
xQ2
xP2
xO2
xN2
xM2
xL2
xK2
xj2
xi2
xh2
xg2
xf2
xe2
xd2
xc2
xb2
xa2
x`2
x_2
x^2
x]2
x\2
x[2
xz2
xy2
xx2
xw2
xv2
xu2
xt2
xs2
xr2
xq2
xp2
xo2
xn2
xm2
xl2
xk2
x,3
x+3
x*3
x)3
x(3
x'3
x&3
x%3
x$3
x#3
x"3
x!3
x~2
x}2
x|2
x{2
x<3
x;3
x:3
x93
x83
x73
x63
x53
x43
x33
x23
x13
x03
x/3
x.3
x-3
x{
x|
x}
x~
x!!
x"!
x#!
x$!
x%!
x&!
x'!
x(!
x)!
x*!
x+!
x,!
x-!
x.!
0>%
x8%
07%
16%
05%
04%
03%
02%
01%
00%
0/%
0.%
0-%
0,%
0+%
0*%
0)%
0(%
0'%
0&%
1c$
x$%
x"%
x~$
x|$
xz$
xx$
xv$
xt$
xr$
xp$
xn$
xl$
xj$
xh$
xf$
xd$
0h&
xd&
x`&
x\&
xF&
xB&
x>&
x:&
x$&
x~%
xz%
xv%
x`%
x\%
xX%
xT%
1W(
0V(
0U(
0T(
0S(
0R(
0Q(
0P(
0O(
0N(
0M(
0L(
0K(
0J(
0I(
0H(
0G(
0F(
xv,
xt,
xr,
xp,
xn,
xl,
xj,
xh,
xf,
xd,
xb,
x`,
x^,
x\,
xZ,
xX,
xS,
xQ,
xO,
xM,
xK,
xI,
xG,
xE,
xC,
xA,
x?,
x=,
x;,
x9,
x7,
x5,
x0,
x.,
x,,
x*,
x(,
x&,
x$,
x",
x~+
x|+
xz+
xx+
xv+
xt+
xr+
xp+
xk+
xi+
xg+
xe+
xc+
xa+
x_+
x]+
x[+
xY+
xW+
xU+
xS+
xQ+
xO+
xM+
xH+
xF+
xD+
xB+
x@+
x>+
x<+
x:+
x8+
x6+
x4+
x2+
x0+
x.+
x,+
x*+
x%+
x#+
x!+
x}*
x{*
xy*
xw*
xu*
xs*
xq*
xo*
xm*
xk*
xi*
xg*
xe*
x`*
x^*
x\*
xZ*
xX*
xV*
xT*
xR*
xP*
xN*
xL*
xJ*
xH*
xF*
xD*
xB*
x=*
x;*
x9*
x7*
x5*
x3*
x1*
x/*
x-*
x+*
x)*
x'*
x%*
x#*
x!*
x})
0b-
xa-
x./
x*/
x&/
x"/
xj.
xf.
xb.
x^.
xH.
xD.
x@.
x<.
x&.
x".
x|-
xx-
xr1
xn1
xj1
xf1
xP1
xL1
xH1
xD1
x.1
x*1
x&1
x"1
xj0
xf0
xb0
x^0
x?3
x>3
$end
#1
0#(
0$(
0%(
0&(
0'(
0((
0)(
0*(
0+(
0,(
0-(
0.(
0/(
00(
01(
02(
0q'
0r'
0s'
0t'
0u'
0v'
0w'
0x'
0y'
0z'
0{'
0|'
0}'
0~'
0!(
0"(
0a'
0b'
0c'
0d'
0e'
0f'
0g'
0h'
0i'
0j'
0k'
0l'
0m'
0n'
0o'
0p'
0Q'
0R'
0S'
0T'
0U'
0V'
0W'
0X'
0Y'
0Z'
0['
0\'
0]'
0^'
0_'
0`'
0A'
0B'
0C'
0D'
0E'
0F'
0G'
0H'
0I'
0J'
0K'
0L'
0M'
0N'
0O'
0P'
01'
02'
03'
04'
05'
06'
07'
08'
09'
0:'
0;'
0<'
0='
0>'
0?'
0@'
0!'
0"'
0#'
0$'
0%'
0&'
0''
0('
0)'
0*'
0+'
0,'
0-'
0.'
0/'
00'
0o&
0p&
0q&
0r&
0s&
0t&
0u&
0v&
0w&
0x&
0y&
0z&
0{&
0|&
0}&
0~&
0.$
0/$
00$
01$
02$
03$
04$
05$
06$
07$
08$
09$
0:$
0;$
0<$
0=$
0N&
0i&
1M&
1Q&
1e&
1g&
0L&
0a&
0K&
0]&
0,&
0G&
0+&
0C&
0*&
0?&
0)&
0;&
0h%
0%&
0g%
0!&
0f%
0{%
0e%
0w%
0F%
0a%
0E%
0]%
0D%
0Y%
0C%
0U%
1V%
1P%
1Z%
1Q%
1^%
1R%
1b%
1S%
1x%
1r%
1|%
1s%
1"&
1t%
1&&
1u%
1<&
16&
1@&
17&
1D&
18&
1H&
19&
1^&
1X&
1b&
1Y&
0d&
1]$
0U&
0^$
0\$
0T&
0`&
0A%
0\&
04&
0F&
03&
0B&
02&
0>&
0@%
0:&
0p%
0$&
0o%
0~%
0n%
0z%
0?%
0v%
0N%
0`%
0M%
0\%
0L%
0X%
0_$
0T%
0O$
0P$
0Q$
0R$
0S$
0T$
0U$
0V$
0W$
0X$
0Y$
0Z$
0[$
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
0M!
0L!
0K!
0J!
0I!
0H!
0G!
0F!
0E!
0t!
0r!
0q!
0p!
0o!
0n!
0m!
0l!
0k!
0j!
0i!
0h!
0g!
0f!
0e!
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0(!
0)!
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0&"
0$"
0#"
0""
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0$
0#
0"
0!
1k-
1{-
1l-
1!.
1m-
1%.
1n-
1).
1/.
1?.
10.
1C.
11.
1G.
12.
1K.
1Q.
1a.
1R.
1e.
1S.
1i.
1T.
1m.
1s.
1%/
1t.
1)/
1v.
11/
0./
0z.
1~.
1,/
0d!
0c!
0b!
1a!
1`!
0_!
0^!
0]!
1\!
0[!
0Z!
0Y!
0X!
0W!
1V!
1U!
02#
01#
00#
1/#
1.#
0R#
0Q#
0P#
1O#
1N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0b#
0a#
0`#
1_#
1^#
0]#
0\#
0[#
1Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0@
0?
0>
1=
1<
0;
0:
09
18
07
06
05
04
03
12
11
0*!
0,!
0B#
0A#
0@#
1?#
1>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
0:-
09-
08-
17-
16-
05-
04-
03-
01-
00-
0/-
0.-
0--
0,-
0+-
0-!
0g-
0y-
0h-
0}-
0i-
0#.
0j-
0'.
0+.
0=.
0,.
0A.
0-.
0E.
0M.
0_.
0N.
0c.
0O.
0g.
1P.
1k.
1o.
1#/
0p.
0'/
1u.
1-/
0r.
0//
0Z-
0*/
0y.
1(/
1}.
1h.
1\.
1d.
1[.
1`.
1Z.
1F.
1:.
1B.
19.
1>.
18.
1(.
1w-
1$.
1v-
1~-
1u-
1z-
1t-
0a-
0x-
0p-
0|-
0q-
0".
0r-
0&.
0c-
0<.
04.
0@.
05.
0D.
0d-
0^.
0V.
0b.
0W.
0f.
0x.
0&/
0X-
1|.
1W-
1$/
0T-
0S-
1;.
1J.
0P-
0O-
0N-
0M-
0L-
0K-
0H.
06.
0"/
0e-
1].
1V-
1l.
0Q-
0j.
0X.
0U-
0+!
0J-
0H-
0E-
0D-
0C-
0A-
0@-
0?-
0>-
0=-
0<-
0;-
0*-
0)-
0(-
0-$
1z#
0{#
0|#
0~#
0!$
0"$
0#$
0$$
0%$
0&$
1}#
0'$
b0 ($
b10 )$
b0 +$
b0 *$
0}#
b0 ,$
1{#
b1 +$
1~#
b10 *$
b101x ($
0w
1c#
1d#
0{
0e#
1}
1f#
0!!
0g#
0"!
0h#
0#!
0i#
0j#
0$!
0k#
0l#
0m#
0%!
0|
0q#
1p#
1s#
0r#
0o#
1n#
0&!
0>3
1e1
1t1
08%
0?3
1A
0U
0V
1y#
0x#
0w#
1'-
1&-
0%-
0$-
0#-
0"-
0!-
0~,
0},
0|,
0{,
0z,
0y,
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0D!
0B!
0?!
0>!
0=!
0;!
0:!
09!
08!
07!
06!
05!
02-
1-#
1,#
1+#
1*#
1)#
1(#
1'#
1&#
1%#
1$#
1##
1H)
1s!
0..
0I.
0R-
0B-
1%"
0$%
0~$
0x$
0v$
0t$
0p$
0n$
0l$
0j$
0h$
0f$
0d$
0%)
0$)
0#)
0")
0u(
0t(
0g(
1f(
1D
0C
0B
1q.
1+/
1Y-
0W)
1V)
0w(
1v(
0c)
0b)
0')
0&)
0m)
0l)
0k)
0j)
05)
04)
03)
02)
1I-
0<!
0r$
1C!
0>(
0=(
0<(
0;(
0o)
0n)
07)
06)
0e)
1d)
0))
1()
0q)
1p)
0@(
0?(
09)
18)
0=*
0;*
09*
07*
05*
03*
01*
0/*
0-*
0+*
0)*
0'*
0%*
0#*
0!*
0})
0`*
0^*
0\*
0Z*
0X*
0V*
0T*
0R*
0P*
0N*
0L*
0J*
0H*
0F*
0D*
0B*
0%+
0#+
0!+
0}*
0{*
0y*
0w*
0u*
0s*
0q*
0o*
0m*
0k*
0i*
0g*
0e*
0H+
0F+
0D+
0B+
0@+
0>+
0<+
0:+
08+
06+
04+
02+
00+
0.+
0,+
0*+
1"%
0B(
1A(
0k+
0i+
0g+
0e+
0c+
0a+
0_+
0]+
0[+
0Y+
0W+
0U+
0S+
0Q+
0O+
0M+
00,
0.,
0,,
0*,
0(,
0&,
0$,
0",
0~+
0|+
0z+
0x+
0v+
0t+
0r+
0p+
0v,
0t,
0r,
0p,
0n,
0l,
0j,
0h,
0f,
0d,
0b,
0`,
0^,
0\,
0Z,
0X,
0'0
0&0
0%0
1$0
1#0
0"0
0!0
0~/
0}/
0|/
0{/
0z/
0y/
0x/
0w/
0v/
0u/
0t/
0s/
0r/
0q/
0p/
0o/
0n/
0m/
0l/
0k/
0j/
0i/
0h/
0g/
0f/
0v#
0u#
0t#
1+"
0*"
1)"
0("
0'"
0[-
0M0
0_0
0N0
0c0
0O0
0g0
0P0
0k0
0o0
0#1
0p0
0'1
0q0
0+1
0r0
0/1
031
0E1
041
0I1
051
0M1
161
1:1
1Q1
1S1
1U1
1Y1
1g1
1i1
0V1
0k1
0W1
0o1
0X1
0s1
1Q0
1a0
1R0
1e0
1S0
1i0
1T0
1m0
1s0
1%1
1t0
1)1
1u0
1-1
1v0
111
171
1G1
181
1K1
191
1O1
1Z1
1m1
1[1
1q1
1\1
1u1
0r1
0`1
0E/
1p1
1d1
1l1
1c1
1N1
1B1
1J1
1A1
1F1
1@1
101
1!1
1,1
1~0
1(1
1}0
1$1
1|0
1l0
1]0
1h0
1\0
1d0
1[0
1`0
1Z0
05/
0^0
0V0
0b0
0W0
0f0
0X0
0j0
0I0
0"1
0x0
0&1
0y0
0*1
0z0
0.1
0J0
0D1
0<1
0H1
0=1
0L1
0^1
0j1
0_1
0n1
0D/
0C/
1b1
1B/
1h1
0?/
0>/
0=/
0</
0;/
0:/
09/
08/
07/
06/
0^-
0f1
0K0
1C1
1A/
1R1
0P1
0>1
0@/
0G-
0F-
0j2
0i2
0h2
0g2
0f2
0e2
0d2
0c2
0b2
0a2
0`2
0_2
0^2
0]2
0\2
0[2
0*2
0)2
0(2
0'2
0&2
0%2
0$2
0#2
0"2
0!2
0~1
0}1
0|1
0{1
0z1
0y1
0z2
0y2
0x2
0w2
0v2
0u2
0t2
0s2
0r2
0q2
0p2
0o2
0n2
0m2
0l2
0k2
0:2
092
082
072
062
052
042
032
022
012
002
0/2
0.2
0-2
0,2
0+2
0A!
0@!
0|$
0z$
0,3
0+3
0*3
0)3
0(3
0'3
0&3
0%3
0$3
0#3
0"3
0!3
0~2
0}2
0|2
0{2
0J2
0I2
0H2
0G2
0F2
0E2
0D2
0C2
0B2
0A2
0@2
0?2
0>2
0=2
0<2
0;2
0<3
0;3
0:3
093
083
073
063
053
043
033
023
013
003
0/3
0.3
0-3
0Z2
0Y2
0X2
0W2
0V2
0U2
0T2
0S2
0R2
0Q2
0P2
0O2
0N2
0M2
0L2
0K2
0_-
0]-
0\-
0U/
0T/
0S/
0R/
0Q/
0P/
0O/
0N/
0M/
0L/
0K/
0J/
0I/
0H/
0G/
0F/
0e/
0d/
0c/
0`/
0_/
0^/
0]/
0\/
0[/
0Z/
0Y/
0X/
0W/
0V/
b1101 x,
0=3
b0xx000 4/
0p"
0o"
0n"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0.!
0@"
0?"
0>"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
0f
0e
0d
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0S,
0Q,
0O,
0I,
0G,
0E,
0C,
0A,
0?,
0=,
0;,
09,
07,
05,
0T
0S
0R
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
10"
0/"
1."
1-"
1b/
1a/
b11000 4/
1m"
1l"
1="
1<"
1c
1b
1M,
1K,
1Q
1P
#50
02!
0/!
#100
12!
1/!
b10 4!
#150
02!
0/!
#200
12!
1/!
b11 4!
#201
03!
01!
#250
02!
0/!
#300
12!
1/!
1#%
1N,
1L,
b100 4!
b1 x
#301
1,'
1-'
1<$
0M&
0Q&
0e&
0g&
1d&
0]$
1U&
1\$
1S!
0s!
1r!
1M"
1L"
0%"
1$"
1/
1p.
1'/
0q.
0+/
0Y-
1X-
0I-
1H-
0C!
1B!
0"%
1~$
1r/
1q/
1d!
1c!
1b!
0a!
0`!
1^!
1X!
0U!
061
0:1
0Q1
0S1
0U1
0Y1
0g1
0i1
1f1
0B/
1K0
1P1
1>1
1@/
12#
11#
10#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
1R#
1Q#
1P#
0O#
0N#
1L#
1b#
1a#
1`#
0_#
0^#
1\#
1@
1?
1>
0=
0<
1:
14
01
1f2
1e2
1'2
1&2
1*!
1,!
1-!
1u2
1t2
172
162
1B#
1A#
1@#
0?#
0>#
1<#
1:-
19-
18-
07-
06-
14-
1N.
1c.
0P.
0k.
0o.
0#/
0p.
0t.
0'/
0)/
1q.
1+/
1r.
1//
1Z-
1Y-
1&/
0X-
1x.
0V-
1T-
1+!
1*-
1)-
1(-
0'-
0&-
1$-
1%3
1$3
1G2
1F2
113
103
1O2
1N2
1-$
1J/
1I/
1'0
1&0
1%0
0$0
0#0
1!0
0b/
1`/
141
1I1
161
1:1
1Q1
1S1
1U1
1Y1
1g1
1i1
1V1
1k1
1W1
1o1
1X1
1s1
1E/
1D/
1C/
0f1
1B/
0K0
0P1
0>1
1?/
0@/
1W2
1V2
0O2
0N2
0G2
0F2
1C2
1B2
072
062
152
142
0'2
1%2
0u2
1s2
0%3
0$3
1#3
1"3
013
003
1-3
0W2
0V2
1S2
1R2
0C2
0B2
1A2
1@2
052
132
0#3
1!3
0-3
0S2
0R2
1Q2
1P2
0A2
1?2
0Q2
1O2
1K/
0I/
1e/
1d/
1c/
1b/
0`/
1_/
0{#
0~#
1}#
b0 ($
b0 +$
b0 *$
0}#
1{#
1|#
b1 *$
1#$
b10 ($
b1000111 4/
0}
0f#
0~
1|
1{
1e#
1#!
1i#
1p"
1o"
1n"
0m"
0l"
1j"
1q#
0p#
0s#
1.!
0y#
1x#
0$-
1@"
1?"
1>"
0="
0<"
1:"
1f
1e
1d
0c
0b
1`
12-
1..
1I.
1R-
1S,
1Q,
1O,
0M,
0K,
1G,
1T
1S
1R
0Q
0P
1N
0v(
1t(
1g(
0f(
0D
1C
1W)
0V)
0d)
1b)
0()
1&)
0p)
1n)
08)
16)
1u(
0t(
1c)
0b)
1')
0&)
0A(
1?(
1k+
1i+
1g+
1_+
0S,
0Q,
0O,
1M,
1K,
0G,
1o)
0n)
17)
06)
1@(
0?(
0k+
0i+
0g+
0_+
10,
1.,
1,,
1$,
0!0
0,"
0)"
041
0I1
0?/
0_/
b10 x,
b111 4/
0j"
0:"
0`
0$,
0N
00"
1/"
0."
0-"
1h2
1g2
0f2
0e2
1x2
1w2
0t2
0s2
1*3
1)3
0"3
0!3
1:3
193
1H2
1G2
0@2
0?2
182
172
042
032
1(2
1'2
0&2
0%2
1z2
1y2
0x2
0w2
0*3
0)3
1|2
1{2
0:3
093
123
113
1X2
1W2
0P2
0O2
0H2
0G2
1<2
1;2
1:2
192
082
072
1~2
1}2
0|2
0{2
163
153
023
013
0X2
0W2
1L2
1K2
1>2
1=2
0<2
0;2
183
173
063
053
1N2
1M2
0L2
0K2
0K/
0J/
1I/
1H/
b11111 4/
1m"
1l"
1="
1<"
1c
1b
1*,
1(,
1Q
1P
#350
02!
0/!
#400
12!
1/!
0#%
1!%
11,
1/,
1-,
1+,
1),
b101 4!
b10 x
#401
1<'
1='
1>'
1?'
1@'
1;$
0<$
1M&
1Q&
1e&
1g&
1L&
1a&
0\$
0b&
0Y&
0d&
1]$
0U&
1Y&
1\$
1b&
0S!
1R!
1s!
1`"
1_"
1^"
1]"
1\"
1)!
1v
1u
1t
1s
1r
1%"
0/
1.
0q.
0u.
0+/
0-/
1*/
0Y-
1y.
1X-
1I-
1C!
1"%
0d!
0c!
0b!
0^!
0\!
0X!
0V!
0M"
0L"
0`"
0_"
0^"
0]"
0\"
0x#
02#
01#
00#
0R#
0Q#
0P#
0L#
0B#
0A#
0@#
0<#
0b#
0a#
0`#
0\#
0Z#
0@
0?
0>
0:
08
04
02
0)!
0*!
0,!
0:-
09-
08-
04-
02-
1w(
0u(
0C
0*-
0)-
0(-
0v
0u
0t
0s
0r
0+!
0-!
0..
0I.
0N.
0c.
1p.
1t.
1'/
1)/
1q.
1u.
1+/
1-/
0r.
0//
0Z-
0*/
1Y-
0y.
0&/
0x.
0T-
0R-
0W-
1e)
0c)
1))
0')
1q)
0o)
19)
07)
1B(
0@(
1v,
1t,
1r,
1p,
1n,
0-$
0'0
0&0
0%0
0r/
0q/
061
0Q1
0U1
0g1
0V1
0k1
0W1
0o1
0X1
0s1
0E/
0D/
0C/
0B/
0A/
0h2
0g2
1J2
1I2
0>2
0=2
0:2
092
182
172
0(2
0'2
0z2
0y2
082
072
0~2
0}2
1|2
1{2
0J2
0I2
1H2
1G2
083
073
143
133
1Z2
1Y2
0N2
0M2
043
033
123
113
0Z2
0Y2
1X2
1W2
0|2
0{2
0H2
0G2
023
013
0X2
0W2
1_-
0I/
0H/
0e/
0d/
0c/
0b/
0a/
1=3
b0 4/
0{#
0|#
0#$
1}#
b0 ($
b0 *$
0}#
0z#
0d#
0{
0e#
0#!
0i#
0|
0q#
0p"
0o"
0n"
0m"
0l"
1w
0c#
18%
1?3
0A
0.!
0s!
0@"
0?"
0>"
0="
0<"
0f
0e
0d
0c
0b
0H)
0g(
0W)
0w(
0v,
0t,
0r,
0p,
0n,
0T
0S
0R
0Q
0P
0%"
0q.
0+/
0Y-
0I-
0e)
0))
0q)
09)
0C!
0"%
0B(
0+"
b0 x,
0/"
#450
02!
0/!
#500
12!
1/!
b10000000000000000000000000000011 ;%
b0 <%
b1 <%
b10 <%
b10000000000000000000000000000011 B3
b0 C3
b1 C3
b10 C3
b110 4!
b11 x
