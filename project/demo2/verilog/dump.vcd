$date
	Mon Nov 11 22:30:09 2024
$end
$version
	ModelSim Version 10.7c
$end
$timescale
	1ns
$end

$scope module proc_hier_pbench $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemDataIn [15] $end
$var wire 1 h MemDataIn [14] $end
$var wire 1 i MemDataIn [13] $end
$var wire 1 j MemDataIn [12] $end
$var wire 1 k MemDataIn [11] $end
$var wire 1 l MemDataIn [10] $end
$var wire 1 m MemDataIn [9] $end
$var wire 1 n MemDataIn [8] $end
$var wire 1 o MemDataIn [7] $end
$var wire 1 p MemDataIn [6] $end
$var wire 1 q MemDataIn [5] $end
$var wire 1 r MemDataIn [4] $end
$var wire 1 s MemDataIn [3] $end
$var wire 1 t MemDataIn [2] $end
$var wire 1 u MemDataIn [1] $end
$var wire 1 v MemDataIn [0] $end
$var wire 1 w MemDataOut [15] $end
$var wire 1 x MemDataOut [14] $end
$var wire 1 y MemDataOut [13] $end
$var wire 1 z MemDataOut [12] $end
$var wire 1 { MemDataOut [11] $end
$var wire 1 | MemDataOut [10] $end
$var wire 1 } MemDataOut [9] $end
$var wire 1 ~ MemDataOut [8] $end
$var wire 1 !! MemDataOut [7] $end
$var wire 1 "! MemDataOut [6] $end
$var wire 1 #! MemDataOut [5] $end
$var wire 1 $! MemDataOut [4] $end
$var wire 1 %! MemDataOut [3] $end
$var wire 1 &! MemDataOut [2] $end
$var wire 1 '! MemDataOut [1] $end
$var wire 1 (! MemDataOut [0] $end
$var wire 1 )! DCacheHit $end
$var wire 1 *! ICacheHit $end
$var wire 1 +! DCacheReq $end
$var wire 1 ,! ICacheReq $end
$var wire 1 -! Halt $end
$var integer 32 .! inst_count $end
$var integer 32 /! trace_file $end
$var integer 32 0! sim_log_file $end
$var integer 32 1! DCacheHit_count $end
$var integer 32 2! ICacheHit_count $end
$var integer 32 3! DCacheReq_count $end
$var integer 32 4! ICacheReq_count $end

$scope module DUT $end
$var wire 1 5! clk $end
$var wire 1 6! err $end
$var wire 1 7! rst $end

$scope module c0 $end
$var reg 1 8! clk $end
$var reg 1 9! rst $end
$var wire 1 6! err $end
$var integer 32 :! cycle_count $end
$upscope $end

$scope module p0 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6! err $end
$var wire 1 ;! PC [15] $end
$var wire 1 <! PC [14] $end
$var wire 1 =! PC [13] $end
$var wire 1 >! PC [12] $end
$var wire 1 ?! PC [11] $end
$var wire 1 @! PC [10] $end
$var wire 1 A! PC [9] $end
$var wire 1 B! PC [8] $end
$var wire 1 C! PC [7] $end
$var wire 1 D! PC [6] $end
$var wire 1 E! PC [5] $end
$var wire 1 F! PC [4] $end
$var wire 1 G! PC [3] $end
$var wire 1 H! PC [2] $end
$var wire 1 I! PC [1] $end
$var wire 1 J! PC [0] $end
$var wire 1 K! instr [15] $end
$var wire 1 L! instr [14] $end
$var wire 1 M! instr [13] $end
$var wire 1 N! instr [12] $end
$var wire 1 O! instr [11] $end
$var wire 1 P! instr [10] $end
$var wire 1 Q! instr [9] $end
$var wire 1 R! instr [8] $end
$var wire 1 S! instr [7] $end
$var wire 1 T! instr [6] $end
$var wire 1 U! instr [5] $end
$var wire 1 V! instr [4] $end
$var wire 1 W! instr [3] $end
$var wire 1 X! instr [2] $end
$var wire 1 Y! instr [1] $end
$var wire 1 Z! instr [0] $end
$var wire 1 [! PC_f [15] $end
$var wire 1 \! PC_f [14] $end
$var wire 1 ]! PC_f [13] $end
$var wire 1 ^! PC_f [12] $end
$var wire 1 _! PC_f [11] $end
$var wire 1 `! PC_f [10] $end
$var wire 1 a! PC_f [9] $end
$var wire 1 b! PC_f [8] $end
$var wire 1 c! PC_f [7] $end
$var wire 1 d! PC_f [6] $end
$var wire 1 e! PC_f [5] $end
$var wire 1 f! PC_f [4] $end
$var wire 1 g! PC_f [3] $end
$var wire 1 h! PC_f [2] $end
$var wire 1 i! PC_f [1] $end
$var wire 1 j! PC_f [0] $end
$var wire 1 k! PC_d [15] $end
$var wire 1 l! PC_d [14] $end
$var wire 1 m! PC_d [13] $end
$var wire 1 n! PC_d [12] $end
$var wire 1 o! PC_d [11] $end
$var wire 1 p! PC_d [10] $end
$var wire 1 q! PC_d [9] $end
$var wire 1 r! PC_d [8] $end
$var wire 1 s! PC_d [7] $end
$var wire 1 t! PC_d [6] $end
$var wire 1 u! PC_d [5] $end
$var wire 1 v! PC_d [4] $end
$var wire 1 w! PC_d [3] $end
$var wire 1 x! PC_d [2] $end
$var wire 1 y! PC_d [1] $end
$var wire 1 z! PC_d [0] $end
$var wire 1 {! PC_Jump [15] $end
$var wire 1 |! PC_Jump [14] $end
$var wire 1 }! PC_Jump [13] $end
$var wire 1 ~! PC_Jump [12] $end
$var wire 1 !" PC_Jump [11] $end
$var wire 1 "" PC_Jump [10] $end
$var wire 1 #" PC_Jump [9] $end
$var wire 1 $" PC_Jump [8] $end
$var wire 1 %" PC_Jump [7] $end
$var wire 1 &" PC_Jump [6] $end
$var wire 1 '" PC_Jump [5] $end
$var wire 1 (" PC_Jump [4] $end
$var wire 1 )" PC_Jump [3] $end
$var wire 1 *" PC_Jump [2] $end
$var wire 1 +" PC_Jump [1] $end
$var wire 1 ," PC_Jump [0] $end
$var wire 1 -" WB [15] $end
$var wire 1 ." WB [14] $end
$var wire 1 /" WB [13] $end
$var wire 1 0" WB [12] $end
$var wire 1 1" WB [11] $end
$var wire 1 2" WB [10] $end
$var wire 1 3" WB [9] $end
$var wire 1 4" WB [8] $end
$var wire 1 5" WB [7] $end
$var wire 1 6" WB [6] $end
$var wire 1 7" WB [5] $end
$var wire 1 8" WB [4] $end
$var wire 1 9" WB [3] $end
$var wire 1 :" WB [2] $end
$var wire 1 ;" WB [1] $end
$var wire 1 <" WB [0] $end
$var wire 1 =" RSData [15] $end
$var wire 1 >" RSData [14] $end
$var wire 1 ?" RSData [13] $end
$var wire 1 @" RSData [12] $end
$var wire 1 A" RSData [11] $end
$var wire 1 B" RSData [10] $end
$var wire 1 C" RSData [9] $end
$var wire 1 D" RSData [8] $end
$var wire 1 E" RSData [7] $end
$var wire 1 F" RSData [6] $end
$var wire 1 G" RSData [5] $end
$var wire 1 H" RSData [4] $end
$var wire 1 I" RSData [3] $end
$var wire 1 J" RSData [2] $end
$var wire 1 K" RSData [1] $end
$var wire 1 L" RSData [0] $end
$var wire 1 M" RTData [15] $end
$var wire 1 N" RTData [14] $end
$var wire 1 O" RTData [13] $end
$var wire 1 P" RTData [12] $end
$var wire 1 Q" RTData [11] $end
$var wire 1 R" RTData [10] $end
$var wire 1 S" RTData [9] $end
$var wire 1 T" RTData [8] $end
$var wire 1 U" RTData [7] $end
$var wire 1 V" RTData [6] $end
$var wire 1 W" RTData [5] $end
$var wire 1 X" RTData [4] $end
$var wire 1 Y" RTData [3] $end
$var wire 1 Z" RTData [2] $end
$var wire 1 [" RTData [1] $end
$var wire 1 \" RTData [0] $end
$var wire 1 ]" ALU [15] $end
$var wire 1 ^" ALU [14] $end
$var wire 1 _" ALU [13] $end
$var wire 1 `" ALU [12] $end
$var wire 1 a" ALU [11] $end
$var wire 1 b" ALU [10] $end
$var wire 1 c" ALU [9] $end
$var wire 1 d" ALU [8] $end
$var wire 1 e" ALU [7] $end
$var wire 1 f" ALU [6] $end
$var wire 1 g" ALU [5] $end
$var wire 1 h" ALU [4] $end
$var wire 1 i" ALU [3] $end
$var wire 1 j" ALU [2] $end
$var wire 1 k" ALU [1] $end
$var wire 1 l" ALU [0] $end
$var wire 1 m" readData [15] $end
$var wire 1 n" readData [14] $end
$var wire 1 o" readData [13] $end
$var wire 1 p" readData [12] $end
$var wire 1 q" readData [11] $end
$var wire 1 r" readData [10] $end
$var wire 1 s" readData [9] $end
$var wire 1 t" readData [8] $end
$var wire 1 u" readData [7] $end
$var wire 1 v" readData [6] $end
$var wire 1 w" readData [5] $end
$var wire 1 x" readData [4] $end
$var wire 1 y" readData [3] $end
$var wire 1 z" readData [2] $end
$var wire 1 {" readData [1] $end
$var wire 1 |" readData [0] $end
$var wire 1 }" Imm5 [15] $end
$var wire 1 ~" Imm5 [14] $end
$var wire 1 !# Imm5 [13] $end
$var wire 1 "# Imm5 [12] $end
$var wire 1 ## Imm5 [11] $end
$var wire 1 $# Imm5 [10] $end
$var wire 1 %# Imm5 [9] $end
$var wire 1 &# Imm5 [8] $end
$var wire 1 '# Imm5 [7] $end
$var wire 1 (# Imm5 [6] $end
$var wire 1 )# Imm5 [5] $end
$var wire 1 *# Imm5 [4] $end
$var wire 1 +# Imm5 [3] $end
$var wire 1 ,# Imm5 [2] $end
$var wire 1 -# Imm5 [1] $end
$var wire 1 .# Imm5 [0] $end
$var wire 1 /# Imm8 [15] $end
$var wire 1 0# Imm8 [14] $end
$var wire 1 1# Imm8 [13] $end
$var wire 1 2# Imm8 [12] $end
$var wire 1 3# Imm8 [11] $end
$var wire 1 4# Imm8 [10] $end
$var wire 1 5# Imm8 [9] $end
$var wire 1 6# Imm8 [8] $end
$var wire 1 7# Imm8 [7] $end
$var wire 1 8# Imm8 [6] $end
$var wire 1 9# Imm8 [5] $end
$var wire 1 :# Imm8 [4] $end
$var wire 1 ;# Imm8 [3] $end
$var wire 1 <# Imm8 [2] $end
$var wire 1 =# Imm8 [1] $end
$var wire 1 ># Imm8 [0] $end
$var wire 1 ?# sImm8 [15] $end
$var wire 1 @# sImm8 [14] $end
$var wire 1 A# sImm8 [13] $end
$var wire 1 B# sImm8 [12] $end
$var wire 1 C# sImm8 [11] $end
$var wire 1 D# sImm8 [10] $end
$var wire 1 E# sImm8 [9] $end
$var wire 1 F# sImm8 [8] $end
$var wire 1 G# sImm8 [7] $end
$var wire 1 H# sImm8 [6] $end
$var wire 1 I# sImm8 [5] $end
$var wire 1 J# sImm8 [4] $end
$var wire 1 K# sImm8 [3] $end
$var wire 1 L# sImm8 [2] $end
$var wire 1 M# sImm8 [1] $end
$var wire 1 N# sImm8 [0] $end
$var wire 1 O# sImm11 [15] $end
$var wire 1 P# sImm11 [14] $end
$var wire 1 Q# sImm11 [13] $end
$var wire 1 R# sImm11 [12] $end
$var wire 1 S# sImm11 [11] $end
$var wire 1 T# sImm11 [10] $end
$var wire 1 U# sImm11 [9] $end
$var wire 1 V# sImm11 [8] $end
$var wire 1 W# sImm11 [7] $end
$var wire 1 X# sImm11 [6] $end
$var wire 1 Y# sImm11 [5] $end
$var wire 1 Z# sImm11 [4] $end
$var wire 1 [# sImm11 [3] $end
$var wire 1 \# sImm11 [2] $end
$var wire 1 ]# sImm11 [1] $end
$var wire 1 ^# sImm11 [0] $end
$var wire 1 _# HaltSig $end
$var wire 1 `# ZeroExt $end
$var wire 1 a# ImmSrc $end
$var wire 1 b# invA $end
$var wire 1 c# invB $end
$var wire 1 d# ALUSign $end
$var wire 1 e# Cin $end
$var wire 1 f# ALUJmp $end
$var wire 1 g# MemWrt $end
$var wire 1 h# MemRead $end
$var wire 1 i# RegSrc [1] $end
$var wire 1 j# RegSrc [0] $end
$var wire 1 k# BSrc [1] $end
$var wire 1 l# BSrc [0] $end
$var wire 1 m# RegDst [1] $end
$var wire 1 n# RegDst [0] $end
$var wire 1 o# Oper [3] $end
$var wire 1 p# Oper [2] $end
$var wire 1 q# Oper [1] $end
$var wire 1 r# Oper [0] $end
$var wire 1 s# BranchTaken [3] $end
$var wire 1 t# BranchTaken [2] $end
$var wire 1 u# BranchTaken [1] $end
$var wire 1 v# BranchTaken [0] $end
$var wire 1 w# RD [2] $end
$var wire 1 x# RD [1] $end
$var wire 1 y# RD [0] $end
$var wire 1 z# ID_PC [15] $end
$var wire 1 {# ID_PC [14] $end
$var wire 1 |# ID_PC [13] $end
$var wire 1 }# ID_PC [12] $end
$var wire 1 ~# ID_PC [11] $end
$var wire 1 !$ ID_PC [10] $end
$var wire 1 "$ ID_PC [9] $end
$var wire 1 #$ ID_PC [8] $end
$var wire 1 $$ ID_PC [7] $end
$var wire 1 %$ ID_PC [6] $end
$var wire 1 &$ ID_PC [5] $end
$var wire 1 '$ ID_PC [4] $end
$var wire 1 ($ ID_PC [3] $end
$var wire 1 )$ ID_PC [2] $end
$var wire 1 *$ ID_PC [1] $end
$var wire 1 +$ ID_PC [0] $end
$var wire 1 ,$ ID_instr [15] $end
$var wire 1 -$ ID_instr [14] $end
$var wire 1 .$ ID_instr [13] $end
$var wire 1 /$ ID_instr [12] $end
$var wire 1 0$ ID_instr [11] $end
$var wire 1 1$ ID_instr [10] $end
$var wire 1 2$ ID_instr [9] $end
$var wire 1 3$ ID_instr [8] $end
$var wire 1 4$ ID_instr [7] $end
$var wire 1 5$ ID_instr [6] $end
$var wire 1 6$ ID_instr [5] $end
$var wire 1 7$ ID_instr [4] $end
$var wire 1 8$ ID_instr [3] $end
$var wire 1 9$ ID_instr [2] $end
$var wire 1 :$ ID_instr [1] $end
$var wire 1 ;$ ID_instr [0] $end
$var wire 1 <$ NOP $end
$var wire 1 =$ NOP_mech $end
$var wire 1 >$ valid $end
$var wire 1 ?$ IFID_instr_comb [15] $end
$var wire 1 @$ IFID_instr_comb [14] $end
$var wire 1 A$ IFID_instr_comb [13] $end
$var wire 1 B$ IFID_instr_comb [12] $end
$var wire 1 C$ IFID_instr_comb [11] $end
$var wire 1 D$ IFID_instr_comb [10] $end
$var wire 1 E$ IFID_instr_comb [9] $end
$var wire 1 F$ IFID_instr_comb [8] $end
$var wire 1 G$ IFID_instr_comb [7] $end
$var wire 1 H$ IFID_instr_comb [6] $end
$var wire 1 I$ IFID_instr_comb [5] $end
$var wire 1 J$ IFID_instr_comb [4] $end
$var wire 1 K$ IFID_instr_comb [3] $end
$var wire 1 L$ IFID_instr_comb [2] $end
$var wire 1 M$ IFID_instr_comb [1] $end
$var wire 1 N$ IFID_instr_comb [0] $end
$var wire 1 O$ RegWrt_1_nflopped $end
$var wire 1 P$ RegWrt_2_nflopped $end
$var wire 1 Q$ RD_1_nflopped [2] $end
$var wire 1 R$ RD_1_nflopped [1] $end
$var wire 1 S$ RD_1_nflopped [0] $end
$var wire 1 T$ RD_2_nflopped [2] $end
$var wire 1 U$ RD_2_nflopped [1] $end
$var wire 1 V$ RD_2_nflopped [0] $end
$var wire 1 W$ IDEX_HaltSig $end
$var wire 1 X$ IDEX_MemRead $end
$var wire 1 Y$ IDEX_ImmSrc $end
$var wire 1 Z$ IDEX_HaltSig_comb $end
$var wire 1 [$ IDEX_ALUSign $end
$var wire 1 \$ IDEX_ALUJmp $end
$var wire 1 ]$ IDEX_MemWrt $end
$var wire 1 ^$ IDEX_err $end
$var wire 1 _$ IDEX_RegWrt $end
$var wire 1 `$ IDEX_RegSrc [1] $end
$var wire 1 a$ IDEX_RegSrc [0] $end
$var wire 1 b$ IDEX_BSrc [1] $end
$var wire 1 c$ IDEX_BSrc [0] $end
$var wire 1 d$ IDEX_BranchTaken [3] $end
$var wire 1 e$ IDEX_BranchTaken [2] $end
$var wire 1 f$ IDEX_BranchTaken [1] $end
$var wire 1 g$ IDEX_BranchTaken [0] $end
$var wire 1 h$ IDEX_Oper [3] $end
$var wire 1 i$ IDEX_Oper [2] $end
$var wire 1 j$ IDEX_Oper [1] $end
$var wire 1 k$ IDEX_Oper [0] $end
$var wire 1 l$ IDEX_RSData [15] $end
$var wire 1 m$ IDEX_RSData [14] $end
$var wire 1 n$ IDEX_RSData [13] $end
$var wire 1 o$ IDEX_RSData [12] $end
$var wire 1 p$ IDEX_RSData [11] $end
$var wire 1 q$ IDEX_RSData [10] $end
$var wire 1 r$ IDEX_RSData [9] $end
$var wire 1 s$ IDEX_RSData [8] $end
$var wire 1 t$ IDEX_RSData [7] $end
$var wire 1 u$ IDEX_RSData [6] $end
$var wire 1 v$ IDEX_RSData [5] $end
$var wire 1 w$ IDEX_RSData [4] $end
$var wire 1 x$ IDEX_RSData [3] $end
$var wire 1 y$ IDEX_RSData [2] $end
$var wire 1 z$ IDEX_RSData [1] $end
$var wire 1 {$ IDEX_RSData [0] $end
$var wire 1 |$ IDEX_RTData [15] $end
$var wire 1 }$ IDEX_RTData [14] $end
$var wire 1 ~$ IDEX_RTData [13] $end
$var wire 1 !% IDEX_RTData [12] $end
$var wire 1 "% IDEX_RTData [11] $end
$var wire 1 #% IDEX_RTData [10] $end
$var wire 1 $% IDEX_RTData [9] $end
$var wire 1 %% IDEX_RTData [8] $end
$var wire 1 &% IDEX_RTData [7] $end
$var wire 1 '% IDEX_RTData [6] $end
$var wire 1 (% IDEX_RTData [5] $end
$var wire 1 )% IDEX_RTData [4] $end
$var wire 1 *% IDEX_RTData [3] $end
$var wire 1 +% IDEX_RTData [2] $end
$var wire 1 ,% IDEX_RTData [1] $end
$var wire 1 -% IDEX_RTData [0] $end
$var wire 1 .% IDEX_Imm5 [15] $end
$var wire 1 /% IDEX_Imm5 [14] $end
$var wire 1 0% IDEX_Imm5 [13] $end
$var wire 1 1% IDEX_Imm5 [12] $end
$var wire 1 2% IDEX_Imm5 [11] $end
$var wire 1 3% IDEX_Imm5 [10] $end
$var wire 1 4% IDEX_Imm5 [9] $end
$var wire 1 5% IDEX_Imm5 [8] $end
$var wire 1 6% IDEX_Imm5 [7] $end
$var wire 1 7% IDEX_Imm5 [6] $end
$var wire 1 8% IDEX_Imm5 [5] $end
$var wire 1 9% IDEX_Imm5 [4] $end
$var wire 1 :% IDEX_Imm5 [3] $end
$var wire 1 ;% IDEX_Imm5 [2] $end
$var wire 1 <% IDEX_Imm5 [1] $end
$var wire 1 =% IDEX_Imm5 [0] $end
$var wire 1 >% IDEX_Imm8 [15] $end
$var wire 1 ?% IDEX_Imm8 [14] $end
$var wire 1 @% IDEX_Imm8 [13] $end
$var wire 1 A% IDEX_Imm8 [12] $end
$var wire 1 B% IDEX_Imm8 [11] $end
$var wire 1 C% IDEX_Imm8 [10] $end
$var wire 1 D% IDEX_Imm8 [9] $end
$var wire 1 E% IDEX_Imm8 [8] $end
$var wire 1 F% IDEX_Imm8 [7] $end
$var wire 1 G% IDEX_Imm8 [6] $end
$var wire 1 H% IDEX_Imm8 [5] $end
$var wire 1 I% IDEX_Imm8 [4] $end
$var wire 1 J% IDEX_Imm8 [3] $end
$var wire 1 K% IDEX_Imm8 [2] $end
$var wire 1 L% IDEX_Imm8 [1] $end
$var wire 1 M% IDEX_Imm8 [0] $end
$var wire 1 N% IDEX_sImm8 [15] $end
$var wire 1 O% IDEX_sImm8 [14] $end
$var wire 1 P% IDEX_sImm8 [13] $end
$var wire 1 Q% IDEX_sImm8 [12] $end
$var wire 1 R% IDEX_sImm8 [11] $end
$var wire 1 S% IDEX_sImm8 [10] $end
$var wire 1 T% IDEX_sImm8 [9] $end
$var wire 1 U% IDEX_sImm8 [8] $end
$var wire 1 V% IDEX_sImm8 [7] $end
$var wire 1 W% IDEX_sImm8 [6] $end
$var wire 1 X% IDEX_sImm8 [5] $end
$var wire 1 Y% IDEX_sImm8 [4] $end
$var wire 1 Z% IDEX_sImm8 [3] $end
$var wire 1 [% IDEX_sImm8 [2] $end
$var wire 1 \% IDEX_sImm8 [1] $end
$var wire 1 ]% IDEX_sImm8 [0] $end
$var wire 1 ^% IDEX_sImm11 [15] $end
$var wire 1 _% IDEX_sImm11 [14] $end
$var wire 1 `% IDEX_sImm11 [13] $end
$var wire 1 a% IDEX_sImm11 [12] $end
$var wire 1 b% IDEX_sImm11 [11] $end
$var wire 1 c% IDEX_sImm11 [10] $end
$var wire 1 d% IDEX_sImm11 [9] $end
$var wire 1 e% IDEX_sImm11 [8] $end
$var wire 1 f% IDEX_sImm11 [7] $end
$var wire 1 g% IDEX_sImm11 [6] $end
$var wire 1 h% IDEX_sImm11 [5] $end
$var wire 1 i% IDEX_sImm11 [4] $end
$var wire 1 j% IDEX_sImm11 [3] $end
$var wire 1 k% IDEX_sImm11 [2] $end
$var wire 1 l% IDEX_sImm11 [1] $end
$var wire 1 m% IDEX_sImm11 [0] $end
$var wire 1 n% IDEX_PC_Next [15] $end
$var wire 1 o% IDEX_PC_Next [14] $end
$var wire 1 p% IDEX_PC_Next [13] $end
$var wire 1 q% IDEX_PC_Next [12] $end
$var wire 1 r% IDEX_PC_Next [11] $end
$var wire 1 s% IDEX_PC_Next [10] $end
$var wire 1 t% IDEX_PC_Next [9] $end
$var wire 1 u% IDEX_PC_Next [8] $end
$var wire 1 v% IDEX_PC_Next [7] $end
$var wire 1 w% IDEX_PC_Next [6] $end
$var wire 1 x% IDEX_PC_Next [5] $end
$var wire 1 y% IDEX_PC_Next [4] $end
$var wire 1 z% IDEX_PC_Next [3] $end
$var wire 1 {% IDEX_PC_Next [2] $end
$var wire 1 |% IDEX_PC_Next [1] $end
$var wire 1 }% IDEX_PC_Next [0] $end
$var wire 1 ~% IDEX_invA $end
$var wire 1 !& IDEX_invB $end
$var wire 1 "& IDEX_Cin $end
$var wire 1 #& IDEX_NOP $end
$var wire 1 $& IDEX_RegWrt_2_nflopped $end
$var wire 1 %& IDEX_RegWrt_1_nflopped $end
$var wire 1 && IDEX_RD [2] $end
$var wire 1 '& IDEX_RD [1] $end
$var wire 1 (& IDEX_RD [0] $end
$var wire 1 )& IDEX_RD_2_nflopped [2] $end
$var wire 1 *& IDEX_RD_2_nflopped [1] $end
$var wire 1 +& IDEX_RD_2_nflopped [0] $end
$var wire 1 ,& IDEX_RD_1_nflopped [2] $end
$var wire 1 -& IDEX_RD_1_nflopped [1] $end
$var wire 1 .& IDEX_RD_1_nflopped [0] $end
$var wire 1 /& BrchCnd $end
$var wire 1 0& NOP_Branch $end
$var wire 1 1& EX_ALU [15] $end
$var wire 1 2& EX_ALU [14] $end
$var wire 1 3& EX_ALU [13] $end
$var wire 1 4& EX_ALU [12] $end
$var wire 1 5& EX_ALU [11] $end
$var wire 1 6& EX_ALU [10] $end
$var wire 1 7& EX_ALU [9] $end
$var wire 1 8& EX_ALU [8] $end
$var wire 1 9& EX_ALU [7] $end
$var wire 1 :& EX_ALU [6] $end
$var wire 1 ;& EX_ALU [5] $end
$var wire 1 <& EX_ALU [4] $end
$var wire 1 =& EX_ALU [3] $end
$var wire 1 >& EX_ALU [2] $end
$var wire 1 ?& EX_ALU [1] $end
$var wire 1 @& EX_ALU [0] $end
$var wire 1 A& EXDM_ALU [15] $end
$var wire 1 B& EXDM_ALU [14] $end
$var wire 1 C& EXDM_ALU [13] $end
$var wire 1 D& EXDM_ALU [12] $end
$var wire 1 E& EXDM_ALU [11] $end
$var wire 1 F& EXDM_ALU [10] $end
$var wire 1 G& EXDM_ALU [9] $end
$var wire 1 H& EXDM_ALU [8] $end
$var wire 1 I& EXDM_ALU [7] $end
$var wire 1 J& EXDM_ALU [6] $end
$var wire 1 K& EXDM_ALU [5] $end
$var wire 1 L& EXDM_ALU [4] $end
$var wire 1 M& EXDM_ALU [3] $end
$var wire 1 N& EXDM_ALU [2] $end
$var wire 1 O& EXDM_ALU [1] $end
$var wire 1 P& EXDM_ALU [0] $end
$var wire 1 Q& EXDM_RTData [15] $end
$var wire 1 R& EXDM_RTData [14] $end
$var wire 1 S& EXDM_RTData [13] $end
$var wire 1 T& EXDM_RTData [12] $end
$var wire 1 U& EXDM_RTData [11] $end
$var wire 1 V& EXDM_RTData [10] $end
$var wire 1 W& EXDM_RTData [9] $end
$var wire 1 X& EXDM_RTData [8] $end
$var wire 1 Y& EXDM_RTData [7] $end
$var wire 1 Z& EXDM_RTData [6] $end
$var wire 1 [& EXDM_RTData [5] $end
$var wire 1 \& EXDM_RTData [4] $end
$var wire 1 ]& EXDM_RTData [3] $end
$var wire 1 ^& EXDM_RTData [2] $end
$var wire 1 _& EXDM_RTData [1] $end
$var wire 1 `& EXDM_RTData [0] $end
$var wire 1 a& EXDM_PC [15] $end
$var wire 1 b& EXDM_PC [14] $end
$var wire 1 c& EXDM_PC [13] $end
$var wire 1 d& EXDM_PC [12] $end
$var wire 1 e& EXDM_PC [11] $end
$var wire 1 f& EXDM_PC [10] $end
$var wire 1 g& EXDM_PC [9] $end
$var wire 1 h& EXDM_PC [8] $end
$var wire 1 i& EXDM_PC [7] $end
$var wire 1 j& EXDM_PC [6] $end
$var wire 1 k& EXDM_PC [5] $end
$var wire 1 l& EXDM_PC [4] $end
$var wire 1 m& EXDM_PC [3] $end
$var wire 1 n& EXDM_PC [2] $end
$var wire 1 o& EXDM_PC [1] $end
$var wire 1 p& EXDM_PC [0] $end
$var wire 1 q& EXDM_MemWrt $end
$var wire 1 r& EXDM_MemRead $end
$var wire 1 s& EXDM_HaltSig $end
$var wire 1 t& DMWB_ALU [15] $end
$var wire 1 u& DMWB_ALU [14] $end
$var wire 1 v& DMWB_ALU [13] $end
$var wire 1 w& DMWB_ALU [12] $end
$var wire 1 x& DMWB_ALU [11] $end
$var wire 1 y& DMWB_ALU [10] $end
$var wire 1 z& DMWB_ALU [9] $end
$var wire 1 {& DMWB_ALU [8] $end
$var wire 1 |& DMWB_ALU [7] $end
$var wire 1 }& DMWB_ALU [6] $end
$var wire 1 ~& DMWB_ALU [5] $end
$var wire 1 !' DMWB_ALU [4] $end
$var wire 1 "' DMWB_ALU [3] $end
$var wire 1 #' DMWB_ALU [2] $end
$var wire 1 $' DMWB_ALU [1] $end
$var wire 1 %' DMWB_ALU [0] $end
$var wire 1 &' DMWB_PC [15] $end
$var wire 1 '' DMWB_PC [14] $end
$var wire 1 (' DMWB_PC [13] $end
$var wire 1 )' DMWB_PC [12] $end
$var wire 1 *' DMWB_PC [11] $end
$var wire 1 +' DMWB_PC [10] $end
$var wire 1 ,' DMWB_PC [9] $end
$var wire 1 -' DMWB_PC [8] $end
$var wire 1 .' DMWB_PC [7] $end
$var wire 1 /' DMWB_PC [6] $end
$var wire 1 0' DMWB_PC [5] $end
$var wire 1 1' DMWB_PC [4] $end
$var wire 1 2' DMWB_PC [3] $end
$var wire 1 3' DMWB_PC [2] $end
$var wire 1 4' DMWB_PC [1] $end
$var wire 1 5' DMWB_PC [0] $end
$var wire 1 6' DMWB_readData [15] $end
$var wire 1 7' DMWB_readData [14] $end
$var wire 1 8' DMWB_readData [13] $end
$var wire 1 9' DMWB_readData [12] $end
$var wire 1 :' DMWB_readData [11] $end
$var wire 1 ;' DMWB_readData [10] $end
$var wire 1 <' DMWB_readData [9] $end
$var wire 1 =' DMWB_readData [8] $end
$var wire 1 >' DMWB_readData [7] $end
$var wire 1 ?' DMWB_readData [6] $end
$var wire 1 @' DMWB_readData [5] $end
$var wire 1 A' DMWB_readData [4] $end
$var wire 1 B' DMWB_readData [3] $end
$var wire 1 C' DMWB_readData [2] $end
$var wire 1 D' DMWB_readData [1] $end
$var wire 1 E' DMWB_readData [0] $end

$scope module fetch0 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 {! PC_B [15] $end
$var wire 1 |! PC_B [14] $end
$var wire 1 }! PC_B [13] $end
$var wire 1 ~! PC_B [12] $end
$var wire 1 !" PC_B [11] $end
$var wire 1 "" PC_B [10] $end
$var wire 1 #" PC_B [9] $end
$var wire 1 $" PC_B [8] $end
$var wire 1 %" PC_B [7] $end
$var wire 1 &" PC_B [6] $end
$var wire 1 '" PC_B [5] $end
$var wire 1 (" PC_B [4] $end
$var wire 1 )" PC_B [3] $end
$var wire 1 *" PC_B [2] $end
$var wire 1 +" PC_B [1] $end
$var wire 1 ," PC_B [0] $end
$var wire 1 ,$ IFID_instr [15] $end
$var wire 1 -$ IFID_instr [14] $end
$var wire 1 .$ IFID_instr [13] $end
$var wire 1 /$ IFID_instr [12] $end
$var wire 1 0$ IFID_instr [11] $end
$var wire 1 1$ IFID_instr [10] $end
$var wire 1 2$ IFID_instr [9] $end
$var wire 1 3$ IFID_instr [8] $end
$var wire 1 4$ IFID_instr [7] $end
$var wire 1 5$ IFID_instr [6] $end
$var wire 1 6$ IFID_instr [5] $end
$var wire 1 7$ IFID_instr [4] $end
$var wire 1 8$ IFID_instr [3] $end
$var wire 1 9$ IFID_instr [2] $end
$var wire 1 :$ IFID_instr [1] $end
$var wire 1 ;$ IFID_instr [0] $end
$var wire 1 _# HaltSig $end
$var wire 1 =$ NOP $end
$var wire 1 F' branch $end
$var wire 1 0& NOP_Branch $end
$var wire 1 K! instr [15] $end
$var wire 1 L! instr [14] $end
$var wire 1 M! instr [13] $end
$var wire 1 N! instr [12] $end
$var wire 1 O! instr [11] $end
$var wire 1 P! instr [10] $end
$var wire 1 Q! instr [9] $end
$var wire 1 R! instr [8] $end
$var wire 1 S! instr [7] $end
$var wire 1 T! instr [6] $end
$var wire 1 U! instr [5] $end
$var wire 1 V! instr [4] $end
$var wire 1 W! instr [3] $end
$var wire 1 X! instr [2] $end
$var wire 1 Y! instr [1] $end
$var wire 1 Z! instr [0] $end
$var wire 1 [! PC_Next [15] $end
$var wire 1 \! PC_Next [14] $end
$var wire 1 ]! PC_Next [13] $end
$var wire 1 ^! PC_Next [12] $end
$var wire 1 _! PC_Next [11] $end
$var wire 1 `! PC_Next [10] $end
$var wire 1 a! PC_Next [9] $end
$var wire 1 b! PC_Next [8] $end
$var wire 1 c! PC_Next [7] $end
$var wire 1 d! PC_Next [6] $end
$var wire 1 e! PC_Next [5] $end
$var wire 1 f! PC_Next [4] $end
$var wire 1 g! PC_Next [3] $end
$var wire 1 h! PC_Next [2] $end
$var wire 1 i! PC_Next [1] $end
$var wire 1 j! PC_Next [0] $end
$var wire 1 ;! PC_curr [15] $end
$var wire 1 <! PC_curr [14] $end
$var wire 1 =! PC_curr [13] $end
$var wire 1 >! PC_curr [12] $end
$var wire 1 ?! PC_curr [11] $end
$var wire 1 @! PC_curr [10] $end
$var wire 1 A! PC_curr [9] $end
$var wire 1 B! PC_curr [8] $end
$var wire 1 C! PC_curr [7] $end
$var wire 1 D! PC_curr [6] $end
$var wire 1 E! PC_curr [5] $end
$var wire 1 F! PC_curr [4] $end
$var wire 1 G! PC_curr [3] $end
$var wire 1 H! PC_curr [2] $end
$var wire 1 I! PC_curr [1] $end
$var wire 1 J! PC_curr [0] $end
$var wire 1 G' PC [15] $end
$var wire 1 H' PC [14] $end
$var wire 1 I' PC [13] $end
$var wire 1 J' PC [12] $end
$var wire 1 K' PC [11] $end
$var wire 1 L' PC [10] $end
$var wire 1 M' PC [9] $end
$var wire 1 N' PC [8] $end
$var wire 1 O' PC [7] $end
$var wire 1 P' PC [6] $end
$var wire 1 Q' PC [5] $end
$var wire 1 R' PC [4] $end
$var wire 1 S' PC [3] $end
$var wire 1 T' PC [2] $end
$var wire 1 U' PC [1] $end
$var wire 1 V' PC [0] $end
$var wire 1 W' PC_regs [15] $end
$var wire 1 X' PC_regs [14] $end
$var wire 1 Y' PC_regs [13] $end
$var wire 1 Z' PC_regs [12] $end
$var wire 1 [' PC_regs [11] $end
$var wire 1 \' PC_regs [10] $end
$var wire 1 ]' PC_regs [9] $end
$var wire 1 ^' PC_regs [8] $end
$var wire 1 _' PC_regs [7] $end
$var wire 1 `' PC_regs [6] $end
$var wire 1 a' PC_regs [5] $end
$var wire 1 b' PC_regs [4] $end
$var wire 1 c' PC_regs [3] $end
$var wire 1 d' PC_regs [2] $end
$var wire 1 e' PC_regs [1] $end
$var wire 1 f' PC_regs [0] $end
$var wire 1 g' err $end
$var wire 1 h' add2 [15] $end
$var wire 1 i' add2 [14] $end
$var wire 1 j' add2 [13] $end
$var wire 1 k' add2 [12] $end
$var wire 1 l' add2 [11] $end
$var wire 1 m' add2 [10] $end
$var wire 1 n' add2 [9] $end
$var wire 1 o' add2 [8] $end
$var wire 1 p' add2 [7] $end
$var wire 1 q' add2 [6] $end
$var wire 1 r' add2 [5] $end
$var wire 1 s' add2 [4] $end
$var wire 1 t' add2 [3] $end
$var wire 1 u' add2 [2] $end
$var wire 1 v' add2 [1] $end
$var wire 1 w' add2 [0] $end
$var wire 1 x' PC_Sum [15] $end
$var wire 1 y' PC_Sum [14] $end
$var wire 1 z' PC_Sum [13] $end
$var wire 1 {' PC_Sum [12] $end
$var wire 1 |' PC_Sum [11] $end
$var wire 1 }' PC_Sum [10] $end
$var wire 1 ~' PC_Sum [9] $end
$var wire 1 !( PC_Sum [8] $end
$var wire 1 "( PC_Sum [7] $end
$var wire 1 #( PC_Sum [6] $end
$var wire 1 $( PC_Sum [5] $end
$var wire 1 %( PC_Sum [4] $end
$var wire 1 &( PC_Sum [3] $end
$var wire 1 '( PC_Sum [2] $end
$var wire 1 (( PC_Sum [1] $end
$var wire 1 )( PC_Sum [0] $end
$var wire 1 *( c_out $end

$scope module pc_reg $end
$var parameter 32 +( BIT_WIDTH $end
$var parameter 32 ,( BIT_SIZE $end
$var parameter 32 -( REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 .( we $end
$var wire 1 [! w [15] $end
$var wire 1 \! w [14] $end
$var wire 1 ]! w [13] $end
$var wire 1 ^! w [12] $end
$var wire 1 _! w [11] $end
$var wire 1 `! w [10] $end
$var wire 1 a! w [9] $end
$var wire 1 b! w [8] $end
$var wire 1 c! w [7] $end
$var wire 1 d! w [6] $end
$var wire 1 e! w [5] $end
$var wire 1 f! w [4] $end
$var wire 1 g! w [3] $end
$var wire 1 h! w [2] $end
$var wire 1 i! w [1] $end
$var wire 1 j! w [0] $end
$var wire 1 G' r [15] $end
$var wire 1 H' r [14] $end
$var wire 1 I' r [13] $end
$var wire 1 J' r [12] $end
$var wire 1 K' r [11] $end
$var wire 1 L' r [10] $end
$var wire 1 M' r [9] $end
$var wire 1 N' r [8] $end
$var wire 1 O' r [7] $end
$var wire 1 P' r [6] $end
$var wire 1 Q' r [5] $end
$var wire 1 R' r [4] $end
$var wire 1 S' r [3] $end
$var wire 1 T' r [2] $end
$var wire 1 U' r [1] $end
$var wire 1 V' r [0] $end

$scope module dff01[15] $end
$var wire 1 G' q $end
$var wire 1 /( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 0( state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 H' q $end
$var wire 1 1( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 2( state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 I' q $end
$var wire 1 3( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 4( state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 J' q $end
$var wire 1 5( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 6( state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 K' q $end
$var wire 1 7( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 8( state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 L' q $end
$var wire 1 9( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :( state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 M' q $end
$var wire 1 ;( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 <( state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 N' q $end
$var wire 1 =( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >( state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 O' q $end
$var wire 1 ?( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @( state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 P' q $end
$var wire 1 A( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 B( state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 Q' q $end
$var wire 1 C( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 D( state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 R' q $end
$var wire 1 E( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F( state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 S' q $end
$var wire 1 G( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H( state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 T' q $end
$var wire 1 I( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 J( state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 U' q $end
$var wire 1 K( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 L( state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 V' q $end
$var wire 1 M( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N( state $end
$upscope $end
$upscope $end

$scope module instr_mem $end
$var wire 1 K! data_out [15] $end
$var wire 1 L! data_out [14] $end
$var wire 1 M! data_out [13] $end
$var wire 1 N! data_out [12] $end
$var wire 1 O! data_out [11] $end
$var wire 1 P! data_out [10] $end
$var wire 1 Q! data_out [9] $end
$var wire 1 R! data_out [8] $end
$var wire 1 S! data_out [7] $end
$var wire 1 T! data_out [6] $end
$var wire 1 U! data_out [5] $end
$var wire 1 V! data_out [4] $end
$var wire 1 W! data_out [3] $end
$var wire 1 X! data_out [2] $end
$var wire 1 Y! data_out [1] $end
$var wire 1 Z! data_out [0] $end
$var wire 1 O( data_in [15] $end
$var wire 1 P( data_in [14] $end
$var wire 1 Q( data_in [13] $end
$var wire 1 R( data_in [12] $end
$var wire 1 S( data_in [11] $end
$var wire 1 T( data_in [10] $end
$var wire 1 U( data_in [9] $end
$var wire 1 V( data_in [8] $end
$var wire 1 W( data_in [7] $end
$var wire 1 X( data_in [6] $end
$var wire 1 Y( data_in [5] $end
$var wire 1 Z( data_in [4] $end
$var wire 1 [( data_in [3] $end
$var wire 1 \( data_in [2] $end
$var wire 1 ]( data_in [1] $end
$var wire 1 ^( data_in [0] $end
$var wire 1 ;! addr [15] $end
$var wire 1 <! addr [14] $end
$var wire 1 =! addr [13] $end
$var wire 1 >! addr [12] $end
$var wire 1 ?! addr [11] $end
$var wire 1 @! addr [10] $end
$var wire 1 A! addr [9] $end
$var wire 1 B! addr [8] $end
$var wire 1 C! addr [7] $end
$var wire 1 D! addr [6] $end
$var wire 1 E! addr [5] $end
$var wire 1 F! addr [4] $end
$var wire 1 G! addr [3] $end
$var wire 1 H! addr [2] $end
$var wire 1 I! addr [1] $end
$var wire 1 J! addr [0] $end
$var wire 1 _( enable $end
$var wire 1 `( wr $end
$var wire 1 _# createdump $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 a( loaded $end
$var reg 17 b( largest [16:0] $end
$var integer 32 c( mcd $end
$var integer 32 d( i $end
$upscope $end

$scope module pc_add2 $end
$var parameter 32 e( N $end
$var wire 1 x' sum [15] $end
$var wire 1 y' sum [14] $end
$var wire 1 z' sum [13] $end
$var wire 1 {' sum [12] $end
$var wire 1 |' sum [11] $end
$var wire 1 }' sum [10] $end
$var wire 1 ~' sum [9] $end
$var wire 1 !( sum [8] $end
$var wire 1 "( sum [7] $end
$var wire 1 #( sum [6] $end
$var wire 1 $( sum [5] $end
$var wire 1 %( sum [4] $end
$var wire 1 &( sum [3] $end
$var wire 1 '( sum [2] $end
$var wire 1 (( sum [1] $end
$var wire 1 )( sum [0] $end
$var wire 1 *( c_out $end
$var wire 1 ;! a [15] $end
$var wire 1 <! a [14] $end
$var wire 1 =! a [13] $end
$var wire 1 >! a [12] $end
$var wire 1 ?! a [11] $end
$var wire 1 @! a [10] $end
$var wire 1 A! a [9] $end
$var wire 1 B! a [8] $end
$var wire 1 C! a [7] $end
$var wire 1 D! a [6] $end
$var wire 1 E! a [5] $end
$var wire 1 F! a [4] $end
$var wire 1 G! a [3] $end
$var wire 1 H! a [2] $end
$var wire 1 I! a [1] $end
$var wire 1 J! a [0] $end
$var wire 1 f( b [15] $end
$var wire 1 g( b [14] $end
$var wire 1 h( b [13] $end
$var wire 1 i( b [12] $end
$var wire 1 j( b [11] $end
$var wire 1 k( b [10] $end
$var wire 1 l( b [9] $end
$var wire 1 m( b [8] $end
$var wire 1 n( b [7] $end
$var wire 1 o( b [6] $end
$var wire 1 p( b [5] $end
$var wire 1 q( b [4] $end
$var wire 1 r( b [3] $end
$var wire 1 s( b [2] $end
$var wire 1 t( b [1] $end
$var wire 1 u( b [0] $end
$var wire 1 v( c_in $end
$var wire 1 w( carries [2] $end
$var wire 1 x( carries [1] $end
$var wire 1 y( carries [0] $end

$scope module cla[3] $end
$var parameter 32 z( N $end
$var wire 1 x' sum [3] $end
$var wire 1 y' sum [2] $end
$var wire 1 z' sum [1] $end
$var wire 1 {' sum [0] $end
$var wire 1 *( c_out $end
$var wire 1 ;! a [3] $end
$var wire 1 <! a [2] $end
$var wire 1 =! a [1] $end
$var wire 1 >! a [0] $end
$var wire 1 f( b [3] $end
$var wire 1 g( b [2] $end
$var wire 1 h( b [1] $end
$var wire 1 i( b [0] $end
$var wire 1 w( c_in $end
$var wire 1 {( p [3] $end
$var wire 1 |( p [2] $end
$var wire 1 }( p [1] $end
$var wire 1 ~( p [0] $end
$var wire 1 !) ng [3] $end
$var wire 1 ") ng [2] $end
$var wire 1 #) ng [1] $end
$var wire 1 $) ng [0] $end
$var wire 1 %) carries [4] $end
$var wire 1 &) carries [3] $end
$var wire 1 ') carries [2] $end
$var wire 1 () carries [1] $end
$var wire 1 )) carries [0] $end
$var wire 1 *) cp [3] $end
$var wire 1 +) cp [2] $end
$var wire 1 ,) cp [1] $end
$var wire 1 -) cp [0] $end

$scope module xor_1[3] $end
$var wire 1 {( out $end
$var wire 1 ;! in1 $end
$var wire 1 f( in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 |( out $end
$var wire 1 <! in1 $end
$var wire 1 g( in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 }( out $end
$var wire 1 =! in1 $end
$var wire 1 h( in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 ~( out $end
$var wire 1 >! in1 $end
$var wire 1 i( in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 !) out $end
$var wire 1 ;! in1 $end
$var wire 1 f( in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 ") out $end
$var wire 1 <! in1 $end
$var wire 1 g( in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 #) out $end
$var wire 1 =! in1 $end
$var wire 1 h( in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 $) out $end
$var wire 1 >! in1 $end
$var wire 1 i( in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 *) out $end
$var wire 1 {( in1 $end
$var wire 1 &) in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 +) out $end
$var wire 1 |( in1 $end
$var wire 1 ') in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 ,) out $end
$var wire 1 }( in1 $end
$var wire 1 () in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 -) out $end
$var wire 1 ~( in1 $end
$var wire 1 w( in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 *( out $end
$var wire 1 *) in1 $end
$var wire 1 !) in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 &) out $end
$var wire 1 +) in1 $end
$var wire 1 ") in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 ') out $end
$var wire 1 ,) in1 $end
$var wire 1 #) in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 () out $end
$var wire 1 -) in1 $end
$var wire 1 $) in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 x' s $end
$var wire 1 .) c_out $end
$var wire 1 ;! a $end
$var wire 1 f( b $end
$var wire 1 &) c_in $end
$var wire 1 /) AxorB $end
$var wire 1 0) CnandAB $end
$var wire 1 1) AnandB $end

$scope module xor_1 $end
$var wire 1 /) out $end
$var wire 1 ;! in1 $end
$var wire 1 f( in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 x' out $end
$var wire 1 /) in1 $end
$var wire 1 &) in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 0) out $end
$var wire 1 /) in1 $end
$var wire 1 &) in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 1) out $end
$var wire 1 ;! in1 $end
$var wire 1 f( in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 .) out $end
$var wire 1 1) in1 $end
$var wire 1 0) in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 y' s $end
$var wire 1 2) c_out $end
$var wire 1 <! a $end
$var wire 1 g( b $end
$var wire 1 ') c_in $end
$var wire 1 3) AxorB $end
$var wire 1 4) CnandAB $end
$var wire 1 5) AnandB $end

$scope module xor_1 $end
$var wire 1 3) out $end
$var wire 1 <! in1 $end
$var wire 1 g( in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 y' out $end
$var wire 1 3) in1 $end
$var wire 1 ') in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 4) out $end
$var wire 1 3) in1 $end
$var wire 1 ') in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 5) out $end
$var wire 1 <! in1 $end
$var wire 1 g( in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 2) out $end
$var wire 1 5) in1 $end
$var wire 1 4) in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 z' s $end
$var wire 1 6) c_out $end
$var wire 1 =! a $end
$var wire 1 h( b $end
$var wire 1 () c_in $end
$var wire 1 7) AxorB $end
$var wire 1 8) CnandAB $end
$var wire 1 9) AnandB $end

$scope module xor_1 $end
$var wire 1 7) out $end
$var wire 1 =! in1 $end
$var wire 1 h( in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 z' out $end
$var wire 1 7) in1 $end
$var wire 1 () in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 8) out $end
$var wire 1 7) in1 $end
$var wire 1 () in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 9) out $end
$var wire 1 =! in1 $end
$var wire 1 h( in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 6) out $end
$var wire 1 9) in1 $end
$var wire 1 8) in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 {' s $end
$var wire 1 :) c_out $end
$var wire 1 >! a $end
$var wire 1 i( b $end
$var wire 1 w( c_in $end
$var wire 1 ;) AxorB $end
$var wire 1 <) CnandAB $end
$var wire 1 =) AnandB $end

$scope module xor_1 $end
$var wire 1 ;) out $end
$var wire 1 >! in1 $end
$var wire 1 i( in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 {' out $end
$var wire 1 ;) in1 $end
$var wire 1 w( in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 <) out $end
$var wire 1 ;) in1 $end
$var wire 1 w( in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 =) out $end
$var wire 1 >! in1 $end
$var wire 1 i( in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 :) out $end
$var wire 1 =) in1 $end
$var wire 1 <) in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[2] $end
$var parameter 32 >) N $end
$var wire 1 |' sum [3] $end
$var wire 1 }' sum [2] $end
$var wire 1 ~' sum [1] $end
$var wire 1 !( sum [0] $end
$var wire 1 w( c_out $end
$var wire 1 ?! a [3] $end
$var wire 1 @! a [2] $end
$var wire 1 A! a [1] $end
$var wire 1 B! a [0] $end
$var wire 1 j( b [3] $end
$var wire 1 k( b [2] $end
$var wire 1 l( b [1] $end
$var wire 1 m( b [0] $end
$var wire 1 x( c_in $end
$var wire 1 ?) p [3] $end
$var wire 1 @) p [2] $end
$var wire 1 A) p [1] $end
$var wire 1 B) p [0] $end
$var wire 1 C) ng [3] $end
$var wire 1 D) ng [2] $end
$var wire 1 E) ng [1] $end
$var wire 1 F) ng [0] $end
$var wire 1 G) carries [4] $end
$var wire 1 H) carries [3] $end
$var wire 1 I) carries [2] $end
$var wire 1 J) carries [1] $end
$var wire 1 K) carries [0] $end
$var wire 1 L) cp [3] $end
$var wire 1 M) cp [2] $end
$var wire 1 N) cp [1] $end
$var wire 1 O) cp [0] $end

$scope module xor_1[3] $end
$var wire 1 ?) out $end
$var wire 1 ?! in1 $end
$var wire 1 j( in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 @) out $end
$var wire 1 @! in1 $end
$var wire 1 k( in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 A) out $end
$var wire 1 A! in1 $end
$var wire 1 l( in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 B) out $end
$var wire 1 B! in1 $end
$var wire 1 m( in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 C) out $end
$var wire 1 ?! in1 $end
$var wire 1 j( in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 D) out $end
$var wire 1 @! in1 $end
$var wire 1 k( in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 E) out $end
$var wire 1 A! in1 $end
$var wire 1 l( in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 F) out $end
$var wire 1 B! in1 $end
$var wire 1 m( in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 L) out $end
$var wire 1 ?) in1 $end
$var wire 1 H) in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 M) out $end
$var wire 1 @) in1 $end
$var wire 1 I) in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 N) out $end
$var wire 1 A) in1 $end
$var wire 1 J) in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 O) out $end
$var wire 1 B) in1 $end
$var wire 1 x( in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 w( out $end
$var wire 1 L) in1 $end
$var wire 1 C) in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 H) out $end
$var wire 1 M) in1 $end
$var wire 1 D) in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 I) out $end
$var wire 1 N) in1 $end
$var wire 1 E) in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 J) out $end
$var wire 1 O) in1 $end
$var wire 1 F) in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 |' s $end
$var wire 1 P) c_out $end
$var wire 1 ?! a $end
$var wire 1 j( b $end
$var wire 1 H) c_in $end
$var wire 1 Q) AxorB $end
$var wire 1 R) CnandAB $end
$var wire 1 S) AnandB $end

$scope module xor_1 $end
$var wire 1 Q) out $end
$var wire 1 ?! in1 $end
$var wire 1 j( in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 |' out $end
$var wire 1 Q) in1 $end
$var wire 1 H) in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 R) out $end
$var wire 1 Q) in1 $end
$var wire 1 H) in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 S) out $end
$var wire 1 ?! in1 $end
$var wire 1 j( in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 P) out $end
$var wire 1 S) in1 $end
$var wire 1 R) in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 }' s $end
$var wire 1 T) c_out $end
$var wire 1 @! a $end
$var wire 1 k( b $end
$var wire 1 I) c_in $end
$var wire 1 U) AxorB $end
$var wire 1 V) CnandAB $end
$var wire 1 W) AnandB $end

$scope module xor_1 $end
$var wire 1 U) out $end
$var wire 1 @! in1 $end
$var wire 1 k( in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 }' out $end
$var wire 1 U) in1 $end
$var wire 1 I) in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 V) out $end
$var wire 1 U) in1 $end
$var wire 1 I) in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 W) out $end
$var wire 1 @! in1 $end
$var wire 1 k( in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 T) out $end
$var wire 1 W) in1 $end
$var wire 1 V) in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 ~' s $end
$var wire 1 X) c_out $end
$var wire 1 A! a $end
$var wire 1 l( b $end
$var wire 1 J) c_in $end
$var wire 1 Y) AxorB $end
$var wire 1 Z) CnandAB $end
$var wire 1 [) AnandB $end

$scope module xor_1 $end
$var wire 1 Y) out $end
$var wire 1 A! in1 $end
$var wire 1 l( in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 ~' out $end
$var wire 1 Y) in1 $end
$var wire 1 J) in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 Z) out $end
$var wire 1 Y) in1 $end
$var wire 1 J) in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 [) out $end
$var wire 1 A! in1 $end
$var wire 1 l( in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 X) out $end
$var wire 1 [) in1 $end
$var wire 1 Z) in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 !( s $end
$var wire 1 \) c_out $end
$var wire 1 B! a $end
$var wire 1 m( b $end
$var wire 1 x( c_in $end
$var wire 1 ]) AxorB $end
$var wire 1 ^) CnandAB $end
$var wire 1 _) AnandB $end

$scope module xor_1 $end
$var wire 1 ]) out $end
$var wire 1 B! in1 $end
$var wire 1 m( in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 !( out $end
$var wire 1 ]) in1 $end
$var wire 1 x( in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 ^) out $end
$var wire 1 ]) in1 $end
$var wire 1 x( in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 _) out $end
$var wire 1 B! in1 $end
$var wire 1 m( in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 \) out $end
$var wire 1 _) in1 $end
$var wire 1 ^) in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[1] $end
$var parameter 32 `) N $end
$var wire 1 "( sum [3] $end
$var wire 1 #( sum [2] $end
$var wire 1 $( sum [1] $end
$var wire 1 %( sum [0] $end
$var wire 1 x( c_out $end
$var wire 1 C! a [3] $end
$var wire 1 D! a [2] $end
$var wire 1 E! a [1] $end
$var wire 1 F! a [0] $end
$var wire 1 n( b [3] $end
$var wire 1 o( b [2] $end
$var wire 1 p( b [1] $end
$var wire 1 q( b [0] $end
$var wire 1 y( c_in $end
$var wire 1 a) p [3] $end
$var wire 1 b) p [2] $end
$var wire 1 c) p [1] $end
$var wire 1 d) p [0] $end
$var wire 1 e) ng [3] $end
$var wire 1 f) ng [2] $end
$var wire 1 g) ng [1] $end
$var wire 1 h) ng [0] $end
$var wire 1 i) carries [4] $end
$var wire 1 j) carries [3] $end
$var wire 1 k) carries [2] $end
$var wire 1 l) carries [1] $end
$var wire 1 m) carries [0] $end
$var wire 1 n) cp [3] $end
$var wire 1 o) cp [2] $end
$var wire 1 p) cp [1] $end
$var wire 1 q) cp [0] $end

$scope module xor_1[3] $end
$var wire 1 a) out $end
$var wire 1 C! in1 $end
$var wire 1 n( in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 b) out $end
$var wire 1 D! in1 $end
$var wire 1 o( in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 c) out $end
$var wire 1 E! in1 $end
$var wire 1 p( in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 d) out $end
$var wire 1 F! in1 $end
$var wire 1 q( in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 e) out $end
$var wire 1 C! in1 $end
$var wire 1 n( in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 f) out $end
$var wire 1 D! in1 $end
$var wire 1 o( in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 g) out $end
$var wire 1 E! in1 $end
$var wire 1 p( in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 h) out $end
$var wire 1 F! in1 $end
$var wire 1 q( in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 n) out $end
$var wire 1 a) in1 $end
$var wire 1 j) in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 o) out $end
$var wire 1 b) in1 $end
$var wire 1 k) in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 p) out $end
$var wire 1 c) in1 $end
$var wire 1 l) in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 q) out $end
$var wire 1 d) in1 $end
$var wire 1 y( in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 x( out $end
$var wire 1 n) in1 $end
$var wire 1 e) in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 j) out $end
$var wire 1 o) in1 $end
$var wire 1 f) in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 k) out $end
$var wire 1 p) in1 $end
$var wire 1 g) in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 l) out $end
$var wire 1 q) in1 $end
$var wire 1 h) in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 "( s $end
$var wire 1 r) c_out $end
$var wire 1 C! a $end
$var wire 1 n( b $end
$var wire 1 j) c_in $end
$var wire 1 s) AxorB $end
$var wire 1 t) CnandAB $end
$var wire 1 u) AnandB $end

$scope module xor_1 $end
$var wire 1 s) out $end
$var wire 1 C! in1 $end
$var wire 1 n( in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 "( out $end
$var wire 1 s) in1 $end
$var wire 1 j) in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 t) out $end
$var wire 1 s) in1 $end
$var wire 1 j) in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 u) out $end
$var wire 1 C! in1 $end
$var wire 1 n( in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 r) out $end
$var wire 1 u) in1 $end
$var wire 1 t) in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 #( s $end
$var wire 1 v) c_out $end
$var wire 1 D! a $end
$var wire 1 o( b $end
$var wire 1 k) c_in $end
$var wire 1 w) AxorB $end
$var wire 1 x) CnandAB $end
$var wire 1 y) AnandB $end

$scope module xor_1 $end
$var wire 1 w) out $end
$var wire 1 D! in1 $end
$var wire 1 o( in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 #( out $end
$var wire 1 w) in1 $end
$var wire 1 k) in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 x) out $end
$var wire 1 w) in1 $end
$var wire 1 k) in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 y) out $end
$var wire 1 D! in1 $end
$var wire 1 o( in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 v) out $end
$var wire 1 y) in1 $end
$var wire 1 x) in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 $( s $end
$var wire 1 z) c_out $end
$var wire 1 E! a $end
$var wire 1 p( b $end
$var wire 1 l) c_in $end
$var wire 1 {) AxorB $end
$var wire 1 |) CnandAB $end
$var wire 1 }) AnandB $end

$scope module xor_1 $end
$var wire 1 {) out $end
$var wire 1 E! in1 $end
$var wire 1 p( in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 $( out $end
$var wire 1 {) in1 $end
$var wire 1 l) in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 |) out $end
$var wire 1 {) in1 $end
$var wire 1 l) in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 }) out $end
$var wire 1 E! in1 $end
$var wire 1 p( in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 z) out $end
$var wire 1 }) in1 $end
$var wire 1 |) in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 %( s $end
$var wire 1 ~) c_out $end
$var wire 1 F! a $end
$var wire 1 q( b $end
$var wire 1 y( c_in $end
$var wire 1 !* AxorB $end
$var wire 1 "* CnandAB $end
$var wire 1 #* AnandB $end

$scope module xor_1 $end
$var wire 1 !* out $end
$var wire 1 F! in1 $end
$var wire 1 q( in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 %( out $end
$var wire 1 !* in1 $end
$var wire 1 y( in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 "* out $end
$var wire 1 !* in1 $end
$var wire 1 y( in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 #* out $end
$var wire 1 F! in1 $end
$var wire 1 q( in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 ~) out $end
$var wire 1 #* in1 $end
$var wire 1 "* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[0] $end
$var parameter 32 $* N $end
$var wire 1 &( sum [3] $end
$var wire 1 '( sum [2] $end
$var wire 1 (( sum [1] $end
$var wire 1 )( sum [0] $end
$var wire 1 y( c_out $end
$var wire 1 G! a [3] $end
$var wire 1 H! a [2] $end
$var wire 1 I! a [1] $end
$var wire 1 J! a [0] $end
$var wire 1 r( b [3] $end
$var wire 1 s( b [2] $end
$var wire 1 t( b [1] $end
$var wire 1 u( b [0] $end
$var wire 1 v( c_in $end
$var wire 1 %* p [3] $end
$var wire 1 &* p [2] $end
$var wire 1 '* p [1] $end
$var wire 1 (* p [0] $end
$var wire 1 )* ng [3] $end
$var wire 1 ** ng [2] $end
$var wire 1 +* ng [1] $end
$var wire 1 ,* ng [0] $end
$var wire 1 -* carries [4] $end
$var wire 1 .* carries [3] $end
$var wire 1 /* carries [2] $end
$var wire 1 0* carries [1] $end
$var wire 1 1* carries [0] $end
$var wire 1 2* cp [3] $end
$var wire 1 3* cp [2] $end
$var wire 1 4* cp [1] $end
$var wire 1 5* cp [0] $end

$scope module xor_1[3] $end
$var wire 1 %* out $end
$var wire 1 G! in1 $end
$var wire 1 r( in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 &* out $end
$var wire 1 H! in1 $end
$var wire 1 s( in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 '* out $end
$var wire 1 I! in1 $end
$var wire 1 t( in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 (* out $end
$var wire 1 J! in1 $end
$var wire 1 u( in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 )* out $end
$var wire 1 G! in1 $end
$var wire 1 r( in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 ** out $end
$var wire 1 H! in1 $end
$var wire 1 s( in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 +* out $end
$var wire 1 I! in1 $end
$var wire 1 t( in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 ,* out $end
$var wire 1 J! in1 $end
$var wire 1 u( in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 2* out $end
$var wire 1 %* in1 $end
$var wire 1 .* in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 3* out $end
$var wire 1 &* in1 $end
$var wire 1 /* in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 4* out $end
$var wire 1 '* in1 $end
$var wire 1 0* in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 5* out $end
$var wire 1 (* in1 $end
$var wire 1 v( in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 y( out $end
$var wire 1 2* in1 $end
$var wire 1 )* in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 .* out $end
$var wire 1 3* in1 $end
$var wire 1 ** in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 /* out $end
$var wire 1 4* in1 $end
$var wire 1 +* in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 0* out $end
$var wire 1 5* in1 $end
$var wire 1 ,* in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 &( s $end
$var wire 1 6* c_out $end
$var wire 1 G! a $end
$var wire 1 r( b $end
$var wire 1 .* c_in $end
$var wire 1 7* AxorB $end
$var wire 1 8* CnandAB $end
$var wire 1 9* AnandB $end

$scope module xor_1 $end
$var wire 1 7* out $end
$var wire 1 G! in1 $end
$var wire 1 r( in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 &( out $end
$var wire 1 7* in1 $end
$var wire 1 .* in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 8* out $end
$var wire 1 7* in1 $end
$var wire 1 .* in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 9* out $end
$var wire 1 G! in1 $end
$var wire 1 r( in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 6* out $end
$var wire 1 9* in1 $end
$var wire 1 8* in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 '( s $end
$var wire 1 :* c_out $end
$var wire 1 H! a $end
$var wire 1 s( b $end
$var wire 1 /* c_in $end
$var wire 1 ;* AxorB $end
$var wire 1 <* CnandAB $end
$var wire 1 =* AnandB $end

$scope module xor_1 $end
$var wire 1 ;* out $end
$var wire 1 H! in1 $end
$var wire 1 s( in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 '( out $end
$var wire 1 ;* in1 $end
$var wire 1 /* in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 <* out $end
$var wire 1 ;* in1 $end
$var wire 1 /* in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 =* out $end
$var wire 1 H! in1 $end
$var wire 1 s( in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 :* out $end
$var wire 1 =* in1 $end
$var wire 1 <* in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 (( s $end
$var wire 1 >* c_out $end
$var wire 1 I! a $end
$var wire 1 t( b $end
$var wire 1 0* c_in $end
$var wire 1 ?* AxorB $end
$var wire 1 @* CnandAB $end
$var wire 1 A* AnandB $end

$scope module xor_1 $end
$var wire 1 ?* out $end
$var wire 1 I! in1 $end
$var wire 1 t( in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 (( out $end
$var wire 1 ?* in1 $end
$var wire 1 0* in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 @* out $end
$var wire 1 ?* in1 $end
$var wire 1 0* in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 A* out $end
$var wire 1 I! in1 $end
$var wire 1 t( in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 >* out $end
$var wire 1 A* in1 $end
$var wire 1 @* in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 )( s $end
$var wire 1 B* c_out $end
$var wire 1 J! a $end
$var wire 1 u( b $end
$var wire 1 v( c_in $end
$var wire 1 C* AxorB $end
$var wire 1 D* CnandAB $end
$var wire 1 E* AnandB $end

$scope module xor_1 $end
$var wire 1 C* out $end
$var wire 1 J! in1 $end
$var wire 1 u( in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 )( out $end
$var wire 1 C* in1 $end
$var wire 1 v( in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 D* out $end
$var wire 1 C* in1 $end
$var wire 1 v( in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 E* out $end
$var wire 1 J! in1 $end
$var wire 1 u( in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 B* out $end
$var wire 1 E* in1 $end
$var wire 1 D* in2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module IFID $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 =$ NOP_mech $end
$var wire 1 K! IF_instr [15] $end
$var wire 1 L! IF_instr [14] $end
$var wire 1 M! IF_instr [13] $end
$var wire 1 N! IF_instr [12] $end
$var wire 1 O! IF_instr [11] $end
$var wire 1 P! IF_instr [10] $end
$var wire 1 Q! IF_instr [9] $end
$var wire 1 R! IF_instr [8] $end
$var wire 1 S! IF_instr [7] $end
$var wire 1 T! IF_instr [6] $end
$var wire 1 U! IF_instr [5] $end
$var wire 1 V! IF_instr [4] $end
$var wire 1 W! IF_instr [3] $end
$var wire 1 X! IF_instr [2] $end
$var wire 1 Y! IF_instr [1] $end
$var wire 1 Z! IF_instr [0] $end
$var wire 1 [! IF_PC_Next [15] $end
$var wire 1 \! IF_PC_Next [14] $end
$var wire 1 ]! IF_PC_Next [13] $end
$var wire 1 ^! IF_PC_Next [12] $end
$var wire 1 _! IF_PC_Next [11] $end
$var wire 1 `! IF_PC_Next [10] $end
$var wire 1 a! IF_PC_Next [9] $end
$var wire 1 b! IF_PC_Next [8] $end
$var wire 1 c! IF_PC_Next [7] $end
$var wire 1 d! IF_PC_Next [6] $end
$var wire 1 e! IF_PC_Next [5] $end
$var wire 1 f! IF_PC_Next [4] $end
$var wire 1 g! IF_PC_Next [3] $end
$var wire 1 h! IF_PC_Next [2] $end
$var wire 1 i! IF_PC_Next [1] $end
$var wire 1 j! IF_PC_Next [0] $end
$var wire 1 ,$ IFID_instr [15] $end
$var wire 1 -$ IFID_instr [14] $end
$var wire 1 .$ IFID_instr [13] $end
$var wire 1 /$ IFID_instr [12] $end
$var wire 1 0$ IFID_instr [11] $end
$var wire 1 1$ IFID_instr [10] $end
$var wire 1 2$ IFID_instr [9] $end
$var wire 1 3$ IFID_instr [8] $end
$var wire 1 4$ IFID_instr [7] $end
$var wire 1 5$ IFID_instr [6] $end
$var wire 1 6$ IFID_instr [5] $end
$var wire 1 7$ IFID_instr [4] $end
$var wire 1 8$ IFID_instr [3] $end
$var wire 1 9$ IFID_instr [2] $end
$var wire 1 :$ IFID_instr [1] $end
$var wire 1 ;$ IFID_instr [0] $end
$var wire 1 z# IFID_PC_Next [15] $end
$var wire 1 {# IFID_PC_Next [14] $end
$var wire 1 |# IFID_PC_Next [13] $end
$var wire 1 }# IFID_PC_Next [12] $end
$var wire 1 ~# IFID_PC_Next [11] $end
$var wire 1 !$ IFID_PC_Next [10] $end
$var wire 1 "$ IFID_PC_Next [9] $end
$var wire 1 #$ IFID_PC_Next [8] $end
$var wire 1 $$ IFID_PC_Next [7] $end
$var wire 1 %$ IFID_PC_Next [6] $end
$var wire 1 &$ IFID_PC_Next [5] $end
$var wire 1 '$ IFID_PC_Next [4] $end
$var wire 1 ($ IFID_PC_Next [3] $end
$var wire 1 )$ IFID_PC_Next [2] $end
$var wire 1 *$ IFID_PC_Next [1] $end
$var wire 1 +$ IFID_PC_Next [0] $end
$var wire 1 0& NOP_Branch $end
$var wire 1 F* nHaltSig $end
$var wire 1 ?$ IFID_instr_comb [15] $end
$var wire 1 @$ IFID_instr_comb [14] $end
$var wire 1 A$ IFID_instr_comb [13] $end
$var wire 1 B$ IFID_instr_comb [12] $end
$var wire 1 C$ IFID_instr_comb [11] $end
$var wire 1 D$ IFID_instr_comb [10] $end
$var wire 1 E$ IFID_instr_comb [9] $end
$var wire 1 F$ IFID_instr_comb [8] $end
$var wire 1 G$ IFID_instr_comb [7] $end
$var wire 1 H$ IFID_instr_comb [6] $end
$var wire 1 I$ IFID_instr_comb [5] $end
$var wire 1 J$ IFID_instr_comb [4] $end
$var wire 1 K$ IFID_instr_comb [3] $end
$var wire 1 L$ IFID_instr_comb [2] $end
$var wire 1 M$ IFID_instr_comb [1] $end
$var wire 1 N$ IFID_instr_comb [0] $end
$var wire 1 G* IFID_instr_branch [15] $end
$var wire 1 H* IFID_instr_branch [14] $end
$var wire 1 I* IFID_instr_branch [13] $end
$var wire 1 J* IFID_instr_branch [12] $end
$var wire 1 K* IFID_instr_branch [11] $end
$var wire 1 L* IFID_instr_branch [10] $end
$var wire 1 M* IFID_instr_branch [9] $end
$var wire 1 N* IFID_instr_branch [8] $end
$var wire 1 O* IFID_instr_branch [7] $end
$var wire 1 P* IFID_instr_branch [6] $end
$var wire 1 Q* IFID_instr_branch [5] $end
$var wire 1 R* IFID_instr_branch [4] $end
$var wire 1 S* IFID_instr_branch [3] $end
$var wire 1 T* IFID_instr_branch [2] $end
$var wire 1 U* IFID_instr_branch [1] $end
$var wire 1 V* IFID_instr_branch [0] $end

$scope module dff_f_pc $end
$var parameter 32 W* BIT_WIDTH $end
$var parameter 32 X* BIT_SIZE $end
$var parameter 32 Y* REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 Z* we $end
$var wire 1 [! w [15] $end
$var wire 1 \! w [14] $end
$var wire 1 ]! w [13] $end
$var wire 1 ^! w [12] $end
$var wire 1 _! w [11] $end
$var wire 1 `! w [10] $end
$var wire 1 a! w [9] $end
$var wire 1 b! w [8] $end
$var wire 1 c! w [7] $end
$var wire 1 d! w [6] $end
$var wire 1 e! w [5] $end
$var wire 1 f! w [4] $end
$var wire 1 g! w [3] $end
$var wire 1 h! w [2] $end
$var wire 1 i! w [1] $end
$var wire 1 j! w [0] $end
$var wire 1 z# r [15] $end
$var wire 1 {# r [14] $end
$var wire 1 |# r [13] $end
$var wire 1 }# r [12] $end
$var wire 1 ~# r [11] $end
$var wire 1 !$ r [10] $end
$var wire 1 "$ r [9] $end
$var wire 1 #$ r [8] $end
$var wire 1 $$ r [7] $end
$var wire 1 %$ r [6] $end
$var wire 1 &$ r [5] $end
$var wire 1 '$ r [4] $end
$var wire 1 ($ r [3] $end
$var wire 1 )$ r [2] $end
$var wire 1 *$ r [1] $end
$var wire 1 +$ r [0] $end

$scope module dff01[15] $end
$var wire 1 z# q $end
$var wire 1 [* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \* state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 {# q $end
$var wire 1 ]* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^* state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 |# q $end
$var wire 1 _* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `* state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 }# q $end
$var wire 1 a* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 b* state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 ~# q $end
$var wire 1 c* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 d* state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 !$ q $end
$var wire 1 e* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 f* state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 "$ q $end
$var wire 1 g* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 h* state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 #$ q $end
$var wire 1 i* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 j* state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 $$ q $end
$var wire 1 k* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 l* state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 %$ q $end
$var wire 1 m* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 n* state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 &$ q $end
$var wire 1 o* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 p* state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 '$ q $end
$var wire 1 q* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 r* state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 ($ q $end
$var wire 1 s* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 t* state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 )$ q $end
$var wire 1 u* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 v* state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 *$ q $end
$var wire 1 w* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 x* state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 +$ q $end
$var wire 1 y* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 z* state $end
$upscope $end
$upscope $end

$scope module dff_f_instr $end
$var parameter 32 {* BIT_WIDTH $end
$var parameter 32 |* BIT_SIZE $end
$var parameter 32 }* REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~* we $end
$var wire 1 ?$ w [15] $end
$var wire 1 @$ w [14] $end
$var wire 1 A$ w [13] $end
$var wire 1 B$ w [12] $end
$var wire 1 C$ w [11] $end
$var wire 1 D$ w [10] $end
$var wire 1 E$ w [9] $end
$var wire 1 F$ w [8] $end
$var wire 1 G$ w [7] $end
$var wire 1 H$ w [6] $end
$var wire 1 I$ w [5] $end
$var wire 1 J$ w [4] $end
$var wire 1 K$ w [3] $end
$var wire 1 L$ w [2] $end
$var wire 1 M$ w [1] $end
$var wire 1 N$ w [0] $end
$var wire 1 ,$ r [15] $end
$var wire 1 -$ r [14] $end
$var wire 1 .$ r [13] $end
$var wire 1 /$ r [12] $end
$var wire 1 0$ r [11] $end
$var wire 1 1$ r [10] $end
$var wire 1 2$ r [9] $end
$var wire 1 3$ r [8] $end
$var wire 1 4$ r [7] $end
$var wire 1 5$ r [6] $end
$var wire 1 6$ r [5] $end
$var wire 1 7$ r [4] $end
$var wire 1 8$ r [3] $end
$var wire 1 9$ r [2] $end
$var wire 1 :$ r [1] $end
$var wire 1 ;$ r [0] $end

$scope module dff01[15] $end
$var wire 1 ,$ q $end
$var wire 1 !+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 "+ state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 -$ q $end
$var wire 1 #+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 $+ state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 .$ q $end
$var wire 1 %+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 &+ state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 /$ q $end
$var wire 1 '+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 (+ state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 0$ q $end
$var wire 1 )+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *+ state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 1$ q $end
$var wire 1 ++ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,+ state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 2$ q $end
$var wire 1 -+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 .+ state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 3$ q $end
$var wire 1 /+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 0+ state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 4$ q $end
$var wire 1 1+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 2+ state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 5$ q $end
$var wire 1 3+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 4+ state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 6$ q $end
$var wire 1 5+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 6+ state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 7$ q $end
$var wire 1 7+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 8+ state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 8$ q $end
$var wire 1 9+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :+ state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 9$ q $end
$var wire 1 ;+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 <+ state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 :$ q $end
$var wire 1 =+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >+ state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 ;$ q $end
$var wire 1 ?+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @+ state $end
$upscope $end
$upscope $end
$upscope $end

$scope module stall $end
$var wire 1 =$ NOP_reg $end
$var wire 1 1$ RSData [2] $end
$var wire 1 2$ RSData [1] $end
$var wire 1 3$ RSData [0] $end
$var wire 1 4$ RTData [2] $end
$var wire 1 5$ RTData [1] $end
$var wire 1 6$ RTData [0] $end
$var wire 1 Q$ RD_ff [2] $end
$var wire 1 R$ RD_ff [1] $end
$var wire 1 S$ RD_ff [0] $end
$var wire 1 T$ RD_2ff [2] $end
$var wire 1 U$ RD_2ff [1] $end
$var wire 1 V$ RD_2ff [0] $end
$var wire 1 P$ RegWrt_2ff $end
$var wire 1 O$ RegWrt_ff $end
$var wire 1 A+ x $end
$var wire 1 B+ y $end
$var wire 1 C+ z $end
$var wire 1 D+ a $end
$upscope $end

$scope module decode0 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ,$ instr [15] $end
$var wire 1 -$ instr [14] $end
$var wire 1 .$ instr [13] $end
$var wire 1 /$ instr [12] $end
$var wire 1 0$ instr [11] $end
$var wire 1 1$ instr [10] $end
$var wire 1 2$ instr [9] $end
$var wire 1 3$ instr [8] $end
$var wire 1 4$ instr [7] $end
$var wire 1 5$ instr [6] $end
$var wire 1 6$ instr [5] $end
$var wire 1 7$ instr [4] $end
$var wire 1 8$ instr [3] $end
$var wire 1 9$ instr [2] $end
$var wire 1 :$ instr [1] $end
$var wire 1 ;$ instr [0] $end
$var wire 1 ?$ instr_comb [15] $end
$var wire 1 @$ instr_comb [14] $end
$var wire 1 A$ instr_comb [13] $end
$var wire 1 B$ instr_comb [12] $end
$var wire 1 C$ instr_comb [11] $end
$var wire 1 D$ instr_comb [10] $end
$var wire 1 E$ instr_comb [9] $end
$var wire 1 F$ instr_comb [8] $end
$var wire 1 G$ instr_comb [7] $end
$var wire 1 H$ instr_comb [6] $end
$var wire 1 I$ instr_comb [5] $end
$var wire 1 J$ instr_comb [4] $end
$var wire 1 K$ instr_comb [3] $end
$var wire 1 L$ instr_comb [2] $end
$var wire 1 M$ instr_comb [1] $end
$var wire 1 N$ instr_comb [0] $end
$var wire 1 -" WB [15] $end
$var wire 1 ." WB [14] $end
$var wire 1 /" WB [13] $end
$var wire 1 0" WB [12] $end
$var wire 1 1" WB [11] $end
$var wire 1 2" WB [10] $end
$var wire 1 3" WB [9] $end
$var wire 1 4" WB [8] $end
$var wire 1 5" WB [7] $end
$var wire 1 6" WB [6] $end
$var wire 1 7" WB [5] $end
$var wire 1 8" WB [4] $end
$var wire 1 9" WB [3] $end
$var wire 1 :" WB [2] $end
$var wire 1 ;" WB [1] $end
$var wire 1 <" WB [0] $end
$var wire 1 z# PC [15] $end
$var wire 1 {# PC [14] $end
$var wire 1 |# PC [13] $end
$var wire 1 }# PC [12] $end
$var wire 1 ~# PC [11] $end
$var wire 1 !$ PC [10] $end
$var wire 1 "$ PC [9] $end
$var wire 1 #$ PC [8] $end
$var wire 1 $$ PC [7] $end
$var wire 1 %$ PC [6] $end
$var wire 1 &$ PC [5] $end
$var wire 1 '$ PC [4] $end
$var wire 1 ($ PC [3] $end
$var wire 1 )$ PC [2] $end
$var wire 1 *$ PC [1] $end
$var wire 1 +$ PC [0] $end
$var wire 1 =$ NOP_mech $end
$var wire 1 _# nHaltSig $end
$var wire 1 h# MemRead $end
$var wire 1 a# ImmSrc $end
$var wire 1 E+ nHaltSig_comb $end
$var wire 1 d# ALUSign $end
$var wire 1 f# ALUJmp $end
$var wire 1 g# MemWrt $end
$var wire 1 6! err $end
$var wire 1 F+ RegWrt $end
$var wire 1 >$ valid $end
$var wire 1 i# RegSrc [1] $end
$var wire 1 j# RegSrc [0] $end
$var wire 1 k# BSrc [1] $end
$var wire 1 l# BSrc [0] $end
$var wire 1 s# BranchTaken [3] $end
$var wire 1 t# BranchTaken [2] $end
$var wire 1 u# BranchTaken [1] $end
$var wire 1 v# BranchTaken [0] $end
$var wire 1 o# Oper [3] $end
$var wire 1 p# Oper [2] $end
$var wire 1 q# Oper [1] $end
$var wire 1 r# Oper [0] $end
$var wire 1 =" RSData [15] $end
$var wire 1 >" RSData [14] $end
$var wire 1 ?" RSData [13] $end
$var wire 1 @" RSData [12] $end
$var wire 1 A" RSData [11] $end
$var wire 1 B" RSData [10] $end
$var wire 1 C" RSData [9] $end
$var wire 1 D" RSData [8] $end
$var wire 1 E" RSData [7] $end
$var wire 1 F" RSData [6] $end
$var wire 1 G" RSData [5] $end
$var wire 1 H" RSData [4] $end
$var wire 1 I" RSData [3] $end
$var wire 1 J" RSData [2] $end
$var wire 1 K" RSData [1] $end
$var wire 1 L" RSData [0] $end
$var wire 1 M" RTData [15] $end
$var wire 1 N" RTData [14] $end
$var wire 1 O" RTData [13] $end
$var wire 1 P" RTData [12] $end
$var wire 1 Q" RTData [11] $end
$var wire 1 R" RTData [10] $end
$var wire 1 S" RTData [9] $end
$var wire 1 T" RTData [8] $end
$var wire 1 U" RTData [7] $end
$var wire 1 V" RTData [6] $end
$var wire 1 W" RTData [5] $end
$var wire 1 X" RTData [4] $end
$var wire 1 Y" RTData [3] $end
$var wire 1 Z" RTData [2] $end
$var wire 1 [" RTData [1] $end
$var wire 1 \" RTData [0] $end
$var wire 1 }" Imm5 [15] $end
$var wire 1 ~" Imm5 [14] $end
$var wire 1 !# Imm5 [13] $end
$var wire 1 "# Imm5 [12] $end
$var wire 1 ## Imm5 [11] $end
$var wire 1 $# Imm5 [10] $end
$var wire 1 %# Imm5 [9] $end
$var wire 1 &# Imm5 [8] $end
$var wire 1 '# Imm5 [7] $end
$var wire 1 (# Imm5 [6] $end
$var wire 1 )# Imm5 [5] $end
$var wire 1 *# Imm5 [4] $end
$var wire 1 +# Imm5 [3] $end
$var wire 1 ,# Imm5 [2] $end
$var wire 1 -# Imm5 [1] $end
$var wire 1 .# Imm5 [0] $end
$var wire 1 /# Imm8 [15] $end
$var wire 1 0# Imm8 [14] $end
$var wire 1 1# Imm8 [13] $end
$var wire 1 2# Imm8 [12] $end
$var wire 1 3# Imm8 [11] $end
$var wire 1 4# Imm8 [10] $end
$var wire 1 5# Imm8 [9] $end
$var wire 1 6# Imm8 [8] $end
$var wire 1 7# Imm8 [7] $end
$var wire 1 8# Imm8 [6] $end
$var wire 1 9# Imm8 [5] $end
$var wire 1 :# Imm8 [4] $end
$var wire 1 ;# Imm8 [3] $end
$var wire 1 <# Imm8 [2] $end
$var wire 1 =# Imm8 [1] $end
$var wire 1 ># Imm8 [0] $end
$var wire 1 ?# sImm8 [15] $end
$var wire 1 @# sImm8 [14] $end
$var wire 1 A# sImm8 [13] $end
$var wire 1 B# sImm8 [12] $end
$var wire 1 C# sImm8 [11] $end
$var wire 1 D# sImm8 [10] $end
$var wire 1 E# sImm8 [9] $end
$var wire 1 F# sImm8 [8] $end
$var wire 1 G# sImm8 [7] $end
$var wire 1 H# sImm8 [6] $end
$var wire 1 I# sImm8 [5] $end
$var wire 1 J# sImm8 [4] $end
$var wire 1 K# sImm8 [3] $end
$var wire 1 L# sImm8 [2] $end
$var wire 1 M# sImm8 [1] $end
$var wire 1 N# sImm8 [0] $end
$var wire 1 O# sImm11 [15] $end
$var wire 1 P# sImm11 [14] $end
$var wire 1 Q# sImm11 [13] $end
$var wire 1 R# sImm11 [12] $end
$var wire 1 S# sImm11 [11] $end
$var wire 1 T# sImm11 [10] $end
$var wire 1 U# sImm11 [9] $end
$var wire 1 V# sImm11 [8] $end
$var wire 1 W# sImm11 [7] $end
$var wire 1 X# sImm11 [6] $end
$var wire 1 Y# sImm11 [5] $end
$var wire 1 Z# sImm11 [4] $end
$var wire 1 [# sImm11 [3] $end
$var wire 1 \# sImm11 [2] $end
$var wire 1 ]# sImm11 [1] $end
$var wire 1 ^# sImm11 [0] $end
$var wire 1 k! PC_Next [15] $end
$var wire 1 l! PC_Next [14] $end
$var wire 1 m! PC_Next [13] $end
$var wire 1 n! PC_Next [12] $end
$var wire 1 o! PC_Next [11] $end
$var wire 1 p! PC_Next [10] $end
$var wire 1 q! PC_Next [9] $end
$var wire 1 r! PC_Next [8] $end
$var wire 1 s! PC_Next [7] $end
$var wire 1 t! PC_Next [6] $end
$var wire 1 u! PC_Next [5] $end
$var wire 1 v! PC_Next [4] $end
$var wire 1 w! PC_Next [3] $end
$var wire 1 x! PC_Next [2] $end
$var wire 1 y! PC_Next [1] $end
$var wire 1 z! PC_Next [0] $end
$var wire 1 b# invA $end
$var wire 1 c# invB $end
$var wire 1 e# Cin $end
$var wire 1 w# RD [2] $end
$var wire 1 x# RD [1] $end
$var wire 1 y# RD [0] $end
$var wire 1 <$ NOP $end
$var wire 1 P$ RegWrt_2_nflopped $end
$var wire 1 O$ RegWrt_1_nflopped $end
$var wire 1 T$ RD_2_nflopped [2] $end
$var wire 1 U$ RD_2_nflopped [1] $end
$var wire 1 V$ RD_2_nflopped [0] $end
$var wire 1 Q$ RD_1_nflopped [2] $end
$var wire 1 R$ RD_1_nflopped [1] $end
$var wire 1 S$ RD_1_nflopped [0] $end
$var wire 1 0& NOP_Branch $end
$var wire 1 G+ ZeroExt $end
$var wire 1 H+ RegWrt_nflopped $end
$var wire 1 I+ ALUOpr [5] $end
$var wire 1 J+ ALUOpr [4] $end
$var wire 1 K+ ALUOpr [3] $end
$var wire 1 L+ ALUOpr [2] $end
$var wire 1 M+ ALUOpr [1] $end
$var wire 1 N+ ALUOpr [0] $end
$var wire 1 O+ RegDst [1] $end
$var wire 1 P+ RegDst [0] $end
$var wire 1 Q+ RD_nflopped [2] $end
$var wire 1 R+ RD_nflopped [1] $end
$var wire 1 S+ RD_nflopped [0] $end
$var wire 1 T+ MemRead_nflopped $end
$var wire 1 U+ ImmSrc_nflopped $end
$var wire 1 V+ ALUSign_nflopped $end
$var wire 1 W+ ALUJmp_nflopped $end
$var wire 1 X+ MemWrt_nflopped $end
$var wire 1 Y+ nHaltSig_nflopped $end
$var wire 1 Z+ reg_err $end
$var wire 1 [+ control_err $end
$var wire 1 \+ rst_ff $end

$scope module dff_rst $end
$var wire 1 \+ q $end
$var wire 1 7! d $end
$var wire 1 5! clk $end
$var wire 1 ]+ rst $end
$var reg 1 ^+ state $end
$upscope $end

$scope module regFile0 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 1$ read1RegSel [2] $end
$var wire 1 2$ read1RegSel [1] $end
$var wire 1 3$ read1RegSel [0] $end
$var wire 1 4$ read2RegSel [2] $end
$var wire 1 5$ read2RegSel [1] $end
$var wire 1 6$ read2RegSel [0] $end
$var wire 1 w# writeRegSel [2] $end
$var wire 1 x# writeRegSel [1] $end
$var wire 1 y# writeRegSel [0] $end
$var wire 1 -" writeData [15] $end
$var wire 1 ." writeData [14] $end
$var wire 1 /" writeData [13] $end
$var wire 1 0" writeData [12] $end
$var wire 1 1" writeData [11] $end
$var wire 1 2" writeData [10] $end
$var wire 1 3" writeData [9] $end
$var wire 1 4" writeData [8] $end
$var wire 1 5" writeData [7] $end
$var wire 1 6" writeData [6] $end
$var wire 1 7" writeData [5] $end
$var wire 1 8" writeData [4] $end
$var wire 1 9" writeData [3] $end
$var wire 1 :" writeData [2] $end
$var wire 1 ;" writeData [1] $end
$var wire 1 <" writeData [0] $end
$var wire 1 F+ writeEn $end
$var wire 1 =" read1Data [15] $end
$var wire 1 >" read1Data [14] $end
$var wire 1 ?" read1Data [13] $end
$var wire 1 @" read1Data [12] $end
$var wire 1 A" read1Data [11] $end
$var wire 1 B" read1Data [10] $end
$var wire 1 C" read1Data [9] $end
$var wire 1 D" read1Data [8] $end
$var wire 1 E" read1Data [7] $end
$var wire 1 F" read1Data [6] $end
$var wire 1 G" read1Data [5] $end
$var wire 1 H" read1Data [4] $end
$var wire 1 I" read1Data [3] $end
$var wire 1 J" read1Data [2] $end
$var wire 1 K" read1Data [1] $end
$var wire 1 L" read1Data [0] $end
$var wire 1 M" read2Data [15] $end
$var wire 1 N" read2Data [14] $end
$var wire 1 O" read2Data [13] $end
$var wire 1 P" read2Data [12] $end
$var wire 1 Q" read2Data [11] $end
$var wire 1 R" read2Data [10] $end
$var wire 1 S" read2Data [9] $end
$var wire 1 T" read2Data [8] $end
$var wire 1 U" read2Data [7] $end
$var wire 1 V" read2Data [6] $end
$var wire 1 W" read2Data [5] $end
$var wire 1 X" read2Data [4] $end
$var wire 1 Y" read2Data [3] $end
$var wire 1 Z" read2Data [2] $end
$var wire 1 [" read2Data [1] $end
$var wire 1 \" read2Data [0] $end
$var wire 1 Z+ err $end
$var wire 1 _+ internal_read1Data [15] $end
$var wire 1 `+ internal_read1Data [14] $end
$var wire 1 a+ internal_read1Data [13] $end
$var wire 1 b+ internal_read1Data [12] $end
$var wire 1 c+ internal_read1Data [11] $end
$var wire 1 d+ internal_read1Data [10] $end
$var wire 1 e+ internal_read1Data [9] $end
$var wire 1 f+ internal_read1Data [8] $end
$var wire 1 g+ internal_read1Data [7] $end
$var wire 1 h+ internal_read1Data [6] $end
$var wire 1 i+ internal_read1Data [5] $end
$var wire 1 j+ internal_read1Data [4] $end
$var wire 1 k+ internal_read1Data [3] $end
$var wire 1 l+ internal_read1Data [2] $end
$var wire 1 m+ internal_read1Data [1] $end
$var wire 1 n+ internal_read1Data [0] $end
$var wire 1 o+ internal_read2Data [15] $end
$var wire 1 p+ internal_read2Data [14] $end
$var wire 1 q+ internal_read2Data [13] $end
$var wire 1 r+ internal_read2Data [12] $end
$var wire 1 s+ internal_read2Data [11] $end
$var wire 1 t+ internal_read2Data [10] $end
$var wire 1 u+ internal_read2Data [9] $end
$var wire 1 v+ internal_read2Data [8] $end
$var wire 1 w+ internal_read2Data [7] $end
$var wire 1 x+ internal_read2Data [6] $end
$var wire 1 y+ internal_read2Data [5] $end
$var wire 1 z+ internal_read2Data [4] $end
$var wire 1 {+ internal_read2Data [3] $end
$var wire 1 |+ internal_read2Data [2] $end
$var wire 1 }+ internal_read2Data [1] $end
$var wire 1 ~+ internal_read2Data [0] $end

$scope module rf $end
$var parameter 32 !, BIT_WIDTH $end
$var parameter 32 ", BIT_SIZE $end
$var parameter 32 #, REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 1$ read1RegSel [2] $end
$var wire 1 2$ read1RegSel [1] $end
$var wire 1 3$ read1RegSel [0] $end
$var wire 1 4$ read2RegSel [2] $end
$var wire 1 5$ read2RegSel [1] $end
$var wire 1 6$ read2RegSel [0] $end
$var wire 1 w# writeRegSel [2] $end
$var wire 1 x# writeRegSel [1] $end
$var wire 1 y# writeRegSel [0] $end
$var wire 1 -" writeData [15] $end
$var wire 1 ." writeData [14] $end
$var wire 1 /" writeData [13] $end
$var wire 1 0" writeData [12] $end
$var wire 1 1" writeData [11] $end
$var wire 1 2" writeData [10] $end
$var wire 1 3" writeData [9] $end
$var wire 1 4" writeData [8] $end
$var wire 1 5" writeData [7] $end
$var wire 1 6" writeData [6] $end
$var wire 1 7" writeData [5] $end
$var wire 1 8" writeData [4] $end
$var wire 1 9" writeData [3] $end
$var wire 1 :" writeData [2] $end
$var wire 1 ;" writeData [1] $end
$var wire 1 <" writeData [0] $end
$var wire 1 F+ writeEn $end
$var wire 1 _+ read1Data [15] $end
$var wire 1 `+ read1Data [14] $end
$var wire 1 a+ read1Data [13] $end
$var wire 1 b+ read1Data [12] $end
$var wire 1 c+ read1Data [11] $end
$var wire 1 d+ read1Data [10] $end
$var wire 1 e+ read1Data [9] $end
$var wire 1 f+ read1Data [8] $end
$var wire 1 g+ read1Data [7] $end
$var wire 1 h+ read1Data [6] $end
$var wire 1 i+ read1Data [5] $end
$var wire 1 j+ read1Data [4] $end
$var wire 1 k+ read1Data [3] $end
$var wire 1 l+ read1Data [2] $end
$var wire 1 m+ read1Data [1] $end
$var wire 1 n+ read1Data [0] $end
$var wire 1 o+ read2Data [15] $end
$var wire 1 p+ read2Data [14] $end
$var wire 1 q+ read2Data [13] $end
$var wire 1 r+ read2Data [12] $end
$var wire 1 s+ read2Data [11] $end
$var wire 1 t+ read2Data [10] $end
$var wire 1 u+ read2Data [9] $end
$var wire 1 v+ read2Data [8] $end
$var wire 1 w+ read2Data [7] $end
$var wire 1 x+ read2Data [6] $end
$var wire 1 y+ read2Data [5] $end
$var wire 1 z+ read2Data [4] $end
$var wire 1 {+ read2Data [3] $end
$var wire 1 |+ read2Data [2] $end
$var wire 1 }+ read2Data [1] $end
$var wire 1 ~+ read2Data [0] $end
$var wire 1 Z+ err $end
$var wire 1 $, r0 [15] $end
$var wire 1 %, r0 [14] $end
$var wire 1 &, r0 [13] $end
$var wire 1 ', r0 [12] $end
$var wire 1 (, r0 [11] $end
$var wire 1 ), r0 [10] $end
$var wire 1 *, r0 [9] $end
$var wire 1 +, r0 [8] $end
$var wire 1 ,, r0 [7] $end
$var wire 1 -, r0 [6] $end
$var wire 1 ., r0 [5] $end
$var wire 1 /, r0 [4] $end
$var wire 1 0, r0 [3] $end
$var wire 1 1, r0 [2] $end
$var wire 1 2, r0 [1] $end
$var wire 1 3, r0 [0] $end
$var wire 1 4, r1 [15] $end
$var wire 1 5, r1 [14] $end
$var wire 1 6, r1 [13] $end
$var wire 1 7, r1 [12] $end
$var wire 1 8, r1 [11] $end
$var wire 1 9, r1 [10] $end
$var wire 1 :, r1 [9] $end
$var wire 1 ;, r1 [8] $end
$var wire 1 <, r1 [7] $end
$var wire 1 =, r1 [6] $end
$var wire 1 >, r1 [5] $end
$var wire 1 ?, r1 [4] $end
$var wire 1 @, r1 [3] $end
$var wire 1 A, r1 [2] $end
$var wire 1 B, r1 [1] $end
$var wire 1 C, r1 [0] $end
$var wire 1 D, r2 [15] $end
$var wire 1 E, r2 [14] $end
$var wire 1 F, r2 [13] $end
$var wire 1 G, r2 [12] $end
$var wire 1 H, r2 [11] $end
$var wire 1 I, r2 [10] $end
$var wire 1 J, r2 [9] $end
$var wire 1 K, r2 [8] $end
$var wire 1 L, r2 [7] $end
$var wire 1 M, r2 [6] $end
$var wire 1 N, r2 [5] $end
$var wire 1 O, r2 [4] $end
$var wire 1 P, r2 [3] $end
$var wire 1 Q, r2 [2] $end
$var wire 1 R, r2 [1] $end
$var wire 1 S, r2 [0] $end
$var wire 1 T, r3 [15] $end
$var wire 1 U, r3 [14] $end
$var wire 1 V, r3 [13] $end
$var wire 1 W, r3 [12] $end
$var wire 1 X, r3 [11] $end
$var wire 1 Y, r3 [10] $end
$var wire 1 Z, r3 [9] $end
$var wire 1 [, r3 [8] $end
$var wire 1 \, r3 [7] $end
$var wire 1 ], r3 [6] $end
$var wire 1 ^, r3 [5] $end
$var wire 1 _, r3 [4] $end
$var wire 1 `, r3 [3] $end
$var wire 1 a, r3 [2] $end
$var wire 1 b, r3 [1] $end
$var wire 1 c, r3 [0] $end
$var wire 1 d, r4 [15] $end
$var wire 1 e, r4 [14] $end
$var wire 1 f, r4 [13] $end
$var wire 1 g, r4 [12] $end
$var wire 1 h, r4 [11] $end
$var wire 1 i, r4 [10] $end
$var wire 1 j, r4 [9] $end
$var wire 1 k, r4 [8] $end
$var wire 1 l, r4 [7] $end
$var wire 1 m, r4 [6] $end
$var wire 1 n, r4 [5] $end
$var wire 1 o, r4 [4] $end
$var wire 1 p, r4 [3] $end
$var wire 1 q, r4 [2] $end
$var wire 1 r, r4 [1] $end
$var wire 1 s, r4 [0] $end
$var wire 1 t, r5 [15] $end
$var wire 1 u, r5 [14] $end
$var wire 1 v, r5 [13] $end
$var wire 1 w, r5 [12] $end
$var wire 1 x, r5 [11] $end
$var wire 1 y, r5 [10] $end
$var wire 1 z, r5 [9] $end
$var wire 1 {, r5 [8] $end
$var wire 1 |, r5 [7] $end
$var wire 1 }, r5 [6] $end
$var wire 1 ~, r5 [5] $end
$var wire 1 !- r5 [4] $end
$var wire 1 "- r5 [3] $end
$var wire 1 #- r5 [2] $end
$var wire 1 $- r5 [1] $end
$var wire 1 %- r5 [0] $end
$var wire 1 &- r6 [15] $end
$var wire 1 '- r6 [14] $end
$var wire 1 (- r6 [13] $end
$var wire 1 )- r6 [12] $end
$var wire 1 *- r6 [11] $end
$var wire 1 +- r6 [10] $end
$var wire 1 ,- r6 [9] $end
$var wire 1 -- r6 [8] $end
$var wire 1 .- r6 [7] $end
$var wire 1 /- r6 [6] $end
$var wire 1 0- r6 [5] $end
$var wire 1 1- r6 [4] $end
$var wire 1 2- r6 [3] $end
$var wire 1 3- r6 [2] $end
$var wire 1 4- r6 [1] $end
$var wire 1 5- r6 [0] $end
$var wire 1 6- r7 [15] $end
$var wire 1 7- r7 [14] $end
$var wire 1 8- r7 [13] $end
$var wire 1 9- r7 [12] $end
$var wire 1 :- r7 [11] $end
$var wire 1 ;- r7 [10] $end
$var wire 1 <- r7 [9] $end
$var wire 1 =- r7 [8] $end
$var wire 1 >- r7 [7] $end
$var wire 1 ?- r7 [6] $end
$var wire 1 @- r7 [5] $end
$var wire 1 A- r7 [4] $end
$var wire 1 B- r7 [3] $end
$var wire 1 C- r7 [2] $end
$var wire 1 D- r7 [1] $end
$var wire 1 E- r7 [0] $end
$var wire 1 F- we [15] $end
$var wire 1 G- we [14] $end
$var wire 1 H- we [13] $end
$var wire 1 I- we [12] $end
$var wire 1 J- we [11] $end
$var wire 1 K- we [10] $end
$var wire 1 L- we [9] $end
$var wire 1 M- we [8] $end
$var wire 1 N- we [7] $end
$var wire 1 O- we [6] $end
$var wire 1 P- we [5] $end
$var wire 1 Q- we [4] $end
$var wire 1 R- we [3] $end
$var wire 1 S- we [2] $end
$var wire 1 T- we [1] $end
$var wire 1 U- we [0] $end

$scope module s1 $end
$var parameter 32 V- OPERAND_WIDTH $end
$var parameter 32 W- SHAMT_WIDTH $end
$var parameter 32 X- NUM_OPERATIONS $end
$var wire 1 Y- In [15] $end
$var wire 1 Z- In [14] $end
$var wire 1 [- In [13] $end
$var wire 1 \- In [12] $end
$var wire 1 ]- In [11] $end
$var wire 1 ^- In [10] $end
$var wire 1 _- In [9] $end
$var wire 1 `- In [8] $end
$var wire 1 a- In [7] $end
$var wire 1 b- In [6] $end
$var wire 1 c- In [5] $end
$var wire 1 d- In [4] $end
$var wire 1 e- In [3] $end
$var wire 1 f- In [2] $end
$var wire 1 g- In [1] $end
$var wire 1 F+ In [0] $end
$var wire 1 h- ShAmt [3] $end
$var wire 1 w# ShAmt [2] $end
$var wire 1 x# ShAmt [1] $end
$var wire 1 y# ShAmt [0] $end
$var wire 1 i- Oper [1] $end
$var wire 1 j- Oper [0] $end
$var wire 1 F- Out [15] $end
$var wire 1 G- Out [14] $end
$var wire 1 H- Out [13] $end
$var wire 1 I- Out [12] $end
$var wire 1 J- Out [11] $end
$var wire 1 K- Out [10] $end
$var wire 1 L- Out [9] $end
$var wire 1 M- Out [8] $end
$var wire 1 N- Out [7] $end
$var wire 1 O- Out [6] $end
$var wire 1 P- Out [5] $end
$var wire 1 Q- Out [4] $end
$var wire 1 R- Out [3] $end
$var wire 1 S- Out [2] $end
$var wire 1 T- Out [1] $end
$var wire 1 U- Out [0] $end
$var wire 1 k- s0 [15] $end
$var wire 1 l- s0 [14] $end
$var wire 1 m- s0 [13] $end
$var wire 1 n- s0 [12] $end
$var wire 1 o- s0 [11] $end
$var wire 1 p- s0 [10] $end
$var wire 1 q- s0 [9] $end
$var wire 1 r- s0 [8] $end
$var wire 1 s- s0 [7] $end
$var wire 1 t- s0 [6] $end
$var wire 1 u- s0 [5] $end
$var wire 1 v- s0 [4] $end
$var wire 1 w- s0 [3] $end
$var wire 1 x- s0 [2] $end
$var wire 1 y- s0 [1] $end
$var wire 1 z- s0 [0] $end
$var wire 1 {- s1 [15] $end
$var wire 1 |- s1 [14] $end
$var wire 1 }- s1 [13] $end
$var wire 1 ~- s1 [12] $end
$var wire 1 !. s1 [11] $end
$var wire 1 ". s1 [10] $end
$var wire 1 #. s1 [9] $end
$var wire 1 $. s1 [8] $end
$var wire 1 %. s1 [7] $end
$var wire 1 &. s1 [6] $end
$var wire 1 '. s1 [5] $end
$var wire 1 (. s1 [4] $end
$var wire 1 ). s1 [3] $end
$var wire 1 *. s1 [2] $end
$var wire 1 +. s1 [1] $end
$var wire 1 ,. s1 [0] $end
$var wire 1 -. s2 [15] $end
$var wire 1 .. s2 [14] $end
$var wire 1 /. s2 [13] $end
$var wire 1 0. s2 [12] $end
$var wire 1 1. s2 [11] $end
$var wire 1 2. s2 [10] $end
$var wire 1 3. s2 [9] $end
$var wire 1 4. s2 [8] $end
$var wire 1 5. s2 [7] $end
$var wire 1 6. s2 [6] $end
$var wire 1 7. s2 [5] $end
$var wire 1 8. s2 [4] $end
$var wire 1 9. s2 [3] $end
$var wire 1 :. s2 [2] $end
$var wire 1 ;. s2 [1] $end
$var wire 1 <. s2 [0] $end
$var wire 1 =. s3 [15] $end
$var wire 1 >. s3 [14] $end
$var wire 1 ?. s3 [13] $end
$var wire 1 @. s3 [12] $end
$var wire 1 A. s3 [11] $end
$var wire 1 B. s3 [10] $end
$var wire 1 C. s3 [9] $end
$var wire 1 D. s3 [8] $end
$var wire 1 E. s3 [7] $end
$var wire 1 F. s3 [6] $end
$var wire 1 G. s3 [5] $end
$var wire 1 H. s3 [4] $end
$var wire 1 I. s3 [3] $end
$var wire 1 J. s3 [2] $end
$var wire 1 K. s3 [1] $end
$var wire 1 L. s3 [0] $end
$var wire 1 M. temp_out_sh0 [15] $end
$var wire 1 N. temp_out_sh0 [14] $end
$var wire 1 O. temp_out_sh0 [13] $end
$var wire 1 P. temp_out_sh0 [12] $end
$var wire 1 Q. temp_out_sh0 [11] $end
$var wire 1 R. temp_out_sh0 [10] $end
$var wire 1 S. temp_out_sh0 [9] $end
$var wire 1 T. temp_out_sh0 [8] $end
$var wire 1 U. temp_out_sh0 [7] $end
$var wire 1 V. temp_out_sh0 [6] $end
$var wire 1 W. temp_out_sh0 [5] $end
$var wire 1 X. temp_out_sh0 [4] $end
$var wire 1 Y. temp_out_sh0 [3] $end
$var wire 1 Z. temp_out_sh0 [2] $end
$var wire 1 [. temp_out_sh0 [1] $end
$var wire 1 \. temp_out_sh0 [0] $end
$var wire 1 ]. temp_out_sh1 [15] $end
$var wire 1 ^. temp_out_sh1 [14] $end
$var wire 1 _. temp_out_sh1 [13] $end
$var wire 1 `. temp_out_sh1 [12] $end
$var wire 1 a. temp_out_sh1 [11] $end
$var wire 1 b. temp_out_sh1 [10] $end
$var wire 1 c. temp_out_sh1 [9] $end
$var wire 1 d. temp_out_sh1 [8] $end
$var wire 1 e. temp_out_sh1 [7] $end
$var wire 1 f. temp_out_sh1 [6] $end
$var wire 1 g. temp_out_sh1 [5] $end
$var wire 1 h. temp_out_sh1 [4] $end
$var wire 1 i. temp_out_sh1 [3] $end
$var wire 1 j. temp_out_sh1 [2] $end
$var wire 1 k. temp_out_sh1 [1] $end
$var wire 1 l. temp_out_sh1 [0] $end
$var wire 1 m. temp_out_sh2 [15] $end
$var wire 1 n. temp_out_sh2 [14] $end
$var wire 1 o. temp_out_sh2 [13] $end
$var wire 1 p. temp_out_sh2 [12] $end
$var wire 1 q. temp_out_sh2 [11] $end
$var wire 1 r. temp_out_sh2 [10] $end
$var wire 1 s. temp_out_sh2 [9] $end
$var wire 1 t. temp_out_sh2 [8] $end
$var wire 1 u. temp_out_sh2 [7] $end
$var wire 1 v. temp_out_sh2 [6] $end
$var wire 1 w. temp_out_sh2 [5] $end
$var wire 1 x. temp_out_sh2 [4] $end
$var wire 1 y. temp_out_sh2 [3] $end
$var wire 1 z. temp_out_sh2 [2] $end
$var wire 1 {. temp_out_sh2 [1] $end
$var wire 1 |. temp_out_sh2 [0] $end
$var wire 1 }. temp_out_sh3 [15] $end
$var wire 1 ~. temp_out_sh3 [14] $end
$var wire 1 !/ temp_out_sh3 [13] $end
$var wire 1 "/ temp_out_sh3 [12] $end
$var wire 1 #/ temp_out_sh3 [11] $end
$var wire 1 $/ temp_out_sh3 [10] $end
$var wire 1 %/ temp_out_sh3 [9] $end
$var wire 1 &/ temp_out_sh3 [8] $end
$var wire 1 '/ temp_out_sh3 [7] $end
$var wire 1 (/ temp_out_sh3 [6] $end
$var wire 1 )/ temp_out_sh3 [5] $end
$var wire 1 */ temp_out_sh3 [4] $end
$var wire 1 +/ temp_out_sh3 [3] $end
$var wire 1 ,/ temp_out_sh3 [2] $end
$var wire 1 -/ temp_out_sh3 [1] $end
$var wire 1 ./ temp_out_sh3 [0] $end

$scope module bs0 $end
$var wire 1 Y- in [15] $end
$var wire 1 Z- in [14] $end
$var wire 1 [- in [13] $end
$var wire 1 \- in [12] $end
$var wire 1 ]- in [11] $end
$var wire 1 ^- in [10] $end
$var wire 1 _- in [9] $end
$var wire 1 `- in [8] $end
$var wire 1 a- in [7] $end
$var wire 1 b- in [6] $end
$var wire 1 c- in [5] $end
$var wire 1 d- in [4] $end
$var wire 1 e- in [3] $end
$var wire 1 f- in [2] $end
$var wire 1 g- in [1] $end
$var wire 1 F+ in [0] $end
$var wire 1 i- oper [1] $end
$var wire 1 j- oper [0] $end
$var wire 1 M. out [15] $end
$var wire 1 N. out [14] $end
$var wire 1 O. out [13] $end
$var wire 1 P. out [12] $end
$var wire 1 Q. out [11] $end
$var wire 1 R. out [10] $end
$var wire 1 S. out [9] $end
$var wire 1 T. out [8] $end
$var wire 1 U. out [7] $end
$var wire 1 V. out [6] $end
$var wire 1 W. out [5] $end
$var wire 1 X. out [4] $end
$var wire 1 Y. out [3] $end
$var wire 1 Z. out [2] $end
$var wire 1 [. out [1] $end
$var wire 1 \. out [0] $end
$upscope $end

$scope module bs1 $end
$var wire 1 k- in [15] $end
$var wire 1 l- in [14] $end
$var wire 1 m- in [13] $end
$var wire 1 n- in [12] $end
$var wire 1 o- in [11] $end
$var wire 1 p- in [10] $end
$var wire 1 q- in [9] $end
$var wire 1 r- in [8] $end
$var wire 1 s- in [7] $end
$var wire 1 t- in [6] $end
$var wire 1 u- in [5] $end
$var wire 1 v- in [4] $end
$var wire 1 w- in [3] $end
$var wire 1 x- in [2] $end
$var wire 1 y- in [1] $end
$var wire 1 z- in [0] $end
$var wire 1 i- oper [1] $end
$var wire 1 j- oper [0] $end
$var wire 1 ]. out [15] $end
$var wire 1 ^. out [14] $end
$var wire 1 _. out [13] $end
$var wire 1 `. out [12] $end
$var wire 1 a. out [11] $end
$var wire 1 b. out [10] $end
$var wire 1 c. out [9] $end
$var wire 1 d. out [8] $end
$var wire 1 e. out [7] $end
$var wire 1 f. out [6] $end
$var wire 1 g. out [5] $end
$var wire 1 h. out [4] $end
$var wire 1 i. out [3] $end
$var wire 1 j. out [2] $end
$var wire 1 k. out [1] $end
$var wire 1 l. out [0] $end
$upscope $end

$scope module bs2 $end
$var wire 1 {- in [15] $end
$var wire 1 |- in [14] $end
$var wire 1 }- in [13] $end
$var wire 1 ~- in [12] $end
$var wire 1 !. in [11] $end
$var wire 1 ". in [10] $end
$var wire 1 #. in [9] $end
$var wire 1 $. in [8] $end
$var wire 1 %. in [7] $end
$var wire 1 &. in [6] $end
$var wire 1 '. in [5] $end
$var wire 1 (. in [4] $end
$var wire 1 ). in [3] $end
$var wire 1 *. in [2] $end
$var wire 1 +. in [1] $end
$var wire 1 ,. in [0] $end
$var wire 1 i- oper [1] $end
$var wire 1 j- oper [0] $end
$var wire 1 m. out [15] $end
$var wire 1 n. out [14] $end
$var wire 1 o. out [13] $end
$var wire 1 p. out [12] $end
$var wire 1 q. out [11] $end
$var wire 1 r. out [10] $end
$var wire 1 s. out [9] $end
$var wire 1 t. out [8] $end
$var wire 1 u. out [7] $end
$var wire 1 v. out [6] $end
$var wire 1 w. out [5] $end
$var wire 1 x. out [4] $end
$var wire 1 y. out [3] $end
$var wire 1 z. out [2] $end
$var wire 1 {. out [1] $end
$var wire 1 |. out [0] $end
$upscope $end

$scope module bs3 $end
$var wire 1 -. in [15] $end
$var wire 1 .. in [14] $end
$var wire 1 /. in [13] $end
$var wire 1 0. in [12] $end
$var wire 1 1. in [11] $end
$var wire 1 2. in [10] $end
$var wire 1 3. in [9] $end
$var wire 1 4. in [8] $end
$var wire 1 5. in [7] $end
$var wire 1 6. in [6] $end
$var wire 1 7. in [5] $end
$var wire 1 8. in [4] $end
$var wire 1 9. in [3] $end
$var wire 1 :. in [2] $end
$var wire 1 ;. in [1] $end
$var wire 1 <. in [0] $end
$var wire 1 i- oper [1] $end
$var wire 1 j- oper [0] $end
$var wire 1 }. out [15] $end
$var wire 1 ~. out [14] $end
$var wire 1 !/ out [13] $end
$var wire 1 "/ out [12] $end
$var wire 1 #/ out [11] $end
$var wire 1 $/ out [10] $end
$var wire 1 %/ out [9] $end
$var wire 1 &/ out [8] $end
$var wire 1 '/ out [7] $end
$var wire 1 (/ out [6] $end
$var wire 1 )/ out [5] $end
$var wire 1 */ out [4] $end
$var wire 1 +/ out [3] $end
$var wire 1 ,/ out [2] $end
$var wire 1 -/ out [1] $end
$var wire 1 ./ out [0] $end
$upscope $end
$upscope $end

$scope module registers[7] $end
$var parameter 32 // BIT_WIDTH $end
$var parameter 32 0/ BIT_SIZE $end
$var parameter 32 1/ REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 N- we $end
$var wire 1 -" w [15] $end
$var wire 1 ." w [14] $end
$var wire 1 /" w [13] $end
$var wire 1 0" w [12] $end
$var wire 1 1" w [11] $end
$var wire 1 2" w [10] $end
$var wire 1 3" w [9] $end
$var wire 1 4" w [8] $end
$var wire 1 5" w [7] $end
$var wire 1 6" w [6] $end
$var wire 1 7" w [5] $end
$var wire 1 8" w [4] $end
$var wire 1 9" w [3] $end
$var wire 1 :" w [2] $end
$var wire 1 ;" w [1] $end
$var wire 1 <" w [0] $end
$var wire 1 6- r [15] $end
$var wire 1 7- r [14] $end
$var wire 1 8- r [13] $end
$var wire 1 9- r [12] $end
$var wire 1 :- r [11] $end
$var wire 1 ;- r [10] $end
$var wire 1 <- r [9] $end
$var wire 1 =- r [8] $end
$var wire 1 >- r [7] $end
$var wire 1 ?- r [6] $end
$var wire 1 @- r [5] $end
$var wire 1 A- r [4] $end
$var wire 1 B- r [3] $end
$var wire 1 C- r [2] $end
$var wire 1 D- r [1] $end
$var wire 1 E- r [0] $end

$scope module dff01[15] $end
$var wire 1 6- q $end
$var wire 1 2/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 3/ state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 7- q $end
$var wire 1 4/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 5/ state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 8- q $end
$var wire 1 6/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 7/ state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 9- q $end
$var wire 1 8/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 9/ state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 :- q $end
$var wire 1 :/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ;/ state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 ;- q $end
$var wire 1 </ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 =/ state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 <- q $end
$var wire 1 >/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ?/ state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 =- q $end
$var wire 1 @/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 A/ state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 >- q $end
$var wire 1 B/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 C/ state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 ?- q $end
$var wire 1 D/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 E/ state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 @- q $end
$var wire 1 F/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 G/ state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 A- q $end
$var wire 1 H/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 I/ state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 B- q $end
$var wire 1 J/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 K/ state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 C- q $end
$var wire 1 L/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 M/ state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 D- q $end
$var wire 1 N/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 O/ state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 E- q $end
$var wire 1 P/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Q/ state $end
$upscope $end
$upscope $end

$scope module registers[6] $end
$var parameter 32 R/ BIT_WIDTH $end
$var parameter 32 S/ BIT_SIZE $end
$var parameter 32 T/ REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 O- we $end
$var wire 1 -" w [15] $end
$var wire 1 ." w [14] $end
$var wire 1 /" w [13] $end
$var wire 1 0" w [12] $end
$var wire 1 1" w [11] $end
$var wire 1 2" w [10] $end
$var wire 1 3" w [9] $end
$var wire 1 4" w [8] $end
$var wire 1 5" w [7] $end
$var wire 1 6" w [6] $end
$var wire 1 7" w [5] $end
$var wire 1 8" w [4] $end
$var wire 1 9" w [3] $end
$var wire 1 :" w [2] $end
$var wire 1 ;" w [1] $end
$var wire 1 <" w [0] $end
$var wire 1 &- r [15] $end
$var wire 1 '- r [14] $end
$var wire 1 (- r [13] $end
$var wire 1 )- r [12] $end
$var wire 1 *- r [11] $end
$var wire 1 +- r [10] $end
$var wire 1 ,- r [9] $end
$var wire 1 -- r [8] $end
$var wire 1 .- r [7] $end
$var wire 1 /- r [6] $end
$var wire 1 0- r [5] $end
$var wire 1 1- r [4] $end
$var wire 1 2- r [3] $end
$var wire 1 3- r [2] $end
$var wire 1 4- r [1] $end
$var wire 1 5- r [0] $end

$scope module dff01[15] $end
$var wire 1 &- q $end
$var wire 1 U/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V/ state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 '- q $end
$var wire 1 W/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 X/ state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 (- q $end
$var wire 1 Y/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Z/ state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 )- q $end
$var wire 1 [/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \/ state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 *- q $end
$var wire 1 ]/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^/ state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 +- q $end
$var wire 1 _/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `/ state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 ,- q $end
$var wire 1 a/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 b/ state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 -- q $end
$var wire 1 c/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 d/ state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 .- q $end
$var wire 1 e/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 f/ state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 /- q $end
$var wire 1 g/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 h/ state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 0- q $end
$var wire 1 i/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 j/ state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 1- q $end
$var wire 1 k/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 l/ state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 2- q $end
$var wire 1 m/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 n/ state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 3- q $end
$var wire 1 o/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 p/ state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 4- q $end
$var wire 1 q/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 r/ state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 5- q $end
$var wire 1 s/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 t/ state $end
$upscope $end
$upscope $end

$scope module registers[5] $end
$var parameter 32 u/ BIT_WIDTH $end
$var parameter 32 v/ BIT_SIZE $end
$var parameter 32 w/ REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P- we $end
$var wire 1 -" w [15] $end
$var wire 1 ." w [14] $end
$var wire 1 /" w [13] $end
$var wire 1 0" w [12] $end
$var wire 1 1" w [11] $end
$var wire 1 2" w [10] $end
$var wire 1 3" w [9] $end
$var wire 1 4" w [8] $end
$var wire 1 5" w [7] $end
$var wire 1 6" w [6] $end
$var wire 1 7" w [5] $end
$var wire 1 8" w [4] $end
$var wire 1 9" w [3] $end
$var wire 1 :" w [2] $end
$var wire 1 ;" w [1] $end
$var wire 1 <" w [0] $end
$var wire 1 t, r [15] $end
$var wire 1 u, r [14] $end
$var wire 1 v, r [13] $end
$var wire 1 w, r [12] $end
$var wire 1 x, r [11] $end
$var wire 1 y, r [10] $end
$var wire 1 z, r [9] $end
$var wire 1 {, r [8] $end
$var wire 1 |, r [7] $end
$var wire 1 }, r [6] $end
$var wire 1 ~, r [5] $end
$var wire 1 !- r [4] $end
$var wire 1 "- r [3] $end
$var wire 1 #- r [2] $end
$var wire 1 $- r [1] $end
$var wire 1 %- r [0] $end

$scope module dff01[15] $end
$var wire 1 t, q $end
$var wire 1 x/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 y/ state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 u, q $end
$var wire 1 z/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 {/ state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 v, q $end
$var wire 1 |/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 }/ state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 w, q $end
$var wire 1 ~/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 !0 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 x, q $end
$var wire 1 "0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 #0 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 y, q $end
$var wire 1 $0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 %0 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 z, q $end
$var wire 1 &0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 '0 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 {, q $end
$var wire 1 (0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 )0 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 |, q $end
$var wire 1 *0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 +0 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 }, q $end
$var wire 1 ,0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 -0 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 ~, q $end
$var wire 1 .0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 /0 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 !- q $end
$var wire 1 00 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 10 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 "- q $end
$var wire 1 20 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 30 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 #- q $end
$var wire 1 40 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 50 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 $- q $end
$var wire 1 60 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 70 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 %- q $end
$var wire 1 80 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 90 state $end
$upscope $end
$upscope $end

$scope module registers[4] $end
$var parameter 32 :0 BIT_WIDTH $end
$var parameter 32 ;0 BIT_SIZE $end
$var parameter 32 <0 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 Q- we $end
$var wire 1 -" w [15] $end
$var wire 1 ." w [14] $end
$var wire 1 /" w [13] $end
$var wire 1 0" w [12] $end
$var wire 1 1" w [11] $end
$var wire 1 2" w [10] $end
$var wire 1 3" w [9] $end
$var wire 1 4" w [8] $end
$var wire 1 5" w [7] $end
$var wire 1 6" w [6] $end
$var wire 1 7" w [5] $end
$var wire 1 8" w [4] $end
$var wire 1 9" w [3] $end
$var wire 1 :" w [2] $end
$var wire 1 ;" w [1] $end
$var wire 1 <" w [0] $end
$var wire 1 d, r [15] $end
$var wire 1 e, r [14] $end
$var wire 1 f, r [13] $end
$var wire 1 g, r [12] $end
$var wire 1 h, r [11] $end
$var wire 1 i, r [10] $end
$var wire 1 j, r [9] $end
$var wire 1 k, r [8] $end
$var wire 1 l, r [7] $end
$var wire 1 m, r [6] $end
$var wire 1 n, r [5] $end
$var wire 1 o, r [4] $end
$var wire 1 p, r [3] $end
$var wire 1 q, r [2] $end
$var wire 1 r, r [1] $end
$var wire 1 s, r [0] $end

$scope module dff01[15] $end
$var wire 1 d, q $end
$var wire 1 =0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >0 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 e, q $end
$var wire 1 ?0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @0 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 f, q $end
$var wire 1 A0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 B0 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 g, q $end
$var wire 1 C0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 D0 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 h, q $end
$var wire 1 E0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F0 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 i, q $end
$var wire 1 G0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H0 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 j, q $end
$var wire 1 I0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 J0 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 k, q $end
$var wire 1 K0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 L0 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 l, q $end
$var wire 1 M0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N0 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 m, q $end
$var wire 1 O0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 P0 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 n, q $end
$var wire 1 Q0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 R0 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 o, q $end
$var wire 1 S0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 T0 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 p, q $end
$var wire 1 U0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V0 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 q, q $end
$var wire 1 W0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 X0 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 r, q $end
$var wire 1 Y0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Z0 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 s, q $end
$var wire 1 [0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \0 state $end
$upscope $end
$upscope $end

$scope module registers[3] $end
$var parameter 32 ]0 BIT_WIDTH $end
$var parameter 32 ^0 BIT_SIZE $end
$var parameter 32 _0 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 R- we $end
$var wire 1 -" w [15] $end
$var wire 1 ." w [14] $end
$var wire 1 /" w [13] $end
$var wire 1 0" w [12] $end
$var wire 1 1" w [11] $end
$var wire 1 2" w [10] $end
$var wire 1 3" w [9] $end
$var wire 1 4" w [8] $end
$var wire 1 5" w [7] $end
$var wire 1 6" w [6] $end
$var wire 1 7" w [5] $end
$var wire 1 8" w [4] $end
$var wire 1 9" w [3] $end
$var wire 1 :" w [2] $end
$var wire 1 ;" w [1] $end
$var wire 1 <" w [0] $end
$var wire 1 T, r [15] $end
$var wire 1 U, r [14] $end
$var wire 1 V, r [13] $end
$var wire 1 W, r [12] $end
$var wire 1 X, r [11] $end
$var wire 1 Y, r [10] $end
$var wire 1 Z, r [9] $end
$var wire 1 [, r [8] $end
$var wire 1 \, r [7] $end
$var wire 1 ], r [6] $end
$var wire 1 ^, r [5] $end
$var wire 1 _, r [4] $end
$var wire 1 `, r [3] $end
$var wire 1 a, r [2] $end
$var wire 1 b, r [1] $end
$var wire 1 c, r [0] $end

$scope module dff01[15] $end
$var wire 1 T, q $end
$var wire 1 `0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 a0 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 U, q $end
$var wire 1 b0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 c0 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 V, q $end
$var wire 1 d0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 e0 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 W, q $end
$var wire 1 f0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 g0 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 X, q $end
$var wire 1 h0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 i0 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 Y, q $end
$var wire 1 j0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 k0 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 Z, q $end
$var wire 1 l0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 m0 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 [, q $end
$var wire 1 n0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 o0 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 \, q $end
$var wire 1 p0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 q0 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 ], q $end
$var wire 1 r0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 s0 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 ^, q $end
$var wire 1 t0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 u0 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 _, q $end
$var wire 1 v0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 w0 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 `, q $end
$var wire 1 x0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 y0 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 a, q $end
$var wire 1 z0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 {0 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 b, q $end
$var wire 1 |0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 }0 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 c, q $end
$var wire 1 ~0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 !1 state $end
$upscope $end
$upscope $end

$scope module registers[2] $end
$var parameter 32 "1 BIT_WIDTH $end
$var parameter 32 #1 BIT_SIZE $end
$var parameter 32 $1 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 S- we $end
$var wire 1 -" w [15] $end
$var wire 1 ." w [14] $end
$var wire 1 /" w [13] $end
$var wire 1 0" w [12] $end
$var wire 1 1" w [11] $end
$var wire 1 2" w [10] $end
$var wire 1 3" w [9] $end
$var wire 1 4" w [8] $end
$var wire 1 5" w [7] $end
$var wire 1 6" w [6] $end
$var wire 1 7" w [5] $end
$var wire 1 8" w [4] $end
$var wire 1 9" w [3] $end
$var wire 1 :" w [2] $end
$var wire 1 ;" w [1] $end
$var wire 1 <" w [0] $end
$var wire 1 D, r [15] $end
$var wire 1 E, r [14] $end
$var wire 1 F, r [13] $end
$var wire 1 G, r [12] $end
$var wire 1 H, r [11] $end
$var wire 1 I, r [10] $end
$var wire 1 J, r [9] $end
$var wire 1 K, r [8] $end
$var wire 1 L, r [7] $end
$var wire 1 M, r [6] $end
$var wire 1 N, r [5] $end
$var wire 1 O, r [4] $end
$var wire 1 P, r [3] $end
$var wire 1 Q, r [2] $end
$var wire 1 R, r [1] $end
$var wire 1 S, r [0] $end

$scope module dff01[15] $end
$var wire 1 D, q $end
$var wire 1 %1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 &1 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 E, q $end
$var wire 1 '1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 (1 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 F, q $end
$var wire 1 )1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *1 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 G, q $end
$var wire 1 +1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,1 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 H, q $end
$var wire 1 -1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 .1 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 I, q $end
$var wire 1 /1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 01 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 J, q $end
$var wire 1 11 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 21 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 K, q $end
$var wire 1 31 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 41 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 L, q $end
$var wire 1 51 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 61 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 M, q $end
$var wire 1 71 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 81 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 N, q $end
$var wire 1 91 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :1 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 O, q $end
$var wire 1 ;1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 <1 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 P, q $end
$var wire 1 =1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >1 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 Q, q $end
$var wire 1 ?1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @1 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 R, q $end
$var wire 1 A1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 B1 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 S, q $end
$var wire 1 C1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 D1 state $end
$upscope $end
$upscope $end

$scope module registers[1] $end
$var parameter 32 E1 BIT_WIDTH $end
$var parameter 32 F1 BIT_SIZE $end
$var parameter 32 G1 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 T- we $end
$var wire 1 -" w [15] $end
$var wire 1 ." w [14] $end
$var wire 1 /" w [13] $end
$var wire 1 0" w [12] $end
$var wire 1 1" w [11] $end
$var wire 1 2" w [10] $end
$var wire 1 3" w [9] $end
$var wire 1 4" w [8] $end
$var wire 1 5" w [7] $end
$var wire 1 6" w [6] $end
$var wire 1 7" w [5] $end
$var wire 1 8" w [4] $end
$var wire 1 9" w [3] $end
$var wire 1 :" w [2] $end
$var wire 1 ;" w [1] $end
$var wire 1 <" w [0] $end
$var wire 1 4, r [15] $end
$var wire 1 5, r [14] $end
$var wire 1 6, r [13] $end
$var wire 1 7, r [12] $end
$var wire 1 8, r [11] $end
$var wire 1 9, r [10] $end
$var wire 1 :, r [9] $end
$var wire 1 ;, r [8] $end
$var wire 1 <, r [7] $end
$var wire 1 =, r [6] $end
$var wire 1 >, r [5] $end
$var wire 1 ?, r [4] $end
$var wire 1 @, r [3] $end
$var wire 1 A, r [2] $end
$var wire 1 B, r [1] $end
$var wire 1 C, r [0] $end

$scope module dff01[15] $end
$var wire 1 4, q $end
$var wire 1 H1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 I1 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 5, q $end
$var wire 1 J1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 K1 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 6, q $end
$var wire 1 L1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 M1 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 7, q $end
$var wire 1 N1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 O1 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 8, q $end
$var wire 1 P1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Q1 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 9, q $end
$var wire 1 R1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 S1 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 :, q $end
$var wire 1 T1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 U1 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 ;, q $end
$var wire 1 V1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 W1 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 <, q $end
$var wire 1 X1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Y1 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 =, q $end
$var wire 1 Z1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 [1 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 >, q $end
$var wire 1 \1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ]1 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 ?, q $end
$var wire 1 ^1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 _1 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 @, q $end
$var wire 1 `1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 a1 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 A, q $end
$var wire 1 b1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 c1 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 B, q $end
$var wire 1 d1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 e1 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 C, q $end
$var wire 1 f1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 g1 state $end
$upscope $end
$upscope $end

$scope module registers[0] $end
$var parameter 32 h1 BIT_WIDTH $end
$var parameter 32 i1 BIT_SIZE $end
$var parameter 32 j1 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U- we $end
$var wire 1 -" w [15] $end
$var wire 1 ." w [14] $end
$var wire 1 /" w [13] $end
$var wire 1 0" w [12] $end
$var wire 1 1" w [11] $end
$var wire 1 2" w [10] $end
$var wire 1 3" w [9] $end
$var wire 1 4" w [8] $end
$var wire 1 5" w [7] $end
$var wire 1 6" w [6] $end
$var wire 1 7" w [5] $end
$var wire 1 8" w [4] $end
$var wire 1 9" w [3] $end
$var wire 1 :" w [2] $end
$var wire 1 ;" w [1] $end
$var wire 1 <" w [0] $end
$var wire 1 $, r [15] $end
$var wire 1 %, r [14] $end
$var wire 1 &, r [13] $end
$var wire 1 ', r [12] $end
$var wire 1 (, r [11] $end
$var wire 1 ), r [10] $end
$var wire 1 *, r [9] $end
$var wire 1 +, r [8] $end
$var wire 1 ,, r [7] $end
$var wire 1 -, r [6] $end
$var wire 1 ., r [5] $end
$var wire 1 /, r [4] $end
$var wire 1 0, r [3] $end
$var wire 1 1, r [2] $end
$var wire 1 2, r [1] $end
$var wire 1 3, r [0] $end

$scope module dff01[15] $end
$var wire 1 $, q $end
$var wire 1 k1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 l1 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 %, q $end
$var wire 1 m1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 n1 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 &, q $end
$var wire 1 o1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 p1 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 ', q $end
$var wire 1 q1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 r1 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 (, q $end
$var wire 1 s1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 t1 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 ), q $end
$var wire 1 u1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 v1 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 *, q $end
$var wire 1 w1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 x1 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 +, q $end
$var wire 1 y1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 z1 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 ,, q $end
$var wire 1 {1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 |1 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 -, q $end
$var wire 1 }1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ~1 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 ., q $end
$var wire 1 !2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 "2 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 /, q $end
$var wire 1 #2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 $2 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 0, q $end
$var wire 1 %2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 &2 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 1, q $end
$var wire 1 '2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 (2 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 2, q $end
$var wire 1 )2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *2 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 3, q $end
$var wire 1 +2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,2 state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module aluc $end
$var wire 1 :$ instr [1] $end
$var wire 1 ;$ instr [0] $end
$var wire 1 I+ aluoper [5] $end
$var wire 1 J+ aluoper [4] $end
$var wire 1 K+ aluoper [3] $end
$var wire 1 L+ aluoper [2] $end
$var wire 1 M+ aluoper [1] $end
$var wire 1 N+ aluoper [0] $end
$var reg 1 -2 invA $end
$var reg 1 .2 invB $end
$var reg 1 /2 Cin $end
$var reg 4 02 op [3:0] $end
$upscope $end

$scope module control0 $end
$var wire 1 12 instr [15] $end
$var wire 1 22 instr [14] $end
$var wire 1 32 instr [13] $end
$var wire 1 42 instr [12] $end
$var wire 1 52 instr [11] $end
$var wire 1 62 instr [10] $end
$var wire 1 72 instr [9] $end
$var wire 1 82 instr [8] $end
$var wire 1 92 instr [7] $end
$var wire 1 :2 instr [6] $end
$var wire 1 ;2 instr [5] $end
$var wire 1 <2 instr [4] $end
$var wire 1 =2 instr [3] $end
$var wire 1 >2 instr [2] $end
$var wire 1 ?2 instr [1] $end
$var wire 1 @2 instr [0] $end
$var reg 1 A2 nHaltSig $end
$var reg 1 B2 RegWrt $end
$var reg 1 C2 ZeroExt $end
$var reg 1 D2 MemRead $end
$var reg 1 E2 ImmSrc $end
$var reg 1 F2 ALUSign $end
$var reg 1 G2 ALUJmp $end
$var reg 1 H2 MemWrt $end
$var reg 1 I2 err $end
$var reg 6 J2 ALUOpr [5:0] $end
$var reg 2 K2 RegSrc [1:0] $end
$var reg 2 L2 BSrc [1:0] $end
$var reg 2 M2 RegDst [1:0] $end
$var reg 4 N2 BranchTaken [3:0] $end
$var reg 1 O2 NOP $end
$var wire 1 P2 funct $end
$upscope $end

$scope module dff_RD[8] $end
$var wire 1 w# q $end
$var wire 1 T$ d $end
$var wire 1 Q2 clk $end
$var wire 1 R2 rst $end
$var reg 1 S2 state $end
$upscope $end

$scope module dff_RD[7] $end
$var wire 1 x# q $end
$var wire 1 U$ d $end
$var wire 1 T2 clk $end
$var wire 1 U2 rst $end
$var reg 1 V2 state $end
$upscope $end

$scope module dff_RD[6] $end
$var wire 1 y# q $end
$var wire 1 V$ d $end
$var wire 1 W2 clk $end
$var wire 1 X2 rst $end
$var reg 1 Y2 state $end
$upscope $end

$scope module dff_RD[5] $end
$var wire 1 T$ q $end
$var wire 1 Q$ d $end
$var wire 1 Z2 clk $end
$var wire 1 [2 rst $end
$var reg 1 \2 state $end
$upscope $end

$scope module dff_RD[4] $end
$var wire 1 U$ q $end
$var wire 1 R$ d $end
$var wire 1 ]2 clk $end
$var wire 1 ^2 rst $end
$var reg 1 _2 state $end
$upscope $end

$scope module dff_RD[3] $end
$var wire 1 V$ q $end
$var wire 1 S$ d $end
$var wire 1 `2 clk $end
$var wire 1 a2 rst $end
$var reg 1 b2 state $end
$upscope $end

$scope module dff_RD[2] $end
$var wire 1 Q$ q $end
$var wire 1 Q+ d $end
$var wire 1 c2 clk $end
$var wire 1 d2 rst $end
$var reg 1 e2 state $end
$upscope $end

$scope module dff_RD[1] $end
$var wire 1 R$ q $end
$var wire 1 R+ d $end
$var wire 1 f2 clk $end
$var wire 1 g2 rst $end
$var reg 1 h2 state $end
$upscope $end

$scope module dff_RD[0] $end
$var wire 1 S$ q $end
$var wire 1 S+ d $end
$var wire 1 i2 clk $end
$var wire 1 j2 rst $end
$var reg 1 k2 state $end
$upscope $end

$scope module dff_d_RegWrt[2] $end
$var wire 1 F+ q $end
$var wire 1 P$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 l2 state $end
$upscope $end

$scope module dff_d_RegWrt[1] $end
$var wire 1 P$ q $end
$var wire 1 O$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 m2 state $end
$upscope $end

$scope module dff_d_RegWrt[0] $end
$var wire 1 O$ q $end
$var wire 1 H+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 n2 state $end
$upscope $end
$upscope $end

$scope module IDEX $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 _# ID_nHaltSig $end
$var wire 1 h# ID_MemRead $end
$var wire 1 a# ID_ImmSrc $end
$var wire 1 o2 ID_nHaltSig_comb $end
$var wire 1 d# ID_ALUSign $end
$var wire 1 f# ID_ALUJmp $end
$var wire 1 g# ID_MemWrt $end
$var wire 1 p2 ID_RegWrt $end
$var wire 1 >$ valid $end
$var wire 1 i# ID_RegSrc [1] $end
$var wire 1 j# ID_RegSrc [0] $end
$var wire 1 k# ID_BSrc [1] $end
$var wire 1 l# ID_BSrc [0] $end
$var wire 1 s# ID_BranchTaken [3] $end
$var wire 1 t# ID_BranchTaken [2] $end
$var wire 1 u# ID_BranchTaken [1] $end
$var wire 1 v# ID_BranchTaken [0] $end
$var wire 1 o# ID_Oper [3] $end
$var wire 1 p# ID_Oper [2] $end
$var wire 1 q# ID_Oper [1] $end
$var wire 1 r# ID_Oper [0] $end
$var wire 1 =" ID_RSData [15] $end
$var wire 1 >" ID_RSData [14] $end
$var wire 1 ?" ID_RSData [13] $end
$var wire 1 @" ID_RSData [12] $end
$var wire 1 A" ID_RSData [11] $end
$var wire 1 B" ID_RSData [10] $end
$var wire 1 C" ID_RSData [9] $end
$var wire 1 D" ID_RSData [8] $end
$var wire 1 E" ID_RSData [7] $end
$var wire 1 F" ID_RSData [6] $end
$var wire 1 G" ID_RSData [5] $end
$var wire 1 H" ID_RSData [4] $end
$var wire 1 I" ID_RSData [3] $end
$var wire 1 J" ID_RSData [2] $end
$var wire 1 K" ID_RSData [1] $end
$var wire 1 L" ID_RSData [0] $end
$var wire 1 M" ID_RTData [15] $end
$var wire 1 N" ID_RTData [14] $end
$var wire 1 O" ID_RTData [13] $end
$var wire 1 P" ID_RTData [12] $end
$var wire 1 Q" ID_RTData [11] $end
$var wire 1 R" ID_RTData [10] $end
$var wire 1 S" ID_RTData [9] $end
$var wire 1 T" ID_RTData [8] $end
$var wire 1 U" ID_RTData [7] $end
$var wire 1 V" ID_RTData [6] $end
$var wire 1 W" ID_RTData [5] $end
$var wire 1 X" ID_RTData [4] $end
$var wire 1 Y" ID_RTData [3] $end
$var wire 1 Z" ID_RTData [2] $end
$var wire 1 [" ID_RTData [1] $end
$var wire 1 \" ID_RTData [0] $end
$var wire 1 }" ID_Imm5 [15] $end
$var wire 1 ~" ID_Imm5 [14] $end
$var wire 1 !# ID_Imm5 [13] $end
$var wire 1 "# ID_Imm5 [12] $end
$var wire 1 ## ID_Imm5 [11] $end
$var wire 1 $# ID_Imm5 [10] $end
$var wire 1 %# ID_Imm5 [9] $end
$var wire 1 &# ID_Imm5 [8] $end
$var wire 1 '# ID_Imm5 [7] $end
$var wire 1 (# ID_Imm5 [6] $end
$var wire 1 )# ID_Imm5 [5] $end
$var wire 1 *# ID_Imm5 [4] $end
$var wire 1 +# ID_Imm5 [3] $end
$var wire 1 ,# ID_Imm5 [2] $end
$var wire 1 -# ID_Imm5 [1] $end
$var wire 1 .# ID_Imm5 [0] $end
$var wire 1 /# ID_Imm8 [15] $end
$var wire 1 0# ID_Imm8 [14] $end
$var wire 1 1# ID_Imm8 [13] $end
$var wire 1 2# ID_Imm8 [12] $end
$var wire 1 3# ID_Imm8 [11] $end
$var wire 1 4# ID_Imm8 [10] $end
$var wire 1 5# ID_Imm8 [9] $end
$var wire 1 6# ID_Imm8 [8] $end
$var wire 1 7# ID_Imm8 [7] $end
$var wire 1 8# ID_Imm8 [6] $end
$var wire 1 9# ID_Imm8 [5] $end
$var wire 1 :# ID_Imm8 [4] $end
$var wire 1 ;# ID_Imm8 [3] $end
$var wire 1 <# ID_Imm8 [2] $end
$var wire 1 =# ID_Imm8 [1] $end
$var wire 1 ># ID_Imm8 [0] $end
$var wire 1 ?# ID_sImm8 [15] $end
$var wire 1 @# ID_sImm8 [14] $end
$var wire 1 A# ID_sImm8 [13] $end
$var wire 1 B# ID_sImm8 [12] $end
$var wire 1 C# ID_sImm8 [11] $end
$var wire 1 D# ID_sImm8 [10] $end
$var wire 1 E# ID_sImm8 [9] $end
$var wire 1 F# ID_sImm8 [8] $end
$var wire 1 G# ID_sImm8 [7] $end
$var wire 1 H# ID_sImm8 [6] $end
$var wire 1 I# ID_sImm8 [5] $end
$var wire 1 J# ID_sImm8 [4] $end
$var wire 1 K# ID_sImm8 [3] $end
$var wire 1 L# ID_sImm8 [2] $end
$var wire 1 M# ID_sImm8 [1] $end
$var wire 1 N# ID_sImm8 [0] $end
$var wire 1 O# ID_sImm11 [15] $end
$var wire 1 P# ID_sImm11 [14] $end
$var wire 1 Q# ID_sImm11 [13] $end
$var wire 1 R# ID_sImm11 [12] $end
$var wire 1 S# ID_sImm11 [11] $end
$var wire 1 T# ID_sImm11 [10] $end
$var wire 1 U# ID_sImm11 [9] $end
$var wire 1 V# ID_sImm11 [8] $end
$var wire 1 W# ID_sImm11 [7] $end
$var wire 1 X# ID_sImm11 [6] $end
$var wire 1 Y# ID_sImm11 [5] $end
$var wire 1 Z# ID_sImm11 [4] $end
$var wire 1 [# ID_sImm11 [3] $end
$var wire 1 \# ID_sImm11 [2] $end
$var wire 1 ]# ID_sImm11 [1] $end
$var wire 1 ^# ID_sImm11 [0] $end
$var wire 1 z# ID_PC_Next [15] $end
$var wire 1 {# ID_PC_Next [14] $end
$var wire 1 |# ID_PC_Next [13] $end
$var wire 1 }# ID_PC_Next [12] $end
$var wire 1 ~# ID_PC_Next [11] $end
$var wire 1 !$ ID_PC_Next [10] $end
$var wire 1 "$ ID_PC_Next [9] $end
$var wire 1 #$ ID_PC_Next [8] $end
$var wire 1 $$ ID_PC_Next [7] $end
$var wire 1 %$ ID_PC_Next [6] $end
$var wire 1 &$ ID_PC_Next [5] $end
$var wire 1 '$ ID_PC_Next [4] $end
$var wire 1 ($ ID_PC_Next [3] $end
$var wire 1 )$ ID_PC_Next [2] $end
$var wire 1 *$ ID_PC_Next [1] $end
$var wire 1 +$ ID_PC_Next [0] $end
$var wire 1 b# ID_invA $end
$var wire 1 c# ID_invB $end
$var wire 1 e# ID_Cin $end
$var wire 1 w# ID_RD [2] $end
$var wire 1 x# ID_RD [1] $end
$var wire 1 y# ID_RD [0] $end
$var wire 1 =$ ID_NOP $end
$var wire 1 P$ ID_RegWrt_2_nflopped $end
$var wire 1 O$ ID_RegWrt_1_nflopped $end
$var wire 1 T$ ID_RD_2_nflopped [2] $end
$var wire 1 U$ ID_RD_2_nflopped [1] $end
$var wire 1 V$ ID_RD_2_nflopped [0] $end
$var wire 1 Q$ ID_RD_1_nflopped [2] $end
$var wire 1 R$ ID_RD_1_nflopped [1] $end
$var wire 1 S$ ID_RD_1_nflopped [0] $end
$var wire 1 W$ IDEX_nHaltSig $end
$var wire 1 X$ IDEX_MemRead $end
$var wire 1 Y$ IDEX_ImmSrc $end
$var wire 1 q2 IDEX_nHaltSig_comb $end
$var wire 1 [$ IDEX_ALUSign $end
$var wire 1 \$ IDEX_ALUJmp $end
$var wire 1 ]$ IDEX_MemWrt $end
$var reg 1 r2 IDEX_err $end
$var wire 1 _$ IDEX_RegWrt $end
$var wire 1 `$ IDEX_RegSrc [1] $end
$var wire 1 a$ IDEX_RegSrc [0] $end
$var wire 1 b$ IDEX_BSrc [1] $end
$var wire 1 c$ IDEX_BSrc [0] $end
$var wire 1 d$ IDEX_BranchTaken [3] $end
$var wire 1 e$ IDEX_BranchTaken [2] $end
$var wire 1 f$ IDEX_BranchTaken [1] $end
$var wire 1 g$ IDEX_BranchTaken [0] $end
$var wire 1 h$ IDEX_Oper [3] $end
$var wire 1 i$ IDEX_Oper [2] $end
$var wire 1 j$ IDEX_Oper [1] $end
$var wire 1 k$ IDEX_Oper [0] $end
$var wire 1 l$ IDEX_RSData [15] $end
$var wire 1 m$ IDEX_RSData [14] $end
$var wire 1 n$ IDEX_RSData [13] $end
$var wire 1 o$ IDEX_RSData [12] $end
$var wire 1 p$ IDEX_RSData [11] $end
$var wire 1 q$ IDEX_RSData [10] $end
$var wire 1 r$ IDEX_RSData [9] $end
$var wire 1 s$ IDEX_RSData [8] $end
$var wire 1 t$ IDEX_RSData [7] $end
$var wire 1 u$ IDEX_RSData [6] $end
$var wire 1 v$ IDEX_RSData [5] $end
$var wire 1 w$ IDEX_RSData [4] $end
$var wire 1 x$ IDEX_RSData [3] $end
$var wire 1 y$ IDEX_RSData [2] $end
$var wire 1 z$ IDEX_RSData [1] $end
$var wire 1 {$ IDEX_RSData [0] $end
$var wire 1 |$ IDEX_RTData [15] $end
$var wire 1 }$ IDEX_RTData [14] $end
$var wire 1 ~$ IDEX_RTData [13] $end
$var wire 1 !% IDEX_RTData [12] $end
$var wire 1 "% IDEX_RTData [11] $end
$var wire 1 #% IDEX_RTData [10] $end
$var wire 1 $% IDEX_RTData [9] $end
$var wire 1 %% IDEX_RTData [8] $end
$var wire 1 &% IDEX_RTData [7] $end
$var wire 1 '% IDEX_RTData [6] $end
$var wire 1 (% IDEX_RTData [5] $end
$var wire 1 )% IDEX_RTData [4] $end
$var wire 1 *% IDEX_RTData [3] $end
$var wire 1 +% IDEX_RTData [2] $end
$var wire 1 ,% IDEX_RTData [1] $end
$var wire 1 -% IDEX_RTData [0] $end
$var wire 1 .% IDEX_Imm5 [15] $end
$var wire 1 /% IDEX_Imm5 [14] $end
$var wire 1 0% IDEX_Imm5 [13] $end
$var wire 1 1% IDEX_Imm5 [12] $end
$var wire 1 2% IDEX_Imm5 [11] $end
$var wire 1 3% IDEX_Imm5 [10] $end
$var wire 1 4% IDEX_Imm5 [9] $end
$var wire 1 5% IDEX_Imm5 [8] $end
$var wire 1 6% IDEX_Imm5 [7] $end
$var wire 1 7% IDEX_Imm5 [6] $end
$var wire 1 8% IDEX_Imm5 [5] $end
$var wire 1 9% IDEX_Imm5 [4] $end
$var wire 1 :% IDEX_Imm5 [3] $end
$var wire 1 ;% IDEX_Imm5 [2] $end
$var wire 1 <% IDEX_Imm5 [1] $end
$var wire 1 =% IDEX_Imm5 [0] $end
$var wire 1 >% IDEX_Imm8 [15] $end
$var wire 1 ?% IDEX_Imm8 [14] $end
$var wire 1 @% IDEX_Imm8 [13] $end
$var wire 1 A% IDEX_Imm8 [12] $end
$var wire 1 B% IDEX_Imm8 [11] $end
$var wire 1 C% IDEX_Imm8 [10] $end
$var wire 1 D% IDEX_Imm8 [9] $end
$var wire 1 E% IDEX_Imm8 [8] $end
$var wire 1 F% IDEX_Imm8 [7] $end
$var wire 1 G% IDEX_Imm8 [6] $end
$var wire 1 H% IDEX_Imm8 [5] $end
$var wire 1 I% IDEX_Imm8 [4] $end
$var wire 1 J% IDEX_Imm8 [3] $end
$var wire 1 K% IDEX_Imm8 [2] $end
$var wire 1 L% IDEX_Imm8 [1] $end
$var wire 1 M% IDEX_Imm8 [0] $end
$var wire 1 N% IDEX_sImm8 [15] $end
$var wire 1 O% IDEX_sImm8 [14] $end
$var wire 1 P% IDEX_sImm8 [13] $end
$var wire 1 Q% IDEX_sImm8 [12] $end
$var wire 1 R% IDEX_sImm8 [11] $end
$var wire 1 S% IDEX_sImm8 [10] $end
$var wire 1 T% IDEX_sImm8 [9] $end
$var wire 1 U% IDEX_sImm8 [8] $end
$var wire 1 V% IDEX_sImm8 [7] $end
$var wire 1 W% IDEX_sImm8 [6] $end
$var wire 1 X% IDEX_sImm8 [5] $end
$var wire 1 Y% IDEX_sImm8 [4] $end
$var wire 1 Z% IDEX_sImm8 [3] $end
$var wire 1 [% IDEX_sImm8 [2] $end
$var wire 1 \% IDEX_sImm8 [1] $end
$var wire 1 ]% IDEX_sImm8 [0] $end
$var wire 1 ^% IDEX_sImm11 [15] $end
$var wire 1 _% IDEX_sImm11 [14] $end
$var wire 1 `% IDEX_sImm11 [13] $end
$var wire 1 a% IDEX_sImm11 [12] $end
$var wire 1 b% IDEX_sImm11 [11] $end
$var wire 1 c% IDEX_sImm11 [10] $end
$var wire 1 d% IDEX_sImm11 [9] $end
$var wire 1 e% IDEX_sImm11 [8] $end
$var wire 1 f% IDEX_sImm11 [7] $end
$var wire 1 g% IDEX_sImm11 [6] $end
$var wire 1 h% IDEX_sImm11 [5] $end
$var wire 1 i% IDEX_sImm11 [4] $end
$var wire 1 j% IDEX_sImm11 [3] $end
$var wire 1 k% IDEX_sImm11 [2] $end
$var wire 1 l% IDEX_sImm11 [1] $end
$var wire 1 m% IDEX_sImm11 [0] $end
$var wire 1 n% IDEX_PC_Next [15] $end
$var wire 1 o% IDEX_PC_Next [14] $end
$var wire 1 p% IDEX_PC_Next [13] $end
$var wire 1 q% IDEX_PC_Next [12] $end
$var wire 1 r% IDEX_PC_Next [11] $end
$var wire 1 s% IDEX_PC_Next [10] $end
$var wire 1 t% IDEX_PC_Next [9] $end
$var wire 1 u% IDEX_PC_Next [8] $end
$var wire 1 v% IDEX_PC_Next [7] $end
$var wire 1 w% IDEX_PC_Next [6] $end
$var wire 1 x% IDEX_PC_Next [5] $end
$var wire 1 y% IDEX_PC_Next [4] $end
$var wire 1 z% IDEX_PC_Next [3] $end
$var wire 1 {% IDEX_PC_Next [2] $end
$var wire 1 |% IDEX_PC_Next [1] $end
$var wire 1 }% IDEX_PC_Next [0] $end
$var wire 1 ~% IDEX_invA $end
$var wire 1 !& IDEX_invB $end
$var wire 1 "& IDEX_Cin $end
$var wire 1 && IDEX_RD [2] $end
$var wire 1 '& IDEX_RD [1] $end
$var wire 1 (& IDEX_RD [0] $end
$var wire 1 #& IDEX_NOP $end
$var wire 1 s2 IDEX_RegSrc_2_nflopped [1] $end
$var wire 1 t2 IDEX_RegSrc_2_nflopped [0] $end
$var wire 1 u2 IDEX_RegSrc_1_nflopped [1] $end
$var wire 1 v2 IDEX_RegSrc_1_nflopped [0] $end

$scope module dff_IDEX_ImmSrc $end
$var wire 1 Y$ q $end
$var wire 1 a# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 w2 state $end
$upscope $end

$scope module dff_IDEX_ALUSign $end
$var wire 1 [$ q $end
$var wire 1 d# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 x2 state $end
$upscope $end

$scope module dff_IDEX_ALUJmp $end
$var wire 1 \$ q $end
$var wire 1 f# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 y2 state $end
$upscope $end

$scope module dff_IDEX_MemRead $end
$var wire 1 X$ q $end
$var wire 1 h# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 z2 state $end
$upscope $end

$scope module dff_IDEX_MemWrt $end
$var wire 1 ]$ q $end
$var wire 1 g# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 {2 state $end
$upscope $end

$scope module dff_IDEX_nHaltSig $end
$var wire 1 W$ q $end
$var wire 1 |2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 }2 state $end
$upscope $end

$scope module dff_IDEX_d_RSData $end
$var parameter 32 ~2 BIT_WIDTH $end
$var parameter 32 !3 BIT_SIZE $end
$var parameter 32 "3 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 #3 we $end
$var wire 1 =" w [15] $end
$var wire 1 >" w [14] $end
$var wire 1 ?" w [13] $end
$var wire 1 @" w [12] $end
$var wire 1 A" w [11] $end
$var wire 1 B" w [10] $end
$var wire 1 C" w [9] $end
$var wire 1 D" w [8] $end
$var wire 1 E" w [7] $end
$var wire 1 F" w [6] $end
$var wire 1 G" w [5] $end
$var wire 1 H" w [4] $end
$var wire 1 I" w [3] $end
$var wire 1 J" w [2] $end
$var wire 1 K" w [1] $end
$var wire 1 L" w [0] $end
$var wire 1 l$ r [15] $end
$var wire 1 m$ r [14] $end
$var wire 1 n$ r [13] $end
$var wire 1 o$ r [12] $end
$var wire 1 p$ r [11] $end
$var wire 1 q$ r [10] $end
$var wire 1 r$ r [9] $end
$var wire 1 s$ r [8] $end
$var wire 1 t$ r [7] $end
$var wire 1 u$ r [6] $end
$var wire 1 v$ r [5] $end
$var wire 1 w$ r [4] $end
$var wire 1 x$ r [3] $end
$var wire 1 y$ r [2] $end
$var wire 1 z$ r [1] $end
$var wire 1 {$ r [0] $end

$scope module dff01[15] $end
$var wire 1 l$ q $end
$var wire 1 $3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 %3 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 m$ q $end
$var wire 1 &3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 '3 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 n$ q $end
$var wire 1 (3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 )3 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 o$ q $end
$var wire 1 *3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 +3 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 p$ q $end
$var wire 1 ,3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 -3 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 q$ q $end
$var wire 1 .3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 /3 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 r$ q $end
$var wire 1 03 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 13 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 s$ q $end
$var wire 1 23 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 33 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 t$ q $end
$var wire 1 43 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 53 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 u$ q $end
$var wire 1 63 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 73 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 v$ q $end
$var wire 1 83 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 93 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 w$ q $end
$var wire 1 :3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ;3 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 x$ q $end
$var wire 1 <3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 =3 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 y$ q $end
$var wire 1 >3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ?3 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 z$ q $end
$var wire 1 @3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 A3 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 {$ q $end
$var wire 1 B3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 C3 state $end
$upscope $end
$upscope $end

$scope module dff_IDEX_d_RTData $end
$var parameter 32 D3 BIT_WIDTH $end
$var parameter 32 E3 BIT_SIZE $end
$var parameter 32 F3 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 G3 we $end
$var wire 1 M" w [15] $end
$var wire 1 N" w [14] $end
$var wire 1 O" w [13] $end
$var wire 1 P" w [12] $end
$var wire 1 Q" w [11] $end
$var wire 1 R" w [10] $end
$var wire 1 S" w [9] $end
$var wire 1 T" w [8] $end
$var wire 1 U" w [7] $end
$var wire 1 V" w [6] $end
$var wire 1 W" w [5] $end
$var wire 1 X" w [4] $end
$var wire 1 Y" w [3] $end
$var wire 1 Z" w [2] $end
$var wire 1 [" w [1] $end
$var wire 1 \" w [0] $end
$var wire 1 |$ r [15] $end
$var wire 1 }$ r [14] $end
$var wire 1 ~$ r [13] $end
$var wire 1 !% r [12] $end
$var wire 1 "% r [11] $end
$var wire 1 #% r [10] $end
$var wire 1 $% r [9] $end
$var wire 1 %% r [8] $end
$var wire 1 &% r [7] $end
$var wire 1 '% r [6] $end
$var wire 1 (% r [5] $end
$var wire 1 )% r [4] $end
$var wire 1 *% r [3] $end
$var wire 1 +% r [2] $end
$var wire 1 ,% r [1] $end
$var wire 1 -% r [0] $end

$scope module dff01[15] $end
$var wire 1 |$ q $end
$var wire 1 H3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 I3 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 }$ q $end
$var wire 1 J3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 K3 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 ~$ q $end
$var wire 1 L3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 M3 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 !% q $end
$var wire 1 N3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 O3 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 "% q $end
$var wire 1 P3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Q3 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 #% q $end
$var wire 1 R3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 S3 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 $% q $end
$var wire 1 T3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 U3 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 %% q $end
$var wire 1 V3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 W3 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 &% q $end
$var wire 1 X3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Y3 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 '% q $end
$var wire 1 Z3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 [3 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 (% q $end
$var wire 1 \3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ]3 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 )% q $end
$var wire 1 ^3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 _3 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 *% q $end
$var wire 1 `3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 a3 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 +% q $end
$var wire 1 b3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 c3 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 ,% q $end
$var wire 1 d3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 e3 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 -% q $end
$var wire 1 f3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 g3 state $end
$upscope $end
$upscope $end

$scope module dff_IDEX_d_Imm5 $end
$var parameter 32 h3 BIT_WIDTH $end
$var parameter 32 i3 BIT_SIZE $end
$var parameter 32 j3 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 k3 we $end
$var wire 1 }" w [15] $end
$var wire 1 ~" w [14] $end
$var wire 1 !# w [13] $end
$var wire 1 "# w [12] $end
$var wire 1 ## w [11] $end
$var wire 1 $# w [10] $end
$var wire 1 %# w [9] $end
$var wire 1 &# w [8] $end
$var wire 1 '# w [7] $end
$var wire 1 (# w [6] $end
$var wire 1 )# w [5] $end
$var wire 1 *# w [4] $end
$var wire 1 +# w [3] $end
$var wire 1 ,# w [2] $end
$var wire 1 -# w [1] $end
$var wire 1 .# w [0] $end
$var wire 1 .% r [15] $end
$var wire 1 /% r [14] $end
$var wire 1 0% r [13] $end
$var wire 1 1% r [12] $end
$var wire 1 2% r [11] $end
$var wire 1 3% r [10] $end
$var wire 1 4% r [9] $end
$var wire 1 5% r [8] $end
$var wire 1 6% r [7] $end
$var wire 1 7% r [6] $end
$var wire 1 8% r [5] $end
$var wire 1 9% r [4] $end
$var wire 1 :% r [3] $end
$var wire 1 ;% r [2] $end
$var wire 1 <% r [1] $end
$var wire 1 =% r [0] $end

$scope module dff01[15] $end
$var wire 1 .% q $end
$var wire 1 l3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 m3 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 /% q $end
$var wire 1 n3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 o3 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 0% q $end
$var wire 1 p3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 q3 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 1% q $end
$var wire 1 r3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 s3 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 2% q $end
$var wire 1 t3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 u3 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 3% q $end
$var wire 1 v3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 w3 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 4% q $end
$var wire 1 x3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 y3 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 5% q $end
$var wire 1 z3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 {3 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 6% q $end
$var wire 1 |3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 }3 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 7% q $end
$var wire 1 ~3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 !4 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 8% q $end
$var wire 1 "4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 #4 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 9% q $end
$var wire 1 $4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 %4 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 :% q $end
$var wire 1 &4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 '4 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 ;% q $end
$var wire 1 (4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 )4 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 <% q $end
$var wire 1 *4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 +4 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 =% q $end
$var wire 1 ,4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 -4 state $end
$upscope $end
$upscope $end

$scope module dff_IDEX_d_Imm8 $end
$var parameter 32 .4 BIT_WIDTH $end
$var parameter 32 /4 BIT_SIZE $end
$var parameter 32 04 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 14 we $end
$var wire 1 /# w [15] $end
$var wire 1 0# w [14] $end
$var wire 1 1# w [13] $end
$var wire 1 2# w [12] $end
$var wire 1 3# w [11] $end
$var wire 1 4# w [10] $end
$var wire 1 5# w [9] $end
$var wire 1 6# w [8] $end
$var wire 1 7# w [7] $end
$var wire 1 8# w [6] $end
$var wire 1 9# w [5] $end
$var wire 1 :# w [4] $end
$var wire 1 ;# w [3] $end
$var wire 1 <# w [2] $end
$var wire 1 =# w [1] $end
$var wire 1 ># w [0] $end
$var wire 1 >% r [15] $end
$var wire 1 ?% r [14] $end
$var wire 1 @% r [13] $end
$var wire 1 A% r [12] $end
$var wire 1 B% r [11] $end
$var wire 1 C% r [10] $end
$var wire 1 D% r [9] $end
$var wire 1 E% r [8] $end
$var wire 1 F% r [7] $end
$var wire 1 G% r [6] $end
$var wire 1 H% r [5] $end
$var wire 1 I% r [4] $end
$var wire 1 J% r [3] $end
$var wire 1 K% r [2] $end
$var wire 1 L% r [1] $end
$var wire 1 M% r [0] $end

$scope module dff01[15] $end
$var wire 1 >% q $end
$var wire 1 24 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 34 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 ?% q $end
$var wire 1 44 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 54 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 @% q $end
$var wire 1 64 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 74 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 A% q $end
$var wire 1 84 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 94 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 B% q $end
$var wire 1 :4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ;4 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 C% q $end
$var wire 1 <4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 =4 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 D% q $end
$var wire 1 >4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ?4 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 E% q $end
$var wire 1 @4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 A4 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 F% q $end
$var wire 1 B4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 C4 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 G% q $end
$var wire 1 D4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 E4 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 H% q $end
$var wire 1 F4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 G4 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 I% q $end
$var wire 1 H4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 I4 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 J% q $end
$var wire 1 J4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 K4 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 K% q $end
$var wire 1 L4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 M4 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 L% q $end
$var wire 1 N4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 O4 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 M% q $end
$var wire 1 P4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Q4 state $end
$upscope $end
$upscope $end

$scope module dff_IDEX_d_sImm8 $end
$var parameter 32 R4 BIT_WIDTH $end
$var parameter 32 S4 BIT_SIZE $end
$var parameter 32 T4 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U4 we $end
$var wire 1 ?# w [15] $end
$var wire 1 @# w [14] $end
$var wire 1 A# w [13] $end
$var wire 1 B# w [12] $end
$var wire 1 C# w [11] $end
$var wire 1 D# w [10] $end
$var wire 1 E# w [9] $end
$var wire 1 F# w [8] $end
$var wire 1 G# w [7] $end
$var wire 1 H# w [6] $end
$var wire 1 I# w [5] $end
$var wire 1 J# w [4] $end
$var wire 1 K# w [3] $end
$var wire 1 L# w [2] $end
$var wire 1 M# w [1] $end
$var wire 1 N# w [0] $end
$var wire 1 N% r [15] $end
$var wire 1 O% r [14] $end
$var wire 1 P% r [13] $end
$var wire 1 Q% r [12] $end
$var wire 1 R% r [11] $end
$var wire 1 S% r [10] $end
$var wire 1 T% r [9] $end
$var wire 1 U% r [8] $end
$var wire 1 V% r [7] $end
$var wire 1 W% r [6] $end
$var wire 1 X% r [5] $end
$var wire 1 Y% r [4] $end
$var wire 1 Z% r [3] $end
$var wire 1 [% r [2] $end
$var wire 1 \% r [1] $end
$var wire 1 ]% r [0] $end

$scope module dff01[15] $end
$var wire 1 N% q $end
$var wire 1 V4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 W4 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 O% q $end
$var wire 1 X4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Y4 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 P% q $end
$var wire 1 Z4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 [4 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 Q% q $end
$var wire 1 \4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ]4 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 R% q $end
$var wire 1 ^4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 _4 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 S% q $end
$var wire 1 `4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 a4 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 T% q $end
$var wire 1 b4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 c4 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 U% q $end
$var wire 1 d4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 e4 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 V% q $end
$var wire 1 f4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 g4 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 W% q $end
$var wire 1 h4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 i4 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 X% q $end
$var wire 1 j4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 k4 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 Y% q $end
$var wire 1 l4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 m4 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 Z% q $end
$var wire 1 n4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 o4 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 [% q $end
$var wire 1 p4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 q4 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 \% q $end
$var wire 1 r4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 s4 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 ]% q $end
$var wire 1 t4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 u4 state $end
$upscope $end
$upscope $end

$scope module dff_IDEX_d_sImm11 $end
$var parameter 32 v4 BIT_WIDTH $end
$var parameter 32 w4 BIT_SIZE $end
$var parameter 32 x4 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 y4 we $end
$var wire 1 O# w [15] $end
$var wire 1 P# w [14] $end
$var wire 1 Q# w [13] $end
$var wire 1 R# w [12] $end
$var wire 1 S# w [11] $end
$var wire 1 T# w [10] $end
$var wire 1 U# w [9] $end
$var wire 1 V# w [8] $end
$var wire 1 W# w [7] $end
$var wire 1 X# w [6] $end
$var wire 1 Y# w [5] $end
$var wire 1 Z# w [4] $end
$var wire 1 [# w [3] $end
$var wire 1 \# w [2] $end
$var wire 1 ]# w [1] $end
$var wire 1 ^# w [0] $end
$var wire 1 ^% r [15] $end
$var wire 1 _% r [14] $end
$var wire 1 `% r [13] $end
$var wire 1 a% r [12] $end
$var wire 1 b% r [11] $end
$var wire 1 c% r [10] $end
$var wire 1 d% r [9] $end
$var wire 1 e% r [8] $end
$var wire 1 f% r [7] $end
$var wire 1 g% r [6] $end
$var wire 1 h% r [5] $end
$var wire 1 i% r [4] $end
$var wire 1 j% r [3] $end
$var wire 1 k% r [2] $end
$var wire 1 l% r [1] $end
$var wire 1 m% r [0] $end

$scope module dff01[15] $end
$var wire 1 ^% q $end
$var wire 1 z4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 {4 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 _% q $end
$var wire 1 |4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 }4 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 `% q $end
$var wire 1 ~4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 !5 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 a% q $end
$var wire 1 "5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 #5 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 b% q $end
$var wire 1 $5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 %5 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 c% q $end
$var wire 1 &5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 '5 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 d% q $end
$var wire 1 (5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 )5 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 e% q $end
$var wire 1 *5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 +5 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 f% q $end
$var wire 1 ,5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 -5 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 g% q $end
$var wire 1 .5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 /5 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 h% q $end
$var wire 1 05 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 15 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 i% q $end
$var wire 1 25 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 35 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 j% q $end
$var wire 1 45 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 55 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 k% q $end
$var wire 1 65 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 75 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 l% q $end
$var wire 1 85 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 95 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 m% q $end
$var wire 1 :5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ;5 state $end
$upscope $end
$upscope $end

$scope module dff_IDEX_d_PC $end
$var parameter 32 <5 BIT_WIDTH $end
$var parameter 32 =5 BIT_SIZE $end
$var parameter 32 >5 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ?5 we $end
$var wire 1 z# w [15] $end
$var wire 1 {# w [14] $end
$var wire 1 |# w [13] $end
$var wire 1 }# w [12] $end
$var wire 1 ~# w [11] $end
$var wire 1 !$ w [10] $end
$var wire 1 "$ w [9] $end
$var wire 1 #$ w [8] $end
$var wire 1 $$ w [7] $end
$var wire 1 %$ w [6] $end
$var wire 1 &$ w [5] $end
$var wire 1 '$ w [4] $end
$var wire 1 ($ w [3] $end
$var wire 1 )$ w [2] $end
$var wire 1 *$ w [1] $end
$var wire 1 +$ w [0] $end
$var wire 1 n% r [15] $end
$var wire 1 o% r [14] $end
$var wire 1 p% r [13] $end
$var wire 1 q% r [12] $end
$var wire 1 r% r [11] $end
$var wire 1 s% r [10] $end
$var wire 1 t% r [9] $end
$var wire 1 u% r [8] $end
$var wire 1 v% r [7] $end
$var wire 1 w% r [6] $end
$var wire 1 x% r [5] $end
$var wire 1 y% r [4] $end
$var wire 1 z% r [3] $end
$var wire 1 {% r [2] $end
$var wire 1 |% r [1] $end
$var wire 1 }% r [0] $end

$scope module dff01[15] $end
$var wire 1 n% q $end
$var wire 1 @5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 A5 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 o% q $end
$var wire 1 B5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 C5 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 p% q $end
$var wire 1 D5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 E5 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 q% q $end
$var wire 1 F5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 G5 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 r% q $end
$var wire 1 H5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 I5 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 s% q $end
$var wire 1 J5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 K5 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 t% q $end
$var wire 1 L5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 M5 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 u% q $end
$var wire 1 N5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 O5 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 v% q $end
$var wire 1 P5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Q5 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 w% q $end
$var wire 1 R5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 S5 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 x% q $end
$var wire 1 T5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 U5 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 y% q $end
$var wire 1 V5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 W5 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 z% q $end
$var wire 1 X5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Y5 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 {% q $end
$var wire 1 Z5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 [5 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 |% q $end
$var wire 1 \5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ]5 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 }% q $end
$var wire 1 ^5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 _5 state $end
$upscope $end
$upscope $end

$scope module dff_IDEX_d_invA $end
$var wire 1 ~% q $end
$var wire 1 b# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `5 state $end
$upscope $end

$scope module dff_IDEX_d_invB $end
$var wire 1 !& q $end
$var wire 1 c# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 a5 state $end
$upscope $end

$scope module dff_IDEX_d_Cin $end
$var wire 1 "& q $end
$var wire 1 e# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 b5 state $end
$upscope $end

$scope module dff_IDEX_NOP $end
$var wire 1 #& q $end
$var wire 1 =$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 c5 state $end
$upscope $end

$scope module dff_IDEX_RegSrc[5] $end
$var wire 1 `$ q $end
$var wire 1 s2 d $end
$var wire 1 d5 clk $end
$var wire 1 e5 rst $end
$var reg 1 f5 state $end
$upscope $end

$scope module dff_IDEX_RegSrc[4] $end
$var wire 1 a$ q $end
$var wire 1 t2 d $end
$var wire 1 g5 clk $end
$var wire 1 h5 rst $end
$var reg 1 i5 state $end
$upscope $end

$scope module dff_IDEX_RegSrc[3] $end
$var wire 1 s2 q $end
$var wire 1 u2 d $end
$var wire 1 j5 clk $end
$var wire 1 k5 rst $end
$var reg 1 l5 state $end
$upscope $end

$scope module dff_IDEX_RegSrc[2] $end
$var wire 1 t2 q $end
$var wire 1 v2 d $end
$var wire 1 m5 clk $end
$var wire 1 n5 rst $end
$var reg 1 o5 state $end
$upscope $end

$scope module dff_IDEX_RegSrc[1] $end
$var wire 1 u2 q $end
$var wire 1 i# d $end
$var wire 1 p5 clk $end
$var wire 1 q5 rst $end
$var reg 1 r5 state $end
$upscope $end

$scope module dff_IDEX_RegSrc[0] $end
$var wire 1 v2 q $end
$var wire 1 j# d $end
$var wire 1 s5 clk $end
$var wire 1 t5 rst $end
$var reg 1 u5 state $end
$upscope $end

$scope module dff_IDEX_BSrc[1] $end
$var wire 1 b$ q $end
$var wire 1 k# d $end
$var wire 1 v5 clk $end
$var wire 1 w5 rst $end
$var reg 1 x5 state $end
$upscope $end

$scope module dff_IDEX_BSrc[0] $end
$var wire 1 c$ q $end
$var wire 1 l# d $end
$var wire 1 y5 clk $end
$var wire 1 z5 rst $end
$var reg 1 {5 state $end
$upscope $end

$scope module dff_IDEX_d_oper[3] $end
$var wire 1 h$ q $end
$var wire 1 o# d $end
$var wire 1 |5 clk $end
$var wire 1 }5 rst $end
$var reg 1 ~5 state $end
$upscope $end

$scope module dff_IDEX_d_oper[2] $end
$var wire 1 i$ q $end
$var wire 1 p# d $end
$var wire 1 !6 clk $end
$var wire 1 "6 rst $end
$var reg 1 #6 state $end
$upscope $end

$scope module dff_IDEX_d_oper[1] $end
$var wire 1 j$ q $end
$var wire 1 q# d $end
$var wire 1 $6 clk $end
$var wire 1 %6 rst $end
$var reg 1 &6 state $end
$upscope $end

$scope module dff_IDEX_d_oper[0] $end
$var wire 1 k$ q $end
$var wire 1 r# d $end
$var wire 1 '6 clk $end
$var wire 1 (6 rst $end
$var reg 1 )6 state $end
$upscope $end

$scope module dff_IDEX_d_BranchTaken[3] $end
$var wire 1 d$ q $end
$var wire 1 s# d $end
$var wire 1 *6 clk $end
$var wire 1 +6 rst $end
$var reg 1 ,6 state $end
$upscope $end

$scope module dff_IDEX_d_BranchTaken[2] $end
$var wire 1 e$ q $end
$var wire 1 t# d $end
$var wire 1 -6 clk $end
$var wire 1 .6 rst $end
$var reg 1 /6 state $end
$upscope $end

$scope module dff_IDEX_d_BranchTaken[1] $end
$var wire 1 f$ q $end
$var wire 1 u# d $end
$var wire 1 06 clk $end
$var wire 1 16 rst $end
$var reg 1 26 state $end
$upscope $end

$scope module dff_IDEX_d_BranchTaken[0] $end
$var wire 1 g$ q $end
$var wire 1 v# d $end
$var wire 1 36 clk $end
$var wire 1 46 rst $end
$var reg 1 56 state $end
$upscope $end
$upscope $end

$scope module execute0 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 #& NOP $end
$var wire 1 l$ RSData [15] $end
$var wire 1 m$ RSData [14] $end
$var wire 1 n$ RSData [13] $end
$var wire 1 o$ RSData [12] $end
$var wire 1 p$ RSData [11] $end
$var wire 1 q$ RSData [10] $end
$var wire 1 r$ RSData [9] $end
$var wire 1 s$ RSData [8] $end
$var wire 1 t$ RSData [7] $end
$var wire 1 u$ RSData [6] $end
$var wire 1 v$ RSData [5] $end
$var wire 1 w$ RSData [4] $end
$var wire 1 x$ RSData [3] $end
$var wire 1 y$ RSData [2] $end
$var wire 1 z$ RSData [1] $end
$var wire 1 {$ RSData [0] $end
$var wire 1 |$ RTData [15] $end
$var wire 1 }$ RTData [14] $end
$var wire 1 ~$ RTData [13] $end
$var wire 1 !% RTData [12] $end
$var wire 1 "% RTData [11] $end
$var wire 1 #% RTData [10] $end
$var wire 1 $% RTData [9] $end
$var wire 1 %% RTData [8] $end
$var wire 1 &% RTData [7] $end
$var wire 1 '% RTData [6] $end
$var wire 1 (% RTData [5] $end
$var wire 1 )% RTData [4] $end
$var wire 1 *% RTData [3] $end
$var wire 1 +% RTData [2] $end
$var wire 1 ,% RTData [1] $end
$var wire 1 -% RTData [0] $end
$var wire 1 n% PC [15] $end
$var wire 1 o% PC [14] $end
$var wire 1 p% PC [13] $end
$var wire 1 q% PC [12] $end
$var wire 1 r% PC [11] $end
$var wire 1 s% PC [10] $end
$var wire 1 t% PC [9] $end
$var wire 1 u% PC [8] $end
$var wire 1 v% PC [7] $end
$var wire 1 w% PC [6] $end
$var wire 1 x% PC [5] $end
$var wire 1 y% PC [4] $end
$var wire 1 z% PC [3] $end
$var wire 1 {% PC [2] $end
$var wire 1 |% PC [1] $end
$var wire 1 }% PC [0] $end
$var wire 1 .% Imm5 [15] $end
$var wire 1 /% Imm5 [14] $end
$var wire 1 0% Imm5 [13] $end
$var wire 1 1% Imm5 [12] $end
$var wire 1 2% Imm5 [11] $end
$var wire 1 3% Imm5 [10] $end
$var wire 1 4% Imm5 [9] $end
$var wire 1 5% Imm5 [8] $end
$var wire 1 6% Imm5 [7] $end
$var wire 1 7% Imm5 [6] $end
$var wire 1 8% Imm5 [5] $end
$var wire 1 9% Imm5 [4] $end
$var wire 1 :% Imm5 [3] $end
$var wire 1 ;% Imm5 [2] $end
$var wire 1 <% Imm5 [1] $end
$var wire 1 =% Imm5 [0] $end
$var wire 1 >% Imm8 [15] $end
$var wire 1 ?% Imm8 [14] $end
$var wire 1 @% Imm8 [13] $end
$var wire 1 A% Imm8 [12] $end
$var wire 1 B% Imm8 [11] $end
$var wire 1 C% Imm8 [10] $end
$var wire 1 D% Imm8 [9] $end
$var wire 1 E% Imm8 [8] $end
$var wire 1 F% Imm8 [7] $end
$var wire 1 G% Imm8 [6] $end
$var wire 1 H% Imm8 [5] $end
$var wire 1 I% Imm8 [4] $end
$var wire 1 J% Imm8 [3] $end
$var wire 1 K% Imm8 [2] $end
$var wire 1 L% Imm8 [1] $end
$var wire 1 M% Imm8 [0] $end
$var wire 1 N% sImm8 [15] $end
$var wire 1 O% sImm8 [14] $end
$var wire 1 P% sImm8 [13] $end
$var wire 1 Q% sImm8 [12] $end
$var wire 1 R% sImm8 [11] $end
$var wire 1 S% sImm8 [10] $end
$var wire 1 T% sImm8 [9] $end
$var wire 1 U% sImm8 [8] $end
$var wire 1 V% sImm8 [7] $end
$var wire 1 W% sImm8 [6] $end
$var wire 1 X% sImm8 [5] $end
$var wire 1 Y% sImm8 [4] $end
$var wire 1 Z% sImm8 [3] $end
$var wire 1 [% sImm8 [2] $end
$var wire 1 \% sImm8 [1] $end
$var wire 1 ]% sImm8 [0] $end
$var wire 1 ^% sImm11 [15] $end
$var wire 1 _% sImm11 [14] $end
$var wire 1 `% sImm11 [13] $end
$var wire 1 a% sImm11 [12] $end
$var wire 1 b% sImm11 [11] $end
$var wire 1 c% sImm11 [10] $end
$var wire 1 d% sImm11 [9] $end
$var wire 1 e% sImm11 [8] $end
$var wire 1 f% sImm11 [7] $end
$var wire 1 g% sImm11 [6] $end
$var wire 1 h% sImm11 [5] $end
$var wire 1 i% sImm11 [4] $end
$var wire 1 j% sImm11 [3] $end
$var wire 1 k% sImm11 [2] $end
$var wire 1 l% sImm11 [1] $end
$var wire 1 m% sImm11 [0] $end
$var wire 1 b$ BSrc [1] $end
$var wire 1 c$ BSrc [0] $end
$var wire 1 h$ Oper [3] $end
$var wire 1 i$ Oper [2] $end
$var wire 1 j$ Oper [1] $end
$var wire 1 k$ Oper [0] $end
$var wire 1 d$ BranchTaken [3] $end
$var wire 1 e$ BranchTaken [2] $end
$var wire 1 f$ BranchTaken [1] $end
$var wire 1 g$ BranchTaken [0] $end
$var wire 1 Y$ ImmSrc $end
$var wire 1 \$ ALUJmp $end
$var wire 1 ~% invA $end
$var wire 1 !& invB $end
$var wire 1 [$ ALUSign $end
$var wire 1 "& cin $end
$var wire 1 W$ HaltSig $end
$var wire 1 {! PC_Next [15] $end
$var wire 1 |! PC_Next [14] $end
$var wire 1 }! PC_Next [13] $end
$var wire 1 ~! PC_Next [12] $end
$var wire 1 !" PC_Next [11] $end
$var wire 1 "" PC_Next [10] $end
$var wire 1 #" PC_Next [9] $end
$var wire 1 $" PC_Next [8] $end
$var wire 1 %" PC_Next [7] $end
$var wire 1 &" PC_Next [6] $end
$var wire 1 '" PC_Next [5] $end
$var wire 1 (" PC_Next [4] $end
$var wire 1 )" PC_Next [3] $end
$var wire 1 *" PC_Next [2] $end
$var wire 1 +" PC_Next [1] $end
$var wire 1 ," PC_Next [0] $end
$var wire 1 1& ALU_Out [15] $end
$var wire 1 2& ALU_Out [14] $end
$var wire 1 3& ALU_Out [13] $end
$var wire 1 4& ALU_Out [12] $end
$var wire 1 5& ALU_Out [11] $end
$var wire 1 6& ALU_Out [10] $end
$var wire 1 7& ALU_Out [9] $end
$var wire 1 8& ALU_Out [8] $end
$var wire 1 9& ALU_Out [7] $end
$var wire 1 :& ALU_Out [6] $end
$var wire 1 ;& ALU_Out [5] $end
$var wire 1 <& ALU_Out [4] $end
$var wire 1 =& ALU_Out [3] $end
$var wire 1 >& ALU_Out [2] $end
$var wire 1 ?& ALU_Out [1] $end
$var wire 1 @& ALU_Out [0] $end
$var wire 1 /& BrchCnd $end
$var wire 1 66 ALUIn [15] $end
$var wire 1 76 ALUIn [14] $end
$var wire 1 86 ALUIn [13] $end
$var wire 1 96 ALUIn [12] $end
$var wire 1 :6 ALUIn [11] $end
$var wire 1 ;6 ALUIn [10] $end
$var wire 1 <6 ALUIn [9] $end
$var wire 1 =6 ALUIn [8] $end
$var wire 1 >6 ALUIn [7] $end
$var wire 1 ?6 ALUIn [6] $end
$var wire 1 @6 ALUIn [5] $end
$var wire 1 A6 ALUIn [4] $end
$var wire 1 B6 ALUIn [3] $end
$var wire 1 C6 ALUIn [2] $end
$var wire 1 D6 ALUIn [1] $end
$var wire 1 E6 ALUIn [0] $end
$var wire 1 F6 PC_I [15] $end
$var wire 1 G6 PC_I [14] $end
$var wire 1 H6 PC_I [13] $end
$var wire 1 I6 PC_I [12] $end
$var wire 1 J6 PC_I [11] $end
$var wire 1 K6 PC_I [10] $end
$var wire 1 L6 PC_I [9] $end
$var wire 1 M6 PC_I [8] $end
$var wire 1 N6 PC_I [7] $end
$var wire 1 O6 PC_I [6] $end
$var wire 1 P6 PC_I [5] $end
$var wire 1 Q6 PC_I [4] $end
$var wire 1 R6 PC_I [3] $end
$var wire 1 S6 PC_I [2] $end
$var wire 1 T6 PC_I [1] $end
$var wire 1 U6 PC_I [0] $end
$var wire 1 V6 PC_Branch [15] $end
$var wire 1 W6 PC_Branch [14] $end
$var wire 1 X6 PC_Branch [13] $end
$var wire 1 Y6 PC_Branch [12] $end
$var wire 1 Z6 PC_Branch [11] $end
$var wire 1 [6 PC_Branch [10] $end
$var wire 1 \6 PC_Branch [9] $end
$var wire 1 ]6 PC_Branch [8] $end
$var wire 1 ^6 PC_Branch [7] $end
$var wire 1 _6 PC_Branch [6] $end
$var wire 1 `6 PC_Branch [5] $end
$var wire 1 a6 PC_Branch [4] $end
$var wire 1 b6 PC_Branch [3] $end
$var wire 1 c6 PC_Branch [2] $end
$var wire 1 d6 PC_Branch [1] $end
$var wire 1 e6 PC_Branch [0] $end
$var wire 1 f6 Branch [15] $end
$var wire 1 g6 Branch [14] $end
$var wire 1 h6 Branch [13] $end
$var wire 1 i6 Branch [12] $end
$var wire 1 j6 Branch [11] $end
$var wire 1 k6 Branch [10] $end
$var wire 1 l6 Branch [9] $end
$var wire 1 m6 Branch [8] $end
$var wire 1 n6 Branch [7] $end
$var wire 1 o6 Branch [6] $end
$var wire 1 p6 Branch [5] $end
$var wire 1 q6 Branch [4] $end
$var wire 1 r6 Branch [3] $end
$var wire 1 s6 Branch [2] $end
$var wire 1 t6 Branch [1] $end
$var wire 1 u6 Branch [0] $end
$var wire 1 v6 SF $end
$var wire 1 w6 CF $end
$var wire 1 x6 OF $end
$var wire 1 y6 ZF $end

$scope module pc_adder $end
$var parameter 32 z6 N $end
$var wire 1 f6 sum [15] $end
$var wire 1 g6 sum [14] $end
$var wire 1 h6 sum [13] $end
$var wire 1 i6 sum [12] $end
$var wire 1 j6 sum [11] $end
$var wire 1 k6 sum [10] $end
$var wire 1 l6 sum [9] $end
$var wire 1 m6 sum [8] $end
$var wire 1 n6 sum [7] $end
$var wire 1 o6 sum [6] $end
$var wire 1 p6 sum [5] $end
$var wire 1 q6 sum [4] $end
$var wire 1 r6 sum [3] $end
$var wire 1 s6 sum [2] $end
$var wire 1 t6 sum [1] $end
$var wire 1 u6 sum [0] $end
$var wire 1 {6 c_out $end
$var wire 1 n% a [15] $end
$var wire 1 o% a [14] $end
$var wire 1 p% a [13] $end
$var wire 1 q% a [12] $end
$var wire 1 r% a [11] $end
$var wire 1 s% a [10] $end
$var wire 1 t% a [9] $end
$var wire 1 u% a [8] $end
$var wire 1 v% a [7] $end
$var wire 1 w% a [6] $end
$var wire 1 x% a [5] $end
$var wire 1 y% a [4] $end
$var wire 1 z% a [3] $end
$var wire 1 {% a [2] $end
$var wire 1 |% a [1] $end
$var wire 1 }% a [0] $end
$var wire 1 F6 b [15] $end
$var wire 1 G6 b [14] $end
$var wire 1 H6 b [13] $end
$var wire 1 I6 b [12] $end
$var wire 1 J6 b [11] $end
$var wire 1 K6 b [10] $end
$var wire 1 L6 b [9] $end
$var wire 1 M6 b [8] $end
$var wire 1 N6 b [7] $end
$var wire 1 O6 b [6] $end
$var wire 1 P6 b [5] $end
$var wire 1 Q6 b [4] $end
$var wire 1 R6 b [3] $end
$var wire 1 S6 b [2] $end
$var wire 1 T6 b [1] $end
$var wire 1 U6 b [0] $end
$var wire 1 |6 c_in $end
$var wire 1 }6 carries [2] $end
$var wire 1 ~6 carries [1] $end
$var wire 1 !7 carries [0] $end

$scope module cla[3] $end
$var parameter 32 "7 N $end
$var wire 1 f6 sum [3] $end
$var wire 1 g6 sum [2] $end
$var wire 1 h6 sum [1] $end
$var wire 1 i6 sum [0] $end
$var wire 1 {6 c_out $end
$var wire 1 n% a [3] $end
$var wire 1 o% a [2] $end
$var wire 1 p% a [1] $end
$var wire 1 q% a [0] $end
$var wire 1 F6 b [3] $end
$var wire 1 G6 b [2] $end
$var wire 1 H6 b [1] $end
$var wire 1 I6 b [0] $end
$var wire 1 }6 c_in $end
$var wire 1 #7 p [3] $end
$var wire 1 $7 p [2] $end
$var wire 1 %7 p [1] $end
$var wire 1 &7 p [0] $end
$var wire 1 '7 ng [3] $end
$var wire 1 (7 ng [2] $end
$var wire 1 )7 ng [1] $end
$var wire 1 *7 ng [0] $end
$var wire 1 +7 carries [4] $end
$var wire 1 ,7 carries [3] $end
$var wire 1 -7 carries [2] $end
$var wire 1 .7 carries [1] $end
$var wire 1 /7 carries [0] $end
$var wire 1 07 cp [3] $end
$var wire 1 17 cp [2] $end
$var wire 1 27 cp [1] $end
$var wire 1 37 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 #7 out $end
$var wire 1 n% in1 $end
$var wire 1 F6 in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 $7 out $end
$var wire 1 o% in1 $end
$var wire 1 G6 in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 %7 out $end
$var wire 1 p% in1 $end
$var wire 1 H6 in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 &7 out $end
$var wire 1 q% in1 $end
$var wire 1 I6 in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 '7 out $end
$var wire 1 n% in1 $end
$var wire 1 F6 in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 (7 out $end
$var wire 1 o% in1 $end
$var wire 1 G6 in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 )7 out $end
$var wire 1 p% in1 $end
$var wire 1 H6 in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 *7 out $end
$var wire 1 q% in1 $end
$var wire 1 I6 in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 07 out $end
$var wire 1 #7 in1 $end
$var wire 1 ,7 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 17 out $end
$var wire 1 $7 in1 $end
$var wire 1 -7 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 27 out $end
$var wire 1 %7 in1 $end
$var wire 1 .7 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 37 out $end
$var wire 1 &7 in1 $end
$var wire 1 }6 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 {6 out $end
$var wire 1 07 in1 $end
$var wire 1 '7 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 ,7 out $end
$var wire 1 17 in1 $end
$var wire 1 (7 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 -7 out $end
$var wire 1 27 in1 $end
$var wire 1 )7 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 .7 out $end
$var wire 1 37 in1 $end
$var wire 1 *7 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 f6 s $end
$var wire 1 47 c_out $end
$var wire 1 n% a $end
$var wire 1 F6 b $end
$var wire 1 ,7 c_in $end
$var wire 1 57 AxorB $end
$var wire 1 67 CnandAB $end
$var wire 1 77 AnandB $end

$scope module xor_1 $end
$var wire 1 57 out $end
$var wire 1 n% in1 $end
$var wire 1 F6 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 f6 out $end
$var wire 1 57 in1 $end
$var wire 1 ,7 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 67 out $end
$var wire 1 57 in1 $end
$var wire 1 ,7 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 77 out $end
$var wire 1 n% in1 $end
$var wire 1 F6 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 47 out $end
$var wire 1 77 in1 $end
$var wire 1 67 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 g6 s $end
$var wire 1 87 c_out $end
$var wire 1 o% a $end
$var wire 1 G6 b $end
$var wire 1 -7 c_in $end
$var wire 1 97 AxorB $end
$var wire 1 :7 CnandAB $end
$var wire 1 ;7 AnandB $end

$scope module xor_1 $end
$var wire 1 97 out $end
$var wire 1 o% in1 $end
$var wire 1 G6 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 g6 out $end
$var wire 1 97 in1 $end
$var wire 1 -7 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 :7 out $end
$var wire 1 97 in1 $end
$var wire 1 -7 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 ;7 out $end
$var wire 1 o% in1 $end
$var wire 1 G6 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 87 out $end
$var wire 1 ;7 in1 $end
$var wire 1 :7 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 h6 s $end
$var wire 1 <7 c_out $end
$var wire 1 p% a $end
$var wire 1 H6 b $end
$var wire 1 .7 c_in $end
$var wire 1 =7 AxorB $end
$var wire 1 >7 CnandAB $end
$var wire 1 ?7 AnandB $end

$scope module xor_1 $end
$var wire 1 =7 out $end
$var wire 1 p% in1 $end
$var wire 1 H6 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 h6 out $end
$var wire 1 =7 in1 $end
$var wire 1 .7 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 >7 out $end
$var wire 1 =7 in1 $end
$var wire 1 .7 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 ?7 out $end
$var wire 1 p% in1 $end
$var wire 1 H6 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 <7 out $end
$var wire 1 ?7 in1 $end
$var wire 1 >7 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 i6 s $end
$var wire 1 @7 c_out $end
$var wire 1 q% a $end
$var wire 1 I6 b $end
$var wire 1 }6 c_in $end
$var wire 1 A7 AxorB $end
$var wire 1 B7 CnandAB $end
$var wire 1 C7 AnandB $end

$scope module xor_1 $end
$var wire 1 A7 out $end
$var wire 1 q% in1 $end
$var wire 1 I6 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 i6 out $end
$var wire 1 A7 in1 $end
$var wire 1 }6 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 B7 out $end
$var wire 1 A7 in1 $end
$var wire 1 }6 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 C7 out $end
$var wire 1 q% in1 $end
$var wire 1 I6 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 @7 out $end
$var wire 1 C7 in1 $end
$var wire 1 B7 in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[2] $end
$var parameter 32 D7 N $end
$var wire 1 j6 sum [3] $end
$var wire 1 k6 sum [2] $end
$var wire 1 l6 sum [1] $end
$var wire 1 m6 sum [0] $end
$var wire 1 }6 c_out $end
$var wire 1 r% a [3] $end
$var wire 1 s% a [2] $end
$var wire 1 t% a [1] $end
$var wire 1 u% a [0] $end
$var wire 1 J6 b [3] $end
$var wire 1 K6 b [2] $end
$var wire 1 L6 b [1] $end
$var wire 1 M6 b [0] $end
$var wire 1 ~6 c_in $end
$var wire 1 E7 p [3] $end
$var wire 1 F7 p [2] $end
$var wire 1 G7 p [1] $end
$var wire 1 H7 p [0] $end
$var wire 1 I7 ng [3] $end
$var wire 1 J7 ng [2] $end
$var wire 1 K7 ng [1] $end
$var wire 1 L7 ng [0] $end
$var wire 1 M7 carries [4] $end
$var wire 1 N7 carries [3] $end
$var wire 1 O7 carries [2] $end
$var wire 1 P7 carries [1] $end
$var wire 1 Q7 carries [0] $end
$var wire 1 R7 cp [3] $end
$var wire 1 S7 cp [2] $end
$var wire 1 T7 cp [1] $end
$var wire 1 U7 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 E7 out $end
$var wire 1 r% in1 $end
$var wire 1 J6 in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 F7 out $end
$var wire 1 s% in1 $end
$var wire 1 K6 in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 G7 out $end
$var wire 1 t% in1 $end
$var wire 1 L6 in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 H7 out $end
$var wire 1 u% in1 $end
$var wire 1 M6 in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 I7 out $end
$var wire 1 r% in1 $end
$var wire 1 J6 in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 J7 out $end
$var wire 1 s% in1 $end
$var wire 1 K6 in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 K7 out $end
$var wire 1 t% in1 $end
$var wire 1 L6 in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 L7 out $end
$var wire 1 u% in1 $end
$var wire 1 M6 in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 R7 out $end
$var wire 1 E7 in1 $end
$var wire 1 N7 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 S7 out $end
$var wire 1 F7 in1 $end
$var wire 1 O7 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 T7 out $end
$var wire 1 G7 in1 $end
$var wire 1 P7 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 U7 out $end
$var wire 1 H7 in1 $end
$var wire 1 ~6 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 }6 out $end
$var wire 1 R7 in1 $end
$var wire 1 I7 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 N7 out $end
$var wire 1 S7 in1 $end
$var wire 1 J7 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 O7 out $end
$var wire 1 T7 in1 $end
$var wire 1 K7 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 P7 out $end
$var wire 1 U7 in1 $end
$var wire 1 L7 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 j6 s $end
$var wire 1 V7 c_out $end
$var wire 1 r% a $end
$var wire 1 J6 b $end
$var wire 1 N7 c_in $end
$var wire 1 W7 AxorB $end
$var wire 1 X7 CnandAB $end
$var wire 1 Y7 AnandB $end

$scope module xor_1 $end
$var wire 1 W7 out $end
$var wire 1 r% in1 $end
$var wire 1 J6 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 j6 out $end
$var wire 1 W7 in1 $end
$var wire 1 N7 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 X7 out $end
$var wire 1 W7 in1 $end
$var wire 1 N7 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 Y7 out $end
$var wire 1 r% in1 $end
$var wire 1 J6 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 V7 out $end
$var wire 1 Y7 in1 $end
$var wire 1 X7 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 k6 s $end
$var wire 1 Z7 c_out $end
$var wire 1 s% a $end
$var wire 1 K6 b $end
$var wire 1 O7 c_in $end
$var wire 1 [7 AxorB $end
$var wire 1 \7 CnandAB $end
$var wire 1 ]7 AnandB $end

$scope module xor_1 $end
$var wire 1 [7 out $end
$var wire 1 s% in1 $end
$var wire 1 K6 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 k6 out $end
$var wire 1 [7 in1 $end
$var wire 1 O7 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 \7 out $end
$var wire 1 [7 in1 $end
$var wire 1 O7 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 ]7 out $end
$var wire 1 s% in1 $end
$var wire 1 K6 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 Z7 out $end
$var wire 1 ]7 in1 $end
$var wire 1 \7 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 l6 s $end
$var wire 1 ^7 c_out $end
$var wire 1 t% a $end
$var wire 1 L6 b $end
$var wire 1 P7 c_in $end
$var wire 1 _7 AxorB $end
$var wire 1 `7 CnandAB $end
$var wire 1 a7 AnandB $end

$scope module xor_1 $end
$var wire 1 _7 out $end
$var wire 1 t% in1 $end
$var wire 1 L6 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 l6 out $end
$var wire 1 _7 in1 $end
$var wire 1 P7 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 `7 out $end
$var wire 1 _7 in1 $end
$var wire 1 P7 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 a7 out $end
$var wire 1 t% in1 $end
$var wire 1 L6 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 ^7 out $end
$var wire 1 a7 in1 $end
$var wire 1 `7 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 m6 s $end
$var wire 1 b7 c_out $end
$var wire 1 u% a $end
$var wire 1 M6 b $end
$var wire 1 ~6 c_in $end
$var wire 1 c7 AxorB $end
$var wire 1 d7 CnandAB $end
$var wire 1 e7 AnandB $end

$scope module xor_1 $end
$var wire 1 c7 out $end
$var wire 1 u% in1 $end
$var wire 1 M6 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 m6 out $end
$var wire 1 c7 in1 $end
$var wire 1 ~6 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 d7 out $end
$var wire 1 c7 in1 $end
$var wire 1 ~6 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 e7 out $end
$var wire 1 u% in1 $end
$var wire 1 M6 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 b7 out $end
$var wire 1 e7 in1 $end
$var wire 1 d7 in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[1] $end
$var parameter 32 f7 N $end
$var wire 1 n6 sum [3] $end
$var wire 1 o6 sum [2] $end
$var wire 1 p6 sum [1] $end
$var wire 1 q6 sum [0] $end
$var wire 1 ~6 c_out $end
$var wire 1 v% a [3] $end
$var wire 1 w% a [2] $end
$var wire 1 x% a [1] $end
$var wire 1 y% a [0] $end
$var wire 1 N6 b [3] $end
$var wire 1 O6 b [2] $end
$var wire 1 P6 b [1] $end
$var wire 1 Q6 b [0] $end
$var wire 1 !7 c_in $end
$var wire 1 g7 p [3] $end
$var wire 1 h7 p [2] $end
$var wire 1 i7 p [1] $end
$var wire 1 j7 p [0] $end
$var wire 1 k7 ng [3] $end
$var wire 1 l7 ng [2] $end
$var wire 1 m7 ng [1] $end
$var wire 1 n7 ng [0] $end
$var wire 1 o7 carries [4] $end
$var wire 1 p7 carries [3] $end
$var wire 1 q7 carries [2] $end
$var wire 1 r7 carries [1] $end
$var wire 1 s7 carries [0] $end
$var wire 1 t7 cp [3] $end
$var wire 1 u7 cp [2] $end
$var wire 1 v7 cp [1] $end
$var wire 1 w7 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 g7 out $end
$var wire 1 v% in1 $end
$var wire 1 N6 in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 h7 out $end
$var wire 1 w% in1 $end
$var wire 1 O6 in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 i7 out $end
$var wire 1 x% in1 $end
$var wire 1 P6 in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 j7 out $end
$var wire 1 y% in1 $end
$var wire 1 Q6 in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 k7 out $end
$var wire 1 v% in1 $end
$var wire 1 N6 in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 l7 out $end
$var wire 1 w% in1 $end
$var wire 1 O6 in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 m7 out $end
$var wire 1 x% in1 $end
$var wire 1 P6 in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 n7 out $end
$var wire 1 y% in1 $end
$var wire 1 Q6 in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 t7 out $end
$var wire 1 g7 in1 $end
$var wire 1 p7 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 u7 out $end
$var wire 1 h7 in1 $end
$var wire 1 q7 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 v7 out $end
$var wire 1 i7 in1 $end
$var wire 1 r7 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 w7 out $end
$var wire 1 j7 in1 $end
$var wire 1 !7 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 ~6 out $end
$var wire 1 t7 in1 $end
$var wire 1 k7 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 p7 out $end
$var wire 1 u7 in1 $end
$var wire 1 l7 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 q7 out $end
$var wire 1 v7 in1 $end
$var wire 1 m7 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 r7 out $end
$var wire 1 w7 in1 $end
$var wire 1 n7 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 n6 s $end
$var wire 1 x7 c_out $end
$var wire 1 v% a $end
$var wire 1 N6 b $end
$var wire 1 p7 c_in $end
$var wire 1 y7 AxorB $end
$var wire 1 z7 CnandAB $end
$var wire 1 {7 AnandB $end

$scope module xor_1 $end
$var wire 1 y7 out $end
$var wire 1 v% in1 $end
$var wire 1 N6 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 n6 out $end
$var wire 1 y7 in1 $end
$var wire 1 p7 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 z7 out $end
$var wire 1 y7 in1 $end
$var wire 1 p7 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 {7 out $end
$var wire 1 v% in1 $end
$var wire 1 N6 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 x7 out $end
$var wire 1 {7 in1 $end
$var wire 1 z7 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 o6 s $end
$var wire 1 |7 c_out $end
$var wire 1 w% a $end
$var wire 1 O6 b $end
$var wire 1 q7 c_in $end
$var wire 1 }7 AxorB $end
$var wire 1 ~7 CnandAB $end
$var wire 1 !8 AnandB $end

$scope module xor_1 $end
$var wire 1 }7 out $end
$var wire 1 w% in1 $end
$var wire 1 O6 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 o6 out $end
$var wire 1 }7 in1 $end
$var wire 1 q7 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 ~7 out $end
$var wire 1 }7 in1 $end
$var wire 1 q7 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 !8 out $end
$var wire 1 w% in1 $end
$var wire 1 O6 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 |7 out $end
$var wire 1 !8 in1 $end
$var wire 1 ~7 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 p6 s $end
$var wire 1 "8 c_out $end
$var wire 1 x% a $end
$var wire 1 P6 b $end
$var wire 1 r7 c_in $end
$var wire 1 #8 AxorB $end
$var wire 1 $8 CnandAB $end
$var wire 1 %8 AnandB $end

$scope module xor_1 $end
$var wire 1 #8 out $end
$var wire 1 x% in1 $end
$var wire 1 P6 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 p6 out $end
$var wire 1 #8 in1 $end
$var wire 1 r7 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 $8 out $end
$var wire 1 #8 in1 $end
$var wire 1 r7 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 %8 out $end
$var wire 1 x% in1 $end
$var wire 1 P6 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 "8 out $end
$var wire 1 %8 in1 $end
$var wire 1 $8 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 q6 s $end
$var wire 1 &8 c_out $end
$var wire 1 y% a $end
$var wire 1 Q6 b $end
$var wire 1 !7 c_in $end
$var wire 1 '8 AxorB $end
$var wire 1 (8 CnandAB $end
$var wire 1 )8 AnandB $end

$scope module xor_1 $end
$var wire 1 '8 out $end
$var wire 1 y% in1 $end
$var wire 1 Q6 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 q6 out $end
$var wire 1 '8 in1 $end
$var wire 1 !7 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 (8 out $end
$var wire 1 '8 in1 $end
$var wire 1 !7 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 )8 out $end
$var wire 1 y% in1 $end
$var wire 1 Q6 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 &8 out $end
$var wire 1 )8 in1 $end
$var wire 1 (8 in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[0] $end
$var parameter 32 *8 N $end
$var wire 1 r6 sum [3] $end
$var wire 1 s6 sum [2] $end
$var wire 1 t6 sum [1] $end
$var wire 1 u6 sum [0] $end
$var wire 1 !7 c_out $end
$var wire 1 z% a [3] $end
$var wire 1 {% a [2] $end
$var wire 1 |% a [1] $end
$var wire 1 }% a [0] $end
$var wire 1 R6 b [3] $end
$var wire 1 S6 b [2] $end
$var wire 1 T6 b [1] $end
$var wire 1 U6 b [0] $end
$var wire 1 |6 c_in $end
$var wire 1 +8 p [3] $end
$var wire 1 ,8 p [2] $end
$var wire 1 -8 p [1] $end
$var wire 1 .8 p [0] $end
$var wire 1 /8 ng [3] $end
$var wire 1 08 ng [2] $end
$var wire 1 18 ng [1] $end
$var wire 1 28 ng [0] $end
$var wire 1 38 carries [4] $end
$var wire 1 48 carries [3] $end
$var wire 1 58 carries [2] $end
$var wire 1 68 carries [1] $end
$var wire 1 78 carries [0] $end
$var wire 1 88 cp [3] $end
$var wire 1 98 cp [2] $end
$var wire 1 :8 cp [1] $end
$var wire 1 ;8 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 +8 out $end
$var wire 1 z% in1 $end
$var wire 1 R6 in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 ,8 out $end
$var wire 1 {% in1 $end
$var wire 1 S6 in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 -8 out $end
$var wire 1 |% in1 $end
$var wire 1 T6 in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 .8 out $end
$var wire 1 }% in1 $end
$var wire 1 U6 in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 /8 out $end
$var wire 1 z% in1 $end
$var wire 1 R6 in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 08 out $end
$var wire 1 {% in1 $end
$var wire 1 S6 in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 18 out $end
$var wire 1 |% in1 $end
$var wire 1 T6 in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 28 out $end
$var wire 1 }% in1 $end
$var wire 1 U6 in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 88 out $end
$var wire 1 +8 in1 $end
$var wire 1 48 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 98 out $end
$var wire 1 ,8 in1 $end
$var wire 1 58 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 :8 out $end
$var wire 1 -8 in1 $end
$var wire 1 68 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 ;8 out $end
$var wire 1 .8 in1 $end
$var wire 1 |6 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 !7 out $end
$var wire 1 88 in1 $end
$var wire 1 /8 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 48 out $end
$var wire 1 98 in1 $end
$var wire 1 08 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 58 out $end
$var wire 1 :8 in1 $end
$var wire 1 18 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 68 out $end
$var wire 1 ;8 in1 $end
$var wire 1 28 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 r6 s $end
$var wire 1 <8 c_out $end
$var wire 1 z% a $end
$var wire 1 R6 b $end
$var wire 1 48 c_in $end
$var wire 1 =8 AxorB $end
$var wire 1 >8 CnandAB $end
$var wire 1 ?8 AnandB $end

$scope module xor_1 $end
$var wire 1 =8 out $end
$var wire 1 z% in1 $end
$var wire 1 R6 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 r6 out $end
$var wire 1 =8 in1 $end
$var wire 1 48 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 >8 out $end
$var wire 1 =8 in1 $end
$var wire 1 48 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 ?8 out $end
$var wire 1 z% in1 $end
$var wire 1 R6 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 <8 out $end
$var wire 1 ?8 in1 $end
$var wire 1 >8 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 s6 s $end
$var wire 1 @8 c_out $end
$var wire 1 {% a $end
$var wire 1 S6 b $end
$var wire 1 58 c_in $end
$var wire 1 A8 AxorB $end
$var wire 1 B8 CnandAB $end
$var wire 1 C8 AnandB $end

$scope module xor_1 $end
$var wire 1 A8 out $end
$var wire 1 {% in1 $end
$var wire 1 S6 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 s6 out $end
$var wire 1 A8 in1 $end
$var wire 1 58 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 B8 out $end
$var wire 1 A8 in1 $end
$var wire 1 58 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 C8 out $end
$var wire 1 {% in1 $end
$var wire 1 S6 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 @8 out $end
$var wire 1 C8 in1 $end
$var wire 1 B8 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 t6 s $end
$var wire 1 D8 c_out $end
$var wire 1 |% a $end
$var wire 1 T6 b $end
$var wire 1 68 c_in $end
$var wire 1 E8 AxorB $end
$var wire 1 F8 CnandAB $end
$var wire 1 G8 AnandB $end

$scope module xor_1 $end
$var wire 1 E8 out $end
$var wire 1 |% in1 $end
$var wire 1 T6 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 t6 out $end
$var wire 1 E8 in1 $end
$var wire 1 68 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 F8 out $end
$var wire 1 E8 in1 $end
$var wire 1 68 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 G8 out $end
$var wire 1 |% in1 $end
$var wire 1 T6 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 D8 out $end
$var wire 1 G8 in1 $end
$var wire 1 F8 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 u6 s $end
$var wire 1 H8 c_out $end
$var wire 1 }% a $end
$var wire 1 U6 b $end
$var wire 1 |6 c_in $end
$var wire 1 I8 AxorB $end
$var wire 1 J8 CnandAB $end
$var wire 1 K8 AnandB $end

$scope module xor_1 $end
$var wire 1 I8 out $end
$var wire 1 }% in1 $end
$var wire 1 U6 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 u6 out $end
$var wire 1 I8 in1 $end
$var wire 1 |6 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 J8 out $end
$var wire 1 I8 in1 $end
$var wire 1 |6 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 K8 out $end
$var wire 1 }% in1 $end
$var wire 1 U6 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 H8 out $end
$var wire 1 K8 in1 $end
$var wire 1 J8 in2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module alu1 $end
$var parameter 32 L8 OPERAND_WIDTH $end
$var parameter 32 M8 NUM_OPERATIONS $end
$var wire 1 l$ InA [15] $end
$var wire 1 m$ InA [14] $end
$var wire 1 n$ InA [13] $end
$var wire 1 o$ InA [12] $end
$var wire 1 p$ InA [11] $end
$var wire 1 q$ InA [10] $end
$var wire 1 r$ InA [9] $end
$var wire 1 s$ InA [8] $end
$var wire 1 t$ InA [7] $end
$var wire 1 u$ InA [6] $end
$var wire 1 v$ InA [5] $end
$var wire 1 w$ InA [4] $end
$var wire 1 x$ InA [3] $end
$var wire 1 y$ InA [2] $end
$var wire 1 z$ InA [1] $end
$var wire 1 {$ InA [0] $end
$var wire 1 66 InB [15] $end
$var wire 1 76 InB [14] $end
$var wire 1 86 InB [13] $end
$var wire 1 96 InB [12] $end
$var wire 1 :6 InB [11] $end
$var wire 1 ;6 InB [10] $end
$var wire 1 <6 InB [9] $end
$var wire 1 =6 InB [8] $end
$var wire 1 >6 InB [7] $end
$var wire 1 ?6 InB [6] $end
$var wire 1 @6 InB [5] $end
$var wire 1 A6 InB [4] $end
$var wire 1 B6 InB [3] $end
$var wire 1 C6 InB [2] $end
$var wire 1 D6 InB [1] $end
$var wire 1 E6 InB [0] $end
$var wire 1 "& Cin $end
$var wire 1 h$ Oper [3] $end
$var wire 1 i$ Oper [2] $end
$var wire 1 j$ Oper [1] $end
$var wire 1 k$ Oper [0] $end
$var wire 1 ~% invA $end
$var wire 1 !& invB $end
$var wire 1 [$ sign $end
$var reg 16 N8 Out [15:0] $end
$var wire 1 x6 OF $end
$var wire 1 y6 ZF $end
$var wire 1 w6 CF $end
$var wire 1 v6 SF $end
$var wire 1 O8 Cout $end
$var wire 1 P8 S [15] $end
$var wire 1 Q8 S [14] $end
$var wire 1 R8 S [13] $end
$var wire 1 S8 S [12] $end
$var wire 1 T8 S [11] $end
$var wire 1 U8 S [10] $end
$var wire 1 V8 S [9] $end
$var wire 1 W8 S [8] $end
$var wire 1 X8 S [7] $end
$var wire 1 Y8 S [6] $end
$var wire 1 Z8 S [5] $end
$var wire 1 [8 S [4] $end
$var wire 1 \8 S [3] $end
$var wire 1 ]8 S [2] $end
$var wire 1 ^8 S [1] $end
$var wire 1 _8 S [0] $end
$var wire 1 `8 ShOut [15] $end
$var wire 1 a8 ShOut [14] $end
$var wire 1 b8 ShOut [13] $end
$var wire 1 c8 ShOut [12] $end
$var wire 1 d8 ShOut [11] $end
$var wire 1 e8 ShOut [10] $end
$var wire 1 f8 ShOut [9] $end
$var wire 1 g8 ShOut [8] $end
$var wire 1 h8 ShOut [7] $end
$var wire 1 i8 ShOut [6] $end
$var wire 1 j8 ShOut [5] $end
$var wire 1 k8 ShOut [4] $end
$var wire 1 l8 ShOut [3] $end
$var wire 1 m8 ShOut [2] $end
$var wire 1 n8 ShOut [1] $end
$var wire 1 o8 ShOut [0] $end
$var wire 1 p8 BitOut [15] $end
$var wire 1 q8 BitOut [14] $end
$var wire 1 r8 BitOut [13] $end
$var wire 1 s8 BitOut [12] $end
$var wire 1 t8 BitOut [11] $end
$var wire 1 u8 BitOut [10] $end
$var wire 1 v8 BitOut [9] $end
$var wire 1 w8 BitOut [8] $end
$var wire 1 x8 BitOut [7] $end
$var wire 1 y8 BitOut [6] $end
$var wire 1 z8 BitOut [5] $end
$var wire 1 {8 BitOut [4] $end
$var wire 1 |8 BitOut [3] $end
$var wire 1 }8 BitOut [2] $end
$var wire 1 ~8 BitOut [1] $end
$var wire 1 !9 BitOut [0] $end
$var wire 1 "9 A [15] $end
$var wire 1 #9 A [14] $end
$var wire 1 $9 A [13] $end
$var wire 1 %9 A [12] $end
$var wire 1 &9 A [11] $end
$var wire 1 '9 A [10] $end
$var wire 1 (9 A [9] $end
$var wire 1 )9 A [8] $end
$var wire 1 *9 A [7] $end
$var wire 1 +9 A [6] $end
$var wire 1 ,9 A [5] $end
$var wire 1 -9 A [4] $end
$var wire 1 .9 A [3] $end
$var wire 1 /9 A [2] $end
$var wire 1 09 A [1] $end
$var wire 1 19 A [0] $end
$var wire 1 29 B [15] $end
$var wire 1 39 B [14] $end
$var wire 1 49 B [13] $end
$var wire 1 59 B [12] $end
$var wire 1 69 B [11] $end
$var wire 1 79 B [10] $end
$var wire 1 89 B [9] $end
$var wire 1 99 B [8] $end
$var wire 1 :9 B [7] $end
$var wire 1 ;9 B [6] $end
$var wire 1 <9 B [5] $end
$var wire 1 =9 B [4] $end
$var wire 1 >9 B [3] $end
$var wire 1 ?9 B [2] $end
$var wire 1 @9 B [1] $end
$var wire 1 A9 B [0] $end
$var wire 1 B9 sA [15] $end
$var wire 1 C9 sA [14] $end
$var wire 1 D9 sA [13] $end
$var wire 1 E9 sA [12] $end
$var wire 1 F9 sA [11] $end
$var wire 1 G9 sA [10] $end
$var wire 1 H9 sA [9] $end
$var wire 1 I9 sA [8] $end
$var wire 1 J9 sA [7] $end
$var wire 1 K9 sA [6] $end
$var wire 1 L9 sA [5] $end
$var wire 1 M9 sA [4] $end
$var wire 1 N9 sA [3] $end
$var wire 1 O9 sA [2] $end
$var wire 1 P9 sA [1] $end
$var wire 1 Q9 sA [0] $end
$var wire 1 R9 sB [15] $end
$var wire 1 S9 sB [14] $end
$var wire 1 T9 sB [13] $end
$var wire 1 U9 sB [12] $end
$var wire 1 V9 sB [11] $end
$var wire 1 W9 sB [10] $end
$var wire 1 X9 sB [9] $end
$var wire 1 Y9 sB [8] $end
$var wire 1 Z9 sB [7] $end
$var wire 1 [9 sB [6] $end
$var wire 1 \9 sB [5] $end
$var wire 1 ]9 sB [4] $end
$var wire 1 ^9 sB [3] $end
$var wire 1 _9 sB [2] $end
$var wire 1 `9 sB [1] $end
$var wire 1 a9 sB [0] $end

$scope module cla $end
$var parameter 32 b9 N $end
$var wire 1 P8 sum [15] $end
$var wire 1 Q8 sum [14] $end
$var wire 1 R8 sum [13] $end
$var wire 1 S8 sum [12] $end
$var wire 1 T8 sum [11] $end
$var wire 1 U8 sum [10] $end
$var wire 1 V8 sum [9] $end
$var wire 1 W8 sum [8] $end
$var wire 1 X8 sum [7] $end
$var wire 1 Y8 sum [6] $end
$var wire 1 Z8 sum [5] $end
$var wire 1 [8 sum [4] $end
$var wire 1 \8 sum [3] $end
$var wire 1 ]8 sum [2] $end
$var wire 1 ^8 sum [1] $end
$var wire 1 _8 sum [0] $end
$var wire 1 O8 c_out $end
$var wire 1 29 a [15] $end
$var wire 1 39 a [14] $end
$var wire 1 49 a [13] $end
$var wire 1 59 a [12] $end
$var wire 1 69 a [11] $end
$var wire 1 79 a [10] $end
$var wire 1 89 a [9] $end
$var wire 1 99 a [8] $end
$var wire 1 :9 a [7] $end
$var wire 1 ;9 a [6] $end
$var wire 1 <9 a [5] $end
$var wire 1 =9 a [4] $end
$var wire 1 >9 a [3] $end
$var wire 1 ?9 a [2] $end
$var wire 1 @9 a [1] $end
$var wire 1 A9 a [0] $end
$var wire 1 "9 b [15] $end
$var wire 1 #9 b [14] $end
$var wire 1 $9 b [13] $end
$var wire 1 %9 b [12] $end
$var wire 1 &9 b [11] $end
$var wire 1 '9 b [10] $end
$var wire 1 (9 b [9] $end
$var wire 1 )9 b [8] $end
$var wire 1 *9 b [7] $end
$var wire 1 +9 b [6] $end
$var wire 1 ,9 b [5] $end
$var wire 1 -9 b [4] $end
$var wire 1 .9 b [3] $end
$var wire 1 /9 b [2] $end
$var wire 1 09 b [1] $end
$var wire 1 19 b [0] $end
$var wire 1 "& c_in $end
$var wire 1 c9 carries [2] $end
$var wire 1 d9 carries [1] $end
$var wire 1 e9 carries [0] $end

$scope module cla[3] $end
$var parameter 32 f9 N $end
$var wire 1 P8 sum [3] $end
$var wire 1 Q8 sum [2] $end
$var wire 1 R8 sum [1] $end
$var wire 1 S8 sum [0] $end
$var wire 1 O8 c_out $end
$var wire 1 29 a [3] $end
$var wire 1 39 a [2] $end
$var wire 1 49 a [1] $end
$var wire 1 59 a [0] $end
$var wire 1 "9 b [3] $end
$var wire 1 #9 b [2] $end
$var wire 1 $9 b [1] $end
$var wire 1 %9 b [0] $end
$var wire 1 c9 c_in $end
$var wire 1 g9 p [3] $end
$var wire 1 h9 p [2] $end
$var wire 1 i9 p [1] $end
$var wire 1 j9 p [0] $end
$var wire 1 k9 ng [3] $end
$var wire 1 l9 ng [2] $end
$var wire 1 m9 ng [1] $end
$var wire 1 n9 ng [0] $end
$var wire 1 o9 carries [4] $end
$var wire 1 p9 carries [3] $end
$var wire 1 q9 carries [2] $end
$var wire 1 r9 carries [1] $end
$var wire 1 s9 carries [0] $end
$var wire 1 t9 cp [3] $end
$var wire 1 u9 cp [2] $end
$var wire 1 v9 cp [1] $end
$var wire 1 w9 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 g9 out $end
$var wire 1 29 in1 $end
$var wire 1 "9 in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 h9 out $end
$var wire 1 39 in1 $end
$var wire 1 #9 in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 i9 out $end
$var wire 1 49 in1 $end
$var wire 1 $9 in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 j9 out $end
$var wire 1 59 in1 $end
$var wire 1 %9 in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 k9 out $end
$var wire 1 29 in1 $end
$var wire 1 "9 in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 l9 out $end
$var wire 1 39 in1 $end
$var wire 1 #9 in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 m9 out $end
$var wire 1 49 in1 $end
$var wire 1 $9 in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 n9 out $end
$var wire 1 59 in1 $end
$var wire 1 %9 in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 t9 out $end
$var wire 1 g9 in1 $end
$var wire 1 p9 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 u9 out $end
$var wire 1 h9 in1 $end
$var wire 1 q9 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 v9 out $end
$var wire 1 i9 in1 $end
$var wire 1 r9 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 w9 out $end
$var wire 1 j9 in1 $end
$var wire 1 c9 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 O8 out $end
$var wire 1 t9 in1 $end
$var wire 1 k9 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 p9 out $end
$var wire 1 u9 in1 $end
$var wire 1 l9 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 q9 out $end
$var wire 1 v9 in1 $end
$var wire 1 m9 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 r9 out $end
$var wire 1 w9 in1 $end
$var wire 1 n9 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 P8 s $end
$var wire 1 x9 c_out $end
$var wire 1 29 a $end
$var wire 1 "9 b $end
$var wire 1 p9 c_in $end
$var wire 1 y9 AxorB $end
$var wire 1 z9 CnandAB $end
$var wire 1 {9 AnandB $end

$scope module xor_1 $end
$var wire 1 y9 out $end
$var wire 1 29 in1 $end
$var wire 1 "9 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 P8 out $end
$var wire 1 y9 in1 $end
$var wire 1 p9 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 z9 out $end
$var wire 1 y9 in1 $end
$var wire 1 p9 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 {9 out $end
$var wire 1 29 in1 $end
$var wire 1 "9 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 x9 out $end
$var wire 1 {9 in1 $end
$var wire 1 z9 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 Q8 s $end
$var wire 1 |9 c_out $end
$var wire 1 39 a $end
$var wire 1 #9 b $end
$var wire 1 q9 c_in $end
$var wire 1 }9 AxorB $end
$var wire 1 ~9 CnandAB $end
$var wire 1 !: AnandB $end

$scope module xor_1 $end
$var wire 1 }9 out $end
$var wire 1 39 in1 $end
$var wire 1 #9 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 Q8 out $end
$var wire 1 }9 in1 $end
$var wire 1 q9 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 ~9 out $end
$var wire 1 }9 in1 $end
$var wire 1 q9 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 !: out $end
$var wire 1 39 in1 $end
$var wire 1 #9 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 |9 out $end
$var wire 1 !: in1 $end
$var wire 1 ~9 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 R8 s $end
$var wire 1 ": c_out $end
$var wire 1 49 a $end
$var wire 1 $9 b $end
$var wire 1 r9 c_in $end
$var wire 1 #: AxorB $end
$var wire 1 $: CnandAB $end
$var wire 1 %: AnandB $end

$scope module xor_1 $end
$var wire 1 #: out $end
$var wire 1 49 in1 $end
$var wire 1 $9 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 R8 out $end
$var wire 1 #: in1 $end
$var wire 1 r9 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 $: out $end
$var wire 1 #: in1 $end
$var wire 1 r9 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 %: out $end
$var wire 1 49 in1 $end
$var wire 1 $9 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 ": out $end
$var wire 1 %: in1 $end
$var wire 1 $: in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 S8 s $end
$var wire 1 &: c_out $end
$var wire 1 59 a $end
$var wire 1 %9 b $end
$var wire 1 c9 c_in $end
$var wire 1 ': AxorB $end
$var wire 1 (: CnandAB $end
$var wire 1 ): AnandB $end

$scope module xor_1 $end
$var wire 1 ': out $end
$var wire 1 59 in1 $end
$var wire 1 %9 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 S8 out $end
$var wire 1 ': in1 $end
$var wire 1 c9 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 (: out $end
$var wire 1 ': in1 $end
$var wire 1 c9 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 ): out $end
$var wire 1 59 in1 $end
$var wire 1 %9 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 &: out $end
$var wire 1 ): in1 $end
$var wire 1 (: in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[2] $end
$var parameter 32 *: N $end
$var wire 1 T8 sum [3] $end
$var wire 1 U8 sum [2] $end
$var wire 1 V8 sum [1] $end
$var wire 1 W8 sum [0] $end
$var wire 1 c9 c_out $end
$var wire 1 69 a [3] $end
$var wire 1 79 a [2] $end
$var wire 1 89 a [1] $end
$var wire 1 99 a [0] $end
$var wire 1 &9 b [3] $end
$var wire 1 '9 b [2] $end
$var wire 1 (9 b [1] $end
$var wire 1 )9 b [0] $end
$var wire 1 d9 c_in $end
$var wire 1 +: p [3] $end
$var wire 1 ,: p [2] $end
$var wire 1 -: p [1] $end
$var wire 1 .: p [0] $end
$var wire 1 /: ng [3] $end
$var wire 1 0: ng [2] $end
$var wire 1 1: ng [1] $end
$var wire 1 2: ng [0] $end
$var wire 1 3: carries [4] $end
$var wire 1 4: carries [3] $end
$var wire 1 5: carries [2] $end
$var wire 1 6: carries [1] $end
$var wire 1 7: carries [0] $end
$var wire 1 8: cp [3] $end
$var wire 1 9: cp [2] $end
$var wire 1 :: cp [1] $end
$var wire 1 ;: cp [0] $end

$scope module xor_1[3] $end
$var wire 1 +: out $end
$var wire 1 69 in1 $end
$var wire 1 &9 in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 ,: out $end
$var wire 1 79 in1 $end
$var wire 1 '9 in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 -: out $end
$var wire 1 89 in1 $end
$var wire 1 (9 in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 .: out $end
$var wire 1 99 in1 $end
$var wire 1 )9 in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 /: out $end
$var wire 1 69 in1 $end
$var wire 1 &9 in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 0: out $end
$var wire 1 79 in1 $end
$var wire 1 '9 in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 1: out $end
$var wire 1 89 in1 $end
$var wire 1 (9 in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 2: out $end
$var wire 1 99 in1 $end
$var wire 1 )9 in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 8: out $end
$var wire 1 +: in1 $end
$var wire 1 4: in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 9: out $end
$var wire 1 ,: in1 $end
$var wire 1 5: in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 :: out $end
$var wire 1 -: in1 $end
$var wire 1 6: in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 ;: out $end
$var wire 1 .: in1 $end
$var wire 1 d9 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 c9 out $end
$var wire 1 8: in1 $end
$var wire 1 /: in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 4: out $end
$var wire 1 9: in1 $end
$var wire 1 0: in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 5: out $end
$var wire 1 :: in1 $end
$var wire 1 1: in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 6: out $end
$var wire 1 ;: in1 $end
$var wire 1 2: in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 T8 s $end
$var wire 1 <: c_out $end
$var wire 1 69 a $end
$var wire 1 &9 b $end
$var wire 1 4: c_in $end
$var wire 1 =: AxorB $end
$var wire 1 >: CnandAB $end
$var wire 1 ?: AnandB $end

$scope module xor_1 $end
$var wire 1 =: out $end
$var wire 1 69 in1 $end
$var wire 1 &9 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 T8 out $end
$var wire 1 =: in1 $end
$var wire 1 4: in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 >: out $end
$var wire 1 =: in1 $end
$var wire 1 4: in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 ?: out $end
$var wire 1 69 in1 $end
$var wire 1 &9 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 <: out $end
$var wire 1 ?: in1 $end
$var wire 1 >: in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 U8 s $end
$var wire 1 @: c_out $end
$var wire 1 79 a $end
$var wire 1 '9 b $end
$var wire 1 5: c_in $end
$var wire 1 A: AxorB $end
$var wire 1 B: CnandAB $end
$var wire 1 C: AnandB $end

$scope module xor_1 $end
$var wire 1 A: out $end
$var wire 1 79 in1 $end
$var wire 1 '9 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 U8 out $end
$var wire 1 A: in1 $end
$var wire 1 5: in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 B: out $end
$var wire 1 A: in1 $end
$var wire 1 5: in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 C: out $end
$var wire 1 79 in1 $end
$var wire 1 '9 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 @: out $end
$var wire 1 C: in1 $end
$var wire 1 B: in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 V8 s $end
$var wire 1 D: c_out $end
$var wire 1 89 a $end
$var wire 1 (9 b $end
$var wire 1 6: c_in $end
$var wire 1 E: AxorB $end
$var wire 1 F: CnandAB $end
$var wire 1 G: AnandB $end

$scope module xor_1 $end
$var wire 1 E: out $end
$var wire 1 89 in1 $end
$var wire 1 (9 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 V8 out $end
$var wire 1 E: in1 $end
$var wire 1 6: in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 F: out $end
$var wire 1 E: in1 $end
$var wire 1 6: in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 G: out $end
$var wire 1 89 in1 $end
$var wire 1 (9 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 D: out $end
$var wire 1 G: in1 $end
$var wire 1 F: in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 W8 s $end
$var wire 1 H: c_out $end
$var wire 1 99 a $end
$var wire 1 )9 b $end
$var wire 1 d9 c_in $end
$var wire 1 I: AxorB $end
$var wire 1 J: CnandAB $end
$var wire 1 K: AnandB $end

$scope module xor_1 $end
$var wire 1 I: out $end
$var wire 1 99 in1 $end
$var wire 1 )9 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 W8 out $end
$var wire 1 I: in1 $end
$var wire 1 d9 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 J: out $end
$var wire 1 I: in1 $end
$var wire 1 d9 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 K: out $end
$var wire 1 99 in1 $end
$var wire 1 )9 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 H: out $end
$var wire 1 K: in1 $end
$var wire 1 J: in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[1] $end
$var parameter 32 L: N $end
$var wire 1 X8 sum [3] $end
$var wire 1 Y8 sum [2] $end
$var wire 1 Z8 sum [1] $end
$var wire 1 [8 sum [0] $end
$var wire 1 d9 c_out $end
$var wire 1 :9 a [3] $end
$var wire 1 ;9 a [2] $end
$var wire 1 <9 a [1] $end
$var wire 1 =9 a [0] $end
$var wire 1 *9 b [3] $end
$var wire 1 +9 b [2] $end
$var wire 1 ,9 b [1] $end
$var wire 1 -9 b [0] $end
$var wire 1 e9 c_in $end
$var wire 1 M: p [3] $end
$var wire 1 N: p [2] $end
$var wire 1 O: p [1] $end
$var wire 1 P: p [0] $end
$var wire 1 Q: ng [3] $end
$var wire 1 R: ng [2] $end
$var wire 1 S: ng [1] $end
$var wire 1 T: ng [0] $end
$var wire 1 U: carries [4] $end
$var wire 1 V: carries [3] $end
$var wire 1 W: carries [2] $end
$var wire 1 X: carries [1] $end
$var wire 1 Y: carries [0] $end
$var wire 1 Z: cp [3] $end
$var wire 1 [: cp [2] $end
$var wire 1 \: cp [1] $end
$var wire 1 ]: cp [0] $end

$scope module xor_1[3] $end
$var wire 1 M: out $end
$var wire 1 :9 in1 $end
$var wire 1 *9 in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 N: out $end
$var wire 1 ;9 in1 $end
$var wire 1 +9 in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 O: out $end
$var wire 1 <9 in1 $end
$var wire 1 ,9 in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 P: out $end
$var wire 1 =9 in1 $end
$var wire 1 -9 in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 Q: out $end
$var wire 1 :9 in1 $end
$var wire 1 *9 in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 R: out $end
$var wire 1 ;9 in1 $end
$var wire 1 +9 in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 S: out $end
$var wire 1 <9 in1 $end
$var wire 1 ,9 in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 T: out $end
$var wire 1 =9 in1 $end
$var wire 1 -9 in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 Z: out $end
$var wire 1 M: in1 $end
$var wire 1 V: in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 [: out $end
$var wire 1 N: in1 $end
$var wire 1 W: in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 \: out $end
$var wire 1 O: in1 $end
$var wire 1 X: in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 ]: out $end
$var wire 1 P: in1 $end
$var wire 1 e9 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 d9 out $end
$var wire 1 Z: in1 $end
$var wire 1 Q: in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 V: out $end
$var wire 1 [: in1 $end
$var wire 1 R: in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 W: out $end
$var wire 1 \: in1 $end
$var wire 1 S: in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 X: out $end
$var wire 1 ]: in1 $end
$var wire 1 T: in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 X8 s $end
$var wire 1 ^: c_out $end
$var wire 1 :9 a $end
$var wire 1 *9 b $end
$var wire 1 V: c_in $end
$var wire 1 _: AxorB $end
$var wire 1 `: CnandAB $end
$var wire 1 a: AnandB $end

$scope module xor_1 $end
$var wire 1 _: out $end
$var wire 1 :9 in1 $end
$var wire 1 *9 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 X8 out $end
$var wire 1 _: in1 $end
$var wire 1 V: in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 `: out $end
$var wire 1 _: in1 $end
$var wire 1 V: in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 a: out $end
$var wire 1 :9 in1 $end
$var wire 1 *9 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 ^: out $end
$var wire 1 a: in1 $end
$var wire 1 `: in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 Y8 s $end
$var wire 1 b: c_out $end
$var wire 1 ;9 a $end
$var wire 1 +9 b $end
$var wire 1 W: c_in $end
$var wire 1 c: AxorB $end
$var wire 1 d: CnandAB $end
$var wire 1 e: AnandB $end

$scope module xor_1 $end
$var wire 1 c: out $end
$var wire 1 ;9 in1 $end
$var wire 1 +9 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 Y8 out $end
$var wire 1 c: in1 $end
$var wire 1 W: in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 d: out $end
$var wire 1 c: in1 $end
$var wire 1 W: in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 e: out $end
$var wire 1 ;9 in1 $end
$var wire 1 +9 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 b: out $end
$var wire 1 e: in1 $end
$var wire 1 d: in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 Z8 s $end
$var wire 1 f: c_out $end
$var wire 1 <9 a $end
$var wire 1 ,9 b $end
$var wire 1 X: c_in $end
$var wire 1 g: AxorB $end
$var wire 1 h: CnandAB $end
$var wire 1 i: AnandB $end

$scope module xor_1 $end
$var wire 1 g: out $end
$var wire 1 <9 in1 $end
$var wire 1 ,9 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 Z8 out $end
$var wire 1 g: in1 $end
$var wire 1 X: in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 h: out $end
$var wire 1 g: in1 $end
$var wire 1 X: in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 i: out $end
$var wire 1 <9 in1 $end
$var wire 1 ,9 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 f: out $end
$var wire 1 i: in1 $end
$var wire 1 h: in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 [8 s $end
$var wire 1 j: c_out $end
$var wire 1 =9 a $end
$var wire 1 -9 b $end
$var wire 1 e9 c_in $end
$var wire 1 k: AxorB $end
$var wire 1 l: CnandAB $end
$var wire 1 m: AnandB $end

$scope module xor_1 $end
$var wire 1 k: out $end
$var wire 1 =9 in1 $end
$var wire 1 -9 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 [8 out $end
$var wire 1 k: in1 $end
$var wire 1 e9 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 l: out $end
$var wire 1 k: in1 $end
$var wire 1 e9 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 m: out $end
$var wire 1 =9 in1 $end
$var wire 1 -9 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 j: out $end
$var wire 1 m: in1 $end
$var wire 1 l: in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[0] $end
$var parameter 32 n: N $end
$var wire 1 \8 sum [3] $end
$var wire 1 ]8 sum [2] $end
$var wire 1 ^8 sum [1] $end
$var wire 1 _8 sum [0] $end
$var wire 1 e9 c_out $end
$var wire 1 >9 a [3] $end
$var wire 1 ?9 a [2] $end
$var wire 1 @9 a [1] $end
$var wire 1 A9 a [0] $end
$var wire 1 .9 b [3] $end
$var wire 1 /9 b [2] $end
$var wire 1 09 b [1] $end
$var wire 1 19 b [0] $end
$var wire 1 "& c_in $end
$var wire 1 o: p [3] $end
$var wire 1 p: p [2] $end
$var wire 1 q: p [1] $end
$var wire 1 r: p [0] $end
$var wire 1 s: ng [3] $end
$var wire 1 t: ng [2] $end
$var wire 1 u: ng [1] $end
$var wire 1 v: ng [0] $end
$var wire 1 w: carries [4] $end
$var wire 1 x: carries [3] $end
$var wire 1 y: carries [2] $end
$var wire 1 z: carries [1] $end
$var wire 1 {: carries [0] $end
$var wire 1 |: cp [3] $end
$var wire 1 }: cp [2] $end
$var wire 1 ~: cp [1] $end
$var wire 1 !; cp [0] $end

$scope module xor_1[3] $end
$var wire 1 o: out $end
$var wire 1 >9 in1 $end
$var wire 1 .9 in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 p: out $end
$var wire 1 ?9 in1 $end
$var wire 1 /9 in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 q: out $end
$var wire 1 @9 in1 $end
$var wire 1 09 in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 r: out $end
$var wire 1 A9 in1 $end
$var wire 1 19 in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 s: out $end
$var wire 1 >9 in1 $end
$var wire 1 .9 in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 t: out $end
$var wire 1 ?9 in1 $end
$var wire 1 /9 in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 u: out $end
$var wire 1 @9 in1 $end
$var wire 1 09 in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 v: out $end
$var wire 1 A9 in1 $end
$var wire 1 19 in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 |: out $end
$var wire 1 o: in1 $end
$var wire 1 x: in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 }: out $end
$var wire 1 p: in1 $end
$var wire 1 y: in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 ~: out $end
$var wire 1 q: in1 $end
$var wire 1 z: in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 !; out $end
$var wire 1 r: in1 $end
$var wire 1 "& in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 e9 out $end
$var wire 1 |: in1 $end
$var wire 1 s: in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 x: out $end
$var wire 1 }: in1 $end
$var wire 1 t: in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 y: out $end
$var wire 1 ~: in1 $end
$var wire 1 u: in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 z: out $end
$var wire 1 !; in1 $end
$var wire 1 v: in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 \8 s $end
$var wire 1 "; c_out $end
$var wire 1 >9 a $end
$var wire 1 .9 b $end
$var wire 1 x: c_in $end
$var wire 1 #; AxorB $end
$var wire 1 $; CnandAB $end
$var wire 1 %; AnandB $end

$scope module xor_1 $end
$var wire 1 #; out $end
$var wire 1 >9 in1 $end
$var wire 1 .9 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 \8 out $end
$var wire 1 #; in1 $end
$var wire 1 x: in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 $; out $end
$var wire 1 #; in1 $end
$var wire 1 x: in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 %; out $end
$var wire 1 >9 in1 $end
$var wire 1 .9 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 "; out $end
$var wire 1 %; in1 $end
$var wire 1 $; in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 ]8 s $end
$var wire 1 &; c_out $end
$var wire 1 ?9 a $end
$var wire 1 /9 b $end
$var wire 1 y: c_in $end
$var wire 1 '; AxorB $end
$var wire 1 (; CnandAB $end
$var wire 1 ); AnandB $end

$scope module xor_1 $end
$var wire 1 '; out $end
$var wire 1 ?9 in1 $end
$var wire 1 /9 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 ]8 out $end
$var wire 1 '; in1 $end
$var wire 1 y: in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 (; out $end
$var wire 1 '; in1 $end
$var wire 1 y: in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 ); out $end
$var wire 1 ?9 in1 $end
$var wire 1 /9 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 &; out $end
$var wire 1 ); in1 $end
$var wire 1 (; in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 ^8 s $end
$var wire 1 *; c_out $end
$var wire 1 @9 a $end
$var wire 1 09 b $end
$var wire 1 z: c_in $end
$var wire 1 +; AxorB $end
$var wire 1 ,; CnandAB $end
$var wire 1 -; AnandB $end

$scope module xor_1 $end
$var wire 1 +; out $end
$var wire 1 @9 in1 $end
$var wire 1 09 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 ^8 out $end
$var wire 1 +; in1 $end
$var wire 1 z: in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 ,; out $end
$var wire 1 +; in1 $end
$var wire 1 z: in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 -; out $end
$var wire 1 @9 in1 $end
$var wire 1 09 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 *; out $end
$var wire 1 -; in1 $end
$var wire 1 ,; in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 _8 s $end
$var wire 1 .; c_out $end
$var wire 1 A9 a $end
$var wire 1 19 b $end
$var wire 1 "& c_in $end
$var wire 1 /; AxorB $end
$var wire 1 0; CnandAB $end
$var wire 1 1; AnandB $end

$scope module xor_1 $end
$var wire 1 /; out $end
$var wire 1 A9 in1 $end
$var wire 1 19 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 _8 out $end
$var wire 1 /; in1 $end
$var wire 1 "& in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 0; out $end
$var wire 1 /; in1 $end
$var wire 1 "& in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 1; out $end
$var wire 1 A9 in1 $end
$var wire 1 19 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 .; out $end
$var wire 1 1; in1 $end
$var wire 1 0; in2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module shift $end
$var parameter 32 2; OPERAND_WIDTH $end
$var parameter 32 3; SHAMT_WIDTH $end
$var parameter 32 4; NUM_OPERATIONS $end
$var wire 1 "9 In [15] $end
$var wire 1 #9 In [14] $end
$var wire 1 $9 In [13] $end
$var wire 1 %9 In [12] $end
$var wire 1 &9 In [11] $end
$var wire 1 '9 In [10] $end
$var wire 1 (9 In [9] $end
$var wire 1 )9 In [8] $end
$var wire 1 *9 In [7] $end
$var wire 1 +9 In [6] $end
$var wire 1 ,9 In [5] $end
$var wire 1 -9 In [4] $end
$var wire 1 .9 In [3] $end
$var wire 1 /9 In [2] $end
$var wire 1 09 In [1] $end
$var wire 1 19 In [0] $end
$var wire 1 >9 ShAmt [3] $end
$var wire 1 ?9 ShAmt [2] $end
$var wire 1 @9 ShAmt [1] $end
$var wire 1 A9 ShAmt [0] $end
$var wire 1 j$ Oper [1] $end
$var wire 1 k$ Oper [0] $end
$var wire 1 `8 Out [15] $end
$var wire 1 a8 Out [14] $end
$var wire 1 b8 Out [13] $end
$var wire 1 c8 Out [12] $end
$var wire 1 d8 Out [11] $end
$var wire 1 e8 Out [10] $end
$var wire 1 f8 Out [9] $end
$var wire 1 g8 Out [8] $end
$var wire 1 h8 Out [7] $end
$var wire 1 i8 Out [6] $end
$var wire 1 j8 Out [5] $end
$var wire 1 k8 Out [4] $end
$var wire 1 l8 Out [3] $end
$var wire 1 m8 Out [2] $end
$var wire 1 n8 Out [1] $end
$var wire 1 o8 Out [0] $end
$var wire 1 5; s0 [15] $end
$var wire 1 6; s0 [14] $end
$var wire 1 7; s0 [13] $end
$var wire 1 8; s0 [12] $end
$var wire 1 9; s0 [11] $end
$var wire 1 :; s0 [10] $end
$var wire 1 ;; s0 [9] $end
$var wire 1 <; s0 [8] $end
$var wire 1 =; s0 [7] $end
$var wire 1 >; s0 [6] $end
$var wire 1 ?; s0 [5] $end
$var wire 1 @; s0 [4] $end
$var wire 1 A; s0 [3] $end
$var wire 1 B; s0 [2] $end
$var wire 1 C; s0 [1] $end
$var wire 1 D; s0 [0] $end
$var wire 1 E; s1 [15] $end
$var wire 1 F; s1 [14] $end
$var wire 1 G; s1 [13] $end
$var wire 1 H; s1 [12] $end
$var wire 1 I; s1 [11] $end
$var wire 1 J; s1 [10] $end
$var wire 1 K; s1 [9] $end
$var wire 1 L; s1 [8] $end
$var wire 1 M; s1 [7] $end
$var wire 1 N; s1 [6] $end
$var wire 1 O; s1 [5] $end
$var wire 1 P; s1 [4] $end
$var wire 1 Q; s1 [3] $end
$var wire 1 R; s1 [2] $end
$var wire 1 S; s1 [1] $end
$var wire 1 T; s1 [0] $end
$var wire 1 U; s2 [15] $end
$var wire 1 V; s2 [14] $end
$var wire 1 W; s2 [13] $end
$var wire 1 X; s2 [12] $end
$var wire 1 Y; s2 [11] $end
$var wire 1 Z; s2 [10] $end
$var wire 1 [; s2 [9] $end
$var wire 1 \; s2 [8] $end
$var wire 1 ]; s2 [7] $end
$var wire 1 ^; s2 [6] $end
$var wire 1 _; s2 [5] $end
$var wire 1 `; s2 [4] $end
$var wire 1 a; s2 [3] $end
$var wire 1 b; s2 [2] $end
$var wire 1 c; s2 [1] $end
$var wire 1 d; s2 [0] $end
$var wire 1 e; s3 [15] $end
$var wire 1 f; s3 [14] $end
$var wire 1 g; s3 [13] $end
$var wire 1 h; s3 [12] $end
$var wire 1 i; s3 [11] $end
$var wire 1 j; s3 [10] $end
$var wire 1 k; s3 [9] $end
$var wire 1 l; s3 [8] $end
$var wire 1 m; s3 [7] $end
$var wire 1 n; s3 [6] $end
$var wire 1 o; s3 [5] $end
$var wire 1 p; s3 [4] $end
$var wire 1 q; s3 [3] $end
$var wire 1 r; s3 [2] $end
$var wire 1 s; s3 [1] $end
$var wire 1 t; s3 [0] $end
$var wire 1 u; temp_out_sh0 [15] $end
$var wire 1 v; temp_out_sh0 [14] $end
$var wire 1 w; temp_out_sh0 [13] $end
$var wire 1 x; temp_out_sh0 [12] $end
$var wire 1 y; temp_out_sh0 [11] $end
$var wire 1 z; temp_out_sh0 [10] $end
$var wire 1 {; temp_out_sh0 [9] $end
$var wire 1 |; temp_out_sh0 [8] $end
$var wire 1 }; temp_out_sh0 [7] $end
$var wire 1 ~; temp_out_sh0 [6] $end
$var wire 1 !< temp_out_sh0 [5] $end
$var wire 1 "< temp_out_sh0 [4] $end
$var wire 1 #< temp_out_sh0 [3] $end
$var wire 1 $< temp_out_sh0 [2] $end
$var wire 1 %< temp_out_sh0 [1] $end
$var wire 1 &< temp_out_sh0 [0] $end
$var wire 1 '< temp_out_sh1 [15] $end
$var wire 1 (< temp_out_sh1 [14] $end
$var wire 1 )< temp_out_sh1 [13] $end
$var wire 1 *< temp_out_sh1 [12] $end
$var wire 1 +< temp_out_sh1 [11] $end
$var wire 1 ,< temp_out_sh1 [10] $end
$var wire 1 -< temp_out_sh1 [9] $end
$var wire 1 .< temp_out_sh1 [8] $end
$var wire 1 /< temp_out_sh1 [7] $end
$var wire 1 0< temp_out_sh1 [6] $end
$var wire 1 1< temp_out_sh1 [5] $end
$var wire 1 2< temp_out_sh1 [4] $end
$var wire 1 3< temp_out_sh1 [3] $end
$var wire 1 4< temp_out_sh1 [2] $end
$var wire 1 5< temp_out_sh1 [1] $end
$var wire 1 6< temp_out_sh1 [0] $end
$var wire 1 7< temp_out_sh2 [15] $end
$var wire 1 8< temp_out_sh2 [14] $end
$var wire 1 9< temp_out_sh2 [13] $end
$var wire 1 :< temp_out_sh2 [12] $end
$var wire 1 ;< temp_out_sh2 [11] $end
$var wire 1 << temp_out_sh2 [10] $end
$var wire 1 =< temp_out_sh2 [9] $end
$var wire 1 >< temp_out_sh2 [8] $end
$var wire 1 ?< temp_out_sh2 [7] $end
$var wire 1 @< temp_out_sh2 [6] $end
$var wire 1 A< temp_out_sh2 [5] $end
$var wire 1 B< temp_out_sh2 [4] $end
$var wire 1 C< temp_out_sh2 [3] $end
$var wire 1 D< temp_out_sh2 [2] $end
$var wire 1 E< temp_out_sh2 [1] $end
$var wire 1 F< temp_out_sh2 [0] $end
$var wire 1 G< temp_out_sh3 [15] $end
$var wire 1 H< temp_out_sh3 [14] $end
$var wire 1 I< temp_out_sh3 [13] $end
$var wire 1 J< temp_out_sh3 [12] $end
$var wire 1 K< temp_out_sh3 [11] $end
$var wire 1 L< temp_out_sh3 [10] $end
$var wire 1 M< temp_out_sh3 [9] $end
$var wire 1 N< temp_out_sh3 [8] $end
$var wire 1 O< temp_out_sh3 [7] $end
$var wire 1 P< temp_out_sh3 [6] $end
$var wire 1 Q< temp_out_sh3 [5] $end
$var wire 1 R< temp_out_sh3 [4] $end
$var wire 1 S< temp_out_sh3 [3] $end
$var wire 1 T< temp_out_sh3 [2] $end
$var wire 1 U< temp_out_sh3 [1] $end
$var wire 1 V< temp_out_sh3 [0] $end

$scope module bs0 $end
$var wire 1 "9 in [15] $end
$var wire 1 #9 in [14] $end
$var wire 1 $9 in [13] $end
$var wire 1 %9 in [12] $end
$var wire 1 &9 in [11] $end
$var wire 1 '9 in [10] $end
$var wire 1 (9 in [9] $end
$var wire 1 )9 in [8] $end
$var wire 1 *9 in [7] $end
$var wire 1 +9 in [6] $end
$var wire 1 ,9 in [5] $end
$var wire 1 -9 in [4] $end
$var wire 1 .9 in [3] $end
$var wire 1 /9 in [2] $end
$var wire 1 09 in [1] $end
$var wire 1 19 in [0] $end
$var wire 1 j$ oper [1] $end
$var wire 1 k$ oper [0] $end
$var wire 1 u; out [15] $end
$var wire 1 v; out [14] $end
$var wire 1 w; out [13] $end
$var wire 1 x; out [12] $end
$var wire 1 y; out [11] $end
$var wire 1 z; out [10] $end
$var wire 1 {; out [9] $end
$var wire 1 |; out [8] $end
$var wire 1 }; out [7] $end
$var wire 1 ~; out [6] $end
$var wire 1 !< out [5] $end
$var wire 1 "< out [4] $end
$var wire 1 #< out [3] $end
$var wire 1 $< out [2] $end
$var wire 1 %< out [1] $end
$var wire 1 &< out [0] $end
$upscope $end

$scope module bs1 $end
$var wire 1 5; in [15] $end
$var wire 1 6; in [14] $end
$var wire 1 7; in [13] $end
$var wire 1 8; in [12] $end
$var wire 1 9; in [11] $end
$var wire 1 :; in [10] $end
$var wire 1 ;; in [9] $end
$var wire 1 <; in [8] $end
$var wire 1 =; in [7] $end
$var wire 1 >; in [6] $end
$var wire 1 ?; in [5] $end
$var wire 1 @; in [4] $end
$var wire 1 A; in [3] $end
$var wire 1 B; in [2] $end
$var wire 1 C; in [1] $end
$var wire 1 D; in [0] $end
$var wire 1 j$ oper [1] $end
$var wire 1 k$ oper [0] $end
$var wire 1 '< out [15] $end
$var wire 1 (< out [14] $end
$var wire 1 )< out [13] $end
$var wire 1 *< out [12] $end
$var wire 1 +< out [11] $end
$var wire 1 ,< out [10] $end
$var wire 1 -< out [9] $end
$var wire 1 .< out [8] $end
$var wire 1 /< out [7] $end
$var wire 1 0< out [6] $end
$var wire 1 1< out [5] $end
$var wire 1 2< out [4] $end
$var wire 1 3< out [3] $end
$var wire 1 4< out [2] $end
$var wire 1 5< out [1] $end
$var wire 1 6< out [0] $end
$upscope $end

$scope module bs2 $end
$var wire 1 E; in [15] $end
$var wire 1 F; in [14] $end
$var wire 1 G; in [13] $end
$var wire 1 H; in [12] $end
$var wire 1 I; in [11] $end
$var wire 1 J; in [10] $end
$var wire 1 K; in [9] $end
$var wire 1 L; in [8] $end
$var wire 1 M; in [7] $end
$var wire 1 N; in [6] $end
$var wire 1 O; in [5] $end
$var wire 1 P; in [4] $end
$var wire 1 Q; in [3] $end
$var wire 1 R; in [2] $end
$var wire 1 S; in [1] $end
$var wire 1 T; in [0] $end
$var wire 1 j$ oper [1] $end
$var wire 1 k$ oper [0] $end
$var wire 1 7< out [15] $end
$var wire 1 8< out [14] $end
$var wire 1 9< out [13] $end
$var wire 1 :< out [12] $end
$var wire 1 ;< out [11] $end
$var wire 1 << out [10] $end
$var wire 1 =< out [9] $end
$var wire 1 >< out [8] $end
$var wire 1 ?< out [7] $end
$var wire 1 @< out [6] $end
$var wire 1 A< out [5] $end
$var wire 1 B< out [4] $end
$var wire 1 C< out [3] $end
$var wire 1 D< out [2] $end
$var wire 1 E< out [1] $end
$var wire 1 F< out [0] $end
$upscope $end

$scope module bs3 $end
$var wire 1 U; in [15] $end
$var wire 1 V; in [14] $end
$var wire 1 W; in [13] $end
$var wire 1 X; in [12] $end
$var wire 1 Y; in [11] $end
$var wire 1 Z; in [10] $end
$var wire 1 [; in [9] $end
$var wire 1 \; in [8] $end
$var wire 1 ]; in [7] $end
$var wire 1 ^; in [6] $end
$var wire 1 _; in [5] $end
$var wire 1 `; in [4] $end
$var wire 1 a; in [3] $end
$var wire 1 b; in [2] $end
$var wire 1 c; in [1] $end
$var wire 1 d; in [0] $end
$var wire 1 j$ oper [1] $end
$var wire 1 k$ oper [0] $end
$var wire 1 G< out [15] $end
$var wire 1 H< out [14] $end
$var wire 1 I< out [13] $end
$var wire 1 J< out [12] $end
$var wire 1 K< out [11] $end
$var wire 1 L< out [10] $end
$var wire 1 M< out [9] $end
$var wire 1 N< out [8] $end
$var wire 1 O< out [7] $end
$var wire 1 P< out [6] $end
$var wire 1 Q< out [5] $end
$var wire 1 R< out [4] $end
$var wire 1 S< out [3] $end
$var wire 1 T< out [2] $end
$var wire 1 U< out [1] $end
$var wire 1 V< out [0] $end
$upscope $end
$upscope $end
$upscope $end

$scope module branch_ctrl $end
$var wire 1 v6 SF $end
$var wire 1 y6 ZF $end
$var wire 1 W< brch_instr [3] $end
$var wire 1 X< brch_instr [2] $end
$var wire 1 Y< brch_instr [1] $end
$var wire 1 Z< brch_instr [0] $end
$var wire 1 /& BrchCnd $end
$var reg 1 [< brch_sig $end
$upscope $end
$upscope $end

$scope module EXDM $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 |$ EX_RTData [15] $end
$var wire 1 }$ EX_RTData [14] $end
$var wire 1 ~$ EX_RTData [13] $end
$var wire 1 !% EX_RTData [12] $end
$var wire 1 "% EX_RTData [11] $end
$var wire 1 #% EX_RTData [10] $end
$var wire 1 $% EX_RTData [9] $end
$var wire 1 %% EX_RTData [8] $end
$var wire 1 &% EX_RTData [7] $end
$var wire 1 '% EX_RTData [6] $end
$var wire 1 (% EX_RTData [5] $end
$var wire 1 )% EX_RTData [4] $end
$var wire 1 *% EX_RTData [3] $end
$var wire 1 +% EX_RTData [2] $end
$var wire 1 ,% EX_RTData [1] $end
$var wire 1 -% EX_RTData [0] $end
$var wire 1 n% EX_PC [15] $end
$var wire 1 o% EX_PC [14] $end
$var wire 1 p% EX_PC [13] $end
$var wire 1 q% EX_PC [12] $end
$var wire 1 r% EX_PC [11] $end
$var wire 1 s% EX_PC [10] $end
$var wire 1 t% EX_PC [9] $end
$var wire 1 u% EX_PC [8] $end
$var wire 1 v% EX_PC [7] $end
$var wire 1 w% EX_PC [6] $end
$var wire 1 x% EX_PC [5] $end
$var wire 1 y% EX_PC [4] $end
$var wire 1 z% EX_PC [3] $end
$var wire 1 {% EX_PC [2] $end
$var wire 1 |% EX_PC [1] $end
$var wire 1 }% EX_PC [0] $end
$var wire 1 1& EX_ALU [15] $end
$var wire 1 2& EX_ALU [14] $end
$var wire 1 3& EX_ALU [13] $end
$var wire 1 4& EX_ALU [12] $end
$var wire 1 5& EX_ALU [11] $end
$var wire 1 6& EX_ALU [10] $end
$var wire 1 7& EX_ALU [9] $end
$var wire 1 8& EX_ALU [8] $end
$var wire 1 9& EX_ALU [7] $end
$var wire 1 :& EX_ALU [6] $end
$var wire 1 ;& EX_ALU [5] $end
$var wire 1 <& EX_ALU [4] $end
$var wire 1 =& EX_ALU [3] $end
$var wire 1 >& EX_ALU [2] $end
$var wire 1 ?& EX_ALU [1] $end
$var wire 1 @& EX_ALU [0] $end
$var wire 1 ]$ EX_MemWrt $end
$var wire 1 X$ EX_MemRead $end
$var wire 1 W$ EX_nHaltSig $end
$var wire 1 Q& EXDM_RTData [15] $end
$var wire 1 R& EXDM_RTData [14] $end
$var wire 1 S& EXDM_RTData [13] $end
$var wire 1 T& EXDM_RTData [12] $end
$var wire 1 U& EXDM_RTData [11] $end
$var wire 1 V& EXDM_RTData [10] $end
$var wire 1 W& EXDM_RTData [9] $end
$var wire 1 X& EXDM_RTData [8] $end
$var wire 1 Y& EXDM_RTData [7] $end
$var wire 1 Z& EXDM_RTData [6] $end
$var wire 1 [& EXDM_RTData [5] $end
$var wire 1 \& EXDM_RTData [4] $end
$var wire 1 ]& EXDM_RTData [3] $end
$var wire 1 ^& EXDM_RTData [2] $end
$var wire 1 _& EXDM_RTData [1] $end
$var wire 1 `& EXDM_RTData [0] $end
$var wire 1 a& EXDM_PC [15] $end
$var wire 1 b& EXDM_PC [14] $end
$var wire 1 c& EXDM_PC [13] $end
$var wire 1 d& EXDM_PC [12] $end
$var wire 1 e& EXDM_PC [11] $end
$var wire 1 f& EXDM_PC [10] $end
$var wire 1 g& EXDM_PC [9] $end
$var wire 1 h& EXDM_PC [8] $end
$var wire 1 i& EXDM_PC [7] $end
$var wire 1 j& EXDM_PC [6] $end
$var wire 1 k& EXDM_PC [5] $end
$var wire 1 l& EXDM_PC [4] $end
$var wire 1 m& EXDM_PC [3] $end
$var wire 1 n& EXDM_PC [2] $end
$var wire 1 o& EXDM_PC [1] $end
$var wire 1 p& EXDM_PC [0] $end
$var wire 1 A& EXDM_ALU [15] $end
$var wire 1 B& EXDM_ALU [14] $end
$var wire 1 C& EXDM_ALU [13] $end
$var wire 1 D& EXDM_ALU [12] $end
$var wire 1 E& EXDM_ALU [11] $end
$var wire 1 F& EXDM_ALU [10] $end
$var wire 1 G& EXDM_ALU [9] $end
$var wire 1 H& EXDM_ALU [8] $end
$var wire 1 I& EXDM_ALU [7] $end
$var wire 1 J& EXDM_ALU [6] $end
$var wire 1 K& EXDM_ALU [5] $end
$var wire 1 L& EXDM_ALU [4] $end
$var wire 1 M& EXDM_ALU [3] $end
$var wire 1 N& EXDM_ALU [2] $end
$var wire 1 O& EXDM_ALU [1] $end
$var wire 1 P& EXDM_ALU [0] $end
$var wire 1 q& EXDM_MemWrt $end
$var wire 1 r& EXDM_MemRead $end
$var wire 1 s& EXDM_HaltSig $end

$scope module rtdata_dff $end
$var parameter 32 \< BIT_WIDTH $end
$var parameter 32 ]< BIT_SIZE $end
$var parameter 32 ^< REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 _< we $end
$var wire 1 |$ w [15] $end
$var wire 1 }$ w [14] $end
$var wire 1 ~$ w [13] $end
$var wire 1 !% w [12] $end
$var wire 1 "% w [11] $end
$var wire 1 #% w [10] $end
$var wire 1 $% w [9] $end
$var wire 1 %% w [8] $end
$var wire 1 &% w [7] $end
$var wire 1 '% w [6] $end
$var wire 1 (% w [5] $end
$var wire 1 )% w [4] $end
$var wire 1 *% w [3] $end
$var wire 1 +% w [2] $end
$var wire 1 ,% w [1] $end
$var wire 1 -% w [0] $end
$var wire 1 Q& r [15] $end
$var wire 1 R& r [14] $end
$var wire 1 S& r [13] $end
$var wire 1 T& r [12] $end
$var wire 1 U& r [11] $end
$var wire 1 V& r [10] $end
$var wire 1 W& r [9] $end
$var wire 1 X& r [8] $end
$var wire 1 Y& r [7] $end
$var wire 1 Z& r [6] $end
$var wire 1 [& r [5] $end
$var wire 1 \& r [4] $end
$var wire 1 ]& r [3] $end
$var wire 1 ^& r [2] $end
$var wire 1 _& r [1] $end
$var wire 1 `& r [0] $end

$scope module dff01[15] $end
$var wire 1 Q& q $end
$var wire 1 `< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 a< state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 R& q $end
$var wire 1 b< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 c< state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 S& q $end
$var wire 1 d< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 e< state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 T& q $end
$var wire 1 f< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 g< state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 U& q $end
$var wire 1 h< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 i< state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 V& q $end
$var wire 1 j< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 k< state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 W& q $end
$var wire 1 l< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 m< state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 X& q $end
$var wire 1 n< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 o< state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 Y& q $end
$var wire 1 p< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 q< state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 Z& q $end
$var wire 1 r< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 s< state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 [& q $end
$var wire 1 t< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 u< state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 \& q $end
$var wire 1 v< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 w< state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 ]& q $end
$var wire 1 x< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 y< state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 ^& q $end
$var wire 1 z< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 {< state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 _& q $end
$var wire 1 |< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 }< state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 `& q $end
$var wire 1 ~< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 != state $end
$upscope $end
$upscope $end

$scope module dff_d_PC2 $end
$var parameter 32 "= BIT_WIDTH $end
$var parameter 32 #= BIT_SIZE $end
$var parameter 32 $= REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 %= we $end
$var wire 1 n% w [15] $end
$var wire 1 o% w [14] $end
$var wire 1 p% w [13] $end
$var wire 1 q% w [12] $end
$var wire 1 r% w [11] $end
$var wire 1 s% w [10] $end
$var wire 1 t% w [9] $end
$var wire 1 u% w [8] $end
$var wire 1 v% w [7] $end
$var wire 1 w% w [6] $end
$var wire 1 x% w [5] $end
$var wire 1 y% w [4] $end
$var wire 1 z% w [3] $end
$var wire 1 {% w [2] $end
$var wire 1 |% w [1] $end
$var wire 1 }% w [0] $end
$var wire 1 a& r [15] $end
$var wire 1 b& r [14] $end
$var wire 1 c& r [13] $end
$var wire 1 d& r [12] $end
$var wire 1 e& r [11] $end
$var wire 1 f& r [10] $end
$var wire 1 g& r [9] $end
$var wire 1 h& r [8] $end
$var wire 1 i& r [7] $end
$var wire 1 j& r [6] $end
$var wire 1 k& r [5] $end
$var wire 1 l& r [4] $end
$var wire 1 m& r [3] $end
$var wire 1 n& r [2] $end
$var wire 1 o& r [1] $end
$var wire 1 p& r [0] $end

$scope module dff01[15] $end
$var wire 1 a& q $end
$var wire 1 &= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 '= state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 b& q $end
$var wire 1 (= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 )= state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 c& q $end
$var wire 1 *= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 += state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 d& q $end
$var wire 1 ,= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 -= state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 e& q $end
$var wire 1 .= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 /= state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 f& q $end
$var wire 1 0= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 1= state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 g& q $end
$var wire 1 2= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 3= state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 h& q $end
$var wire 1 4= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 5= state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 i& q $end
$var wire 1 6= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 7= state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 j& q $end
$var wire 1 8= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 9= state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 k& q $end
$var wire 1 := d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ;= state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 l& q $end
$var wire 1 <= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 == state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 m& q $end
$var wire 1 >= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ?= state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 n& q $end
$var wire 1 @= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 A= state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 o& q $end
$var wire 1 B= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 C= state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 p& q $end
$var wire 1 D= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 E= state $end
$upscope $end
$upscope $end

$scope module MemWrt_2dff $end
$var wire 1 q& q $end
$var wire 1 ]$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F= state $end
$upscope $end

$scope module MemRead_2dff $end
$var wire 1 r& q $end
$var wire 1 X$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 G= state $end
$upscope $end

$scope module nHaltSig_2dff $end
$var wire 1 s& q $end
$var wire 1 W$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H= state $end
$upscope $end

$scope module dff_e_ALU $end
$var parameter 32 I= BIT_WIDTH $end
$var parameter 32 J= BIT_SIZE $end
$var parameter 32 K= REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 L= we $end
$var wire 1 1& w [15] $end
$var wire 1 2& w [14] $end
$var wire 1 3& w [13] $end
$var wire 1 4& w [12] $end
$var wire 1 5& w [11] $end
$var wire 1 6& w [10] $end
$var wire 1 7& w [9] $end
$var wire 1 8& w [8] $end
$var wire 1 9& w [7] $end
$var wire 1 :& w [6] $end
$var wire 1 ;& w [5] $end
$var wire 1 <& w [4] $end
$var wire 1 =& w [3] $end
$var wire 1 >& w [2] $end
$var wire 1 ?& w [1] $end
$var wire 1 @& w [0] $end
$var wire 1 A& r [15] $end
$var wire 1 B& r [14] $end
$var wire 1 C& r [13] $end
$var wire 1 D& r [12] $end
$var wire 1 E& r [11] $end
$var wire 1 F& r [10] $end
$var wire 1 G& r [9] $end
$var wire 1 H& r [8] $end
$var wire 1 I& r [7] $end
$var wire 1 J& r [6] $end
$var wire 1 K& r [5] $end
$var wire 1 L& r [4] $end
$var wire 1 M& r [3] $end
$var wire 1 N& r [2] $end
$var wire 1 O& r [1] $end
$var wire 1 P& r [0] $end

$scope module dff01[15] $end
$var wire 1 A& q $end
$var wire 1 M= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N= state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 B& q $end
$var wire 1 O= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 P= state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 C& q $end
$var wire 1 Q= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 R= state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 D& q $end
$var wire 1 S= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 T= state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 E& q $end
$var wire 1 U= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V= state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 F& q $end
$var wire 1 W= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 X= state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 G& q $end
$var wire 1 Y= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Z= state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 H& q $end
$var wire 1 [= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \= state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 I& q $end
$var wire 1 ]= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^= state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 J& q $end
$var wire 1 _= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `= state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 K& q $end
$var wire 1 a= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 b= state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 L& q $end
$var wire 1 c= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 d= state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 M& q $end
$var wire 1 e= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 f= state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 N& q $end
$var wire 1 g= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 h= state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 O& q $end
$var wire 1 i= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 j= state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 P& q $end
$var wire 1 k= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 l= state $end
$upscope $end
$upscope $end
$upscope $end

$scope module memory0 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 A& ALU [15] $end
$var wire 1 B& ALU [14] $end
$var wire 1 C& ALU [13] $end
$var wire 1 D& ALU [12] $end
$var wire 1 E& ALU [11] $end
$var wire 1 F& ALU [10] $end
$var wire 1 G& ALU [9] $end
$var wire 1 H& ALU [8] $end
$var wire 1 I& ALU [7] $end
$var wire 1 J& ALU [6] $end
$var wire 1 K& ALU [5] $end
$var wire 1 L& ALU [4] $end
$var wire 1 M& ALU [3] $end
$var wire 1 N& ALU [2] $end
$var wire 1 O& ALU [1] $end
$var wire 1 P& ALU [0] $end
$var wire 1 Q& writeData [15] $end
$var wire 1 R& writeData [14] $end
$var wire 1 S& writeData [13] $end
$var wire 1 T& writeData [12] $end
$var wire 1 U& writeData [11] $end
$var wire 1 V& writeData [10] $end
$var wire 1 W& writeData [9] $end
$var wire 1 X& writeData [8] $end
$var wire 1 Y& writeData [7] $end
$var wire 1 Z& writeData [6] $end
$var wire 1 [& writeData [5] $end
$var wire 1 \& writeData [4] $end
$var wire 1 ]& writeData [3] $end
$var wire 1 ^& writeData [2] $end
$var wire 1 _& writeData [1] $end
$var wire 1 `& writeData [0] $end
$var wire 1 r& readEn $end
$var wire 1 q& MemWrt $end
$var wire 1 s& HaltSig $end
$var wire 1 m" readData [15] $end
$var wire 1 n" readData [14] $end
$var wire 1 o" readData [13] $end
$var wire 1 p" readData [12] $end
$var wire 1 q" readData [11] $end
$var wire 1 r" readData [10] $end
$var wire 1 s" readData [9] $end
$var wire 1 t" readData [8] $end
$var wire 1 u" readData [7] $end
$var wire 1 v" readData [6] $end
$var wire 1 w" readData [5] $end
$var wire 1 x" readData [4] $end
$var wire 1 y" readData [3] $end
$var wire 1 z" readData [2] $end
$var wire 1 {" readData [1] $end
$var wire 1 |" readData [0] $end

$scope module data_mem $end
$var wire 1 m" data_out [15] $end
$var wire 1 n" data_out [14] $end
$var wire 1 o" data_out [13] $end
$var wire 1 p" data_out [12] $end
$var wire 1 q" data_out [11] $end
$var wire 1 r" data_out [10] $end
$var wire 1 s" data_out [9] $end
$var wire 1 t" data_out [8] $end
$var wire 1 u" data_out [7] $end
$var wire 1 v" data_out [6] $end
$var wire 1 w" data_out [5] $end
$var wire 1 x" data_out [4] $end
$var wire 1 y" data_out [3] $end
$var wire 1 z" data_out [2] $end
$var wire 1 {" data_out [1] $end
$var wire 1 |" data_out [0] $end
$var wire 1 Q& data_in [15] $end
$var wire 1 R& data_in [14] $end
$var wire 1 S& data_in [13] $end
$var wire 1 T& data_in [12] $end
$var wire 1 U& data_in [11] $end
$var wire 1 V& data_in [10] $end
$var wire 1 W& data_in [9] $end
$var wire 1 X& data_in [8] $end
$var wire 1 Y& data_in [7] $end
$var wire 1 Z& data_in [6] $end
$var wire 1 [& data_in [5] $end
$var wire 1 \& data_in [4] $end
$var wire 1 ]& data_in [3] $end
$var wire 1 ^& data_in [2] $end
$var wire 1 _& data_in [1] $end
$var wire 1 `& data_in [0] $end
$var wire 1 A& addr [15] $end
$var wire 1 B& addr [14] $end
$var wire 1 C& addr [13] $end
$var wire 1 D& addr [12] $end
$var wire 1 E& addr [11] $end
$var wire 1 F& addr [10] $end
$var wire 1 G& addr [9] $end
$var wire 1 H& addr [8] $end
$var wire 1 I& addr [7] $end
$var wire 1 J& addr [6] $end
$var wire 1 K& addr [5] $end
$var wire 1 L& addr [4] $end
$var wire 1 M& addr [3] $end
$var wire 1 N& addr [2] $end
$var wire 1 O& addr [1] $end
$var wire 1 P& addr [0] $end
$var wire 1 m= enable $end
$var wire 1 q& wr $end
$var wire 1 s& createdump $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 n= loaded $end
$var reg 17 o= largest [16:0] $end
$var integer 32 p= mcd $end
$var integer 32 q= i $end
$upscope $end
$upscope $end

$scope module DMWB $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 A& MEM_ALU [15] $end
$var wire 1 B& MEM_ALU [14] $end
$var wire 1 C& MEM_ALU [13] $end
$var wire 1 D& MEM_ALU [12] $end
$var wire 1 E& MEM_ALU [11] $end
$var wire 1 F& MEM_ALU [10] $end
$var wire 1 G& MEM_ALU [9] $end
$var wire 1 H& MEM_ALU [8] $end
$var wire 1 I& MEM_ALU [7] $end
$var wire 1 J& MEM_ALU [6] $end
$var wire 1 K& MEM_ALU [5] $end
$var wire 1 L& MEM_ALU [4] $end
$var wire 1 M& MEM_ALU [3] $end
$var wire 1 N& MEM_ALU [2] $end
$var wire 1 O& MEM_ALU [1] $end
$var wire 1 P& MEM_ALU [0] $end
$var wire 1 a& MEM_PC [15] $end
$var wire 1 b& MEM_PC [14] $end
$var wire 1 c& MEM_PC [13] $end
$var wire 1 d& MEM_PC [12] $end
$var wire 1 e& MEM_PC [11] $end
$var wire 1 f& MEM_PC [10] $end
$var wire 1 g& MEM_PC [9] $end
$var wire 1 h& MEM_PC [8] $end
$var wire 1 i& MEM_PC [7] $end
$var wire 1 j& MEM_PC [6] $end
$var wire 1 k& MEM_PC [5] $end
$var wire 1 l& MEM_PC [4] $end
$var wire 1 m& MEM_PC [3] $end
$var wire 1 n& MEM_PC [2] $end
$var wire 1 o& MEM_PC [1] $end
$var wire 1 p& MEM_PC [0] $end
$var wire 1 m" MEM_readData [15] $end
$var wire 1 n" MEM_readData [14] $end
$var wire 1 o" MEM_readData [13] $end
$var wire 1 p" MEM_readData [12] $end
$var wire 1 q" MEM_readData [11] $end
$var wire 1 r" MEM_readData [10] $end
$var wire 1 s" MEM_readData [9] $end
$var wire 1 t" MEM_readData [8] $end
$var wire 1 u" MEM_readData [7] $end
$var wire 1 v" MEM_readData [6] $end
$var wire 1 w" MEM_readData [5] $end
$var wire 1 x" MEM_readData [4] $end
$var wire 1 y" MEM_readData [3] $end
$var wire 1 z" MEM_readData [2] $end
$var wire 1 {" MEM_readData [1] $end
$var wire 1 |" MEM_readData [0] $end
$var wire 1 t& DMWB_ALU [15] $end
$var wire 1 u& DMWB_ALU [14] $end
$var wire 1 v& DMWB_ALU [13] $end
$var wire 1 w& DMWB_ALU [12] $end
$var wire 1 x& DMWB_ALU [11] $end
$var wire 1 y& DMWB_ALU [10] $end
$var wire 1 z& DMWB_ALU [9] $end
$var wire 1 {& DMWB_ALU [8] $end
$var wire 1 |& DMWB_ALU [7] $end
$var wire 1 }& DMWB_ALU [6] $end
$var wire 1 ~& DMWB_ALU [5] $end
$var wire 1 !' DMWB_ALU [4] $end
$var wire 1 "' DMWB_ALU [3] $end
$var wire 1 #' DMWB_ALU [2] $end
$var wire 1 $' DMWB_ALU [1] $end
$var wire 1 %' DMWB_ALU [0] $end
$var wire 1 &' DMWB_PC [15] $end
$var wire 1 '' DMWB_PC [14] $end
$var wire 1 (' DMWB_PC [13] $end
$var wire 1 )' DMWB_PC [12] $end
$var wire 1 *' DMWB_PC [11] $end
$var wire 1 +' DMWB_PC [10] $end
$var wire 1 ,' DMWB_PC [9] $end
$var wire 1 -' DMWB_PC [8] $end
$var wire 1 .' DMWB_PC [7] $end
$var wire 1 /' DMWB_PC [6] $end
$var wire 1 0' DMWB_PC [5] $end
$var wire 1 1' DMWB_PC [4] $end
$var wire 1 2' DMWB_PC [3] $end
$var wire 1 3' DMWB_PC [2] $end
$var wire 1 4' DMWB_PC [1] $end
$var wire 1 5' DMWB_PC [0] $end
$var wire 1 6' DMWB_readData [15] $end
$var wire 1 7' DMWB_readData [14] $end
$var wire 1 8' DMWB_readData [13] $end
$var wire 1 9' DMWB_readData [12] $end
$var wire 1 :' DMWB_readData [11] $end
$var wire 1 ;' DMWB_readData [10] $end
$var wire 1 <' DMWB_readData [9] $end
$var wire 1 =' DMWB_readData [8] $end
$var wire 1 >' DMWB_readData [7] $end
$var wire 1 ?' DMWB_readData [6] $end
$var wire 1 @' DMWB_readData [5] $end
$var wire 1 A' DMWB_readData [4] $end
$var wire 1 B' DMWB_readData [3] $end
$var wire 1 C' DMWB_readData [2] $end
$var wire 1 D' DMWB_readData [1] $end
$var wire 1 E' DMWB_readData [0] $end

$scope module dff_d_PC2 $end
$var parameter 32 r= BIT_WIDTH $end
$var parameter 32 s= BIT_SIZE $end
$var parameter 32 t= REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 u= we $end
$var wire 1 a& w [15] $end
$var wire 1 b& w [14] $end
$var wire 1 c& w [13] $end
$var wire 1 d& w [12] $end
$var wire 1 e& w [11] $end
$var wire 1 f& w [10] $end
$var wire 1 g& w [9] $end
$var wire 1 h& w [8] $end
$var wire 1 i& w [7] $end
$var wire 1 j& w [6] $end
$var wire 1 k& w [5] $end
$var wire 1 l& w [4] $end
$var wire 1 m& w [3] $end
$var wire 1 n& w [2] $end
$var wire 1 o& w [1] $end
$var wire 1 p& w [0] $end
$var wire 1 &' r [15] $end
$var wire 1 '' r [14] $end
$var wire 1 (' r [13] $end
$var wire 1 )' r [12] $end
$var wire 1 *' r [11] $end
$var wire 1 +' r [10] $end
$var wire 1 ,' r [9] $end
$var wire 1 -' r [8] $end
$var wire 1 .' r [7] $end
$var wire 1 /' r [6] $end
$var wire 1 0' r [5] $end
$var wire 1 1' r [4] $end
$var wire 1 2' r [3] $end
$var wire 1 3' r [2] $end
$var wire 1 4' r [1] $end
$var wire 1 5' r [0] $end

$scope module dff01[15] $end
$var wire 1 &' q $end
$var wire 1 v= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 w= state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 '' q $end
$var wire 1 x= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 y= state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 (' q $end
$var wire 1 z= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 {= state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 )' q $end
$var wire 1 |= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 }= state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 *' q $end
$var wire 1 ~= d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 !> state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 +' q $end
$var wire 1 "> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 #> state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 ,' q $end
$var wire 1 $> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 %> state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 -' q $end
$var wire 1 &> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 '> state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 .' q $end
$var wire 1 (> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 )> state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 /' q $end
$var wire 1 *> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 +> state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 0' q $end
$var wire 1 ,> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 -> state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 1' q $end
$var wire 1 .> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 /> state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 2' q $end
$var wire 1 0> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 1> state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 3' q $end
$var wire 1 2> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 3> state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 4' q $end
$var wire 1 4> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 5> state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 5' q $end
$var wire 1 6> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 7> state $end
$upscope $end
$upscope $end

$scope module dff_e_ALU2 $end
$var parameter 32 8> BIT_WIDTH $end
$var parameter 32 9> BIT_SIZE $end
$var parameter 32 :> REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ;> we $end
$var wire 1 A& w [15] $end
$var wire 1 B& w [14] $end
$var wire 1 C& w [13] $end
$var wire 1 D& w [12] $end
$var wire 1 E& w [11] $end
$var wire 1 F& w [10] $end
$var wire 1 G& w [9] $end
$var wire 1 H& w [8] $end
$var wire 1 I& w [7] $end
$var wire 1 J& w [6] $end
$var wire 1 K& w [5] $end
$var wire 1 L& w [4] $end
$var wire 1 M& w [3] $end
$var wire 1 N& w [2] $end
$var wire 1 O& w [1] $end
$var wire 1 P& w [0] $end
$var wire 1 t& r [15] $end
$var wire 1 u& r [14] $end
$var wire 1 v& r [13] $end
$var wire 1 w& r [12] $end
$var wire 1 x& r [11] $end
$var wire 1 y& r [10] $end
$var wire 1 z& r [9] $end
$var wire 1 {& r [8] $end
$var wire 1 |& r [7] $end
$var wire 1 }& r [6] $end
$var wire 1 ~& r [5] $end
$var wire 1 !' r [4] $end
$var wire 1 "' r [3] $end
$var wire 1 #' r [2] $end
$var wire 1 $' r [1] $end
$var wire 1 %' r [0] $end

$scope module dff01[15] $end
$var wire 1 t& q $end
$var wire 1 <> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 => state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 u& q $end
$var wire 1 >> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ?> state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 v& q $end
$var wire 1 @> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 A> state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 w& q $end
$var wire 1 B> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 C> state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 x& q $end
$var wire 1 D> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 E> state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 y& q $end
$var wire 1 F> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 G> state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 z& q $end
$var wire 1 H> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 I> state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 {& q $end
$var wire 1 J> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 K> state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 |& q $end
$var wire 1 L> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 M> state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 }& q $end
$var wire 1 N> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 O> state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 ~& q $end
$var wire 1 P> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Q> state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 !' q $end
$var wire 1 R> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 S> state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 "' q $end
$var wire 1 T> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 U> state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 #' q $end
$var wire 1 V> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 W> state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 $' q $end
$var wire 1 X> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Y> state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 %' q $end
$var wire 1 Z> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 [> state $end
$upscope $end
$upscope $end

$scope module dff_memory $end
$var parameter 32 \> BIT_WIDTH $end
$var parameter 32 ]> BIT_SIZE $end
$var parameter 32 ^> REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 _> we $end
$var wire 1 m" w [15] $end
$var wire 1 n" w [14] $end
$var wire 1 o" w [13] $end
$var wire 1 p" w [12] $end
$var wire 1 q" w [11] $end
$var wire 1 r" w [10] $end
$var wire 1 s" w [9] $end
$var wire 1 t" w [8] $end
$var wire 1 u" w [7] $end
$var wire 1 v" w [6] $end
$var wire 1 w" w [5] $end
$var wire 1 x" w [4] $end
$var wire 1 y" w [3] $end
$var wire 1 z" w [2] $end
$var wire 1 {" w [1] $end
$var wire 1 |" w [0] $end
$var wire 1 6' r [15] $end
$var wire 1 7' r [14] $end
$var wire 1 8' r [13] $end
$var wire 1 9' r [12] $end
$var wire 1 :' r [11] $end
$var wire 1 ;' r [10] $end
$var wire 1 <' r [9] $end
$var wire 1 =' r [8] $end
$var wire 1 >' r [7] $end
$var wire 1 ?' r [6] $end
$var wire 1 @' r [5] $end
$var wire 1 A' r [4] $end
$var wire 1 B' r [3] $end
$var wire 1 C' r [2] $end
$var wire 1 D' r [1] $end
$var wire 1 E' r [0] $end

$scope module dff01[15] $end
$var wire 1 6' q $end
$var wire 1 `> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 a> state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 7' q $end
$var wire 1 b> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 c> state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 8' q $end
$var wire 1 d> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 e> state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 9' q $end
$var wire 1 f> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 g> state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 :' q $end
$var wire 1 h> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 i> state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 ;' q $end
$var wire 1 j> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 k> state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 <' q $end
$var wire 1 l> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 m> state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 =' q $end
$var wire 1 n> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 o> state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 >' q $end
$var wire 1 p> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 q> state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 ?' q $end
$var wire 1 r> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 s> state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 @' q $end
$var wire 1 t> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 u> state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 A' q $end
$var wire 1 v> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 w> state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 B' q $end
$var wire 1 x> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 y> state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 C' q $end
$var wire 1 z> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 {> state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 D' q $end
$var wire 1 |> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 }> state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 E' q $end
$var wire 1 ~> d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 !? state $end
$upscope $end
$upscope $end
$upscope $end

$scope module wb0 $end
$var wire 1 6' MemIn [15] $end
$var wire 1 7' MemIn [14] $end
$var wire 1 8' MemIn [13] $end
$var wire 1 9' MemIn [12] $end
$var wire 1 :' MemIn [11] $end
$var wire 1 ;' MemIn [10] $end
$var wire 1 <' MemIn [9] $end
$var wire 1 =' MemIn [8] $end
$var wire 1 >' MemIn [7] $end
$var wire 1 ?' MemIn [6] $end
$var wire 1 @' MemIn [5] $end
$var wire 1 A' MemIn [4] $end
$var wire 1 B' MemIn [3] $end
$var wire 1 C' MemIn [2] $end
$var wire 1 D' MemIn [1] $end
$var wire 1 E' MemIn [0] $end
$var wire 1 &' PcIn [15] $end
$var wire 1 '' PcIn [14] $end
$var wire 1 (' PcIn [13] $end
$var wire 1 )' PcIn [12] $end
$var wire 1 *' PcIn [11] $end
$var wire 1 +' PcIn [10] $end
$var wire 1 ,' PcIn [9] $end
$var wire 1 -' PcIn [8] $end
$var wire 1 .' PcIn [7] $end
$var wire 1 /' PcIn [6] $end
$var wire 1 0' PcIn [5] $end
$var wire 1 1' PcIn [4] $end
$var wire 1 2' PcIn [3] $end
$var wire 1 3' PcIn [2] $end
$var wire 1 4' PcIn [1] $end
$var wire 1 5' PcIn [0] $end
$var wire 1 t& ALUIn [15] $end
$var wire 1 u& ALUIn [14] $end
$var wire 1 v& ALUIn [13] $end
$var wire 1 w& ALUIn [12] $end
$var wire 1 x& ALUIn [11] $end
$var wire 1 y& ALUIn [10] $end
$var wire 1 z& ALUIn [9] $end
$var wire 1 {& ALUIn [8] $end
$var wire 1 |& ALUIn [7] $end
$var wire 1 }& ALUIn [6] $end
$var wire 1 ~& ALUIn [5] $end
$var wire 1 !' ALUIn [4] $end
$var wire 1 "' ALUIn [3] $end
$var wire 1 #' ALUIn [2] $end
$var wire 1 $' ALUIn [1] $end
$var wire 1 %' ALUIn [0] $end
$var wire 1 `$ RegSrc [1] $end
$var wire 1 a$ RegSrc [0] $end
$var wire 1 -" WB [15] $end
$var wire 1 ." WB [14] $end
$var wire 1 /" WB [13] $end
$var wire 1 0" WB [12] $end
$var wire 1 1" WB [11] $end
$var wire 1 2" WB [10] $end
$var wire 1 3" WB [9] $end
$var wire 1 4" WB [8] $end
$var wire 1 5" WB [7] $end
$var wire 1 6" WB [6] $end
$var wire 1 7" WB [5] $end
$var wire 1 8" WB [4] $end
$var wire 1 9" WB [3] $end
$var wire 1 :" WB [2] $end
$var wire 1 ;" WB [1] $end
$var wire 1 <" WB [0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
18!
19!
0N(
0L(
0J(
0H(
0F(
0D(
0B(
0@(
0>(
0<(
0:(
08(
06(
04(
02(
00(
1a(
b0 b(
0z*
0x*
0v*
0t*
0r*
0p*
0n*
0l*
0j*
0h*
0f*
0d*
0b*
0`*
0^*
0\*
0@+
0>+
0<+
0:+
08+
06+
04+
02+
00+
0.+
0,+
0*+
0(+
0&+
0$+
0"+
1^+
0k2
0h2
0e2
0b2
0_2
0\2
0Y2
0V2
0S2
0,2
0*2
0(2
0&2
0$2
0"2
0~1
0|1
0z1
0x1
0v1
0t1
0r1
0p1
0n1
0l1
0g1
0e1
0c1
0a1
0_1
0]1
0[1
0Y1
0W1
0U1
0S1
0Q1
0O1
0M1
0K1
0I1
0D1
0B1
0@1
0>1
0<1
0:1
081
061
041
021
001
0.1
0,1
0*1
0(1
0&1
0!1
0}0
0{0
0y0
0w0
0u0
0s0
0q0
0o0
0m0
0k0
0i0
0g0
0e0
0c0
0a0
0\0
0Z0
0X0
0V0
0T0
0R0
0P0
0N0
0L0
0J0
0H0
0F0
0D0
0B0
0@0
0>0
090
070
050
030
010
0/0
0-0
0+0
0)0
0'0
0%0
0#0
0!0
0}/
0{/
0y/
0t/
0r/
0p/
0n/
0l/
0j/
0h/
0f/
0d/
0b/
0`/
0^/
0\/
0Z/
0X/
0V/
0Q/
0O/
0M/
0K/
0I/
0G/
0E/
0C/
0A/
0?/
0=/
0;/
09/
07/
05/
03/
x-2
x.2
x/2
bx 02
0n2
0m2
0l2
xA2
xB2
xC2
xD2
xE2
xF2
xG2
xH2
xI2
bx J2
bx K2
bx L2
bx M2
bx N2
xO2
xr2
0u5
0r5
0o5
0l5
0i5
0f5
0{5
0x5
0w2
0x2
0y2
0z2
0{2
0}2
0)6
0&6
0#6
0~5
0C3
0A3
0?3
0=3
0;3
093
073
053
033
013
0/3
0-3
0+3
0)3
0'3
0%3
0g3
0e3
0c3
0a3
0_3
0]3
0[3
0Y3
0W3
0U3
0S3
0Q3
0O3
0M3
0K3
0I3
0-4
0+4
0)4
0'4
0%4
0#4
0!4
0}3
0{3
0y3
0w3
0u3
0s3
0q3
0o3
0m3
0Q4
0O4
0M4
0K4
0I4
0G4
0E4
0C4
0A4
0?4
0=4
0;4
094
074
054
034
0u4
0s4
0q4
0o4
0m4
0k4
0i4
0g4
0e4
0c4
0a4
0_4
0]4
0[4
0Y4
0W4
0;5
095
075
055
035
015
0/5
0-5
0+5
0)5
0'5
0%5
0#5
0!5
0}4
0{4
0_5
0]5
0[5
0Y5
0W5
0U5
0S5
0Q5
0O5
0M5
0K5
0I5
0G5
0E5
0C5
0A5
0`5
0a5
0b5
056
026
0/6
0,6
0c5
bx N8
x[<
0!=
0}<
0{<
0y<
0w<
0u<
0s<
0q<
0o<
0m<
0k<
0i<
0g<
0e<
0c<
0a<
0E=
0C=
0A=
0?=
0==
0;=
09=
07=
05=
03=
01=
0/=
0-=
0+=
0)=
0'=
0F=
0G=
0H=
0l=
0j=
0h=
0f=
0d=
0b=
0`=
0^=
0\=
0Z=
0X=
0V=
0T=
0R=
0P=
0N=
1n=
b0 o=
07>
05>
03>
01>
0/>
0->
0+>
0)>
0'>
0%>
0#>
0!>
0}=
0{=
0y=
0w=
0[>
0Y>
0W>
0U>
0S>
0Q>
0O>
0M>
0K>
0I>
0G>
0E>
0C>
0A>
0?>
0=>
0!?
0}>
0{>
0y>
0w>
0u>
0s>
0q>
0o>
0m>
0k>
0i>
0g>
0e>
0c>
0a>
b10000 +(
b11 ,(
b1000 -(
b10000 e(
b10000 W*
b11 X*
b1000 Y*
b10000 {*
b11 |*
b1000 }*
b10000 !,
b11 ",
b1000 #,
b10000 V-
b100 W-
b10 X-
b10000 ~2
b11 !3
b1000 "3
b10000 D3
b11 E3
b1000 F3
b10000 h3
b11 i3
b1000 j3
b10000 .4
b11 /4
b1000 04
b10000 R4
b11 S4
b1000 T4
b10000 v4
b11 w4
b1000 x4
b10000 <5
b11 =5
b1000 >5
b10000 z6
b10000 L8
b100 M8
b10000 b9
b10000 2;
b100 3;
b10 4;
b10000 \<
b11 ]<
b1000 ^<
b10000 "=
b11 #=
b1000 $=
b10000 I=
b11 J=
b1000 K=
b10000 r=
b11 s=
b1000 t=
b10000 8>
b11 9>
b1000 :>
b10000 \>
b11 ]>
b1000 ^>
b100 z(
b100 >)
b100 `)
b100 $*
b10000 //
b11 0/
b1000 1/
b10000 R/
b11 S/
b1000 T/
b10000 u/
b11 v/
b1000 w/
b10000 :0
b11 ;0
b1000 <0
b10000 ]0
b11 ^0
b1000 _0
b10000 "1
b11 #1
b1000 $1
b10000 E1
b11 F1
b1000 G1
b10000 h1
b11 i1
b1000 j1
b100 "7
b100 D7
b100 f7
b100 *8
b100 f9
b100 *:
b100 L:
b100 n:
b0 .!
b10 /!
b100 0!
b0 1!
b0 2!
b0 3!
b0 4!
b1 :!
bx c(
b10000000000000000 d(
bx p=
b10000000000000000 q=
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
x%
x$
x#
x"
x!
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
xA
xD
xC
xB
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xU
xV
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
x(!
x'!
x&!
x%!
x$!
x#!
x"!
x!!
x~
x}
x|
x{
xz
xy
xx
xw
x)!
x*!
x+!
x,!
x-!
15!
x6!
17!
xJ!
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xj!
xi!
xh!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x_!
x^!
x]!
x\!
x[!
zz!
zy!
zx!
zw!
zv!
zu!
zt!
zs!
zr!
zq!
zp!
zo!
zn!
zm!
zl!
zk!
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x~!
x}!
x|!
x{!
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
zl"
zk"
zj"
zi"
zh"
zg"
zf"
ze"
zd"
zc"
zb"
za"
z`"
z_"
z^"
z]"
x|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
x_#
z`#
xa#
xb#
xc#
xd#
xe#
xf#
xg#
xh#
xj#
xi#
xl#
xk#
zn#
zm#
xr#
xq#
xp#
xo#
xv#
xu#
xt#
xs#
xy#
xx#
xw#
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
x{#
xz#
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x<$
x=$
x>$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
xF$
xE$
xD$
xC$
xB$
xA$
x@$
x?$
xO$
xP$
xS$
xR$
xQ$
xV$
xU$
xT$
xW$
xX$
xY$
zZ$
x[$
x\$
x]$
z^$
z_$
xa$
x`$
xc$
xb$
xg$
xf$
xe$
xd$
xk$
xj$
xi$
xh$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
x-%
x,%
x+%
x*%
x)%
x(%
x'%
x&%
x%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x=%
x<%
x;%
x:%
x9%
x8%
x7%
x6%
x5%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
xM%
xL%
xK%
xJ%
xI%
xH%
xG%
xF%
xE%
xD%
xC%
xB%
xA%
x@%
x?%
x>%
x]%
x\%
x[%
xZ%
xY%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
xP%
xO%
xN%
xm%
xl%
xk%
xj%
xi%
xh%
xg%
xf%
xe%
xd%
xc%
xb%
xa%
x`%
x_%
x^%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
x~%
x!&
x"&
x#&
z$&
z%&
z(&
z'&
z&&
z+&
z*&
z)&
z.&
z-&
z,&
x/&
x0&
x@&
x?&
x>&
x=&
x<&
x;&
x:&
x9&
x8&
x7&
x6&
x5&
x4&
x3&
x2&
x1&
xP&
xO&
xN&
xM&
xL&
xK&
xJ&
xI&
xH&
xG&
xF&
xE&
xD&
xC&
xB&
xA&
x`&
x_&
x^&
x]&
x\&
x[&
xZ&
xY&
xX&
xW&
xV&
xU&
xT&
xS&
xR&
xQ&
xp&
xo&
xn&
xm&
xl&
xk&
xj&
xi&
xh&
xg&
xf&
xe&
xd&
xc&
xb&
xa&
xq&
xr&
xs&
x%'
x$'
x#'
x"'
x!'
x~&
x}&
x|&
x{&
xz&
xy&
xx&
xw&
xv&
xu&
xt&
x5'
x4'
x3'
x2'
x1'
x0'
x/'
x.'
x-'
x,'
x+'
x*'
x)'
x('
x''
x&'
xE'
xD'
xC'
xB'
xA'
x@'
x?'
x>'
x='
x<'
x;'
x:'
x9'
x8'
x7'
x6'
xV'
xU'
xT'
xS'
xR'
xQ'
xP'
xO'
xN'
xM'
xL'
xK'
xJ'
xI'
xH'
xG'
zf'
ze'
zd'
zc'
zb'
za'
z`'
z_'
z^'
z]'
z\'
z['
zZ'
zY'
zX'
zW'
zg'
zw'
zv'
zu'
zt'
zs'
zr'
zq'
zp'
zo'
zn'
zm'
zl'
zk'
zj'
zi'
zh'
x)(
x((
x'(
x&(
x%(
x$(
x#(
x"(
x!(
x~'
x}'
x|'
x{'
xz'
xy'
xx'
x*(
xy(
xx(
xw(
x(*
x'*
x&*
x%*
1,*
x+*
1**
1)*
z1*
00*
x/*
x.*
z-*
15*
14*
x3*
x2*
xC*
1D*
1E*
x?*
1@*
xA*
x;*
x<*
1=*
x7*
x8*
19*
xd)
xc)
xb)
xa)
1h)
1g)
1f)
1e)
zm)
xl)
xk)
xj)
zi)
xq)
xp)
xo)
xn)
x!*
x"*
1#*
x{)
x|)
1})
xw)
xx)
1y)
xs)
xt)
1u)
xB)
xA)
x@)
x?)
1F)
1E)
1D)
1C)
zK)
xJ)
xI)
xH)
zG)
xO)
xN)
xM)
xL)
x])
x^)
1_)
xY)
xZ)
1[)
xU)
xV)
1W)
xQ)
xR)
1S)
x~(
x}(
x|(
x{(
1$)
1#)
1")
1!)
z))
x()
x')
x&)
z%)
x-)
x,)
x+)
x*)
x;)
x<)
1=)
x7)
x8)
19)
x3)
x4)
15)
x/)
x0)
11)
xV*
xU*
xT*
xS*
xR*
xQ*
xP*
xO*
xN*
xM*
xL*
xK*
xJ*
xI*
xH*
xG*
xA+
xB+
xC+
xD+
xG+
xH+
xN+
xM+
xL+
xK+
xJ+
xI+
xP+
xO+
xS+
xR+
xQ+
zT+
zU+
zV+
zW+
zX+
zY+
xZ+
x[+
x\+
xn+
xm+
xl+
xk+
xj+
xi+
xh+
xg+
xf+
xe+
xd+
xc+
xb+
xa+
x`+
x_+
x~+
x}+
x|+
x{+
xz+
xy+
xx+
xw+
xv+
xu+
xt+
xs+
xr+
xq+
xp+
xo+
x3,
x2,
x1,
x0,
x/,
x.,
x-,
x,,
x+,
x*,
x),
x(,
x',
x&,
x%,
x$,
xC,
xB,
xA,
x@,
x?,
x>,
x=,
x<,
x;,
x:,
x9,
x8,
x7,
x6,
x5,
x4,
xS,
xR,
xQ,
xP,
xO,
xN,
xM,
xL,
xK,
xJ,
xI,
xH,
xG,
xF,
xE,
xD,
xc,
xb,
xa,
x`,
x_,
x^,
x],
x\,
x[,
xZ,
xY,
xX,
xW,
xV,
xU,
xT,
xs,
xr,
xq,
xp,
xo,
xn,
xm,
xl,
xk,
xj,
xi,
xh,
xg,
xf,
xe,
xd,
x%-
x$-
x#-
x"-
x!-
x~,
x},
x|,
x{,
xz,
xy,
xx,
xw,
xv,
xu,
xt,
x5-
x4-
x3-
x2-
x1-
x0-
x/-
x.-
x--
x,-
x+-
x*-
x)-
x(-
x'-
x&-
xE-
xD-
xC-
xB-
xA-
x@-
x?-
x>-
x=-
x<-
x;-
x:-
x9-
x8-
x7-
x6-
xU-
xT-
xS-
xR-
xQ-
xP-
xO-
xN-
0M-
0L-
0K-
0J-
0I-
0H-
0G-
0F-
xz-
xy-
0x-
0w-
0v-
0u-
0t-
0s-
0r-
0q-
0p-
0o-
0n-
0m-
0l-
0k-
x,.
x+.
x*.
x).
0(.
0'.
0&.
0%.
0$.
0#.
0".
0!.
0~-
0}-
0|-
0{-
x<.
x;.
x:.
x9.
x8.
x7.
x6.
x5.
04.
03.
02.
01.
00.
0/.
0..
0-.
xL.
xK.
xJ.
xI.
xH.
xG.
xF.
xE.
0D.
0C.
0B.
0A.
0@.
0?.
0>.
0=.
0\.
x[.
0Z.
0Y.
0X.
0W.
0V.
0U.
0T.
0S.
0R.
0Q.
0P.
0O.
0N.
0M.
0l.
0k.
xj.
xi.
0h.
0g.
0f.
0e.
0d.
0c.
0b.
0a.
0`.
0_.
0^.
0].
0|.
0{.
0z.
0y.
xx.
xw.
xv.
xu.
0t.
0s.
0r.
0q.
0p.
0o.
0n.
0m.
0./
0-/
0,/
0+/
0*/
0)/
0(/
0'/
x&/
x%/
x$/
x#/
x"/
x!/
x~.
x}.
xP2
xt2
xs2
xv2
xu2
xE6
xD6
xC6
xB6
xA6
x@6
x?6
x>6
x=6
x<6
x;6
x:6
x96
x86
x76
x66
xU6
xT6
xS6
xR6
xQ6
xP6
xO6
xN6
xM6
xL6
xK6
xJ6
xI6
xH6
xG6
xF6
xe6
xd6
xc6
xb6
xa6
x`6
x_6
x^6
x]6
x\6
x[6
xZ6
xY6
xX6
xW6
xV6
xu6
xt6
xs6
xr6
xq6
xp6
xo6
xn6
xm6
xl6
xk6
xj6
xi6
xh6
xg6
xf6
xv6
xw6
xx6
xy6
x!7
x~6
x}6
x.8
x-8
x,8
x+8
x28
x18
x08
x/8
z78
x68
x58
x48
z38
1;8
x:8
x98
x88
xI8
1J8
xK8
xE8
xF8
xG8
xA8
xB8
xC8
x=8
x>8
x?8
xj7
xi7
xh7
xg7
xn7
xm7
xl7
xk7
zs7
xr7
xq7
xp7
zo7
xw7
xv7
xu7
xt7
x'8
x(8
x)8
x#8
x$8
x%8
x}7
x~7
x!8
xy7
xz7
x{7
xH7
xG7
xF7
xE7
xL7
xK7
xJ7
xI7
zQ7
xP7
xO7
xN7
zM7
xU7
xT7
xS7
xR7
xc7
xd7
xe7
x_7
x`7
xa7
x[7
x\7
x]7
xW7
xX7
xY7
x&7
x%7
x$7
x#7
x*7
x)7
x(7
x'7
z/7
x.7
x-7
x,7
z+7
x37
x27
x17
x07
xA7
xB7
xC7
x=7
x>7
x?7
x97
x:7
x;7
x57
x67
x77
xO8
x_8
x^8
x]8
x\8
x[8
xZ8
xY8
xX8
xW8
xV8
xU8
xT8
xS8
xR8
xQ8
xP8
xo8
xn8
xm8
xl8
xk8
xj8
xi8
xh8
xg8
xf8
xe8
xd8
xc8
xb8
xa8
x`8
x!9
x~8
x}8
x|8
x{8
xz8
xy8
xx8
xw8
xv8
xu8
xt8
xs8
xr8
xq8
xp8
x19
x09
x/9
x.9
x-9
x,9
x+9
x*9
x)9
x(9
x'9
x&9
x%9
x$9
x#9
x"9
xA9
x@9
x?9
x>9
x=9
x<9
x;9
x:9
x99
x89
x79
x69
x59
x49
x39
x29
zQ9
zP9
zO9
zN9
zM9
zL9
zK9
zJ9
zI9
zH9
zG9
zF9
zE9
zD9
zC9
zB9
za9
z`9
z_9
z^9
z]9
z\9
z[9
zZ9
zY9
zX9
zW9
zV9
zU9
zT9
zS9
zR9
xe9
xd9
xc9
xr:
xq:
xp:
xo:
xv:
xu:
xt:
xs:
z{:
xz:
xy:
xx:
zw:
x!;
x~:
x}:
x|:
x/;
x0;
x1;
x+;
x,;
x-;
x';
x(;
x);
x#;
x$;
x%;
xP:
xO:
xN:
xM:
xT:
xS:
xR:
xQ:
zY:
xX:
xW:
xV:
zU:
x]:
x\:
x[:
xZ:
xk:
xl:
xm:
xg:
xh:
xi:
xc:
xd:
xe:
x_:
x`:
xa:
x.:
x-:
x,:
x+:
x2:
x1:
x0:
x/:
z7:
x6:
x5:
x4:
z3:
x;:
x::
x9:
x8:
xI:
xJ:
xK:
xE:
xF:
xG:
xA:
xB:
xC:
x=:
x>:
x?:
xj9
xi9
xh9
xg9
xn9
xm9
xl9
xk9
zs9
xr9
xq9
xp9
zo9
xw9
xv9
xu9
xt9
x':
x(:
x):
x#:
x$:
x%:
x}9
x~9
x!:
xy9
xz9
x{9
xD;
xC;
xB;
xA;
x@;
x?;
x>;
x=;
x<;
x;;
x:;
x9;
x8;
x7;
x6;
x5;
xT;
xS;
xR;
xQ;
xP;
xO;
xN;
xM;
xL;
xK;
xJ;
xI;
xH;
xG;
xF;
xE;
xd;
xc;
xb;
xa;
x`;
x_;
x^;
x];
x\;
x[;
xZ;
xY;
xX;
xW;
xV;
xU;
xt;
xs;
xr;
xq;
xp;
xo;
xn;
xm;
xl;
xk;
xj;
xi;
xh;
xg;
xf;
xe;
x&<
x%<
x$<
x#<
x"<
x!<
x~;
x};
x|;
x{;
xz;
xy;
xx;
xw;
xv;
xu;
x6<
x5<
x4<
x3<
x2<
x1<
x0<
x/<
x.<
x-<
x,<
x+<
x*<
x)<
x(<
x'<
xF<
xE<
xD<
xC<
xB<
xA<
x@<
x?<
x><
x=<
x<<
x;<
x:<
x9<
x8<
x7<
xV<
xU<
xT<
xS<
xR<
xQ<
xP<
xO<
xN<
xM<
xL<
xK<
xJ<
xI<
xH<
xG<
xF+
xF*
xF'
0v(
0u(
1t(
0s(
0r(
0q(
0p(
0o(
0n(
0m(
0l(
0k(
0j(
0i(
0h(
0g(
0f(
0`(
1_(
0^(
0](
0\(
0[(
0Z(
0Y(
0X(
0W(
0V(
0U(
0T(
0S(
0R(
0Q(
0P(
0O(
1.(
xM(
xK(
xI(
xG(
xE(
xC(
xA(
x?(
x=(
x;(
x9(
x7(
x5(
x3(
x1(
x/(
0B*
x>*
x:*
x6*
x~)
xz)
xv)
xr)
x\)
xX)
xT)
xP)
x:)
x6)
x2)
x.)
1~*
1Z*
xy*
xw*
xu*
xs*
xq*
xo*
xm*
xk*
xi*
xg*
xe*
xc*
xa*
x_*
x]*
x[*
x?+
x=+
x;+
x9+
x7+
x5+
x3+
x1+
x/+
x-+
x++
x)+
x'+
x%+
x#+
x!+
zE+
x@2
x?2
x>2
x=2
x<2
x;2
x:2
x92
x82
x72
x62
x52
x42
x32
x22
x12
1j2
1g2
1d2
1a2
1^2
1[2
1X2
1U2
1R2
1i2
1f2
1c2
1`2
1]2
1Z2
1W2
1T2
1Q2
0]+
1j-
0i-
0h-
0g-
0f-
0e-
0d-
0c-
0b-
0a-
0`-
0_-
0^-
0]-
0\-
0[-
0Z-
0Y-
x+2
x)2
x'2
x%2
x#2
x!2
x}1
x{1
xy1
xw1
xu1
xs1
xq1
xo1
xm1
xk1
xf1
xd1
xb1
x`1
x^1
x\1
xZ1
xX1
xV1
xT1
xR1
xP1
xN1
xL1
xJ1
xH1
xC1
xA1
x?1
x=1
x;1
x91
x71
x51
x31
x11
x/1
x-1
x+1
x)1
x'1
x%1
x~0
x|0
xz0
xx0
xv0
xt0
xr0
xp0
xn0
xl0
xj0
xh0
xf0
xd0
xb0
x`0
x[0
xY0
xW0
xU0
xS0
xQ0
xO0
xM0
xK0
xI0
xG0
xE0
xC0
xA0
x?0
x=0
x80
x60
x40
x20
x00
x.0
x,0
x*0
x(0
x&0
x$0
x"0
x~/
x|/
xz/
xx/
xs/
xq/
xo/
xm/
xk/
xi/
xg/
xe/
xc/
xa/
x_/
x]/
x[/
xY/
xW/
xU/
xP/
xN/
xL/
xJ/
xH/
xF/
xD/
xB/
x@/
x>/
x</
x:/
x8/
x6/
x4/
x2/
zo2
zp2
zq2
146
116
1.6
1+6
136
106
1-6
1*6
1?5
1y4
1U4
114
1k3
1G3
1#3
1(6
1%6
1"6
1}5
1'6
1$6
1!6
1|5
x|2
1z5
1w5
1y5
1v5
1t5
1q5
1n5
1k5
1h5
1e5
1s5
1p5
1m5
1j5
1g5
1d5
xB3
x@3
x>3
x<3
x:3
x83
x63
x43
x23
x03
x.3
x,3
x*3
x(3
x&3
x$3
xf3
xd3
xb3
x`3
x^3
x\3
xZ3
xX3
xV3
xT3
xR3
xP3
xN3
xL3
xJ3
xH3
x,4
x*4
x(4
x&4
x$4
x"4
x~3
x|3
xz3
xx3
xv3
xt3
xr3
xp3
xn3
xl3
xP4
xN4
xL4
xJ4
xH4
xF4
xD4
xB4
x@4
x>4
x<4
x:4
x84
x64
x44
x24
xt4
xr4
xp4
xn4
xl4
xj4
xh4
xf4
xd4
xb4
x`4
x^4
x\4
xZ4
xX4
xV4
x:5
x85
x65
x45
x25
x05
x.5
x,5
x*5
x(5
x&5
x$5
x"5
x~4
x|4
xz4
x^5
x\5
xZ5
xX5
xV5
xT5
xR5
xP5
xN5
xL5
xJ5
xH5
xF5
xD5
xB5
x@5
xZ<
xY<
xX<
xW<
0|6
x{6
xH8
xD8
x@8
x<8
x&8
x"8
x|7
xx7
xb7
x^7
xZ7
xV7
x@7
x<7
x87
x47
x.;
x*;
x&;
x";
xj:
xf:
xb:
x^:
xH:
xD:
x@:
x<:
x&:
x":
x|9
xx9
1L=
1%=
1_<
x~<
x|<
xz<
xx<
xv<
xt<
xr<
xp<
xn<
xl<
xj<
xh<
xf<
xd<
xb<
x`<
xD=
xB=
x@=
x>=
x<=
x:=
x8=
x6=
x4=
x2=
x0=
x.=
x,=
x*=
x(=
x&=
xk=
xi=
xg=
xe=
xc=
xa=
x_=
x]=
x[=
xY=
xW=
xU=
xS=
xQ=
xO=
xM=
xm=
1_>
1;>
1u=
x6>
x4>
x2>
x0>
x.>
x,>
x*>
x(>
x&>
x$>
x">
x~=
x|=
xz=
xx=
xv=
xZ>
xX>
xV>
xT>
xR>
xP>
xN>
xL>
xJ>
xH>
xF>
xD>
xB>
x@>
x>>
x<>
x~>
x|>
xz>
xx>
xv>
xt>
xr>
xp>
xn>
xl>
xj>
xh>
xf>
xd>
xb>
x`>
$end
#1
06'
07'
08'
09'
0:'
0;'
0<'
0='
0>'
0?'
0@'
0A'
0B'
0C'
0D'
0E'
0t&
0u&
0v&
0w&
0x&
0y&
0z&
0{&
0|&
0}&
0~&
0!'
0"'
0#'
0$'
0%'
0&'
0''
0('
0)'
0*'
0+'
0,'
0-'
0.'
0/'
00'
01'
02'
03'
04'
05'
0A&
0B&
0C&
0D&
0E&
0F&
0G&
0H&
0I&
0J&
0K&
0L&
0M&
0N&
0O&
0P&
0s&
0r&
0q&
0a&
0b&
0c&
0d&
0e&
0f&
0g&
0h&
0i&
0j&
0k&
0l&
0m&
0n&
0o&
0p&
0Q&
0R&
0S&
0T&
0U&
0V&
0W&
0X&
0Y&
0Z&
0[&
0\&
0]&
0^&
0_&
0`&
0#&
0"&
0!&
0~%
0n%
0o%
0p%
0q%
0r%
0s%
0t%
0u%
0v%
0w%
0x%
0y%
0z%
0{%
0|%
0}%
0^%
0_%
0`%
0a%
0b%
0c%
0d%
0e%
0f%
0g%
0h%
0i%
0j%
0k%
0l%
0m%
0N%
0O%
0P%
0Q%
0R%
0S%
0T%
0U%
0V%
0W%
0X%
0Y%
0Z%
0[%
0\%
0]%
0>%
0?%
0@%
0A%
0B%
0C%
0D%
0E%
0F%
0G%
0H%
0I%
0J%
0K%
0L%
0M%
0.%
0/%
00%
01%
02%
03%
04%
05%
06%
07%
08%
09%
0:%
0;%
0<%
0=%
0|$
0}$
0~$
0!%
0"%
0#%
0$%
0%%
0&%
0'%
0(%
0)%
0*%
0+%
0,%
0-%
0l$
0m$
0n$
0o$
0p$
0q$
0r$
0s$
0t$
0u$
0v$
0w$
0x$
0y$
0z$
0{$
0W$
0]$
0X$
0\$
0[$
0Y$
0F+
0P$
0O$
06-
07-
08-
09-
0:-
0;-
0<-
0=-
0>-
0?-
0@-
0A-
0B-
0C-
0D-
0E-
0&-
0'-
0(-
0)-
0*-
0+-
0,-
0--
0.-
0/-
00-
01-
02-
03-
04-
05-
0t,
0u,
0v,
0w,
0x,
0y,
0z,
0{,
0|,
0},
0~,
0!-
0"-
0#-
0$-
0%-
0d,
0e,
0f,
0g,
0h,
0i,
0j,
0k,
0l,
0m,
0n,
0o,
0p,
0q,
0r,
0s,
0T,
0U,
0V,
0W,
0X,
0Y,
0Z,
0[,
0\,
0],
0^,
0_,
0`,
0a,
0b,
0c,
0D,
0E,
0F,
0G,
0H,
0I,
0J,
0K,
0L,
0M,
0N,
0O,
0P,
0Q,
0R,
0S,
04,
05,
06,
07,
08,
09,
0:,
0;,
0<,
0=,
0>,
0?,
0@,
0A,
0B,
0C,
0$,
0%,
0&,
0',
0(,
0),
0*,
0+,
0,,
0-,
0.,
0/,
00,
01,
02,
03,
1\+
0,$
0-$
0.$
0/$
00$
01$
02$
03$
04$
05$
06$
07$
08$
09$
0:$
0;$
0z#
0{#
0|#
0}#
0~#
0!$
0"$
0#$
0$$
0%$
0&$
0'$
0($
0)$
0*$
0+$
0G'
0H'
0I'
0J'
0K'
0L'
0M'
0N'
0O'
0P'
0Q'
0R'
0S'
0T'
0U'
0V'
0S$
0R$
0Q$
0V$
0U$
0T$
0y#
0x#
0w#
0g$
0f$
0e$
0d$
0k$
0j$
0i$
0h$
0c$
0b$
0v2
0u2
0t2
0s2
0a$
0`$
0>$
128
1K8
118
1G8
108
1C8
1/8
1?8
1n7
1)8
1m7
1%8
1l7
1!8
1k7
1{7
1L7
1e7
1K7
1a7
1J7
1]7
1I7
1Y7
1*7
1C7
1)7
1?7
1(7
1;7
1'7
177
1!;
10;
0m=
0H8
068
0F*
0|2
1:8
1F8
0D8
058
198
1B8
0@8
048
188
1>8
0<8
0!7
1w7
1(8
0&8
0r7
1v7
1$8
0"8
0q7
1u7
1~7
0|7
0p7
1t7
1z7
0x7
0~6
1U7
1d7
0b7
0P7
1T7
1`7
0^7
0O7
1S7
1\7
0Z7
0N7
1R7
1X7
0V7
0}6
137
1B7
0@7
0.7
127
1>7
0<7
0-7
117
1:7
087
0,7
107
167
047
0{6
0-!
0V
0U
0A
0D+
0B+
0C+
0A+
08.
07.
06.
05.
0*.
0).
0D
0C
0B
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
0O#
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
0n+
0m+
0l+
0k+
0j+
0i+
0h+
0g+
0f+
0e+
0d+
0c+
0b+
0a+
0`+
0_+
0~+
0}+
0|+
0{+
0z+
0y+
0x+
0w+
0v+
0u+
0t+
0s+
0r+
0q+
0p+
0o+
0[.
0z-
0y-
0E6
0D6
0C6
0B6
0A6
0@6
0?6
0>6
0=6
0<6
0;6
0:6
096
086
076
066
0U6
0T6
0S6
0R6
0Q6
0P6
0O6
0N6
0M6
0L6
0K6
0J6
0I6
0H6
0G6
0F6
0^5
0\5
0Z5
0X5
0V5
0T5
0R5
0P5
0N5
0L5
0J5
0H5
0F5
0D5
0B5
0@5
0~<
0|<
0z<
0x<
0v<
0t<
0r<
0p<
0n<
0l<
0j<
0h<
0f<
0d<
0b<
0`<
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0D=
0B=
0@=
0>=
0<=
0:=
08=
06=
04=
02=
00=
0.=
0,=
0*=
0(=
0&=
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
06>
04>
02>
00>
0.>
0,>
0*>
0(>
0&>
0$>
0">
0~=
0|=
0z=
0x=
0v=
0Z>
0X>
0V>
0T>
0R>
0P>
0N>
0L>
0J>
0H>
0F>
0D>
0B>
0@>
0>>
0<>
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0#7
057
0$7
097
0%7
0=7
0&7
0A7
0E7
0W7
0F7
0[7
0G7
0_7
0H7
0c7
0g7
0y7
0h7
0}7
0i7
0#8
0j7
0'8
0+8
0=8
0,8
0A8
0-8
0E8
0.8
0I8
0=$
0u6
0t6
0s6
0r6
0q6
0p6
0o6
0n6
0m6
0l6
0k6
0j6
0i6
0h6
0g6
0f6
0)!
0+!
0*!
0,!
0e6
0d6
0c6
0b6
0a6
0`6
0_6
0^6
0]6
0\6
0[6
0Z6
0Y6
0X6
0W6
0V6
0+2
0)2
0'2
0%2
0#2
0!2
0}1
0{1
0y1
0w1
0u1
0s1
0q1
0o1
0m1
0k1
0f1
0d1
0b1
0`1
0^1
0\1
0Z1
0X1
0V1
0T1
0R1
0P1
0N1
0L1
0J1
0H1
0C1
0A1
0?1
0=1
0;1
091
071
051
031
011
0/1
0-1
0+1
0)1
0'1
0%1
0~0
0|0
0z0
0x0
0v0
0t0
0r0
0p0
0n0
0l0
0j0
0h0
0f0
0d0
0b0
0`0
0[0
0Y0
0W0
0U0
0S0
0Q0
0O0
0M0
0K0
0I0
0G0
0E0
0C0
0A0
0?0
0=0
080
060
040
020
000
0.0
0,0
0*0
0(0
0&0
0$0
0"0
0~/
0|/
0z/
0x/
0s/
0q/
0o/
0m/
0k/
0i/
0g/
0e/
0c/
0a/
0_/
0]/
0[/
0Y/
0W/
0U/
0P/
0N/
0L/
0J/
0H/
0F/
0D/
0B/
0@/
0>/
0</
0:/
08/
06/
04/
02/
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0~>
0|>
0z>
0x>
0v>
0t>
0r>
0p>
0n>
0l>
0j>
0h>
0f>
0d>
0b>
0`>
0(!
0'!
0&!
0%!
0$!
0#!
0"!
0!!
0~
0}
0|
0{
0z
0y
0x
0w
0j.
0i.
0,.
0+.
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0:5
085
065
045
025
005
0.5
0,5
0*5
0(5
0&5
0$5
0"5
0~4
0|4
0z4
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0/#
0t4
0r4
0p4
0n4
0l4
0j4
0h4
0f4
0d4
0b4
0`4
0^4
0\4
0Z4
0X4
0V4
0,4
0*4
0(4
0&4
0$4
0"4
0~3
0|3
0z3
0x3
0v3
0t3
0r3
0p3
0n3
0l3
0v.
0u.
0:.
09.
0"/
0!/
0~.
0}.
0H.
0G.
0F.
0E.
0Q-
0P-
0O-
0N-
0$/
0#/
0J.
0I.
0P4
0N4
0L4
0J4
0H4
0F4
0D4
0B4
0@4
0>4
0<4
0:4
084
064
044
024
0B3
0@3
0>3
0<3
0:3
083
063
043
023
003
0.3
0,3
0*3
0(3
0&3
0$3
0f3
0d3
0b3
0`3
0^3
0\3
0Z3
0X3
0V3
0T3
0R3
0P3
0N3
0L3
0J3
0H3
0x.
0w.
0<.
0;.
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~!
0}!
0|!
0{!
0J!
0I!
0H!
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0>!
0=!
0<!
0;!
0&/
0%/
0S-
0R-
0L.
0K.
0{(
0/)
0|(
03)
0}(
07)
0~(
0;)
0?)
0Q)
0@)
0U)
0A)
0Y)
0B)
0])
0a)
0s)
0b)
0w)
0c)
0{)
0d)
0!*
0%*
07*
0&*
0;*
1'*
1+*
1?*
1A*
0(*
0C*
0)(
0>*
1((
0/*
1<*
13*
18*
12*
1"*
1q)
1|)
1p)
1x)
1o)
1t)
1n)
1^)
1O)
1Z)
1N)
1V)
1M)
1R)
1L)
1<)
1-)
18)
1,)
14)
1+)
10)
1*)
0*(
0.)
0&)
02)
0')
06)
0()
0:)
0w(
0P)
0H)
0T)
0I)
0X)
0J)
0\)
0x(
0r)
0j)
0v)
0k)
0z)
0l)
0~)
0y(
06*
0.*
0:*
0'(
0&(
0%(
0$(
0#(
0"(
0!(
0~'
0}'
0|'
0{'
0z'
0y'
0x'
0U-
0T-
0Z!
0Y!
1X!
0W!
0V!
1U!
1T!
0S!
1R!
0Q!
0P!
0O!
0N!
0M!
1L!
1K!
0j!
0h!
0g!
0f!
0e!
0d!
0c!
0b!
0a!
0`!
0_!
0^!
0]!
0\!
0[!
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0$
0#
0"
0!
0M(
0I(
0G(
0E(
0C(
0A(
0?(
0=(
0;(
09(
07(
05(
03(
01(
0/(
0y*
0u*
0s*
0q*
0o*
0m*
0k*
0i*
0g*
0e*
0c*
0a*
0_*
0]*
0[*
0V*
0U*
0S*
0R*
0O*
0M*
0L*
0J*
0I*
0N$
0M$
0K$
0J$
0G$
0E$
0D$
0B$
0A$
0?+
0=+
09+
07+
01+
0-+
0++
0'+
0%+
0@2
0?2
0>2
0=2
0<2
0;2
0:2
092
082
072
062
052
042
032
022
012
019
009
0/9
0.9
0-9
0,9
0+9
0*9
0)9
0(9
0'9
0&9
0%9
0$9
0#9
0"9
0A9
0@9
0?9
0>9
0=9
0<9
0;9
0:9
099
089
079
069
059
049
039
029
0Z<
0Y<
0X<
0W<
0/&
0g9
0y9
0h9
0}9
0i9
0#:
0j9
0':
0+:
0=:
0,:
0A:
0-:
0E:
0.:
0I:
0M:
0_:
0N:
0c:
0O:
0g:
0P:
0k:
0o:
0#;
0p:
0';
0q:
0+;
0r:
0/;
1k9
1{9
1l9
1!:
1m9
1%:
1n9
1):
1/:
1?:
10:
1C:
11:
1G:
12:
1K:
1Q:
1a:
1R:
1e:
1S:
1i:
1T:
1m:
1s:
1%;
1t:
1);
1u:
1-;
1v:
11;
0.;
0z:
0_8
1,;
1~:
1(;
1}:
1$;
1|:
1l:
1]:
1h:
1\:
1d:
1[:
1`:
1Z:
1J:
1;:
1F:
1::
1B:
19:
1>:
18:
1(:
1w9
1$:
1v9
1~9
1u9
1z9
1t9
0F'
0O8
0x9
0p9
0|9
0q9
0":
0r9
0&:
0c9
0<:
04:
0@:
05:
0D:
06:
0H:
0d9
0^:
0V:
0b:
0W:
0f:
0X:
0j:
0e9
0";
0x:
0&;
0y:
0*;
0^8
0]8
0\8
0[8
0Z8
0Y8
0X8
0W8
0V8
0U8
0T8
0S8
0R8
0Q8
0P8
0P2
0&<
0%<
0$<
0#<
0"<
0!<
0~;
0};
0|;
0{;
0z;
0y;
0x;
0w;
0v;
0u;
0D;
0C;
0B;
0A;
0@;
0?;
0>;
0=;
0<;
0;;
0:;
09;
08;
07;
06;
05;
06<
05<
04<
03<
02<
01<
00<
0/<
0.<
0-<
0,<
0+<
0*<
0)<
0(<
0'<
0T;
0S;
0R;
0Q;
0P;
0O;
0N;
0M;
0L;
0K;
0J;
0I;
0H;
0G;
0F;
0E;
0F<
0E<
0D<
0C<
0B<
0A<
0@<
0?<
0><
0=<
0<<
0;<
0:<
09<
08<
07<
0d;
0c;
0b;
0a;
0`;
0_;
0^;
0];
0\;
0[;
0Z;
0Y;
0X;
0W;
0V;
0U;
0V<
0U<
0T<
0S<
0R<
0Q<
0P<
0O<
0N<
0M<
0L<
0K<
0J<
0I<
0H<
0G<
0t;
0s;
0r;
0q;
0p;
0o;
0n;
0m;
0l;
0k;
0j;
0i;
0h;
0g;
0f;
0e;
1y6
0w6
0x6
0v6
0o8
0n8
0m8
0l8
0k8
0j8
0i8
0h8
0g8
0f8
0e8
0d8
0c8
0b8
0a8
0`8
0!9
0~8
0}8
0|8
0{8
0z8
0y8
0x8
0w8
0v8
0u8
0t8
0s8
0r8
0q8
0p8
1[<
0A2
0B2
0C2
0E2
0F2
0G2
0H2
1D2
0I2
b0 J2
b10 K2
b0 M2
b0 L2
0D2
b0 N2
0O2
1A2
b0 N8
0-2
0.2
0/2
1-2
1/2
1_#
0H+
0G+
0a#
0d#
0f#
0g#
0h#
0[+
0<$
0@&
0?&
0>&
0=&
0<&
0;&
0:&
09&
08&
07&
06&
05&
04&
03&
02&
01&
0v#
0u#
0t#
0s#
0l#
0k#
0P+
0O+
0j#
1i#
1b#
0c#
1e#
00&
1i!
1T*
1Q*
1P*
1N*
0K*
1H*
1G*
0S+
0R+
0Q+
0k=
0i=
0g=
0e=
0c=
0a=
0_=
0]=
0[=
0Y=
0W=
0U=
0S=
0Q=
0O=
0M=
1L$
1I$
1H$
1F$
0C$
1@$
1?$
1K(
1w*
1;+
15+
13+
1/+
0)+
1#+
1!+
0N+
0M+
0L+
0K+
0J+
0I+
0-2
0/2
b0 02
0b#
0e#
0r#
0q#
0p#
0o#
#50
08!
05!
0i2
0f2
0c2
0`2
0]2
0Z2
0W2
0T2
0Q2
036
006
0-6
0*6
0'6
0$6
0!6
0|5
0y5
0v5
0s5
0p5
0m5
0j5
0g5
0d5
#100
18!
15!
1i2
1f2
1c2
1`2
1]2
1Z2
1W2
1T2
1Q2
136
106
1-6
1*6
1'6
1$6
1!6
1|5
1y5
1v5
1s5
1p5
1m5
1j5
1g5
1d5
b10 :!
#150
08!
05!
0i2
0f2
0c2
0`2
0]2
0Z2
0W2
0T2
0Q2
036
006
0-6
0*6
0'6
0$6
0!6
0|5
0y5
0v5
0s5
0p5
0m5
0j5
0g5
0d5
#200
18!
15!
1i2
1f2
1c2
1`2
1]2
1Z2
1W2
1T2
1Q2
136
106
1-6
1*6
1'6
1$6
1!6
1|5
1y5
1v5
1s5
1p5
1m5
1j5
1g5
1d5
b11 :!
#201
09!
07!
0j2
0g2
0d2
0a2
0^2
0[2
0X2
0U2
0R2
046
016
0.6
0+6
0(6
0%6
0"6
0}5
0z5
0w5
0t5
0q5
0n5
0k5
0h5
0e5
#250
08!
05!
0i2
0f2
0c2
0`2
0]2
0Z2
0W2
0T2
0Q2
036
006
0-6
0*6
0'6
0$6
0!6
0|5
0y5
0v5
0s5
0p5
0m5
0j5
0g5
0d5
#300
18!
15!
1i2
1f2
1c2
1`2
1]2
1Z2
1W2
1T2
1Q2
136
106
1-6
1*6
1'6
1$6
1!6
1|5
1y5
1v5
1s5
1p5
1m5
1j5
1g5
1d5
1r5
1L(
b10000000000000000000000000000011 c(
b0 d(
b1 d(
b10 d(
1x*
1<+
16+
14+
10+
1$+
1"+
0^+
b100 :!
#301
0\+
1,$
1-$
13$
15$
16$
19$
1*$
1U'
1u2
1>$
1F*
1|2
0T*
0Q*
0P*
0N*
0H*
0G*
1I!
1\5
1,#
1L#
1I#
1H#
1S+
1R+
1\#
1Y#
1X#
1V#
1>
1;
1:
18
12
11
0'*
0+*
0?*
0A*
1>*
0((
1/*
1'(
165
105
1.5
1*5
1<#
19#
18#
1p4
1j4
1h4
1(4
1Y!
0U!
0T!
0R!
1M!
0L!
0K!
0i!
1h!
1/
0L$
0I$
0H$
0F$
0@$
0?$
0;+
05+
03+
0/+
0#+
0!+
0K(
1I(
0w*
1u*
1L4
1F4
1D4
1>2
1;2
1:2
182
122
112
0A2
1D2
0D2
1B2
b1 M2
1E2
b10 L2
b101x J2
0_#
1H+
1a#
1k#
1P+
0F*
0|2
1U*
1T*
1I*
0R+
1M$
1L$
1A$
1=+
1;+
1%+
xN+
1M+
1K+
b1101 02
1r#
1p#
1o#
#350
08!
05!
0i2
0f2
0c2
0`2
0]2
0Z2
0W2
0T2
0Q2
036
006
0-6
0*6
0'6
0$6
0!6
0|5
0y5
0v5
0s5
0p5
0m5
0j5
0g5
0d5
#400
18!
15!
1i2
1f2
1c2
1`2
1]2
1Z2
1W2
1T2
1Q2
136
106
1-6
1*6
1'6
1$6
1!6
1|5
1y5
1v5
1s5
1p5
1m5
1j5
1g5
1d5
1l5
1x5
1~5
1#6
1)6
1k2
0L(
1J(
0x*
1v*
1>+
06+
04+
00+
1&+
0$+
0"+
1n2
1w2
1)4
1M4
1G4
1E4
1q4
1k4
1i4
175
115
1/5
1+5
1]5
b101 :!
#401
1|%
1e%
1g%
1h%
1k%
1W%
1X%
1[%
1G%
1H%
1K%
1;%
1Y$
1O$
0,$
0-$
1.$
03$
05$
06$
1:$
1)$
0*$
1T'
0U'
1S$
1k$
1i$
1h$
1b$
1s2
1-8
1E8
1t6
0I!
1H!
1-#
1M#
0I#
0H#
0S+
1]#
0Y#
0X#
0V#
1?
0;
0:
08
13
02
01
1C6
1@6
1?6
1S6
1P6
1O6
0\5
1Z5
1d6
1B=
1h7
1}7
1i7
1#8
1,8
1A8
1&*
1;*
1'*
1+*
1?*
1A*
0>*
1((
0/*
1s6
1p6
1o6
1+"
185
005
0.5
0*5
1=#
09#
08#
1r4
0j4
0h4
1*4
0X!
1V!
1U!
1Q!
0M!
1L!
1K!
1i!
0/
1.
1K(
1w*
0T*
1R*
1Q*
1M*
0I*
1H*
1G*
1N4
0F4
0D4
0L$
1J$
1I$
1E$
0A$
1@$
1?$
0;+
17+
15+
1-+
0%+
1#+
1!+
1?9
1<9
1;9
1?2
0;2
0:2
082
132
022
012
1N:
1c:
1O:
1g:
1p:
1';
1]8
1Z8
1Y8
1}8
1z8
1y8
0y6
0[<
0B2
0E2
1D2
b0 J2
b0 M2
b0 L2
0D2
b1000 N2
b1100100 N8
0H+
0a#
1>&
1;&
1:&
1s#
0k#
0P+
10&
0i!
0U*
0R*
0Q*
0M*
1K*
0H*
0G*
1g=
1a=
1_=
0M$
0J$
0I$
0E$
1C$
0@$
0?$
0K(
0w*
0=+
07+
05+
0-+
1)+
0#+
0!+
0N+
0M+
0K+
b0 02
0r#
0p#
0o#
#450
08!
05!
0i2
0f2
0c2
0`2
0]2
0Z2
0W2
0T2
0Q2
036
006
0-6
0*6
0'6
0$6
0!6
0|5
0y5
0v5
0s5
0p5
0m5
0j5
0g5
0d5
#500
18!
15!
1i2
1f2
1c2
1`2
1]2
1Z2
1W2
1T2
1Q2
136
106
1-6
1*6
1'6
1$6
1!6
1|5
1y5
1v5
1s5
1p5
1m5
1j5
1g5
1d5
1f5
0x5
0~5
0#6
0)6
1,6
1b2
0k2
0>+
0<+
1*+
0&+
0n2
1m2
0w2
1+4
1O4
0G4
0E4
1s4
0k4
0i4
195
015
0/5
0+5
0]5
1[5
1C=
1h=
1b=
1`=
b110 :!
#501
1J&
1K&
1N&
1o&
1{%
0|%
0e%
0g%
0h%
1l%
0W%
0X%
1\%
0G%
0H%
1L%
1<%
0Y$
1P$
0O$
0.$
10$
09$
0:$
0S$
1V$
1d$
0k$
0i$
0h$
0b$
1`$
0-8
0E8
0,8
008
0A8
0C8
1@8
0s6
148
0t6
1r6
0-#
0,#
0M#
0L#
0]#
0\#
0?
0>
15
03
0C6
0@6
0?6
1T6
0P6
0O6
0d6
1c6
0B=
1@=
14>
1V>
1P>
1N>
1d
1a
1`
0h7
0}7
0i7
0#8
1-8
1E8
1t6
0p6
0o6
0+"
1*"
085
065
0=#
0<#
0r4
0p4
0*4
0(4
0N4
0L4
0?9
0<9
0;9
1W<
0?2
0>2
152
032
1/&
0N:
0c:
0O:
0g:
0p:
0';
0]8
0Z8
0Y8
1F'
1d6
0c6
1b6
1+"
0*"
1)"
1I!
0H!
1G!
1%*
17*
0&*
0;*
0'*
0+*
0?*
0A*
1>*
0((
1/*
1&(
0Y!
0V!
0U!
0Q!
0L!
0K!
1i!
0h!
1g!
1/
0.
1-
1K(
0I(
1G(
1w*
0u*
1s*
0}8
0z8
0y8
1y6
1[<
1D2
0D2
b0 N2
1O2
b0 N8
1<$
0>&
0;&
0:&
0s#
00&
0i!
1h!
0K*
0g=
0a=
0_=
0C$
0K(
1I(
0w*
1u*
0)+
#550
08!
05!
0i2
0f2
0c2
0`2
0]2
0Z2
0W2
0T2
0Q2
036
006
0-6
0*6
0'6
0$6
0!6
0|5
0y5
0v5
0s5
0p5
0m5
0j5
0g5
0d5
#600
18!
15!
1i2
1f2
1c2
1`2
1]2
1Z2
1W2
1T2
1Q2
136
106
1-6
1*6
1'6
1$6
1!6
1|5
1y5
1v5
1s5
1p5
1m5
1j5
1g5
1d5
0,6
1Y2
0b2
1H(
1t*
0*+
0m2
1l2
0+4
0)4
0O4
0M4
0s4
0q4
095
075
0C=
1A=
0h=
0b=
0`=
15>
1W>
1Q>
1O>
b111 :!
#601
1}&
1~&
1#'
14'
0J&
0K&
0N&
1n&
0o&
0k%
0l%
0[%
0\%
0K%
0L%
0;%
0<%
1F+
0P$
00$
1($
1S'
0V$
1y#
0d$
1A
1D
1X5
05
1[.
0T6
0S6
0d
0a
0`
04>
12>
0V>
0P>
0N>
1:"
17"
16"
1,8
108
1A8
1C8
0-8
0E8
0t6
0@8
1s6
048
0r6
0d6
1c6
0b6
1R
1O
1N
1y-
1i.
1+.
0+"
1*"
0)"
0I!
1H!
0G!
1w.
1;.
0%*
07*
1&*
1;*
1'*
1+*
1?*
1A*
0>*
1((
0/*
0&(
1%/
1K.
1Y!
1V!
1U!
1Q!
1L!
1K!
1i!
0g!
0/
1.
0-
1K(
0G(
1w*
0s*
1U*
1R*
1Q*
1M*
1H*
1G*
1T-
1b1
1\1
1Z1
1M$
1J$
1I$
1E$
1@$
1?$
1=+
17+
15+
1-+
1#+
1!+
0W<
052
0/&
0F'
1G!
1%*
17*
1&(
0Y!
0V!
0U!
0Q!
0L!
0K!
1g!
1-
1G(
1s*
0U*
0R*
0Q*
0M*
0H*
0G*
0M$
0J$
0I$
0E$
0@$
0?$
0=+
07+
05+
0-+
0#+
0!+
1D2
0D2
0O2
1A2
0<$
1_#
1F*
1|2
#650
08!
05!
0i2
0f2
0c2
0`2
0]2
0Z2
0W2
0T2
0Q2
036
006
0-6
0*6
0'6
0$6
0!6
0|5
0y5
0v5
0s5
0p5
0m5
0j5
0g5
0d5
#700
18!
15!
1i2
1f2
1c2
1`2
1]2
1Z2
1W2
1T2
1Q2
136
106
1-6
1*6
1'6
1$6
1!6
1|5
1y5
1v5
1s5
1p5
1m5
1j5
1g5
1d5
0Y2
1L(
b0 d(
b1 d(
b10 d(
1x*
1c1
1]1
1[1
0l2
1}2
1Y5
05>
13>
0W>
0Q>
0O>
b1000 :!
b1 .!
#701
0}&
0~&
0#'
13'
04'
1z%
1W$
0F+
1=,
1>,
1A,
1*$
1U'
0y#
1+8
1=8
1r6
0A
0D
1I!
0[.
0y-
1\5
1b6
1>=
0:"
07"
06"
0'*
0+*
0?*
0A*
1>*
0((
1/*
03*
0'(
0<*
1:*
1.*
02*
0&(
08*
16*
1y(
1%(
0b1
0\1
0Z1
0R
0O
0N
1)"
0i.
0+.
0i!
0h!
0g!
1f!
1/
0K(
0I(
0G(
1E(
0w*
0u*
0s*
1q*
0w.
0;.
0%/
0K.
0T-
1b1
1\1
1Z1
#750
08!
05!
0i2
0f2
0c2
0`2
0]2
0Z2
0W2
0T2
0Q2
036
006
0-6
0*6
0'6
0$6
0!6
0|5
0y5
0v5
0s5
0p5
0m5
0j5
0g5
0d5
#800
18!
15!
1i2
1f2
1c2
1`2
1]2
1Z2
1W2
1T2
1Q2
136
106
1-6
1*6
1'6
1$6
1!6
1|5
1y5
1v5
1s5
1p5
1m5
1j5
1g5
1d5
0L(
0J(
0H(
1F(
b0 d(
b1 d(
b10 d(
0x*
0v*
0t*
1r*
1]5
1?=
1H=
b1001 :!
#801
1s&
1m&
1|%
1'$
0($
0)$
0*$
1R'
0S'
0T'
0U'
1-8
1E8
1t6
1-!
0I!
0H!
0G!
1F!
0\5
0Z5
0X5
1V5
1d6
1B=
10>
1d)
1!*
0%*
07*
0&*
0;*
1'*
1+*
1?*
1A*
0>*
1((
0/*
1<*
13*
1&(
18*
12*
0%(
0"*
0q)
1l)
1~)
0y(
06*
0.*
0:*
0&(
1q)
1%(
1"*
1$(
0~)
0l)
0$(
1+"
1i!
0/
0.
0-
1,
1K(
1w*
#850
08!
05!
0i2
0f2
0c2
0`2
0]2
0Z2
0W2
0T2
0Q2
036
006
0-6
0*6
0'6
0$6
0!6
0|5
0y5
0v5
0s5
0p5
0m5
0j5
0g5
0d5
#900
18!
15!
1i2
1f2
1c2
1`2
1]2
1Z2
1W2
1T2
1Q2
136
106
1-6
1*6
1'6
1$6
1!6
1|5
1y5
1v5
1s5
1p5
1m5
1j5
1g5
1d5
1L(
b0 d(
b1 d(
b10 d(
1x*
0]5
0[5
0Y5
1W5
1C=
b10000000000000000000000000000011 p=
b0 q=
b1 q=
b10 q=
11>
b1010 :!
b10 .!
#901
12'
1o&
1y%
0z%
0{%
0|%
1*$
1U'
0-8
0E8
0,8
0A8
0+8
0=8
1j7
1'8
1q6
0r6
0s6
0t6
1I!
1\5
0d6
0c6
0b6
1a6
0B=
0@=
0>=
1<=
14>
0'*
0+*
0?*
0A*
1>*
0((
1/*
1'(
0+"
0*"
0)"
1("
0i!
1h!
1/
0K(
1I(
0w*
1u*
