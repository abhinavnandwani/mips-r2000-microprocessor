$date
	Mon Nov  4 21:35:33 2024
$end
$version
	ModelSim Version 10.7c
$end
$timescale
	1ns
$end

$scope module proc_hier_pbench $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemDataIn [15] $end
$var wire 1 h MemDataIn [14] $end
$var wire 1 i MemDataIn [13] $end
$var wire 1 j MemDataIn [12] $end
$var wire 1 k MemDataIn [11] $end
$var wire 1 l MemDataIn [10] $end
$var wire 1 m MemDataIn [9] $end
$var wire 1 n MemDataIn [8] $end
$var wire 1 o MemDataIn [7] $end
$var wire 1 p MemDataIn [6] $end
$var wire 1 q MemDataIn [5] $end
$var wire 1 r MemDataIn [4] $end
$var wire 1 s MemDataIn [3] $end
$var wire 1 t MemDataIn [2] $end
$var wire 1 u MemDataIn [1] $end
$var wire 1 v MemDataIn [0] $end
$var wire 1 w MemDataOut [15] $end
$var wire 1 x MemDataOut [14] $end
$var wire 1 y MemDataOut [13] $end
$var wire 1 z MemDataOut [12] $end
$var wire 1 { MemDataOut [11] $end
$var wire 1 | MemDataOut [10] $end
$var wire 1 } MemDataOut [9] $end
$var wire 1 ~ MemDataOut [8] $end
$var wire 1 !! MemDataOut [7] $end
$var wire 1 "! MemDataOut [6] $end
$var wire 1 #! MemDataOut [5] $end
$var wire 1 $! MemDataOut [4] $end
$var wire 1 %! MemDataOut [3] $end
$var wire 1 &! MemDataOut [2] $end
$var wire 1 '! MemDataOut [1] $end
$var wire 1 (! MemDataOut [0] $end
$var wire 1 )! DCacheHit $end
$var wire 1 *! ICacheHit $end
$var wire 1 +! DCacheReq $end
$var wire 1 ,! ICacheReq $end
$var wire 1 -! Halt $end
$var integer 32 .! inst_count $end
$var integer 32 /! trace_file $end
$var integer 32 0! sim_log_file $end
$var integer 32 1! DCacheHit_count $end
$var integer 32 2! ICacheHit_count $end
$var integer 32 3! DCacheReq_count $end
$var integer 32 4! ICacheReq_count $end

$scope module DUT $end
$var wire 1 5! clk $end
$var wire 1 6! err $end
$var wire 1 7! rst $end

$scope module c0 $end
$var reg 1 8! clk $end
$var reg 1 9! rst $end
$var wire 1 6! err $end
$var integer 32 :! cycle_count $end
$upscope $end

$scope module p0 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6! err $end
$var wire 1 ;! PC_Jump [15] $end
$var wire 1 <! PC_Jump [14] $end
$var wire 1 =! PC_Jump [13] $end
$var wire 1 >! PC_Jump [12] $end
$var wire 1 ?! PC_Jump [11] $end
$var wire 1 @! PC_Jump [10] $end
$var wire 1 A! PC_Jump [9] $end
$var wire 1 B! PC_Jump [8] $end
$var wire 1 C! PC_Jump [7] $end
$var wire 1 D! PC_Jump [6] $end
$var wire 1 E! PC_Jump [5] $end
$var wire 1 F! PC_Jump [4] $end
$var wire 1 G! PC_Jump [3] $end
$var wire 1 H! PC_Jump [2] $end
$var wire 1 I! PC_Jump [1] $end
$var wire 1 J! PC_Jump [0] $end
$var wire 1 K! PC [15] $end
$var wire 1 L! PC [14] $end
$var wire 1 M! PC [13] $end
$var wire 1 N! PC [12] $end
$var wire 1 O! PC [11] $end
$var wire 1 P! PC [10] $end
$var wire 1 Q! PC [9] $end
$var wire 1 R! PC [8] $end
$var wire 1 S! PC [7] $end
$var wire 1 T! PC [6] $end
$var wire 1 U! PC [5] $end
$var wire 1 V! PC [4] $end
$var wire 1 W! PC [3] $end
$var wire 1 X! PC [2] $end
$var wire 1 Y! PC [1] $end
$var wire 1 Z! PC [0] $end
$var wire 1 [! instr [15] $end
$var wire 1 \! instr [14] $end
$var wire 1 ]! instr [13] $end
$var wire 1 ^! instr [12] $end
$var wire 1 _! instr [11] $end
$var wire 1 `! instr [10] $end
$var wire 1 a! instr [9] $end
$var wire 1 b! instr [8] $end
$var wire 1 c! instr [7] $end
$var wire 1 d! instr [6] $end
$var wire 1 e! instr [5] $end
$var wire 1 f! instr [4] $end
$var wire 1 g! instr [3] $end
$var wire 1 h! instr [2] $end
$var wire 1 i! instr [1] $end
$var wire 1 j! instr [0] $end
$var wire 1 k! PC_f [15] $end
$var wire 1 l! PC_f [14] $end
$var wire 1 m! PC_f [13] $end
$var wire 1 n! PC_f [12] $end
$var wire 1 o! PC_f [11] $end
$var wire 1 p! PC_f [10] $end
$var wire 1 q! PC_f [9] $end
$var wire 1 r! PC_f [8] $end
$var wire 1 s! PC_f [7] $end
$var wire 1 t! PC_f [6] $end
$var wire 1 u! PC_f [5] $end
$var wire 1 v! PC_f [4] $end
$var wire 1 w! PC_f [3] $end
$var wire 1 x! PC_f [2] $end
$var wire 1 y! PC_f [1] $end
$var wire 1 z! PC_f [0] $end
$var wire 1 {! PC_d [15] $end
$var wire 1 |! PC_d [14] $end
$var wire 1 }! PC_d [13] $end
$var wire 1 ~! PC_d [12] $end
$var wire 1 !" PC_d [11] $end
$var wire 1 "" PC_d [10] $end
$var wire 1 #" PC_d [9] $end
$var wire 1 $" PC_d [8] $end
$var wire 1 %" PC_d [7] $end
$var wire 1 &" PC_d [6] $end
$var wire 1 '" PC_d [5] $end
$var wire 1 (" PC_d [4] $end
$var wire 1 )" PC_d [3] $end
$var wire 1 *" PC_d [2] $end
$var wire 1 +" PC_d [1] $end
$var wire 1 ," PC_d [0] $end
$var wire 1 -" ALUOpr [5] $end
$var wire 1 ." ALUOpr [4] $end
$var wire 1 /" ALUOpr [3] $end
$var wire 1 0" ALUOpr [2] $end
$var wire 1 1" ALUOpr [1] $end
$var wire 1 2" ALUOpr [0] $end
$var wire 1 3" Oper [3] $end
$var wire 1 4" Oper [2] $end
$var wire 1 5" Oper [1] $end
$var wire 1 6" Oper [0] $end
$var wire 1 7" BranchTaken [3] $end
$var wire 1 8" BranchTaken [2] $end
$var wire 1 9" BranchTaken [1] $end
$var wire 1 :" BranchTaken [0] $end
$var wire 1 ;" WB [15] $end
$var wire 1 <" WB [14] $end
$var wire 1 =" WB [13] $end
$var wire 1 >" WB [12] $end
$var wire 1 ?" WB [11] $end
$var wire 1 @" WB [10] $end
$var wire 1 A" WB [9] $end
$var wire 1 B" WB [8] $end
$var wire 1 C" WB [7] $end
$var wire 1 D" WB [6] $end
$var wire 1 E" WB [5] $end
$var wire 1 F" WB [4] $end
$var wire 1 G" WB [3] $end
$var wire 1 H" WB [2] $end
$var wire 1 I" WB [1] $end
$var wire 1 J" WB [0] $end
$var wire 1 K" RSData [15] $end
$var wire 1 L" RSData [14] $end
$var wire 1 M" RSData [13] $end
$var wire 1 N" RSData [12] $end
$var wire 1 O" RSData [11] $end
$var wire 1 P" RSData [10] $end
$var wire 1 Q" RSData [9] $end
$var wire 1 R" RSData [8] $end
$var wire 1 S" RSData [7] $end
$var wire 1 T" RSData [6] $end
$var wire 1 U" RSData [5] $end
$var wire 1 V" RSData [4] $end
$var wire 1 W" RSData [3] $end
$var wire 1 X" RSData [2] $end
$var wire 1 Y" RSData [1] $end
$var wire 1 Z" RSData [0] $end
$var wire 1 [" RTData [15] $end
$var wire 1 \" RTData [14] $end
$var wire 1 ]" RTData [13] $end
$var wire 1 ^" RTData [12] $end
$var wire 1 _" RTData [11] $end
$var wire 1 `" RTData [10] $end
$var wire 1 a" RTData [9] $end
$var wire 1 b" RTData [8] $end
$var wire 1 c" RTData [7] $end
$var wire 1 d" RTData [6] $end
$var wire 1 e" RTData [5] $end
$var wire 1 f" RTData [4] $end
$var wire 1 g" RTData [3] $end
$var wire 1 h" RTData [2] $end
$var wire 1 i" RTData [1] $end
$var wire 1 j" RTData [0] $end
$var wire 1 k" ALU [15] $end
$var wire 1 l" ALU [14] $end
$var wire 1 m" ALU [13] $end
$var wire 1 n" ALU [12] $end
$var wire 1 o" ALU [11] $end
$var wire 1 p" ALU [10] $end
$var wire 1 q" ALU [9] $end
$var wire 1 r" ALU [8] $end
$var wire 1 s" ALU [7] $end
$var wire 1 t" ALU [6] $end
$var wire 1 u" ALU [5] $end
$var wire 1 v" ALU [4] $end
$var wire 1 w" ALU [3] $end
$var wire 1 x" ALU [2] $end
$var wire 1 y" ALU [1] $end
$var wire 1 z" ALU [0] $end
$var wire 1 {" readData [15] $end
$var wire 1 |" readData [14] $end
$var wire 1 }" readData [13] $end
$var wire 1 ~" readData [12] $end
$var wire 1 !# readData [11] $end
$var wire 1 "# readData [10] $end
$var wire 1 ## readData [9] $end
$var wire 1 $# readData [8] $end
$var wire 1 %# readData [7] $end
$var wire 1 &# readData [6] $end
$var wire 1 '# readData [5] $end
$var wire 1 (# readData [4] $end
$var wire 1 )# readData [3] $end
$var wire 1 *# readData [2] $end
$var wire 1 +# readData [1] $end
$var wire 1 ,# readData [0] $end
$var wire 1 -# Imm5 [15] $end
$var wire 1 .# Imm5 [14] $end
$var wire 1 /# Imm5 [13] $end
$var wire 1 0# Imm5 [12] $end
$var wire 1 1# Imm5 [11] $end
$var wire 1 2# Imm5 [10] $end
$var wire 1 3# Imm5 [9] $end
$var wire 1 4# Imm5 [8] $end
$var wire 1 5# Imm5 [7] $end
$var wire 1 6# Imm5 [6] $end
$var wire 1 7# Imm5 [5] $end
$var wire 1 8# Imm5 [4] $end
$var wire 1 9# Imm5 [3] $end
$var wire 1 :# Imm5 [2] $end
$var wire 1 ;# Imm5 [1] $end
$var wire 1 <# Imm5 [0] $end
$var wire 1 =# Imm8 [15] $end
$var wire 1 ># Imm8 [14] $end
$var wire 1 ?# Imm8 [13] $end
$var wire 1 @# Imm8 [12] $end
$var wire 1 A# Imm8 [11] $end
$var wire 1 B# Imm8 [10] $end
$var wire 1 C# Imm8 [9] $end
$var wire 1 D# Imm8 [8] $end
$var wire 1 E# Imm8 [7] $end
$var wire 1 F# Imm8 [6] $end
$var wire 1 G# Imm8 [5] $end
$var wire 1 H# Imm8 [4] $end
$var wire 1 I# Imm8 [3] $end
$var wire 1 J# Imm8 [2] $end
$var wire 1 K# Imm8 [1] $end
$var wire 1 L# Imm8 [0] $end
$var wire 1 M# sImm8 [15] $end
$var wire 1 N# sImm8 [14] $end
$var wire 1 O# sImm8 [13] $end
$var wire 1 P# sImm8 [12] $end
$var wire 1 Q# sImm8 [11] $end
$var wire 1 R# sImm8 [10] $end
$var wire 1 S# sImm8 [9] $end
$var wire 1 T# sImm8 [8] $end
$var wire 1 U# sImm8 [7] $end
$var wire 1 V# sImm8 [6] $end
$var wire 1 W# sImm8 [5] $end
$var wire 1 X# sImm8 [4] $end
$var wire 1 Y# sImm8 [3] $end
$var wire 1 Z# sImm8 [2] $end
$var wire 1 [# sImm8 [1] $end
$var wire 1 \# sImm8 [0] $end
$var wire 1 ]# sImm11 [15] $end
$var wire 1 ^# sImm11 [14] $end
$var wire 1 _# sImm11 [13] $end
$var wire 1 `# sImm11 [12] $end
$var wire 1 a# sImm11 [11] $end
$var wire 1 b# sImm11 [10] $end
$var wire 1 c# sImm11 [9] $end
$var wire 1 d# sImm11 [8] $end
$var wire 1 e# sImm11 [7] $end
$var wire 1 f# sImm11 [6] $end
$var wire 1 g# sImm11 [5] $end
$var wire 1 h# sImm11 [4] $end
$var wire 1 i# sImm11 [3] $end
$var wire 1 j# sImm11 [2] $end
$var wire 1 k# sImm11 [1] $end
$var wire 1 l# sImm11 [0] $end
$var wire 1 m# nHaltSig $end
$var wire 1 n# RegWrt $end
$var wire 1 o# ZeroExt $end
$var wire 1 p# ImmSrc $end
$var wire 1 q# invA $end
$var wire 1 r# invB $end
$var wire 1 s# ALUSign $end
$var wire 1 t# Cin $end
$var wire 1 u# ALUJmp $end
$var wire 1 v# MemWrt $end
$var wire 1 w# MemRead $end
$var wire 1 x# RegSrc [1] $end
$var wire 1 y# RegSrc [0] $end
$var wire 1 z# BSrc [1] $end
$var wire 1 {# BSrc [0] $end
$var wire 1 |# RegDst [1] $end
$var wire 1 }# RegDst [0] $end
$var wire 1 ~# RD [2] $end
$var wire 1 !$ RD [1] $end
$var wire 1 "$ RD [0] $end
$var wire 1 #$ PC_f_flopped [15] $end
$var wire 1 $$ PC_f_flopped [14] $end
$var wire 1 %$ PC_f_flopped [13] $end
$var wire 1 &$ PC_f_flopped [12] $end
$var wire 1 '$ PC_f_flopped [11] $end
$var wire 1 ($ PC_f_flopped [10] $end
$var wire 1 )$ PC_f_flopped [9] $end
$var wire 1 *$ PC_f_flopped [8] $end
$var wire 1 +$ PC_f_flopped [7] $end
$var wire 1 ,$ PC_f_flopped [6] $end
$var wire 1 -$ PC_f_flopped [5] $end
$var wire 1 .$ PC_f_flopped [4] $end
$var wire 1 /$ PC_f_flopped [3] $end
$var wire 1 0$ PC_f_flopped [2] $end
$var wire 1 1$ PC_f_flopped [1] $end
$var wire 1 2$ PC_f_flopped [0] $end
$var wire 1 3$ pc_curr_f_flopped [15] $end
$var wire 1 4$ pc_curr_f_flopped [14] $end
$var wire 1 5$ pc_curr_f_flopped [13] $end
$var wire 1 6$ pc_curr_f_flopped [12] $end
$var wire 1 7$ pc_curr_f_flopped [11] $end
$var wire 1 8$ pc_curr_f_flopped [10] $end
$var wire 1 9$ pc_curr_f_flopped [9] $end
$var wire 1 :$ pc_curr_f_flopped [8] $end
$var wire 1 ;$ pc_curr_f_flopped [7] $end
$var wire 1 <$ pc_curr_f_flopped [6] $end
$var wire 1 =$ pc_curr_f_flopped [5] $end
$var wire 1 >$ pc_curr_f_flopped [4] $end
$var wire 1 ?$ pc_curr_f_flopped [3] $end
$var wire 1 @$ pc_curr_f_flopped [2] $end
$var wire 1 A$ pc_curr_f_flopped [1] $end
$var wire 1 B$ pc_curr_f_flopped [0] $end
$var wire 1 C$ instr_f_flopped [15] $end
$var wire 1 D$ instr_f_flopped [14] $end
$var wire 1 E$ instr_f_flopped [13] $end
$var wire 1 F$ instr_f_flopped [12] $end
$var wire 1 G$ instr_f_flopped [11] $end
$var wire 1 H$ instr_f_flopped [10] $end
$var wire 1 I$ instr_f_flopped [9] $end
$var wire 1 J$ instr_f_flopped [8] $end
$var wire 1 K$ instr_f_flopped [7] $end
$var wire 1 L$ instr_f_flopped [6] $end
$var wire 1 M$ instr_f_flopped [5] $end
$var wire 1 N$ instr_f_flopped [4] $end
$var wire 1 O$ instr_f_flopped [3] $end
$var wire 1 P$ instr_f_flopped [2] $end
$var wire 1 Q$ instr_f_flopped [1] $end
$var wire 1 R$ instr_f_flopped [0] $end
$var wire 1 S$ PC_d_2flopped [15] $end
$var wire 1 T$ PC_d_2flopped [14] $end
$var wire 1 U$ PC_d_2flopped [13] $end
$var wire 1 V$ PC_d_2flopped [12] $end
$var wire 1 W$ PC_d_2flopped [11] $end
$var wire 1 X$ PC_d_2flopped [10] $end
$var wire 1 Y$ PC_d_2flopped [9] $end
$var wire 1 Z$ PC_d_2flopped [8] $end
$var wire 1 [$ PC_d_2flopped [7] $end
$var wire 1 \$ PC_d_2flopped [6] $end
$var wire 1 ]$ PC_d_2flopped [5] $end
$var wire 1 ^$ PC_d_2flopped [4] $end
$var wire 1 _$ PC_d_2flopped [3] $end
$var wire 1 `$ PC_d_2flopped [2] $end
$var wire 1 a$ PC_d_2flopped [1] $end
$var wire 1 b$ PC_d_2flopped [0] $end
$var wire 1 c$ ALU_e_flopped [15] $end
$var wire 1 d$ ALU_e_flopped [14] $end
$var wire 1 e$ ALU_e_flopped [13] $end
$var wire 1 f$ ALU_e_flopped [12] $end
$var wire 1 g$ ALU_e_flopped [11] $end
$var wire 1 h$ ALU_e_flopped [10] $end
$var wire 1 i$ ALU_e_flopped [9] $end
$var wire 1 j$ ALU_e_flopped [8] $end
$var wire 1 k$ ALU_e_flopped [7] $end
$var wire 1 l$ ALU_e_flopped [6] $end
$var wire 1 m$ ALU_e_flopped [5] $end
$var wire 1 n$ ALU_e_flopped [4] $end
$var wire 1 o$ ALU_e_flopped [3] $end
$var wire 1 p$ ALU_e_flopped [2] $end
$var wire 1 q$ ALU_e_flopped [1] $end
$var wire 1 r$ ALU_e_flopped [0] $end
$var wire 1 s$ ALU_e_2flopped [15] $end
$var wire 1 t$ ALU_e_2flopped [14] $end
$var wire 1 u$ ALU_e_2flopped [13] $end
$var wire 1 v$ ALU_e_2flopped [12] $end
$var wire 1 w$ ALU_e_2flopped [11] $end
$var wire 1 x$ ALU_e_2flopped [10] $end
$var wire 1 y$ ALU_e_2flopped [9] $end
$var wire 1 z$ ALU_e_2flopped [8] $end
$var wire 1 {$ ALU_e_2flopped [7] $end
$var wire 1 |$ ALU_e_2flopped [6] $end
$var wire 1 }$ ALU_e_2flopped [5] $end
$var wire 1 ~$ ALU_e_2flopped [4] $end
$var wire 1 !% ALU_e_2flopped [3] $end
$var wire 1 "% ALU_e_2flopped [2] $end
$var wire 1 #% ALU_e_2flopped [1] $end
$var wire 1 $% ALU_e_2flopped [0] $end
$var wire 1 %% PC_Jump_e_flopped [15] $end
$var wire 1 &% PC_Jump_e_flopped [14] $end
$var wire 1 '% PC_Jump_e_flopped [13] $end
$var wire 1 (% PC_Jump_e_flopped [12] $end
$var wire 1 )% PC_Jump_e_flopped [11] $end
$var wire 1 *% PC_Jump_e_flopped [10] $end
$var wire 1 +% PC_Jump_e_flopped [9] $end
$var wire 1 ,% PC_Jump_e_flopped [8] $end
$var wire 1 -% PC_Jump_e_flopped [7] $end
$var wire 1 .% PC_Jump_e_flopped [6] $end
$var wire 1 /% PC_Jump_e_flopped [5] $end
$var wire 1 0% PC_Jump_e_flopped [4] $end
$var wire 1 1% PC_Jump_e_flopped [3] $end
$var wire 1 2% PC_Jump_e_flopped [2] $end
$var wire 1 3% PC_Jump_e_flopped [1] $end
$var wire 1 4% PC_Jump_e_flopped [0] $end
$var wire 1 5% readData_m_flopped [15] $end
$var wire 1 6% readData_m_flopped [14] $end
$var wire 1 7% readData_m_flopped [13] $end
$var wire 1 8% readData_m_flopped [12] $end
$var wire 1 9% readData_m_flopped [11] $end
$var wire 1 :% readData_m_flopped [10] $end
$var wire 1 ;% readData_m_flopped [9] $end
$var wire 1 <% readData_m_flopped [8] $end
$var wire 1 =% readData_m_flopped [7] $end
$var wire 1 >% readData_m_flopped [6] $end
$var wire 1 ?% readData_m_flopped [5] $end
$var wire 1 @% readData_m_flopped [4] $end
$var wire 1 A% readData_m_flopped [3] $end
$var wire 1 B% readData_m_flopped [2] $end
$var wire 1 C% readData_m_flopped [1] $end
$var wire 1 D% readData_m_flopped [0] $end
$var wire 1 E% MemWrt_2flopped $end
$var wire 1 F% MemRead_2_flopped $end

$scope module dff_MemRead_2 $end
$var wire 1 F% q $end
$var wire 1 w# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 G% state $end
$upscope $end

$scope module dff_MemWrt_2 $end
$var wire 1 E% q $end
$var wire 1 v# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H% state $end
$upscope $end

$scope module fetch0 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 %% PC_B [15] $end
$var wire 1 &% PC_B [14] $end
$var wire 1 '% PC_B [13] $end
$var wire 1 (% PC_B [12] $end
$var wire 1 )% PC_B [11] $end
$var wire 1 *% PC_B [10] $end
$var wire 1 +% PC_B [9] $end
$var wire 1 ,% PC_B [8] $end
$var wire 1 -% PC_B [7] $end
$var wire 1 .% PC_B [6] $end
$var wire 1 /% PC_B [5] $end
$var wire 1 0% PC_B [4] $end
$var wire 1 1% PC_B [3] $end
$var wire 1 2% PC_B [2] $end
$var wire 1 3% PC_B [1] $end
$var wire 1 4% PC_B [0] $end
$var wire 1 m# nHaltSig $end
$var wire 1 [! instr [15] $end
$var wire 1 \! instr [14] $end
$var wire 1 ]! instr [13] $end
$var wire 1 ^! instr [12] $end
$var wire 1 _! instr [11] $end
$var wire 1 `! instr [10] $end
$var wire 1 a! instr [9] $end
$var wire 1 b! instr [8] $end
$var wire 1 c! instr [7] $end
$var wire 1 d! instr [6] $end
$var wire 1 e! instr [5] $end
$var wire 1 f! instr [4] $end
$var wire 1 g! instr [3] $end
$var wire 1 h! instr [2] $end
$var wire 1 i! instr [1] $end
$var wire 1 j! instr [0] $end
$var wire 1 k! PC_Next [15] $end
$var wire 1 l! PC_Next [14] $end
$var wire 1 m! PC_Next [13] $end
$var wire 1 n! PC_Next [12] $end
$var wire 1 o! PC_Next [11] $end
$var wire 1 p! PC_Next [10] $end
$var wire 1 q! PC_Next [9] $end
$var wire 1 r! PC_Next [8] $end
$var wire 1 s! PC_Next [7] $end
$var wire 1 t! PC_Next [6] $end
$var wire 1 u! PC_Next [5] $end
$var wire 1 v! PC_Next [4] $end
$var wire 1 w! PC_Next [3] $end
$var wire 1 x! PC_Next [2] $end
$var wire 1 y! PC_Next [1] $end
$var wire 1 z! PC_Next [0] $end
$var wire 1 K! PC_curr [15] $end
$var wire 1 L! PC_curr [14] $end
$var wire 1 M! PC_curr [13] $end
$var wire 1 N! PC_curr [12] $end
$var wire 1 O! PC_curr [11] $end
$var wire 1 P! PC_curr [10] $end
$var wire 1 Q! PC_curr [9] $end
$var wire 1 R! PC_curr [8] $end
$var wire 1 S! PC_curr [7] $end
$var wire 1 T! PC_curr [6] $end
$var wire 1 U! PC_curr [5] $end
$var wire 1 V! PC_curr [4] $end
$var wire 1 W! PC_curr [3] $end
$var wire 1 X! PC_curr [2] $end
$var wire 1 Y! PC_curr [1] $end
$var wire 1 Z! PC_curr [0] $end
$var wire 1 I% PC [15] $end
$var wire 1 J% PC [14] $end
$var wire 1 K% PC [13] $end
$var wire 1 L% PC [12] $end
$var wire 1 M% PC [11] $end
$var wire 1 N% PC [10] $end
$var wire 1 O% PC [9] $end
$var wire 1 P% PC [8] $end
$var wire 1 Q% PC [7] $end
$var wire 1 R% PC [6] $end
$var wire 1 S% PC [5] $end
$var wire 1 T% PC [4] $end
$var wire 1 U% PC [3] $end
$var wire 1 V% PC [2] $end
$var wire 1 W% PC [1] $end
$var wire 1 X% PC [0] $end
$var wire 1 Y% PC_regs [15] $end
$var wire 1 Z% PC_regs [14] $end
$var wire 1 [% PC_regs [13] $end
$var wire 1 \% PC_regs [12] $end
$var wire 1 ]% PC_regs [11] $end
$var wire 1 ^% PC_regs [10] $end
$var wire 1 _% PC_regs [9] $end
$var wire 1 `% PC_regs [8] $end
$var wire 1 a% PC_regs [7] $end
$var wire 1 b% PC_regs [6] $end
$var wire 1 c% PC_regs [5] $end
$var wire 1 d% PC_regs [4] $end
$var wire 1 e% PC_regs [3] $end
$var wire 1 f% PC_regs [2] $end
$var wire 1 g% PC_regs [1] $end
$var wire 1 h% PC_regs [0] $end
$var wire 1 i% err $end
$var wire 1 j% add2 [15] $end
$var wire 1 k% add2 [14] $end
$var wire 1 l% add2 [13] $end
$var wire 1 m% add2 [12] $end
$var wire 1 n% add2 [11] $end
$var wire 1 o% add2 [10] $end
$var wire 1 p% add2 [9] $end
$var wire 1 q% add2 [8] $end
$var wire 1 r% add2 [7] $end
$var wire 1 s% add2 [6] $end
$var wire 1 t% add2 [5] $end
$var wire 1 u% add2 [4] $end
$var wire 1 v% add2 [3] $end
$var wire 1 w% add2 [2] $end
$var wire 1 x% add2 [1] $end
$var wire 1 y% add2 [0] $end
$var wire 1 z% PC_Sum [15] $end
$var wire 1 {% PC_Sum [14] $end
$var wire 1 |% PC_Sum [13] $end
$var wire 1 }% PC_Sum [12] $end
$var wire 1 ~% PC_Sum [11] $end
$var wire 1 !& PC_Sum [10] $end
$var wire 1 "& PC_Sum [9] $end
$var wire 1 #& PC_Sum [8] $end
$var wire 1 $& PC_Sum [7] $end
$var wire 1 %& PC_Sum [6] $end
$var wire 1 && PC_Sum [5] $end
$var wire 1 '& PC_Sum [4] $end
$var wire 1 (& PC_Sum [3] $end
$var wire 1 )& PC_Sum [2] $end
$var wire 1 *& PC_Sum [1] $end
$var wire 1 +& PC_Sum [0] $end
$var wire 1 ,& c_out $end

$scope module pc_reg $end
$var parameter 32 -& BIT_WIDTH $end
$var parameter 32 .& BIT_SIZE $end
$var parameter 32 /& REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 0& we $end
$var wire 1 Y% w [15] $end
$var wire 1 Z% w [14] $end
$var wire 1 [% w [13] $end
$var wire 1 \% w [12] $end
$var wire 1 ]% w [11] $end
$var wire 1 ^% w [10] $end
$var wire 1 _% w [9] $end
$var wire 1 `% w [8] $end
$var wire 1 a% w [7] $end
$var wire 1 b% w [6] $end
$var wire 1 c% w [5] $end
$var wire 1 d% w [4] $end
$var wire 1 e% w [3] $end
$var wire 1 f% w [2] $end
$var wire 1 g% w [1] $end
$var wire 1 h% w [0] $end
$var wire 1 I% r [15] $end
$var wire 1 J% r [14] $end
$var wire 1 K% r [13] $end
$var wire 1 L% r [12] $end
$var wire 1 M% r [11] $end
$var wire 1 N% r [10] $end
$var wire 1 O% r [9] $end
$var wire 1 P% r [8] $end
$var wire 1 Q% r [7] $end
$var wire 1 R% r [6] $end
$var wire 1 S% r [5] $end
$var wire 1 T% r [4] $end
$var wire 1 U% r [3] $end
$var wire 1 V% r [2] $end
$var wire 1 W% r [1] $end
$var wire 1 X% r [0] $end

$scope module dff01[15] $end
$var wire 1 I% q $end
$var wire 1 1& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 2& state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 J% q $end
$var wire 1 3& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 4& state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 K% q $end
$var wire 1 5& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 6& state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 L% q $end
$var wire 1 7& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 8& state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 M% q $end
$var wire 1 9& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :& state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 N% q $end
$var wire 1 ;& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 <& state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 O% q $end
$var wire 1 =& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >& state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 P% q $end
$var wire 1 ?& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @& state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 Q% q $end
$var wire 1 A& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 B& state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 R% q $end
$var wire 1 C& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 D& state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 S% q $end
$var wire 1 E& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F& state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 T% q $end
$var wire 1 G& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H& state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 U% q $end
$var wire 1 I& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 J& state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 V% q $end
$var wire 1 K& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 L& state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 W% q $end
$var wire 1 M& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N& state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 X% q $end
$var wire 1 O& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 P& state $end
$upscope $end
$upscope $end

$scope module instr_mem $end
$var wire 1 [! data_out [15] $end
$var wire 1 \! data_out [14] $end
$var wire 1 ]! data_out [13] $end
$var wire 1 ^! data_out [12] $end
$var wire 1 _! data_out [11] $end
$var wire 1 `! data_out [10] $end
$var wire 1 a! data_out [9] $end
$var wire 1 b! data_out [8] $end
$var wire 1 c! data_out [7] $end
$var wire 1 d! data_out [6] $end
$var wire 1 e! data_out [5] $end
$var wire 1 f! data_out [4] $end
$var wire 1 g! data_out [3] $end
$var wire 1 h! data_out [2] $end
$var wire 1 i! data_out [1] $end
$var wire 1 j! data_out [0] $end
$var wire 1 Q& data_in [15] $end
$var wire 1 R& data_in [14] $end
$var wire 1 S& data_in [13] $end
$var wire 1 T& data_in [12] $end
$var wire 1 U& data_in [11] $end
$var wire 1 V& data_in [10] $end
$var wire 1 W& data_in [9] $end
$var wire 1 X& data_in [8] $end
$var wire 1 Y& data_in [7] $end
$var wire 1 Z& data_in [6] $end
$var wire 1 [& data_in [5] $end
$var wire 1 \& data_in [4] $end
$var wire 1 ]& data_in [3] $end
$var wire 1 ^& data_in [2] $end
$var wire 1 _& data_in [1] $end
$var wire 1 `& data_in [0] $end
$var wire 1 I% addr [15] $end
$var wire 1 J% addr [14] $end
$var wire 1 K% addr [13] $end
$var wire 1 L% addr [12] $end
$var wire 1 M% addr [11] $end
$var wire 1 N% addr [10] $end
$var wire 1 O% addr [9] $end
$var wire 1 P% addr [8] $end
$var wire 1 Q% addr [7] $end
$var wire 1 R% addr [6] $end
$var wire 1 S% addr [5] $end
$var wire 1 T% addr [4] $end
$var wire 1 U% addr [3] $end
$var wire 1 V% addr [2] $end
$var wire 1 W% addr [1] $end
$var wire 1 X% addr [0] $end
$var wire 1 a& enable $end
$var wire 1 b& wr $end
$var wire 1 c& createdump $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 d& loaded $end
$var reg 17 e& largest [16:0] $end
$var integer 32 f& mcd $end
$var integer 32 g& i $end
$upscope $end

$scope module pc_add2 $end
$var parameter 32 h& N $end
$var wire 1 z% sum [15] $end
$var wire 1 {% sum [14] $end
$var wire 1 |% sum [13] $end
$var wire 1 }% sum [12] $end
$var wire 1 ~% sum [11] $end
$var wire 1 !& sum [10] $end
$var wire 1 "& sum [9] $end
$var wire 1 #& sum [8] $end
$var wire 1 $& sum [7] $end
$var wire 1 %& sum [6] $end
$var wire 1 && sum [5] $end
$var wire 1 '& sum [4] $end
$var wire 1 (& sum [3] $end
$var wire 1 )& sum [2] $end
$var wire 1 *& sum [1] $end
$var wire 1 +& sum [0] $end
$var wire 1 ,& c_out $end
$var wire 1 I% a [15] $end
$var wire 1 J% a [14] $end
$var wire 1 K% a [13] $end
$var wire 1 L% a [12] $end
$var wire 1 M% a [11] $end
$var wire 1 N% a [10] $end
$var wire 1 O% a [9] $end
$var wire 1 P% a [8] $end
$var wire 1 Q% a [7] $end
$var wire 1 R% a [6] $end
$var wire 1 S% a [5] $end
$var wire 1 T% a [4] $end
$var wire 1 U% a [3] $end
$var wire 1 V% a [2] $end
$var wire 1 W% a [1] $end
$var wire 1 X% a [0] $end
$var wire 1 i& b [15] $end
$var wire 1 j& b [14] $end
$var wire 1 k& b [13] $end
$var wire 1 l& b [12] $end
$var wire 1 m& b [11] $end
$var wire 1 n& b [10] $end
$var wire 1 o& b [9] $end
$var wire 1 p& b [8] $end
$var wire 1 q& b [7] $end
$var wire 1 r& b [6] $end
$var wire 1 s& b [5] $end
$var wire 1 t& b [4] $end
$var wire 1 u& b [3] $end
$var wire 1 v& b [2] $end
$var wire 1 w& b [1] $end
$var wire 1 x& b [0] $end
$var wire 1 y& c_in $end
$var wire 1 z& carries [2] $end
$var wire 1 {& carries [1] $end
$var wire 1 |& carries [0] $end

$scope module cla[3] $end
$var parameter 32 }& N $end
$var wire 1 z% sum [3] $end
$var wire 1 {% sum [2] $end
$var wire 1 |% sum [1] $end
$var wire 1 }% sum [0] $end
$var wire 1 ,& c_out $end
$var wire 1 I% a [3] $end
$var wire 1 J% a [2] $end
$var wire 1 K% a [1] $end
$var wire 1 L% a [0] $end
$var wire 1 i& b [3] $end
$var wire 1 j& b [2] $end
$var wire 1 k& b [1] $end
$var wire 1 l& b [0] $end
$var wire 1 z& c_in $end
$var wire 1 ~& p [3] $end
$var wire 1 !' p [2] $end
$var wire 1 "' p [1] $end
$var wire 1 #' p [0] $end
$var wire 1 $' ng [3] $end
$var wire 1 %' ng [2] $end
$var wire 1 &' ng [1] $end
$var wire 1 '' ng [0] $end
$var wire 1 (' carries [4] $end
$var wire 1 )' carries [3] $end
$var wire 1 *' carries [2] $end
$var wire 1 +' carries [1] $end
$var wire 1 ,' carries [0] $end
$var wire 1 -' cp [3] $end
$var wire 1 .' cp [2] $end
$var wire 1 /' cp [1] $end
$var wire 1 0' cp [0] $end

$scope module xor_1[3] $end
$var wire 1 ~& out $end
$var wire 1 I% in1 $end
$var wire 1 i& in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 !' out $end
$var wire 1 J% in1 $end
$var wire 1 j& in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 "' out $end
$var wire 1 K% in1 $end
$var wire 1 k& in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 #' out $end
$var wire 1 L% in1 $end
$var wire 1 l& in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 $' out $end
$var wire 1 I% in1 $end
$var wire 1 i& in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 %' out $end
$var wire 1 J% in1 $end
$var wire 1 j& in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 &' out $end
$var wire 1 K% in1 $end
$var wire 1 k& in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 '' out $end
$var wire 1 L% in1 $end
$var wire 1 l& in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 -' out $end
$var wire 1 ~& in1 $end
$var wire 1 )' in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 .' out $end
$var wire 1 !' in1 $end
$var wire 1 *' in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 /' out $end
$var wire 1 "' in1 $end
$var wire 1 +' in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 0' out $end
$var wire 1 #' in1 $end
$var wire 1 z& in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 ,& out $end
$var wire 1 -' in1 $end
$var wire 1 $' in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 )' out $end
$var wire 1 .' in1 $end
$var wire 1 %' in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 *' out $end
$var wire 1 /' in1 $end
$var wire 1 &' in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 +' out $end
$var wire 1 0' in1 $end
$var wire 1 '' in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 z% s $end
$var wire 1 1' c_out $end
$var wire 1 I% a $end
$var wire 1 i& b $end
$var wire 1 )' c_in $end
$var wire 1 2' AxorB $end
$var wire 1 3' CnandAB $end
$var wire 1 4' AnandB $end

$scope module xor_1 $end
$var wire 1 2' out $end
$var wire 1 I% in1 $end
$var wire 1 i& in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 z% out $end
$var wire 1 2' in1 $end
$var wire 1 )' in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 3' out $end
$var wire 1 2' in1 $end
$var wire 1 )' in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 4' out $end
$var wire 1 I% in1 $end
$var wire 1 i& in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 1' out $end
$var wire 1 4' in1 $end
$var wire 1 3' in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 {% s $end
$var wire 1 5' c_out $end
$var wire 1 J% a $end
$var wire 1 j& b $end
$var wire 1 *' c_in $end
$var wire 1 6' AxorB $end
$var wire 1 7' CnandAB $end
$var wire 1 8' AnandB $end

$scope module xor_1 $end
$var wire 1 6' out $end
$var wire 1 J% in1 $end
$var wire 1 j& in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 {% out $end
$var wire 1 6' in1 $end
$var wire 1 *' in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 7' out $end
$var wire 1 6' in1 $end
$var wire 1 *' in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 8' out $end
$var wire 1 J% in1 $end
$var wire 1 j& in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 5' out $end
$var wire 1 8' in1 $end
$var wire 1 7' in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 |% s $end
$var wire 1 9' c_out $end
$var wire 1 K% a $end
$var wire 1 k& b $end
$var wire 1 +' c_in $end
$var wire 1 :' AxorB $end
$var wire 1 ;' CnandAB $end
$var wire 1 <' AnandB $end

$scope module xor_1 $end
$var wire 1 :' out $end
$var wire 1 K% in1 $end
$var wire 1 k& in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 |% out $end
$var wire 1 :' in1 $end
$var wire 1 +' in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 ;' out $end
$var wire 1 :' in1 $end
$var wire 1 +' in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 <' out $end
$var wire 1 K% in1 $end
$var wire 1 k& in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 9' out $end
$var wire 1 <' in1 $end
$var wire 1 ;' in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 }% s $end
$var wire 1 =' c_out $end
$var wire 1 L% a $end
$var wire 1 l& b $end
$var wire 1 z& c_in $end
$var wire 1 >' AxorB $end
$var wire 1 ?' CnandAB $end
$var wire 1 @' AnandB $end

$scope module xor_1 $end
$var wire 1 >' out $end
$var wire 1 L% in1 $end
$var wire 1 l& in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 }% out $end
$var wire 1 >' in1 $end
$var wire 1 z& in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 ?' out $end
$var wire 1 >' in1 $end
$var wire 1 z& in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 @' out $end
$var wire 1 L% in1 $end
$var wire 1 l& in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 =' out $end
$var wire 1 @' in1 $end
$var wire 1 ?' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[2] $end
$var parameter 32 A' N $end
$var wire 1 ~% sum [3] $end
$var wire 1 !& sum [2] $end
$var wire 1 "& sum [1] $end
$var wire 1 #& sum [0] $end
$var wire 1 z& c_out $end
$var wire 1 M% a [3] $end
$var wire 1 N% a [2] $end
$var wire 1 O% a [1] $end
$var wire 1 P% a [0] $end
$var wire 1 m& b [3] $end
$var wire 1 n& b [2] $end
$var wire 1 o& b [1] $end
$var wire 1 p& b [0] $end
$var wire 1 {& c_in $end
$var wire 1 B' p [3] $end
$var wire 1 C' p [2] $end
$var wire 1 D' p [1] $end
$var wire 1 E' p [0] $end
$var wire 1 F' ng [3] $end
$var wire 1 G' ng [2] $end
$var wire 1 H' ng [1] $end
$var wire 1 I' ng [0] $end
$var wire 1 J' carries [4] $end
$var wire 1 K' carries [3] $end
$var wire 1 L' carries [2] $end
$var wire 1 M' carries [1] $end
$var wire 1 N' carries [0] $end
$var wire 1 O' cp [3] $end
$var wire 1 P' cp [2] $end
$var wire 1 Q' cp [1] $end
$var wire 1 R' cp [0] $end

$scope module xor_1[3] $end
$var wire 1 B' out $end
$var wire 1 M% in1 $end
$var wire 1 m& in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 C' out $end
$var wire 1 N% in1 $end
$var wire 1 n& in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 D' out $end
$var wire 1 O% in1 $end
$var wire 1 o& in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 E' out $end
$var wire 1 P% in1 $end
$var wire 1 p& in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 F' out $end
$var wire 1 M% in1 $end
$var wire 1 m& in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 G' out $end
$var wire 1 N% in1 $end
$var wire 1 n& in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 H' out $end
$var wire 1 O% in1 $end
$var wire 1 o& in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 I' out $end
$var wire 1 P% in1 $end
$var wire 1 p& in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 O' out $end
$var wire 1 B' in1 $end
$var wire 1 K' in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 P' out $end
$var wire 1 C' in1 $end
$var wire 1 L' in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 Q' out $end
$var wire 1 D' in1 $end
$var wire 1 M' in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 R' out $end
$var wire 1 E' in1 $end
$var wire 1 {& in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 z& out $end
$var wire 1 O' in1 $end
$var wire 1 F' in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 K' out $end
$var wire 1 P' in1 $end
$var wire 1 G' in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 L' out $end
$var wire 1 Q' in1 $end
$var wire 1 H' in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 M' out $end
$var wire 1 R' in1 $end
$var wire 1 I' in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 ~% s $end
$var wire 1 S' c_out $end
$var wire 1 M% a $end
$var wire 1 m& b $end
$var wire 1 K' c_in $end
$var wire 1 T' AxorB $end
$var wire 1 U' CnandAB $end
$var wire 1 V' AnandB $end

$scope module xor_1 $end
$var wire 1 T' out $end
$var wire 1 M% in1 $end
$var wire 1 m& in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 ~% out $end
$var wire 1 T' in1 $end
$var wire 1 K' in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 U' out $end
$var wire 1 T' in1 $end
$var wire 1 K' in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 V' out $end
$var wire 1 M% in1 $end
$var wire 1 m& in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 S' out $end
$var wire 1 V' in1 $end
$var wire 1 U' in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 !& s $end
$var wire 1 W' c_out $end
$var wire 1 N% a $end
$var wire 1 n& b $end
$var wire 1 L' c_in $end
$var wire 1 X' AxorB $end
$var wire 1 Y' CnandAB $end
$var wire 1 Z' AnandB $end

$scope module xor_1 $end
$var wire 1 X' out $end
$var wire 1 N% in1 $end
$var wire 1 n& in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 !& out $end
$var wire 1 X' in1 $end
$var wire 1 L' in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 Y' out $end
$var wire 1 X' in1 $end
$var wire 1 L' in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 Z' out $end
$var wire 1 N% in1 $end
$var wire 1 n& in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 W' out $end
$var wire 1 Z' in1 $end
$var wire 1 Y' in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 "& s $end
$var wire 1 [' c_out $end
$var wire 1 O% a $end
$var wire 1 o& b $end
$var wire 1 M' c_in $end
$var wire 1 \' AxorB $end
$var wire 1 ]' CnandAB $end
$var wire 1 ^' AnandB $end

$scope module xor_1 $end
$var wire 1 \' out $end
$var wire 1 O% in1 $end
$var wire 1 o& in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 "& out $end
$var wire 1 \' in1 $end
$var wire 1 M' in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 ]' out $end
$var wire 1 \' in1 $end
$var wire 1 M' in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 ^' out $end
$var wire 1 O% in1 $end
$var wire 1 o& in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 [' out $end
$var wire 1 ^' in1 $end
$var wire 1 ]' in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 #& s $end
$var wire 1 _' c_out $end
$var wire 1 P% a $end
$var wire 1 p& b $end
$var wire 1 {& c_in $end
$var wire 1 `' AxorB $end
$var wire 1 a' CnandAB $end
$var wire 1 b' AnandB $end

$scope module xor_1 $end
$var wire 1 `' out $end
$var wire 1 P% in1 $end
$var wire 1 p& in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 #& out $end
$var wire 1 `' in1 $end
$var wire 1 {& in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 a' out $end
$var wire 1 `' in1 $end
$var wire 1 {& in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 b' out $end
$var wire 1 P% in1 $end
$var wire 1 p& in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 _' out $end
$var wire 1 b' in1 $end
$var wire 1 a' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[1] $end
$var parameter 32 c' N $end
$var wire 1 $& sum [3] $end
$var wire 1 %& sum [2] $end
$var wire 1 && sum [1] $end
$var wire 1 '& sum [0] $end
$var wire 1 {& c_out $end
$var wire 1 Q% a [3] $end
$var wire 1 R% a [2] $end
$var wire 1 S% a [1] $end
$var wire 1 T% a [0] $end
$var wire 1 q& b [3] $end
$var wire 1 r& b [2] $end
$var wire 1 s& b [1] $end
$var wire 1 t& b [0] $end
$var wire 1 |& c_in $end
$var wire 1 d' p [3] $end
$var wire 1 e' p [2] $end
$var wire 1 f' p [1] $end
$var wire 1 g' p [0] $end
$var wire 1 h' ng [3] $end
$var wire 1 i' ng [2] $end
$var wire 1 j' ng [1] $end
$var wire 1 k' ng [0] $end
$var wire 1 l' carries [4] $end
$var wire 1 m' carries [3] $end
$var wire 1 n' carries [2] $end
$var wire 1 o' carries [1] $end
$var wire 1 p' carries [0] $end
$var wire 1 q' cp [3] $end
$var wire 1 r' cp [2] $end
$var wire 1 s' cp [1] $end
$var wire 1 t' cp [0] $end

$scope module xor_1[3] $end
$var wire 1 d' out $end
$var wire 1 Q% in1 $end
$var wire 1 q& in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 e' out $end
$var wire 1 R% in1 $end
$var wire 1 r& in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 f' out $end
$var wire 1 S% in1 $end
$var wire 1 s& in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 g' out $end
$var wire 1 T% in1 $end
$var wire 1 t& in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 h' out $end
$var wire 1 Q% in1 $end
$var wire 1 q& in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 i' out $end
$var wire 1 R% in1 $end
$var wire 1 r& in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 j' out $end
$var wire 1 S% in1 $end
$var wire 1 s& in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 k' out $end
$var wire 1 T% in1 $end
$var wire 1 t& in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 q' out $end
$var wire 1 d' in1 $end
$var wire 1 m' in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 r' out $end
$var wire 1 e' in1 $end
$var wire 1 n' in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 s' out $end
$var wire 1 f' in1 $end
$var wire 1 o' in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 t' out $end
$var wire 1 g' in1 $end
$var wire 1 |& in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 {& out $end
$var wire 1 q' in1 $end
$var wire 1 h' in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 m' out $end
$var wire 1 r' in1 $end
$var wire 1 i' in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 n' out $end
$var wire 1 s' in1 $end
$var wire 1 j' in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 o' out $end
$var wire 1 t' in1 $end
$var wire 1 k' in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 $& s $end
$var wire 1 u' c_out $end
$var wire 1 Q% a $end
$var wire 1 q& b $end
$var wire 1 m' c_in $end
$var wire 1 v' AxorB $end
$var wire 1 w' CnandAB $end
$var wire 1 x' AnandB $end

$scope module xor_1 $end
$var wire 1 v' out $end
$var wire 1 Q% in1 $end
$var wire 1 q& in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 $& out $end
$var wire 1 v' in1 $end
$var wire 1 m' in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 w' out $end
$var wire 1 v' in1 $end
$var wire 1 m' in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 x' out $end
$var wire 1 Q% in1 $end
$var wire 1 q& in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 u' out $end
$var wire 1 x' in1 $end
$var wire 1 w' in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 %& s $end
$var wire 1 y' c_out $end
$var wire 1 R% a $end
$var wire 1 r& b $end
$var wire 1 n' c_in $end
$var wire 1 z' AxorB $end
$var wire 1 {' CnandAB $end
$var wire 1 |' AnandB $end

$scope module xor_1 $end
$var wire 1 z' out $end
$var wire 1 R% in1 $end
$var wire 1 r& in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 %& out $end
$var wire 1 z' in1 $end
$var wire 1 n' in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 {' out $end
$var wire 1 z' in1 $end
$var wire 1 n' in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 |' out $end
$var wire 1 R% in1 $end
$var wire 1 r& in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 y' out $end
$var wire 1 |' in1 $end
$var wire 1 {' in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 && s $end
$var wire 1 }' c_out $end
$var wire 1 S% a $end
$var wire 1 s& b $end
$var wire 1 o' c_in $end
$var wire 1 ~' AxorB $end
$var wire 1 !( CnandAB $end
$var wire 1 "( AnandB $end

$scope module xor_1 $end
$var wire 1 ~' out $end
$var wire 1 S% in1 $end
$var wire 1 s& in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 && out $end
$var wire 1 ~' in1 $end
$var wire 1 o' in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 !( out $end
$var wire 1 ~' in1 $end
$var wire 1 o' in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 "( out $end
$var wire 1 S% in1 $end
$var wire 1 s& in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 }' out $end
$var wire 1 "( in1 $end
$var wire 1 !( in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 '& s $end
$var wire 1 #( c_out $end
$var wire 1 T% a $end
$var wire 1 t& b $end
$var wire 1 |& c_in $end
$var wire 1 $( AxorB $end
$var wire 1 %( CnandAB $end
$var wire 1 &( AnandB $end

$scope module xor_1 $end
$var wire 1 $( out $end
$var wire 1 T% in1 $end
$var wire 1 t& in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 '& out $end
$var wire 1 $( in1 $end
$var wire 1 |& in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 %( out $end
$var wire 1 $( in1 $end
$var wire 1 |& in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 &( out $end
$var wire 1 T% in1 $end
$var wire 1 t& in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 #( out $end
$var wire 1 &( in1 $end
$var wire 1 %( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[0] $end
$var parameter 32 '( N $end
$var wire 1 (& sum [3] $end
$var wire 1 )& sum [2] $end
$var wire 1 *& sum [1] $end
$var wire 1 +& sum [0] $end
$var wire 1 |& c_out $end
$var wire 1 U% a [3] $end
$var wire 1 V% a [2] $end
$var wire 1 W% a [1] $end
$var wire 1 X% a [0] $end
$var wire 1 u& b [3] $end
$var wire 1 v& b [2] $end
$var wire 1 w& b [1] $end
$var wire 1 x& b [0] $end
$var wire 1 y& c_in $end
$var wire 1 (( p [3] $end
$var wire 1 )( p [2] $end
$var wire 1 *( p [1] $end
$var wire 1 +( p [0] $end
$var wire 1 ,( ng [3] $end
$var wire 1 -( ng [2] $end
$var wire 1 .( ng [1] $end
$var wire 1 /( ng [0] $end
$var wire 1 0( carries [4] $end
$var wire 1 1( carries [3] $end
$var wire 1 2( carries [2] $end
$var wire 1 3( carries [1] $end
$var wire 1 4( carries [0] $end
$var wire 1 5( cp [3] $end
$var wire 1 6( cp [2] $end
$var wire 1 7( cp [1] $end
$var wire 1 8( cp [0] $end

$scope module xor_1[3] $end
$var wire 1 (( out $end
$var wire 1 U% in1 $end
$var wire 1 u& in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 )( out $end
$var wire 1 V% in1 $end
$var wire 1 v& in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 *( out $end
$var wire 1 W% in1 $end
$var wire 1 w& in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 +( out $end
$var wire 1 X% in1 $end
$var wire 1 x& in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 ,( out $end
$var wire 1 U% in1 $end
$var wire 1 u& in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 -( out $end
$var wire 1 V% in1 $end
$var wire 1 v& in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 .( out $end
$var wire 1 W% in1 $end
$var wire 1 w& in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 /( out $end
$var wire 1 X% in1 $end
$var wire 1 x& in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 5( out $end
$var wire 1 (( in1 $end
$var wire 1 1( in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 6( out $end
$var wire 1 )( in1 $end
$var wire 1 2( in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 7( out $end
$var wire 1 *( in1 $end
$var wire 1 3( in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 8( out $end
$var wire 1 +( in1 $end
$var wire 1 y& in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 |& out $end
$var wire 1 5( in1 $end
$var wire 1 ,( in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 1( out $end
$var wire 1 6( in1 $end
$var wire 1 -( in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 2( out $end
$var wire 1 7( in1 $end
$var wire 1 .( in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 3( out $end
$var wire 1 8( in1 $end
$var wire 1 /( in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 (& s $end
$var wire 1 9( c_out $end
$var wire 1 U% a $end
$var wire 1 u& b $end
$var wire 1 1( c_in $end
$var wire 1 :( AxorB $end
$var wire 1 ;( CnandAB $end
$var wire 1 <( AnandB $end

$scope module xor_1 $end
$var wire 1 :( out $end
$var wire 1 U% in1 $end
$var wire 1 u& in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 (& out $end
$var wire 1 :( in1 $end
$var wire 1 1( in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 ;( out $end
$var wire 1 :( in1 $end
$var wire 1 1( in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 <( out $end
$var wire 1 U% in1 $end
$var wire 1 u& in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 9( out $end
$var wire 1 <( in1 $end
$var wire 1 ;( in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 )& s $end
$var wire 1 =( c_out $end
$var wire 1 V% a $end
$var wire 1 v& b $end
$var wire 1 2( c_in $end
$var wire 1 >( AxorB $end
$var wire 1 ?( CnandAB $end
$var wire 1 @( AnandB $end

$scope module xor_1 $end
$var wire 1 >( out $end
$var wire 1 V% in1 $end
$var wire 1 v& in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 )& out $end
$var wire 1 >( in1 $end
$var wire 1 2( in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 ?( out $end
$var wire 1 >( in1 $end
$var wire 1 2( in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 @( out $end
$var wire 1 V% in1 $end
$var wire 1 v& in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 =( out $end
$var wire 1 @( in1 $end
$var wire 1 ?( in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 *& s $end
$var wire 1 A( c_out $end
$var wire 1 W% a $end
$var wire 1 w& b $end
$var wire 1 3( c_in $end
$var wire 1 B( AxorB $end
$var wire 1 C( CnandAB $end
$var wire 1 D( AnandB $end

$scope module xor_1 $end
$var wire 1 B( out $end
$var wire 1 W% in1 $end
$var wire 1 w& in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 *& out $end
$var wire 1 B( in1 $end
$var wire 1 3( in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 C( out $end
$var wire 1 B( in1 $end
$var wire 1 3( in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 D( out $end
$var wire 1 W% in1 $end
$var wire 1 w& in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 A( out $end
$var wire 1 D( in1 $end
$var wire 1 C( in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 +& s $end
$var wire 1 E( c_out $end
$var wire 1 X% a $end
$var wire 1 x& b $end
$var wire 1 y& c_in $end
$var wire 1 F( AxorB $end
$var wire 1 G( CnandAB $end
$var wire 1 H( AnandB $end

$scope module xor_1 $end
$var wire 1 F( out $end
$var wire 1 X% in1 $end
$var wire 1 x& in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 +& out $end
$var wire 1 F( in1 $end
$var wire 1 y& in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 G( out $end
$var wire 1 F( in1 $end
$var wire 1 y& in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 H( out $end
$var wire 1 X% in1 $end
$var wire 1 x& in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 E( out $end
$var wire 1 H( in1 $end
$var wire 1 G( in2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module dff_f_pc $end
$var parameter 32 I( BIT_WIDTH $end
$var parameter 32 J( BIT_SIZE $end
$var parameter 32 K( REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 L( we $end
$var wire 1 k! w [15] $end
$var wire 1 l! w [14] $end
$var wire 1 m! w [13] $end
$var wire 1 n! w [12] $end
$var wire 1 o! w [11] $end
$var wire 1 p! w [10] $end
$var wire 1 q! w [9] $end
$var wire 1 r! w [8] $end
$var wire 1 s! w [7] $end
$var wire 1 t! w [6] $end
$var wire 1 u! w [5] $end
$var wire 1 v! w [4] $end
$var wire 1 w! w [3] $end
$var wire 1 x! w [2] $end
$var wire 1 y! w [1] $end
$var wire 1 z! w [0] $end
$var wire 1 #$ r [15] $end
$var wire 1 $$ r [14] $end
$var wire 1 %$ r [13] $end
$var wire 1 &$ r [12] $end
$var wire 1 '$ r [11] $end
$var wire 1 ($ r [10] $end
$var wire 1 )$ r [9] $end
$var wire 1 *$ r [8] $end
$var wire 1 +$ r [7] $end
$var wire 1 ,$ r [6] $end
$var wire 1 -$ r [5] $end
$var wire 1 .$ r [4] $end
$var wire 1 /$ r [3] $end
$var wire 1 0$ r [2] $end
$var wire 1 1$ r [1] $end
$var wire 1 2$ r [0] $end

$scope module dff01[15] $end
$var wire 1 #$ q $end
$var wire 1 M( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N( state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 $$ q $end
$var wire 1 O( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 P( state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 %$ q $end
$var wire 1 Q( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 R( state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 &$ q $end
$var wire 1 S( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 T( state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 '$ q $end
$var wire 1 U( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V( state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 ($ q $end
$var wire 1 W( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 X( state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 )$ q $end
$var wire 1 Y( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Z( state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 *$ q $end
$var wire 1 [( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \( state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 +$ q $end
$var wire 1 ]( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^( state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 ,$ q $end
$var wire 1 _( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `( state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 -$ q $end
$var wire 1 a( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 b( state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 .$ q $end
$var wire 1 c( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 d( state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 /$ q $end
$var wire 1 e( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 f( state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 0$ q $end
$var wire 1 g( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 h( state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 1$ q $end
$var wire 1 i( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 j( state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 2$ q $end
$var wire 1 k( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 l( state $end
$upscope $end
$upscope $end

$scope module dff_f_pc_curr $end
$var parameter 32 m( BIT_WIDTH $end
$var parameter 32 n( BIT_SIZE $end
$var parameter 32 o( REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 p( we $end
$var wire 1 K! w [15] $end
$var wire 1 L! w [14] $end
$var wire 1 M! w [13] $end
$var wire 1 N! w [12] $end
$var wire 1 O! w [11] $end
$var wire 1 P! w [10] $end
$var wire 1 Q! w [9] $end
$var wire 1 R! w [8] $end
$var wire 1 S! w [7] $end
$var wire 1 T! w [6] $end
$var wire 1 U! w [5] $end
$var wire 1 V! w [4] $end
$var wire 1 W! w [3] $end
$var wire 1 X! w [2] $end
$var wire 1 Y! w [1] $end
$var wire 1 Z! w [0] $end
$var wire 1 3$ r [15] $end
$var wire 1 4$ r [14] $end
$var wire 1 5$ r [13] $end
$var wire 1 6$ r [12] $end
$var wire 1 7$ r [11] $end
$var wire 1 8$ r [10] $end
$var wire 1 9$ r [9] $end
$var wire 1 :$ r [8] $end
$var wire 1 ;$ r [7] $end
$var wire 1 <$ r [6] $end
$var wire 1 =$ r [5] $end
$var wire 1 >$ r [4] $end
$var wire 1 ?$ r [3] $end
$var wire 1 @$ r [2] $end
$var wire 1 A$ r [1] $end
$var wire 1 B$ r [0] $end

$scope module dff01[15] $end
$var wire 1 3$ q $end
$var wire 1 q( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 r( state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 4$ q $end
$var wire 1 s( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 t( state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 5$ q $end
$var wire 1 u( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 v( state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 6$ q $end
$var wire 1 w( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 x( state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 7$ q $end
$var wire 1 y( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 z( state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 8$ q $end
$var wire 1 {( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 |( state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 9$ q $end
$var wire 1 }( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ~( state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 :$ q $end
$var wire 1 !) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ") state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 ;$ q $end
$var wire 1 #) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 $) state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 <$ q $end
$var wire 1 %) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 &) state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 =$ q $end
$var wire 1 ') d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 () state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 >$ q $end
$var wire 1 )) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *) state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 ?$ q $end
$var wire 1 +) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,) state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 @$ q $end
$var wire 1 -) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 .) state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 A$ q $end
$var wire 1 /) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 0) state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 B$ q $end
$var wire 1 1) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 2) state $end
$upscope $end
$upscope $end

$scope module dff_f_instr $end
$var parameter 32 3) BIT_WIDTH $end
$var parameter 32 4) BIT_SIZE $end
$var parameter 32 5) REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6) we $end
$var wire 1 [! w [15] $end
$var wire 1 \! w [14] $end
$var wire 1 ]! w [13] $end
$var wire 1 ^! w [12] $end
$var wire 1 _! w [11] $end
$var wire 1 `! w [10] $end
$var wire 1 a! w [9] $end
$var wire 1 b! w [8] $end
$var wire 1 c! w [7] $end
$var wire 1 d! w [6] $end
$var wire 1 e! w [5] $end
$var wire 1 f! w [4] $end
$var wire 1 g! w [3] $end
$var wire 1 h! w [2] $end
$var wire 1 i! w [1] $end
$var wire 1 j! w [0] $end
$var wire 1 C$ r [15] $end
$var wire 1 D$ r [14] $end
$var wire 1 E$ r [13] $end
$var wire 1 F$ r [12] $end
$var wire 1 G$ r [11] $end
$var wire 1 H$ r [10] $end
$var wire 1 I$ r [9] $end
$var wire 1 J$ r [8] $end
$var wire 1 K$ r [7] $end
$var wire 1 L$ r [6] $end
$var wire 1 M$ r [5] $end
$var wire 1 N$ r [4] $end
$var wire 1 O$ r [3] $end
$var wire 1 P$ r [2] $end
$var wire 1 Q$ r [1] $end
$var wire 1 R$ r [0] $end

$scope module dff01[15] $end
$var wire 1 C$ q $end
$var wire 1 7) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 8) state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 D$ q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :) state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 E$ q $end
$var wire 1 ;) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 <) state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 F$ q $end
$var wire 1 =) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >) state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 G$ q $end
$var wire 1 ?) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @) state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 H$ q $end
$var wire 1 A) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 B) state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 I$ q $end
$var wire 1 C) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 D) state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 J$ q $end
$var wire 1 E) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F) state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 K$ q $end
$var wire 1 G) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H) state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 L$ q $end
$var wire 1 I) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 J) state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 M$ q $end
$var wire 1 K) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 L) state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 N$ q $end
$var wire 1 M) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N) state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 O$ q $end
$var wire 1 O) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 P) state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 P$ q $end
$var wire 1 Q) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 R) state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 Q$ q $end
$var wire 1 S) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 T) state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 R$ q $end
$var wire 1 U) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V) state $end
$upscope $end
$upscope $end

$scope module decode0 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 C$ instr [15] $end
$var wire 1 D$ instr [14] $end
$var wire 1 E$ instr [13] $end
$var wire 1 F$ instr [12] $end
$var wire 1 G$ instr [11] $end
$var wire 1 H$ instr [10] $end
$var wire 1 I$ instr [9] $end
$var wire 1 J$ instr [8] $end
$var wire 1 K$ instr [7] $end
$var wire 1 L$ instr [6] $end
$var wire 1 M$ instr [5] $end
$var wire 1 N$ instr [4] $end
$var wire 1 O$ instr [3] $end
$var wire 1 P$ instr [2] $end
$var wire 1 Q$ instr [1] $end
$var wire 1 R$ instr [0] $end
$var wire 1 ;" WB [15] $end
$var wire 1 <" WB [14] $end
$var wire 1 =" WB [13] $end
$var wire 1 >" WB [12] $end
$var wire 1 ?" WB [11] $end
$var wire 1 @" WB [10] $end
$var wire 1 A" WB [9] $end
$var wire 1 B" WB [8] $end
$var wire 1 C" WB [7] $end
$var wire 1 D" WB [6] $end
$var wire 1 E" WB [5] $end
$var wire 1 F" WB [4] $end
$var wire 1 G" WB [3] $end
$var wire 1 H" WB [2] $end
$var wire 1 I" WB [1] $end
$var wire 1 J" WB [0] $end
$var wire 1 #$ PC [15] $end
$var wire 1 $$ PC [14] $end
$var wire 1 %$ PC [13] $end
$var wire 1 &$ PC [12] $end
$var wire 1 '$ PC [11] $end
$var wire 1 ($ PC [10] $end
$var wire 1 )$ PC [9] $end
$var wire 1 *$ PC [8] $end
$var wire 1 +$ PC [7] $end
$var wire 1 ,$ PC [6] $end
$var wire 1 -$ PC [5] $end
$var wire 1 .$ PC [4] $end
$var wire 1 /$ PC [3] $end
$var wire 1 0$ PC [2] $end
$var wire 1 1$ PC [1] $end
$var wire 1 2$ PC [0] $end
$var wire 1 m# nHaltSig $end
$var wire 1 w# MemRead $end
$var wire 1 p# ImmSrc $end
$var wire 1 s# ALUSign $end
$var wire 1 u# ALUJmp $end
$var wire 1 v# MemWrt $end
$var wire 1 6! err $end
$var wire 1 x# RegSrc [1] $end
$var wire 1 y# RegSrc [0] $end
$var wire 1 z# BSrc [1] $end
$var wire 1 {# BSrc [0] $end
$var wire 1 7" BranchTaken [3] $end
$var wire 1 8" BranchTaken [2] $end
$var wire 1 9" BranchTaken [1] $end
$var wire 1 :" BranchTaken [0] $end
$var wire 1 3" Oper [3] $end
$var wire 1 4" Oper [2] $end
$var wire 1 5" Oper [1] $end
$var wire 1 6" Oper [0] $end
$var wire 1 K" RSData [15] $end
$var wire 1 L" RSData [14] $end
$var wire 1 M" RSData [13] $end
$var wire 1 N" RSData [12] $end
$var wire 1 O" RSData [11] $end
$var wire 1 P" RSData [10] $end
$var wire 1 Q" RSData [9] $end
$var wire 1 R" RSData [8] $end
$var wire 1 S" RSData [7] $end
$var wire 1 T" RSData [6] $end
$var wire 1 U" RSData [5] $end
$var wire 1 V" RSData [4] $end
$var wire 1 W" RSData [3] $end
$var wire 1 X" RSData [2] $end
$var wire 1 Y" RSData [1] $end
$var wire 1 Z" RSData [0] $end
$var wire 1 [" RTData [15] $end
$var wire 1 \" RTData [14] $end
$var wire 1 ]" RTData [13] $end
$var wire 1 ^" RTData [12] $end
$var wire 1 _" RTData [11] $end
$var wire 1 `" RTData [10] $end
$var wire 1 a" RTData [9] $end
$var wire 1 b" RTData [8] $end
$var wire 1 c" RTData [7] $end
$var wire 1 d" RTData [6] $end
$var wire 1 e" RTData [5] $end
$var wire 1 f" RTData [4] $end
$var wire 1 g" RTData [3] $end
$var wire 1 h" RTData [2] $end
$var wire 1 i" RTData [1] $end
$var wire 1 j" RTData [0] $end
$var wire 1 -# Imm5 [15] $end
$var wire 1 .# Imm5 [14] $end
$var wire 1 /# Imm5 [13] $end
$var wire 1 0# Imm5 [12] $end
$var wire 1 1# Imm5 [11] $end
$var wire 1 2# Imm5 [10] $end
$var wire 1 3# Imm5 [9] $end
$var wire 1 4# Imm5 [8] $end
$var wire 1 5# Imm5 [7] $end
$var wire 1 6# Imm5 [6] $end
$var wire 1 7# Imm5 [5] $end
$var wire 1 8# Imm5 [4] $end
$var wire 1 9# Imm5 [3] $end
$var wire 1 :# Imm5 [2] $end
$var wire 1 ;# Imm5 [1] $end
$var wire 1 <# Imm5 [0] $end
$var wire 1 =# Imm8 [15] $end
$var wire 1 ># Imm8 [14] $end
$var wire 1 ?# Imm8 [13] $end
$var wire 1 @# Imm8 [12] $end
$var wire 1 A# Imm8 [11] $end
$var wire 1 B# Imm8 [10] $end
$var wire 1 C# Imm8 [9] $end
$var wire 1 D# Imm8 [8] $end
$var wire 1 E# Imm8 [7] $end
$var wire 1 F# Imm8 [6] $end
$var wire 1 G# Imm8 [5] $end
$var wire 1 H# Imm8 [4] $end
$var wire 1 I# Imm8 [3] $end
$var wire 1 J# Imm8 [2] $end
$var wire 1 K# Imm8 [1] $end
$var wire 1 L# Imm8 [0] $end
$var wire 1 M# sImm8 [15] $end
$var wire 1 N# sImm8 [14] $end
$var wire 1 O# sImm8 [13] $end
$var wire 1 P# sImm8 [12] $end
$var wire 1 Q# sImm8 [11] $end
$var wire 1 R# sImm8 [10] $end
$var wire 1 S# sImm8 [9] $end
$var wire 1 T# sImm8 [8] $end
$var wire 1 U# sImm8 [7] $end
$var wire 1 V# sImm8 [6] $end
$var wire 1 W# sImm8 [5] $end
$var wire 1 X# sImm8 [4] $end
$var wire 1 Y# sImm8 [3] $end
$var wire 1 Z# sImm8 [2] $end
$var wire 1 [# sImm8 [1] $end
$var wire 1 \# sImm8 [0] $end
$var wire 1 ]# sImm11 [15] $end
$var wire 1 ^# sImm11 [14] $end
$var wire 1 _# sImm11 [13] $end
$var wire 1 `# sImm11 [12] $end
$var wire 1 a# sImm11 [11] $end
$var wire 1 b# sImm11 [10] $end
$var wire 1 c# sImm11 [9] $end
$var wire 1 d# sImm11 [8] $end
$var wire 1 e# sImm11 [7] $end
$var wire 1 f# sImm11 [6] $end
$var wire 1 g# sImm11 [5] $end
$var wire 1 h# sImm11 [4] $end
$var wire 1 i# sImm11 [3] $end
$var wire 1 j# sImm11 [2] $end
$var wire 1 k# sImm11 [1] $end
$var wire 1 l# sImm11 [0] $end
$var wire 1 {! PC_Next [15] $end
$var wire 1 |! PC_Next [14] $end
$var wire 1 }! PC_Next [13] $end
$var wire 1 ~! PC_Next [12] $end
$var wire 1 !" PC_Next [11] $end
$var wire 1 "" PC_Next [10] $end
$var wire 1 #" PC_Next [9] $end
$var wire 1 $" PC_Next [8] $end
$var wire 1 %" PC_Next [7] $end
$var wire 1 &" PC_Next [6] $end
$var wire 1 '" PC_Next [5] $end
$var wire 1 (" PC_Next [4] $end
$var wire 1 )" PC_Next [3] $end
$var wire 1 *" PC_Next [2] $end
$var wire 1 +" PC_Next [1] $end
$var wire 1 ," PC_Next [0] $end
$var wire 1 q# invA $end
$var wire 1 r# invB $end
$var wire 1 t# Cin $end
$var wire 1 ~# RD [2] $end
$var wire 1 !$ RD [1] $end
$var wire 1 "$ RD [0] $end
$var wire 1 W) ZeroExt $end
$var wire 1 X) RegWrt_nflopped $end
$var wire 1 Y) RegWrt_1_nflopped $end
$var wire 1 Z) RegWrt_2_nflopped $end
$var wire 1 [) ALUOpr [5] $end
$var wire 1 \) ALUOpr [4] $end
$var wire 1 ]) ALUOpr [3] $end
$var wire 1 ^) ALUOpr [2] $end
$var wire 1 _) ALUOpr [1] $end
$var wire 1 `) ALUOpr [0] $end
$var wire 1 a) RegDst [1] $end
$var wire 1 b) RegDst [0] $end
$var wire 1 c) RegSrc_nflopped [1] $end
$var wire 1 d) RegSrc_nflopped [0] $end
$var wire 1 e) RegSrc_1_nflopped [1] $end
$var wire 1 f) RegSrc_1_nflopped [0] $end
$var wire 1 g) RegSrc_2_nflopped [1] $end
$var wire 1 h) RegSrc_2_nflopped [0] $end
$var wire 1 i) BSrc_nflopped [1] $end
$var wire 1 j) BSrc_nflopped [0] $end
$var wire 1 k) Oper_nflopped [3] $end
$var wire 1 l) Oper_nflopped [2] $end
$var wire 1 m) Oper_nflopped [1] $end
$var wire 1 n) Oper_nflopped [0] $end
$var wire 1 o) RSData_nflopped [15] $end
$var wire 1 p) RSData_nflopped [14] $end
$var wire 1 q) RSData_nflopped [13] $end
$var wire 1 r) RSData_nflopped [12] $end
$var wire 1 s) RSData_nflopped [11] $end
$var wire 1 t) RSData_nflopped [10] $end
$var wire 1 u) RSData_nflopped [9] $end
$var wire 1 v) RSData_nflopped [8] $end
$var wire 1 w) RSData_nflopped [7] $end
$var wire 1 x) RSData_nflopped [6] $end
$var wire 1 y) RSData_nflopped [5] $end
$var wire 1 z) RSData_nflopped [4] $end
$var wire 1 {) RSData_nflopped [3] $end
$var wire 1 |) RSData_nflopped [2] $end
$var wire 1 }) RSData_nflopped [1] $end
$var wire 1 ~) RSData_nflopped [0] $end
$var wire 1 !* RTData_nflopped [15] $end
$var wire 1 "* RTData_nflopped [14] $end
$var wire 1 #* RTData_nflopped [13] $end
$var wire 1 $* RTData_nflopped [12] $end
$var wire 1 %* RTData_nflopped [11] $end
$var wire 1 &* RTData_nflopped [10] $end
$var wire 1 '* RTData_nflopped [9] $end
$var wire 1 (* RTData_nflopped [8] $end
$var wire 1 )* RTData_nflopped [7] $end
$var wire 1 ** RTData_nflopped [6] $end
$var wire 1 +* RTData_nflopped [5] $end
$var wire 1 ,* RTData_nflopped [4] $end
$var wire 1 -* RTData_nflopped [3] $end
$var wire 1 .* RTData_nflopped [2] $end
$var wire 1 /* RTData_nflopped [1] $end
$var wire 1 0* RTData_nflopped [0] $end
$var wire 1 1* Imm5_nflopped [15] $end
$var wire 1 2* Imm5_nflopped [14] $end
$var wire 1 3* Imm5_nflopped [13] $end
$var wire 1 4* Imm5_nflopped [12] $end
$var wire 1 5* Imm5_nflopped [11] $end
$var wire 1 6* Imm5_nflopped [10] $end
$var wire 1 7* Imm5_nflopped [9] $end
$var wire 1 8* Imm5_nflopped [8] $end
$var wire 1 9* Imm5_nflopped [7] $end
$var wire 1 :* Imm5_nflopped [6] $end
$var wire 1 ;* Imm5_nflopped [5] $end
$var wire 1 <* Imm5_nflopped [4] $end
$var wire 1 =* Imm5_nflopped [3] $end
$var wire 1 >* Imm5_nflopped [2] $end
$var wire 1 ?* Imm5_nflopped [1] $end
$var wire 1 @* Imm5_nflopped [0] $end
$var wire 1 A* Imm8_nflopped [15] $end
$var wire 1 B* Imm8_nflopped [14] $end
$var wire 1 C* Imm8_nflopped [13] $end
$var wire 1 D* Imm8_nflopped [12] $end
$var wire 1 E* Imm8_nflopped [11] $end
$var wire 1 F* Imm8_nflopped [10] $end
$var wire 1 G* Imm8_nflopped [9] $end
$var wire 1 H* Imm8_nflopped [8] $end
$var wire 1 I* Imm8_nflopped [7] $end
$var wire 1 J* Imm8_nflopped [6] $end
$var wire 1 K* Imm8_nflopped [5] $end
$var wire 1 L* Imm8_nflopped [4] $end
$var wire 1 M* Imm8_nflopped [3] $end
$var wire 1 N* Imm8_nflopped [2] $end
$var wire 1 O* Imm8_nflopped [1] $end
$var wire 1 P* Imm8_nflopped [0] $end
$var wire 1 Q* sImm8_nflopped [15] $end
$var wire 1 R* sImm8_nflopped [14] $end
$var wire 1 S* sImm8_nflopped [13] $end
$var wire 1 T* sImm8_nflopped [12] $end
$var wire 1 U* sImm8_nflopped [11] $end
$var wire 1 V* sImm8_nflopped [10] $end
$var wire 1 W* sImm8_nflopped [9] $end
$var wire 1 X* sImm8_nflopped [8] $end
$var wire 1 Y* sImm8_nflopped [7] $end
$var wire 1 Z* sImm8_nflopped [6] $end
$var wire 1 [* sImm8_nflopped [5] $end
$var wire 1 \* sImm8_nflopped [4] $end
$var wire 1 ]* sImm8_nflopped [3] $end
$var wire 1 ^* sImm8_nflopped [2] $end
$var wire 1 _* sImm8_nflopped [1] $end
$var wire 1 `* sImm8_nflopped [0] $end
$var wire 1 a* sImm11_nflopped [15] $end
$var wire 1 b* sImm11_nflopped [14] $end
$var wire 1 c* sImm11_nflopped [13] $end
$var wire 1 d* sImm11_nflopped [12] $end
$var wire 1 e* sImm11_nflopped [11] $end
$var wire 1 f* sImm11_nflopped [10] $end
$var wire 1 g* sImm11_nflopped [9] $end
$var wire 1 h* sImm11_nflopped [8] $end
$var wire 1 i* sImm11_nflopped [7] $end
$var wire 1 j* sImm11_nflopped [6] $end
$var wire 1 k* sImm11_nflopped [5] $end
$var wire 1 l* sImm11_nflopped [4] $end
$var wire 1 m* sImm11_nflopped [3] $end
$var wire 1 n* sImm11_nflopped [2] $end
$var wire 1 o* sImm11_nflopped [1] $end
$var wire 1 p* sImm11_nflopped [0] $end
$var wire 1 q* invA_nflopped $end
$var wire 1 r* invB_nflopped $end
$var wire 1 s* Cin_nflopped $end
$var wire 1 t* RD_nflopped [2] $end
$var wire 1 u* RD_nflopped [1] $end
$var wire 1 v* RD_nflopped [0] $end
$var wire 1 w* RD_1_nflopped [2] $end
$var wire 1 x* RD_1_nflopped [1] $end
$var wire 1 y* RD_1_nflopped [0] $end
$var wire 1 z* RD_2_nflopped [2] $end
$var wire 1 {* RD_2_nflopped [1] $end
$var wire 1 |* RD_2_nflopped [0] $end
$var wire 1 }* MemRead_nflopped $end
$var wire 1 ~* ImmSrc_nflopped $end
$var wire 1 !+ ALUSign_nflopped $end
$var wire 1 "+ ALUJmp_nflopped $end
$var wire 1 #+ MemWrt_nflopped $end
$var wire 1 $+ RegWrt $end

$scope module regFile0 $end
$var parameter 32 %+ BIT_WIDTH $end
$var parameter 32 &+ BIT_SIZE $end
$var parameter 32 '+ REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 H$ read1RegSel [2] $end
$var wire 1 I$ read1RegSel [1] $end
$var wire 1 J$ read1RegSel [0] $end
$var wire 1 K$ read2RegSel [2] $end
$var wire 1 L$ read2RegSel [1] $end
$var wire 1 M$ read2RegSel [0] $end
$var wire 1 ~# writeRegSel [2] $end
$var wire 1 !$ writeRegSel [1] $end
$var wire 1 "$ writeRegSel [0] $end
$var wire 1 ;" writeData [15] $end
$var wire 1 <" writeData [14] $end
$var wire 1 =" writeData [13] $end
$var wire 1 >" writeData [12] $end
$var wire 1 ?" writeData [11] $end
$var wire 1 @" writeData [10] $end
$var wire 1 A" writeData [9] $end
$var wire 1 B" writeData [8] $end
$var wire 1 C" writeData [7] $end
$var wire 1 D" writeData [6] $end
$var wire 1 E" writeData [5] $end
$var wire 1 F" writeData [4] $end
$var wire 1 G" writeData [3] $end
$var wire 1 H" writeData [2] $end
$var wire 1 I" writeData [1] $end
$var wire 1 J" writeData [0] $end
$var wire 1 $+ writeEn $end
$var wire 1 o) read1Data [15] $end
$var wire 1 p) read1Data [14] $end
$var wire 1 q) read1Data [13] $end
$var wire 1 r) read1Data [12] $end
$var wire 1 s) read1Data [11] $end
$var wire 1 t) read1Data [10] $end
$var wire 1 u) read1Data [9] $end
$var wire 1 v) read1Data [8] $end
$var wire 1 w) read1Data [7] $end
$var wire 1 x) read1Data [6] $end
$var wire 1 y) read1Data [5] $end
$var wire 1 z) read1Data [4] $end
$var wire 1 {) read1Data [3] $end
$var wire 1 |) read1Data [2] $end
$var wire 1 }) read1Data [1] $end
$var wire 1 ~) read1Data [0] $end
$var wire 1 !* read2Data [15] $end
$var wire 1 "* read2Data [14] $end
$var wire 1 #* read2Data [13] $end
$var wire 1 $* read2Data [12] $end
$var wire 1 %* read2Data [11] $end
$var wire 1 &* read2Data [10] $end
$var wire 1 '* read2Data [9] $end
$var wire 1 (* read2Data [8] $end
$var wire 1 )* read2Data [7] $end
$var wire 1 ** read2Data [6] $end
$var wire 1 +* read2Data [5] $end
$var wire 1 ,* read2Data [4] $end
$var wire 1 -* read2Data [3] $end
$var wire 1 .* read2Data [2] $end
$var wire 1 /* read2Data [1] $end
$var wire 1 0* read2Data [0] $end
$var wire 1 6! err $end
$var wire 1 (+ r0 [15] $end
$var wire 1 )+ r0 [14] $end
$var wire 1 *+ r0 [13] $end
$var wire 1 ++ r0 [12] $end
$var wire 1 ,+ r0 [11] $end
$var wire 1 -+ r0 [10] $end
$var wire 1 .+ r0 [9] $end
$var wire 1 /+ r0 [8] $end
$var wire 1 0+ r0 [7] $end
$var wire 1 1+ r0 [6] $end
$var wire 1 2+ r0 [5] $end
$var wire 1 3+ r0 [4] $end
$var wire 1 4+ r0 [3] $end
$var wire 1 5+ r0 [2] $end
$var wire 1 6+ r0 [1] $end
$var wire 1 7+ r0 [0] $end
$var wire 1 8+ r1 [15] $end
$var wire 1 9+ r1 [14] $end
$var wire 1 :+ r1 [13] $end
$var wire 1 ;+ r1 [12] $end
$var wire 1 <+ r1 [11] $end
$var wire 1 =+ r1 [10] $end
$var wire 1 >+ r1 [9] $end
$var wire 1 ?+ r1 [8] $end
$var wire 1 @+ r1 [7] $end
$var wire 1 A+ r1 [6] $end
$var wire 1 B+ r1 [5] $end
$var wire 1 C+ r1 [4] $end
$var wire 1 D+ r1 [3] $end
$var wire 1 E+ r1 [2] $end
$var wire 1 F+ r1 [1] $end
$var wire 1 G+ r1 [0] $end
$var wire 1 H+ r2 [15] $end
$var wire 1 I+ r2 [14] $end
$var wire 1 J+ r2 [13] $end
$var wire 1 K+ r2 [12] $end
$var wire 1 L+ r2 [11] $end
$var wire 1 M+ r2 [10] $end
$var wire 1 N+ r2 [9] $end
$var wire 1 O+ r2 [8] $end
$var wire 1 P+ r2 [7] $end
$var wire 1 Q+ r2 [6] $end
$var wire 1 R+ r2 [5] $end
$var wire 1 S+ r2 [4] $end
$var wire 1 T+ r2 [3] $end
$var wire 1 U+ r2 [2] $end
$var wire 1 V+ r2 [1] $end
$var wire 1 W+ r2 [0] $end
$var wire 1 X+ r3 [15] $end
$var wire 1 Y+ r3 [14] $end
$var wire 1 Z+ r3 [13] $end
$var wire 1 [+ r3 [12] $end
$var wire 1 \+ r3 [11] $end
$var wire 1 ]+ r3 [10] $end
$var wire 1 ^+ r3 [9] $end
$var wire 1 _+ r3 [8] $end
$var wire 1 `+ r3 [7] $end
$var wire 1 a+ r3 [6] $end
$var wire 1 b+ r3 [5] $end
$var wire 1 c+ r3 [4] $end
$var wire 1 d+ r3 [3] $end
$var wire 1 e+ r3 [2] $end
$var wire 1 f+ r3 [1] $end
$var wire 1 g+ r3 [0] $end
$var wire 1 h+ r4 [15] $end
$var wire 1 i+ r4 [14] $end
$var wire 1 j+ r4 [13] $end
$var wire 1 k+ r4 [12] $end
$var wire 1 l+ r4 [11] $end
$var wire 1 m+ r4 [10] $end
$var wire 1 n+ r4 [9] $end
$var wire 1 o+ r4 [8] $end
$var wire 1 p+ r4 [7] $end
$var wire 1 q+ r4 [6] $end
$var wire 1 r+ r4 [5] $end
$var wire 1 s+ r4 [4] $end
$var wire 1 t+ r4 [3] $end
$var wire 1 u+ r4 [2] $end
$var wire 1 v+ r4 [1] $end
$var wire 1 w+ r4 [0] $end
$var wire 1 x+ r5 [15] $end
$var wire 1 y+ r5 [14] $end
$var wire 1 z+ r5 [13] $end
$var wire 1 {+ r5 [12] $end
$var wire 1 |+ r5 [11] $end
$var wire 1 }+ r5 [10] $end
$var wire 1 ~+ r5 [9] $end
$var wire 1 !, r5 [8] $end
$var wire 1 ", r5 [7] $end
$var wire 1 #, r5 [6] $end
$var wire 1 $, r5 [5] $end
$var wire 1 %, r5 [4] $end
$var wire 1 &, r5 [3] $end
$var wire 1 ', r5 [2] $end
$var wire 1 (, r5 [1] $end
$var wire 1 ), r5 [0] $end
$var wire 1 *, r6 [15] $end
$var wire 1 +, r6 [14] $end
$var wire 1 ,, r6 [13] $end
$var wire 1 -, r6 [12] $end
$var wire 1 ., r6 [11] $end
$var wire 1 /, r6 [10] $end
$var wire 1 0, r6 [9] $end
$var wire 1 1, r6 [8] $end
$var wire 1 2, r6 [7] $end
$var wire 1 3, r6 [6] $end
$var wire 1 4, r6 [5] $end
$var wire 1 5, r6 [4] $end
$var wire 1 6, r6 [3] $end
$var wire 1 7, r6 [2] $end
$var wire 1 8, r6 [1] $end
$var wire 1 9, r6 [0] $end
$var wire 1 :, r7 [15] $end
$var wire 1 ;, r7 [14] $end
$var wire 1 <, r7 [13] $end
$var wire 1 =, r7 [12] $end
$var wire 1 >, r7 [11] $end
$var wire 1 ?, r7 [10] $end
$var wire 1 @, r7 [9] $end
$var wire 1 A, r7 [8] $end
$var wire 1 B, r7 [7] $end
$var wire 1 C, r7 [6] $end
$var wire 1 D, r7 [5] $end
$var wire 1 E, r7 [4] $end
$var wire 1 F, r7 [3] $end
$var wire 1 G, r7 [2] $end
$var wire 1 H, r7 [1] $end
$var wire 1 I, r7 [0] $end
$var wire 1 J, we [15] $end
$var wire 1 K, we [14] $end
$var wire 1 L, we [13] $end
$var wire 1 M, we [12] $end
$var wire 1 N, we [11] $end
$var wire 1 O, we [10] $end
$var wire 1 P, we [9] $end
$var wire 1 Q, we [8] $end
$var wire 1 R, we [7] $end
$var wire 1 S, we [6] $end
$var wire 1 T, we [5] $end
$var wire 1 U, we [4] $end
$var wire 1 V, we [3] $end
$var wire 1 W, we [2] $end
$var wire 1 X, we [1] $end
$var wire 1 Y, we [0] $end

$scope module s1 $end
$var parameter 32 Z, OPERAND_WIDTH $end
$var parameter 32 [, SHAMT_WIDTH $end
$var parameter 32 \, NUM_OPERATIONS $end
$var wire 1 ], In [15] $end
$var wire 1 ^, In [14] $end
$var wire 1 _, In [13] $end
$var wire 1 `, In [12] $end
$var wire 1 a, In [11] $end
$var wire 1 b, In [10] $end
$var wire 1 c, In [9] $end
$var wire 1 d, In [8] $end
$var wire 1 e, In [7] $end
$var wire 1 f, In [6] $end
$var wire 1 g, In [5] $end
$var wire 1 h, In [4] $end
$var wire 1 i, In [3] $end
$var wire 1 j, In [2] $end
$var wire 1 k, In [1] $end
$var wire 1 $+ In [0] $end
$var wire 1 l, ShAmt [3] $end
$var wire 1 ~# ShAmt [2] $end
$var wire 1 !$ ShAmt [1] $end
$var wire 1 "$ ShAmt [0] $end
$var wire 1 m, Oper [1] $end
$var wire 1 n, Oper [0] $end
$var wire 1 J, Out [15] $end
$var wire 1 K, Out [14] $end
$var wire 1 L, Out [13] $end
$var wire 1 M, Out [12] $end
$var wire 1 N, Out [11] $end
$var wire 1 O, Out [10] $end
$var wire 1 P, Out [9] $end
$var wire 1 Q, Out [8] $end
$var wire 1 R, Out [7] $end
$var wire 1 S, Out [6] $end
$var wire 1 T, Out [5] $end
$var wire 1 U, Out [4] $end
$var wire 1 V, Out [3] $end
$var wire 1 W, Out [2] $end
$var wire 1 X, Out [1] $end
$var wire 1 Y, Out [0] $end
$var wire 1 o, s0 [15] $end
$var wire 1 p, s0 [14] $end
$var wire 1 q, s0 [13] $end
$var wire 1 r, s0 [12] $end
$var wire 1 s, s0 [11] $end
$var wire 1 t, s0 [10] $end
$var wire 1 u, s0 [9] $end
$var wire 1 v, s0 [8] $end
$var wire 1 w, s0 [7] $end
$var wire 1 x, s0 [6] $end
$var wire 1 y, s0 [5] $end
$var wire 1 z, s0 [4] $end
$var wire 1 {, s0 [3] $end
$var wire 1 |, s0 [2] $end
$var wire 1 }, s0 [1] $end
$var wire 1 ~, s0 [0] $end
$var wire 1 !- s1 [15] $end
$var wire 1 "- s1 [14] $end
$var wire 1 #- s1 [13] $end
$var wire 1 $- s1 [12] $end
$var wire 1 %- s1 [11] $end
$var wire 1 &- s1 [10] $end
$var wire 1 '- s1 [9] $end
$var wire 1 (- s1 [8] $end
$var wire 1 )- s1 [7] $end
$var wire 1 *- s1 [6] $end
$var wire 1 +- s1 [5] $end
$var wire 1 ,- s1 [4] $end
$var wire 1 -- s1 [3] $end
$var wire 1 .- s1 [2] $end
$var wire 1 /- s1 [1] $end
$var wire 1 0- s1 [0] $end
$var wire 1 1- s2 [15] $end
$var wire 1 2- s2 [14] $end
$var wire 1 3- s2 [13] $end
$var wire 1 4- s2 [12] $end
$var wire 1 5- s2 [11] $end
$var wire 1 6- s2 [10] $end
$var wire 1 7- s2 [9] $end
$var wire 1 8- s2 [8] $end
$var wire 1 9- s2 [7] $end
$var wire 1 :- s2 [6] $end
$var wire 1 ;- s2 [5] $end
$var wire 1 <- s2 [4] $end
$var wire 1 =- s2 [3] $end
$var wire 1 >- s2 [2] $end
$var wire 1 ?- s2 [1] $end
$var wire 1 @- s2 [0] $end
$var wire 1 A- s3 [15] $end
$var wire 1 B- s3 [14] $end
$var wire 1 C- s3 [13] $end
$var wire 1 D- s3 [12] $end
$var wire 1 E- s3 [11] $end
$var wire 1 F- s3 [10] $end
$var wire 1 G- s3 [9] $end
$var wire 1 H- s3 [8] $end
$var wire 1 I- s3 [7] $end
$var wire 1 J- s3 [6] $end
$var wire 1 K- s3 [5] $end
$var wire 1 L- s3 [4] $end
$var wire 1 M- s3 [3] $end
$var wire 1 N- s3 [2] $end
$var wire 1 O- s3 [1] $end
$var wire 1 P- s3 [0] $end
$var wire 1 Q- temp_out_sh0 [15] $end
$var wire 1 R- temp_out_sh0 [14] $end
$var wire 1 S- temp_out_sh0 [13] $end
$var wire 1 T- temp_out_sh0 [12] $end
$var wire 1 U- temp_out_sh0 [11] $end
$var wire 1 V- temp_out_sh0 [10] $end
$var wire 1 W- temp_out_sh0 [9] $end
$var wire 1 X- temp_out_sh0 [8] $end
$var wire 1 Y- temp_out_sh0 [7] $end
$var wire 1 Z- temp_out_sh0 [6] $end
$var wire 1 [- temp_out_sh0 [5] $end
$var wire 1 \- temp_out_sh0 [4] $end
$var wire 1 ]- temp_out_sh0 [3] $end
$var wire 1 ^- temp_out_sh0 [2] $end
$var wire 1 _- temp_out_sh0 [1] $end
$var wire 1 `- temp_out_sh0 [0] $end
$var wire 1 a- temp_out_sh1 [15] $end
$var wire 1 b- temp_out_sh1 [14] $end
$var wire 1 c- temp_out_sh1 [13] $end
$var wire 1 d- temp_out_sh1 [12] $end
$var wire 1 e- temp_out_sh1 [11] $end
$var wire 1 f- temp_out_sh1 [10] $end
$var wire 1 g- temp_out_sh1 [9] $end
$var wire 1 h- temp_out_sh1 [8] $end
$var wire 1 i- temp_out_sh1 [7] $end
$var wire 1 j- temp_out_sh1 [6] $end
$var wire 1 k- temp_out_sh1 [5] $end
$var wire 1 l- temp_out_sh1 [4] $end
$var wire 1 m- temp_out_sh1 [3] $end
$var wire 1 n- temp_out_sh1 [2] $end
$var wire 1 o- temp_out_sh1 [1] $end
$var wire 1 p- temp_out_sh1 [0] $end
$var wire 1 q- temp_out_sh2 [15] $end
$var wire 1 r- temp_out_sh2 [14] $end
$var wire 1 s- temp_out_sh2 [13] $end
$var wire 1 t- temp_out_sh2 [12] $end
$var wire 1 u- temp_out_sh2 [11] $end
$var wire 1 v- temp_out_sh2 [10] $end
$var wire 1 w- temp_out_sh2 [9] $end
$var wire 1 x- temp_out_sh2 [8] $end
$var wire 1 y- temp_out_sh2 [7] $end
$var wire 1 z- temp_out_sh2 [6] $end
$var wire 1 {- temp_out_sh2 [5] $end
$var wire 1 |- temp_out_sh2 [4] $end
$var wire 1 }- temp_out_sh2 [3] $end
$var wire 1 ~- temp_out_sh2 [2] $end
$var wire 1 !. temp_out_sh2 [1] $end
$var wire 1 ". temp_out_sh2 [0] $end
$var wire 1 #. temp_out_sh3 [15] $end
$var wire 1 $. temp_out_sh3 [14] $end
$var wire 1 %. temp_out_sh3 [13] $end
$var wire 1 &. temp_out_sh3 [12] $end
$var wire 1 '. temp_out_sh3 [11] $end
$var wire 1 (. temp_out_sh3 [10] $end
$var wire 1 ). temp_out_sh3 [9] $end
$var wire 1 *. temp_out_sh3 [8] $end
$var wire 1 +. temp_out_sh3 [7] $end
$var wire 1 ,. temp_out_sh3 [6] $end
$var wire 1 -. temp_out_sh3 [5] $end
$var wire 1 .. temp_out_sh3 [4] $end
$var wire 1 /. temp_out_sh3 [3] $end
$var wire 1 0. temp_out_sh3 [2] $end
$var wire 1 1. temp_out_sh3 [1] $end
$var wire 1 2. temp_out_sh3 [0] $end

$scope module bs0 $end
$var wire 1 ], in [15] $end
$var wire 1 ^, in [14] $end
$var wire 1 _, in [13] $end
$var wire 1 `, in [12] $end
$var wire 1 a, in [11] $end
$var wire 1 b, in [10] $end
$var wire 1 c, in [9] $end
$var wire 1 d, in [8] $end
$var wire 1 e, in [7] $end
$var wire 1 f, in [6] $end
$var wire 1 g, in [5] $end
$var wire 1 h, in [4] $end
$var wire 1 i, in [3] $end
$var wire 1 j, in [2] $end
$var wire 1 k, in [1] $end
$var wire 1 $+ in [0] $end
$var wire 1 m, oper [1] $end
$var wire 1 n, oper [0] $end
$var wire 1 Q- out [15] $end
$var wire 1 R- out [14] $end
$var wire 1 S- out [13] $end
$var wire 1 T- out [12] $end
$var wire 1 U- out [11] $end
$var wire 1 V- out [10] $end
$var wire 1 W- out [9] $end
$var wire 1 X- out [8] $end
$var wire 1 Y- out [7] $end
$var wire 1 Z- out [6] $end
$var wire 1 [- out [5] $end
$var wire 1 \- out [4] $end
$var wire 1 ]- out [3] $end
$var wire 1 ^- out [2] $end
$var wire 1 _- out [1] $end
$var wire 1 `- out [0] $end
$upscope $end

$scope module bs1 $end
$var wire 1 o, in [15] $end
$var wire 1 p, in [14] $end
$var wire 1 q, in [13] $end
$var wire 1 r, in [12] $end
$var wire 1 s, in [11] $end
$var wire 1 t, in [10] $end
$var wire 1 u, in [9] $end
$var wire 1 v, in [8] $end
$var wire 1 w, in [7] $end
$var wire 1 x, in [6] $end
$var wire 1 y, in [5] $end
$var wire 1 z, in [4] $end
$var wire 1 {, in [3] $end
$var wire 1 |, in [2] $end
$var wire 1 }, in [1] $end
$var wire 1 ~, in [0] $end
$var wire 1 m, oper [1] $end
$var wire 1 n, oper [0] $end
$var wire 1 a- out [15] $end
$var wire 1 b- out [14] $end
$var wire 1 c- out [13] $end
$var wire 1 d- out [12] $end
$var wire 1 e- out [11] $end
$var wire 1 f- out [10] $end
$var wire 1 g- out [9] $end
$var wire 1 h- out [8] $end
$var wire 1 i- out [7] $end
$var wire 1 j- out [6] $end
$var wire 1 k- out [5] $end
$var wire 1 l- out [4] $end
$var wire 1 m- out [3] $end
$var wire 1 n- out [2] $end
$var wire 1 o- out [1] $end
$var wire 1 p- out [0] $end
$upscope $end

$scope module bs2 $end
$var wire 1 !- in [15] $end
$var wire 1 "- in [14] $end
$var wire 1 #- in [13] $end
$var wire 1 $- in [12] $end
$var wire 1 %- in [11] $end
$var wire 1 &- in [10] $end
$var wire 1 '- in [9] $end
$var wire 1 (- in [8] $end
$var wire 1 )- in [7] $end
$var wire 1 *- in [6] $end
$var wire 1 +- in [5] $end
$var wire 1 ,- in [4] $end
$var wire 1 -- in [3] $end
$var wire 1 .- in [2] $end
$var wire 1 /- in [1] $end
$var wire 1 0- in [0] $end
$var wire 1 m, oper [1] $end
$var wire 1 n, oper [0] $end
$var wire 1 q- out [15] $end
$var wire 1 r- out [14] $end
$var wire 1 s- out [13] $end
$var wire 1 t- out [12] $end
$var wire 1 u- out [11] $end
$var wire 1 v- out [10] $end
$var wire 1 w- out [9] $end
$var wire 1 x- out [8] $end
$var wire 1 y- out [7] $end
$var wire 1 z- out [6] $end
$var wire 1 {- out [5] $end
$var wire 1 |- out [4] $end
$var wire 1 }- out [3] $end
$var wire 1 ~- out [2] $end
$var wire 1 !. out [1] $end
$var wire 1 ". out [0] $end
$upscope $end

$scope module bs3 $end
$var wire 1 1- in [15] $end
$var wire 1 2- in [14] $end
$var wire 1 3- in [13] $end
$var wire 1 4- in [12] $end
$var wire 1 5- in [11] $end
$var wire 1 6- in [10] $end
$var wire 1 7- in [9] $end
$var wire 1 8- in [8] $end
$var wire 1 9- in [7] $end
$var wire 1 :- in [6] $end
$var wire 1 ;- in [5] $end
$var wire 1 <- in [4] $end
$var wire 1 =- in [3] $end
$var wire 1 >- in [2] $end
$var wire 1 ?- in [1] $end
$var wire 1 @- in [0] $end
$var wire 1 m, oper [1] $end
$var wire 1 n, oper [0] $end
$var wire 1 #. out [15] $end
$var wire 1 $. out [14] $end
$var wire 1 %. out [13] $end
$var wire 1 &. out [12] $end
$var wire 1 '. out [11] $end
$var wire 1 (. out [10] $end
$var wire 1 ). out [9] $end
$var wire 1 *. out [8] $end
$var wire 1 +. out [7] $end
$var wire 1 ,. out [6] $end
$var wire 1 -. out [5] $end
$var wire 1 .. out [4] $end
$var wire 1 /. out [3] $end
$var wire 1 0. out [2] $end
$var wire 1 1. out [1] $end
$var wire 1 2. out [0] $end
$upscope $end
$upscope $end

$scope module registers[7] $end
$var parameter 32 3. BIT_WIDTH $end
$var parameter 32 4. BIT_SIZE $end
$var parameter 32 5. REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 R, we $end
$var wire 1 ;" w [15] $end
$var wire 1 <" w [14] $end
$var wire 1 =" w [13] $end
$var wire 1 >" w [12] $end
$var wire 1 ?" w [11] $end
$var wire 1 @" w [10] $end
$var wire 1 A" w [9] $end
$var wire 1 B" w [8] $end
$var wire 1 C" w [7] $end
$var wire 1 D" w [6] $end
$var wire 1 E" w [5] $end
$var wire 1 F" w [4] $end
$var wire 1 G" w [3] $end
$var wire 1 H" w [2] $end
$var wire 1 I" w [1] $end
$var wire 1 J" w [0] $end
$var wire 1 :, r [15] $end
$var wire 1 ;, r [14] $end
$var wire 1 <, r [13] $end
$var wire 1 =, r [12] $end
$var wire 1 >, r [11] $end
$var wire 1 ?, r [10] $end
$var wire 1 @, r [9] $end
$var wire 1 A, r [8] $end
$var wire 1 B, r [7] $end
$var wire 1 C, r [6] $end
$var wire 1 D, r [5] $end
$var wire 1 E, r [4] $end
$var wire 1 F, r [3] $end
$var wire 1 G, r [2] $end
$var wire 1 H, r [1] $end
$var wire 1 I, r [0] $end

$scope module dff01[15] $end
$var wire 1 :, q $end
$var wire 1 6. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 7. state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 ;, q $end
$var wire 1 8. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 9. state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 <, q $end
$var wire 1 :. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ;. state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 =, q $end
$var wire 1 <. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 =. state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 >, q $end
$var wire 1 >. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ?. state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 ?, q $end
$var wire 1 @. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 A. state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 @, q $end
$var wire 1 B. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 C. state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 A, q $end
$var wire 1 D. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 E. state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 B, q $end
$var wire 1 F. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 G. state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 C, q $end
$var wire 1 H. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 I. state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 D, q $end
$var wire 1 J. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 K. state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 E, q $end
$var wire 1 L. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 M. state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 F, q $end
$var wire 1 N. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 O. state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 G, q $end
$var wire 1 P. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Q. state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 H, q $end
$var wire 1 R. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 S. state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 I, q $end
$var wire 1 T. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 U. state $end
$upscope $end
$upscope $end

$scope module registers[6] $end
$var parameter 32 V. BIT_WIDTH $end
$var parameter 32 W. BIT_SIZE $end
$var parameter 32 X. REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 S, we $end
$var wire 1 ;" w [15] $end
$var wire 1 <" w [14] $end
$var wire 1 =" w [13] $end
$var wire 1 >" w [12] $end
$var wire 1 ?" w [11] $end
$var wire 1 @" w [10] $end
$var wire 1 A" w [9] $end
$var wire 1 B" w [8] $end
$var wire 1 C" w [7] $end
$var wire 1 D" w [6] $end
$var wire 1 E" w [5] $end
$var wire 1 F" w [4] $end
$var wire 1 G" w [3] $end
$var wire 1 H" w [2] $end
$var wire 1 I" w [1] $end
$var wire 1 J" w [0] $end
$var wire 1 *, r [15] $end
$var wire 1 +, r [14] $end
$var wire 1 ,, r [13] $end
$var wire 1 -, r [12] $end
$var wire 1 ., r [11] $end
$var wire 1 /, r [10] $end
$var wire 1 0, r [9] $end
$var wire 1 1, r [8] $end
$var wire 1 2, r [7] $end
$var wire 1 3, r [6] $end
$var wire 1 4, r [5] $end
$var wire 1 5, r [4] $end
$var wire 1 6, r [3] $end
$var wire 1 7, r [2] $end
$var wire 1 8, r [1] $end
$var wire 1 9, r [0] $end

$scope module dff01[15] $end
$var wire 1 *, q $end
$var wire 1 Y. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Z. state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 +, q $end
$var wire 1 [. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \. state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 ,, q $end
$var wire 1 ]. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^. state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 -, q $end
$var wire 1 _. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `. state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 ., q $end
$var wire 1 a. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 b. state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 /, q $end
$var wire 1 c. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 d. state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 0, q $end
$var wire 1 e. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 f. state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 1, q $end
$var wire 1 g. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 h. state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 2, q $end
$var wire 1 i. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 j. state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 3, q $end
$var wire 1 k. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 l. state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 4, q $end
$var wire 1 m. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 n. state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 5, q $end
$var wire 1 o. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 p. state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 6, q $end
$var wire 1 q. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 r. state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 7, q $end
$var wire 1 s. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 t. state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 8, q $end
$var wire 1 u. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 v. state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 9, q $end
$var wire 1 w. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 x. state $end
$upscope $end
$upscope $end

$scope module registers[5] $end
$var parameter 32 y. BIT_WIDTH $end
$var parameter 32 z. BIT_SIZE $end
$var parameter 32 {. REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 T, we $end
$var wire 1 ;" w [15] $end
$var wire 1 <" w [14] $end
$var wire 1 =" w [13] $end
$var wire 1 >" w [12] $end
$var wire 1 ?" w [11] $end
$var wire 1 @" w [10] $end
$var wire 1 A" w [9] $end
$var wire 1 B" w [8] $end
$var wire 1 C" w [7] $end
$var wire 1 D" w [6] $end
$var wire 1 E" w [5] $end
$var wire 1 F" w [4] $end
$var wire 1 G" w [3] $end
$var wire 1 H" w [2] $end
$var wire 1 I" w [1] $end
$var wire 1 J" w [0] $end
$var wire 1 x+ r [15] $end
$var wire 1 y+ r [14] $end
$var wire 1 z+ r [13] $end
$var wire 1 {+ r [12] $end
$var wire 1 |+ r [11] $end
$var wire 1 }+ r [10] $end
$var wire 1 ~+ r [9] $end
$var wire 1 !, r [8] $end
$var wire 1 ", r [7] $end
$var wire 1 #, r [6] $end
$var wire 1 $, r [5] $end
$var wire 1 %, r [4] $end
$var wire 1 &, r [3] $end
$var wire 1 ', r [2] $end
$var wire 1 (, r [1] $end
$var wire 1 ), r [0] $end

$scope module dff01[15] $end
$var wire 1 x+ q $end
$var wire 1 |. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 }. state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 y+ q $end
$var wire 1 ~. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 !/ state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 z+ q $end
$var wire 1 "/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 #/ state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 {+ q $end
$var wire 1 $/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 %/ state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 |+ q $end
$var wire 1 &/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 '/ state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 }+ q $end
$var wire 1 (/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 )/ state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 ~+ q $end
$var wire 1 */ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 +/ state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 !, q $end
$var wire 1 ,/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 -/ state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 ", q $end
$var wire 1 ./ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 // state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 #, q $end
$var wire 1 0/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 1/ state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 $, q $end
$var wire 1 2/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 3/ state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 %, q $end
$var wire 1 4/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 5/ state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 &, q $end
$var wire 1 6/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 7/ state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 ', q $end
$var wire 1 8/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 9/ state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 (, q $end
$var wire 1 :/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ;/ state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 ), q $end
$var wire 1 </ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 =/ state $end
$upscope $end
$upscope $end

$scope module registers[4] $end
$var parameter 32 >/ BIT_WIDTH $end
$var parameter 32 ?/ BIT_SIZE $end
$var parameter 32 @/ REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U, we $end
$var wire 1 ;" w [15] $end
$var wire 1 <" w [14] $end
$var wire 1 =" w [13] $end
$var wire 1 >" w [12] $end
$var wire 1 ?" w [11] $end
$var wire 1 @" w [10] $end
$var wire 1 A" w [9] $end
$var wire 1 B" w [8] $end
$var wire 1 C" w [7] $end
$var wire 1 D" w [6] $end
$var wire 1 E" w [5] $end
$var wire 1 F" w [4] $end
$var wire 1 G" w [3] $end
$var wire 1 H" w [2] $end
$var wire 1 I" w [1] $end
$var wire 1 J" w [0] $end
$var wire 1 h+ r [15] $end
$var wire 1 i+ r [14] $end
$var wire 1 j+ r [13] $end
$var wire 1 k+ r [12] $end
$var wire 1 l+ r [11] $end
$var wire 1 m+ r [10] $end
$var wire 1 n+ r [9] $end
$var wire 1 o+ r [8] $end
$var wire 1 p+ r [7] $end
$var wire 1 q+ r [6] $end
$var wire 1 r+ r [5] $end
$var wire 1 s+ r [4] $end
$var wire 1 t+ r [3] $end
$var wire 1 u+ r [2] $end
$var wire 1 v+ r [1] $end
$var wire 1 w+ r [0] $end

$scope module dff01[15] $end
$var wire 1 h+ q $end
$var wire 1 A/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 B/ state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 i+ q $end
$var wire 1 C/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 D/ state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 j+ q $end
$var wire 1 E/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F/ state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 k+ q $end
$var wire 1 G/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H/ state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 l+ q $end
$var wire 1 I/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 J/ state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 m+ q $end
$var wire 1 K/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 L/ state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 n+ q $end
$var wire 1 M/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N/ state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 o+ q $end
$var wire 1 O/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 P/ state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 p+ q $end
$var wire 1 Q/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 R/ state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 q+ q $end
$var wire 1 S/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 T/ state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 r+ q $end
$var wire 1 U/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V/ state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 s+ q $end
$var wire 1 W/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 X/ state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 t+ q $end
$var wire 1 Y/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Z/ state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 u+ q $end
$var wire 1 [/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \/ state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 v+ q $end
$var wire 1 ]/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^/ state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 w+ q $end
$var wire 1 _/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `/ state $end
$upscope $end
$upscope $end

$scope module registers[3] $end
$var parameter 32 a/ BIT_WIDTH $end
$var parameter 32 b/ BIT_SIZE $end
$var parameter 32 c/ REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 V, we $end
$var wire 1 ;" w [15] $end
$var wire 1 <" w [14] $end
$var wire 1 =" w [13] $end
$var wire 1 >" w [12] $end
$var wire 1 ?" w [11] $end
$var wire 1 @" w [10] $end
$var wire 1 A" w [9] $end
$var wire 1 B" w [8] $end
$var wire 1 C" w [7] $end
$var wire 1 D" w [6] $end
$var wire 1 E" w [5] $end
$var wire 1 F" w [4] $end
$var wire 1 G" w [3] $end
$var wire 1 H" w [2] $end
$var wire 1 I" w [1] $end
$var wire 1 J" w [0] $end
$var wire 1 X+ r [15] $end
$var wire 1 Y+ r [14] $end
$var wire 1 Z+ r [13] $end
$var wire 1 [+ r [12] $end
$var wire 1 \+ r [11] $end
$var wire 1 ]+ r [10] $end
$var wire 1 ^+ r [9] $end
$var wire 1 _+ r [8] $end
$var wire 1 `+ r [7] $end
$var wire 1 a+ r [6] $end
$var wire 1 b+ r [5] $end
$var wire 1 c+ r [4] $end
$var wire 1 d+ r [3] $end
$var wire 1 e+ r [2] $end
$var wire 1 f+ r [1] $end
$var wire 1 g+ r [0] $end

$scope module dff01[15] $end
$var wire 1 X+ q $end
$var wire 1 d/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 e/ state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 Y+ q $end
$var wire 1 f/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 g/ state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 Z+ q $end
$var wire 1 h/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 i/ state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 [+ q $end
$var wire 1 j/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 k/ state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 \+ q $end
$var wire 1 l/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 m/ state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 ]+ q $end
$var wire 1 n/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 o/ state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 ^+ q $end
$var wire 1 p/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 q/ state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 _+ q $end
$var wire 1 r/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 s/ state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 `+ q $end
$var wire 1 t/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 u/ state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 a+ q $end
$var wire 1 v/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 w/ state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 b+ q $end
$var wire 1 x/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 y/ state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 c+ q $end
$var wire 1 z/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 {/ state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 d+ q $end
$var wire 1 |/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 }/ state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 e+ q $end
$var wire 1 ~/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 !0 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 f+ q $end
$var wire 1 "0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 #0 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 g+ q $end
$var wire 1 $0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 %0 state $end
$upscope $end
$upscope $end

$scope module registers[2] $end
$var parameter 32 &0 BIT_WIDTH $end
$var parameter 32 '0 BIT_SIZE $end
$var parameter 32 (0 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 W, we $end
$var wire 1 ;" w [15] $end
$var wire 1 <" w [14] $end
$var wire 1 =" w [13] $end
$var wire 1 >" w [12] $end
$var wire 1 ?" w [11] $end
$var wire 1 @" w [10] $end
$var wire 1 A" w [9] $end
$var wire 1 B" w [8] $end
$var wire 1 C" w [7] $end
$var wire 1 D" w [6] $end
$var wire 1 E" w [5] $end
$var wire 1 F" w [4] $end
$var wire 1 G" w [3] $end
$var wire 1 H" w [2] $end
$var wire 1 I" w [1] $end
$var wire 1 J" w [0] $end
$var wire 1 H+ r [15] $end
$var wire 1 I+ r [14] $end
$var wire 1 J+ r [13] $end
$var wire 1 K+ r [12] $end
$var wire 1 L+ r [11] $end
$var wire 1 M+ r [10] $end
$var wire 1 N+ r [9] $end
$var wire 1 O+ r [8] $end
$var wire 1 P+ r [7] $end
$var wire 1 Q+ r [6] $end
$var wire 1 R+ r [5] $end
$var wire 1 S+ r [4] $end
$var wire 1 T+ r [3] $end
$var wire 1 U+ r [2] $end
$var wire 1 V+ r [1] $end
$var wire 1 W+ r [0] $end

$scope module dff01[15] $end
$var wire 1 H+ q $end
$var wire 1 )0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *0 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 I+ q $end
$var wire 1 +0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,0 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 J+ q $end
$var wire 1 -0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 .0 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 K+ q $end
$var wire 1 /0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 00 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 L+ q $end
$var wire 1 10 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 20 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 M+ q $end
$var wire 1 30 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 40 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 N+ q $end
$var wire 1 50 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 60 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 O+ q $end
$var wire 1 70 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 80 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 P+ q $end
$var wire 1 90 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :0 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 Q+ q $end
$var wire 1 ;0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 <0 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 R+ q $end
$var wire 1 =0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >0 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 S+ q $end
$var wire 1 ?0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @0 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 T+ q $end
$var wire 1 A0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 B0 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 U+ q $end
$var wire 1 C0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 D0 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 V+ q $end
$var wire 1 E0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F0 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 W+ q $end
$var wire 1 G0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H0 state $end
$upscope $end
$upscope $end

$scope module registers[1] $end
$var parameter 32 I0 BIT_WIDTH $end
$var parameter 32 J0 BIT_SIZE $end
$var parameter 32 K0 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 X, we $end
$var wire 1 ;" w [15] $end
$var wire 1 <" w [14] $end
$var wire 1 =" w [13] $end
$var wire 1 >" w [12] $end
$var wire 1 ?" w [11] $end
$var wire 1 @" w [10] $end
$var wire 1 A" w [9] $end
$var wire 1 B" w [8] $end
$var wire 1 C" w [7] $end
$var wire 1 D" w [6] $end
$var wire 1 E" w [5] $end
$var wire 1 F" w [4] $end
$var wire 1 G" w [3] $end
$var wire 1 H" w [2] $end
$var wire 1 I" w [1] $end
$var wire 1 J" w [0] $end
$var wire 1 8+ r [15] $end
$var wire 1 9+ r [14] $end
$var wire 1 :+ r [13] $end
$var wire 1 ;+ r [12] $end
$var wire 1 <+ r [11] $end
$var wire 1 =+ r [10] $end
$var wire 1 >+ r [9] $end
$var wire 1 ?+ r [8] $end
$var wire 1 @+ r [7] $end
$var wire 1 A+ r [6] $end
$var wire 1 B+ r [5] $end
$var wire 1 C+ r [4] $end
$var wire 1 D+ r [3] $end
$var wire 1 E+ r [2] $end
$var wire 1 F+ r [1] $end
$var wire 1 G+ r [0] $end

$scope module dff01[15] $end
$var wire 1 8+ q $end
$var wire 1 L0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 M0 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 9+ q $end
$var wire 1 N0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 O0 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 :+ q $end
$var wire 1 P0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Q0 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 ;+ q $end
$var wire 1 R0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 S0 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 <+ q $end
$var wire 1 T0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 U0 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 =+ q $end
$var wire 1 V0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 W0 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 >+ q $end
$var wire 1 X0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Y0 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 ?+ q $end
$var wire 1 Z0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 [0 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 @+ q $end
$var wire 1 \0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ]0 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 A+ q $end
$var wire 1 ^0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 _0 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 B+ q $end
$var wire 1 `0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 a0 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 C+ q $end
$var wire 1 b0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 c0 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 D+ q $end
$var wire 1 d0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 e0 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 E+ q $end
$var wire 1 f0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 g0 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 F+ q $end
$var wire 1 h0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 i0 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 G+ q $end
$var wire 1 j0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 k0 state $end
$upscope $end
$upscope $end

$scope module registers[0] $end
$var parameter 32 l0 BIT_WIDTH $end
$var parameter 32 m0 BIT_SIZE $end
$var parameter 32 n0 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 Y, we $end
$var wire 1 ;" w [15] $end
$var wire 1 <" w [14] $end
$var wire 1 =" w [13] $end
$var wire 1 >" w [12] $end
$var wire 1 ?" w [11] $end
$var wire 1 @" w [10] $end
$var wire 1 A" w [9] $end
$var wire 1 B" w [8] $end
$var wire 1 C" w [7] $end
$var wire 1 D" w [6] $end
$var wire 1 E" w [5] $end
$var wire 1 F" w [4] $end
$var wire 1 G" w [3] $end
$var wire 1 H" w [2] $end
$var wire 1 I" w [1] $end
$var wire 1 J" w [0] $end
$var wire 1 (+ r [15] $end
$var wire 1 )+ r [14] $end
$var wire 1 *+ r [13] $end
$var wire 1 ++ r [12] $end
$var wire 1 ,+ r [11] $end
$var wire 1 -+ r [10] $end
$var wire 1 .+ r [9] $end
$var wire 1 /+ r [8] $end
$var wire 1 0+ r [7] $end
$var wire 1 1+ r [6] $end
$var wire 1 2+ r [5] $end
$var wire 1 3+ r [4] $end
$var wire 1 4+ r [3] $end
$var wire 1 5+ r [2] $end
$var wire 1 6+ r [1] $end
$var wire 1 7+ r [0] $end

$scope module dff01[15] $end
$var wire 1 (+ q $end
$var wire 1 o0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 p0 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 )+ q $end
$var wire 1 q0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 r0 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 *+ q $end
$var wire 1 s0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 t0 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 ++ q $end
$var wire 1 u0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 v0 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 ,+ q $end
$var wire 1 w0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 x0 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 -+ q $end
$var wire 1 y0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 z0 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 .+ q $end
$var wire 1 {0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 |0 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 /+ q $end
$var wire 1 }0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ~0 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 0+ q $end
$var wire 1 !1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 "1 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 1+ q $end
$var wire 1 #1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 $1 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 2+ q $end
$var wire 1 %1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 &1 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 3+ q $end
$var wire 1 '1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 (1 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 4+ q $end
$var wire 1 )1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *1 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 5+ q $end
$var wire 1 +1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,1 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 6+ q $end
$var wire 1 -1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 .1 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 7+ q $end
$var wire 1 /1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 01 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module aluc $end
$var wire 1 Q$ instr [1] $end
$var wire 1 R$ instr [0] $end
$var wire 1 [) aluoper [5] $end
$var wire 1 \) aluoper [4] $end
$var wire 1 ]) aluoper [3] $end
$var wire 1 ^) aluoper [2] $end
$var wire 1 _) aluoper [1] $end
$var wire 1 `) aluoper [0] $end
$var reg 1 11 invA $end
$var reg 1 21 invB $end
$var reg 1 31 Cin $end
$var reg 4 41 op [3:0] $end
$upscope $end

$scope module control0 $end
$var wire 1 C$ instr [15] $end
$var wire 1 D$ instr [14] $end
$var wire 1 E$ instr [13] $end
$var wire 1 F$ instr [12] $end
$var wire 1 G$ instr [11] $end
$var wire 1 H$ instr [10] $end
$var wire 1 I$ instr [9] $end
$var wire 1 J$ instr [8] $end
$var wire 1 K$ instr [7] $end
$var wire 1 L$ instr [6] $end
$var wire 1 M$ instr [5] $end
$var wire 1 N$ instr [4] $end
$var wire 1 O$ instr [3] $end
$var wire 1 P$ instr [2] $end
$var wire 1 Q$ instr [1] $end
$var wire 1 R$ instr [0] $end
$var reg 1 51 nHaltSig $end
$var reg 1 61 RegWrt $end
$var reg 1 71 ZeroExt $end
$var reg 1 81 MemRead $end
$var reg 1 91 ImmSrc $end
$var reg 1 :1 ALUSign $end
$var reg 1 ;1 ALUJmp $end
$var reg 1 <1 MemWrt $end
$var reg 1 =1 err $end
$var reg 6 >1 ALUOpr [5:0] $end
$var reg 2 ?1 RegSrc [1:0] $end
$var reg 2 @1 BSrc [1:0] $end
$var reg 2 A1 RegDst [1:0] $end
$var reg 4 B1 BranchTaken [3:0] $end
$var wire 1 C1 funct $end
$upscope $end

$scope module dff_ImmSrc $end
$var wire 1 p# q $end
$var wire 1 ~* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 D1 state $end
$upscope $end

$scope module dff_ALUSign $end
$var wire 1 s# q $end
$var wire 1 !+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 E1 state $end
$upscope $end

$scope module dff_ALUJmp $end
$var wire 1 u# q $end
$var wire 1 "+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F1 state $end
$upscope $end

$scope module dff_MemRead $end
$var wire 1 w# q $end
$var wire 1 }* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 G1 state $end
$upscope $end

$scope module dff_MemWrt $end
$var wire 1 v# q $end
$var wire 1 #+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H1 state $end
$upscope $end

$scope module dff_d_RSData $end
$var parameter 32 I1 BIT_WIDTH $end
$var parameter 32 J1 BIT_SIZE $end
$var parameter 32 K1 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 L1 we $end
$var wire 1 o) w [15] $end
$var wire 1 p) w [14] $end
$var wire 1 q) w [13] $end
$var wire 1 r) w [12] $end
$var wire 1 s) w [11] $end
$var wire 1 t) w [10] $end
$var wire 1 u) w [9] $end
$var wire 1 v) w [8] $end
$var wire 1 w) w [7] $end
$var wire 1 x) w [6] $end
$var wire 1 y) w [5] $end
$var wire 1 z) w [4] $end
$var wire 1 {) w [3] $end
$var wire 1 |) w [2] $end
$var wire 1 }) w [1] $end
$var wire 1 ~) w [0] $end
$var wire 1 K" r [15] $end
$var wire 1 L" r [14] $end
$var wire 1 M" r [13] $end
$var wire 1 N" r [12] $end
$var wire 1 O" r [11] $end
$var wire 1 P" r [10] $end
$var wire 1 Q" r [9] $end
$var wire 1 R" r [8] $end
$var wire 1 S" r [7] $end
$var wire 1 T" r [6] $end
$var wire 1 U" r [5] $end
$var wire 1 V" r [4] $end
$var wire 1 W" r [3] $end
$var wire 1 X" r [2] $end
$var wire 1 Y" r [1] $end
$var wire 1 Z" r [0] $end

$scope module dff01[15] $end
$var wire 1 K" q $end
$var wire 1 M1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N1 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 L" q $end
$var wire 1 O1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 P1 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 M" q $end
$var wire 1 Q1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 R1 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 N" q $end
$var wire 1 S1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 T1 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 O" q $end
$var wire 1 U1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V1 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 P" q $end
$var wire 1 W1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 X1 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 Q" q $end
$var wire 1 Y1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Z1 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 R" q $end
$var wire 1 [1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \1 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 S" q $end
$var wire 1 ]1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^1 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 T" q $end
$var wire 1 _1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `1 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 U" q $end
$var wire 1 a1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 b1 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 V" q $end
$var wire 1 c1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 d1 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 W" q $end
$var wire 1 e1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 f1 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 X" q $end
$var wire 1 g1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 h1 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 Y" q $end
$var wire 1 i1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 j1 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 Z" q $end
$var wire 1 k1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 l1 state $end
$upscope $end
$upscope $end

$scope module dff_d_RTData $end
$var parameter 32 m1 BIT_WIDTH $end
$var parameter 32 n1 BIT_SIZE $end
$var parameter 32 o1 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 p1 we $end
$var wire 1 !* w [15] $end
$var wire 1 "* w [14] $end
$var wire 1 #* w [13] $end
$var wire 1 $* w [12] $end
$var wire 1 %* w [11] $end
$var wire 1 &* w [10] $end
$var wire 1 '* w [9] $end
$var wire 1 (* w [8] $end
$var wire 1 )* w [7] $end
$var wire 1 ** w [6] $end
$var wire 1 +* w [5] $end
$var wire 1 ,* w [4] $end
$var wire 1 -* w [3] $end
$var wire 1 .* w [2] $end
$var wire 1 /* w [1] $end
$var wire 1 0* w [0] $end
$var wire 1 [" r [15] $end
$var wire 1 \" r [14] $end
$var wire 1 ]" r [13] $end
$var wire 1 ^" r [12] $end
$var wire 1 _" r [11] $end
$var wire 1 `" r [10] $end
$var wire 1 a" r [9] $end
$var wire 1 b" r [8] $end
$var wire 1 c" r [7] $end
$var wire 1 d" r [6] $end
$var wire 1 e" r [5] $end
$var wire 1 f" r [4] $end
$var wire 1 g" r [3] $end
$var wire 1 h" r [2] $end
$var wire 1 i" r [1] $end
$var wire 1 j" r [0] $end

$scope module dff01[15] $end
$var wire 1 [" q $end
$var wire 1 q1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 r1 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 \" q $end
$var wire 1 s1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 t1 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 ]" q $end
$var wire 1 u1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 v1 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 ^" q $end
$var wire 1 w1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 x1 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 _" q $end
$var wire 1 y1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 z1 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 `" q $end
$var wire 1 {1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 |1 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 a" q $end
$var wire 1 }1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ~1 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 b" q $end
$var wire 1 !2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 "2 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 c" q $end
$var wire 1 #2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 $2 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 d" q $end
$var wire 1 %2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 &2 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 e" q $end
$var wire 1 '2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 (2 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 f" q $end
$var wire 1 )2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *2 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 g" q $end
$var wire 1 +2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,2 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 h" q $end
$var wire 1 -2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 .2 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 i" q $end
$var wire 1 /2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 02 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 j" q $end
$var wire 1 12 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 22 state $end
$upscope $end
$upscope $end

$scope module dff_d_Imm5 $end
$var parameter 32 32 BIT_WIDTH $end
$var parameter 32 42 BIT_SIZE $end
$var parameter 32 52 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 62 we $end
$var wire 1 1* w [15] $end
$var wire 1 2* w [14] $end
$var wire 1 3* w [13] $end
$var wire 1 4* w [12] $end
$var wire 1 5* w [11] $end
$var wire 1 6* w [10] $end
$var wire 1 7* w [9] $end
$var wire 1 8* w [8] $end
$var wire 1 9* w [7] $end
$var wire 1 :* w [6] $end
$var wire 1 ;* w [5] $end
$var wire 1 <* w [4] $end
$var wire 1 =* w [3] $end
$var wire 1 >* w [2] $end
$var wire 1 ?* w [1] $end
$var wire 1 @* w [0] $end
$var wire 1 -# r [15] $end
$var wire 1 .# r [14] $end
$var wire 1 /# r [13] $end
$var wire 1 0# r [12] $end
$var wire 1 1# r [11] $end
$var wire 1 2# r [10] $end
$var wire 1 3# r [9] $end
$var wire 1 4# r [8] $end
$var wire 1 5# r [7] $end
$var wire 1 6# r [6] $end
$var wire 1 7# r [5] $end
$var wire 1 8# r [4] $end
$var wire 1 9# r [3] $end
$var wire 1 :# r [2] $end
$var wire 1 ;# r [1] $end
$var wire 1 <# r [0] $end

$scope module dff01[15] $end
$var wire 1 -# q $end
$var wire 1 72 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 82 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 .# q $end
$var wire 1 92 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :2 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 /# q $end
$var wire 1 ;2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 <2 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 0# q $end
$var wire 1 =2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >2 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 1# q $end
$var wire 1 ?2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @2 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 2# q $end
$var wire 1 A2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 B2 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 3# q $end
$var wire 1 C2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 D2 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 4# q $end
$var wire 1 E2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F2 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 5# q $end
$var wire 1 G2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H2 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 6# q $end
$var wire 1 I2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 J2 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 7# q $end
$var wire 1 K2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 L2 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 8# q $end
$var wire 1 M2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N2 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 9# q $end
$var wire 1 O2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 P2 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 :# q $end
$var wire 1 Q2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 R2 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 ;# q $end
$var wire 1 S2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 T2 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 <# q $end
$var wire 1 U2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V2 state $end
$upscope $end
$upscope $end

$scope module dff_d_Imm8 $end
$var parameter 32 W2 BIT_WIDTH $end
$var parameter 32 X2 BIT_SIZE $end
$var parameter 32 Y2 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 Z2 we $end
$var wire 1 A* w [15] $end
$var wire 1 B* w [14] $end
$var wire 1 C* w [13] $end
$var wire 1 D* w [12] $end
$var wire 1 E* w [11] $end
$var wire 1 F* w [10] $end
$var wire 1 G* w [9] $end
$var wire 1 H* w [8] $end
$var wire 1 I* w [7] $end
$var wire 1 J* w [6] $end
$var wire 1 K* w [5] $end
$var wire 1 L* w [4] $end
$var wire 1 M* w [3] $end
$var wire 1 N* w [2] $end
$var wire 1 O* w [1] $end
$var wire 1 P* w [0] $end
$var wire 1 =# r [15] $end
$var wire 1 ># r [14] $end
$var wire 1 ?# r [13] $end
$var wire 1 @# r [12] $end
$var wire 1 A# r [11] $end
$var wire 1 B# r [10] $end
$var wire 1 C# r [9] $end
$var wire 1 D# r [8] $end
$var wire 1 E# r [7] $end
$var wire 1 F# r [6] $end
$var wire 1 G# r [5] $end
$var wire 1 H# r [4] $end
$var wire 1 I# r [3] $end
$var wire 1 J# r [2] $end
$var wire 1 K# r [1] $end
$var wire 1 L# r [0] $end

$scope module dff01[15] $end
$var wire 1 =# q $end
$var wire 1 [2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \2 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 ># q $end
$var wire 1 ]2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^2 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 ?# q $end
$var wire 1 _2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `2 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 @# q $end
$var wire 1 a2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 b2 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 A# q $end
$var wire 1 c2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 d2 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 B# q $end
$var wire 1 e2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 f2 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 C# q $end
$var wire 1 g2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 h2 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 D# q $end
$var wire 1 i2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 j2 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 E# q $end
$var wire 1 k2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 l2 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 F# q $end
$var wire 1 m2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 n2 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 G# q $end
$var wire 1 o2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 p2 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 H# q $end
$var wire 1 q2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 r2 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 I# q $end
$var wire 1 s2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 t2 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 J# q $end
$var wire 1 u2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 v2 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 K# q $end
$var wire 1 w2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 x2 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 L# q $end
$var wire 1 y2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 z2 state $end
$upscope $end
$upscope $end

$scope module dff_d_sImm8 $end
$var parameter 32 {2 BIT_WIDTH $end
$var parameter 32 |2 BIT_SIZE $end
$var parameter 32 }2 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~2 we $end
$var wire 1 Q* w [15] $end
$var wire 1 R* w [14] $end
$var wire 1 S* w [13] $end
$var wire 1 T* w [12] $end
$var wire 1 U* w [11] $end
$var wire 1 V* w [10] $end
$var wire 1 W* w [9] $end
$var wire 1 X* w [8] $end
$var wire 1 Y* w [7] $end
$var wire 1 Z* w [6] $end
$var wire 1 [* w [5] $end
$var wire 1 \* w [4] $end
$var wire 1 ]* w [3] $end
$var wire 1 ^* w [2] $end
$var wire 1 _* w [1] $end
$var wire 1 `* w [0] $end
$var wire 1 M# r [15] $end
$var wire 1 N# r [14] $end
$var wire 1 O# r [13] $end
$var wire 1 P# r [12] $end
$var wire 1 Q# r [11] $end
$var wire 1 R# r [10] $end
$var wire 1 S# r [9] $end
$var wire 1 T# r [8] $end
$var wire 1 U# r [7] $end
$var wire 1 V# r [6] $end
$var wire 1 W# r [5] $end
$var wire 1 X# r [4] $end
$var wire 1 Y# r [3] $end
$var wire 1 Z# r [2] $end
$var wire 1 [# r [1] $end
$var wire 1 \# r [0] $end

$scope module dff01[15] $end
$var wire 1 M# q $end
$var wire 1 !3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 "3 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 N# q $end
$var wire 1 #3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 $3 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 O# q $end
$var wire 1 %3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 &3 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 P# q $end
$var wire 1 '3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 (3 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 Q# q $end
$var wire 1 )3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *3 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 R# q $end
$var wire 1 +3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,3 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 S# q $end
$var wire 1 -3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 .3 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 T# q $end
$var wire 1 /3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 03 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 U# q $end
$var wire 1 13 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 23 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 V# q $end
$var wire 1 33 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 43 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 W# q $end
$var wire 1 53 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 63 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 X# q $end
$var wire 1 73 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 83 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 Y# q $end
$var wire 1 93 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :3 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 Z# q $end
$var wire 1 ;3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 <3 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 [# q $end
$var wire 1 =3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >3 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 \# q $end
$var wire 1 ?3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @3 state $end
$upscope $end
$upscope $end

$scope module dff_d_sImm11 $end
$var parameter 32 A3 BIT_WIDTH $end
$var parameter 32 B3 BIT_SIZE $end
$var parameter 32 C3 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 D3 we $end
$var wire 1 a* w [15] $end
$var wire 1 b* w [14] $end
$var wire 1 c* w [13] $end
$var wire 1 d* w [12] $end
$var wire 1 e* w [11] $end
$var wire 1 f* w [10] $end
$var wire 1 g* w [9] $end
$var wire 1 h* w [8] $end
$var wire 1 i* w [7] $end
$var wire 1 j* w [6] $end
$var wire 1 k* w [5] $end
$var wire 1 l* w [4] $end
$var wire 1 m* w [3] $end
$var wire 1 n* w [2] $end
$var wire 1 o* w [1] $end
$var wire 1 p* w [0] $end
$var wire 1 ]# r [15] $end
$var wire 1 ^# r [14] $end
$var wire 1 _# r [13] $end
$var wire 1 `# r [12] $end
$var wire 1 a# r [11] $end
$var wire 1 b# r [10] $end
$var wire 1 c# r [9] $end
$var wire 1 d# r [8] $end
$var wire 1 e# r [7] $end
$var wire 1 f# r [6] $end
$var wire 1 g# r [5] $end
$var wire 1 h# r [4] $end
$var wire 1 i# r [3] $end
$var wire 1 j# r [2] $end
$var wire 1 k# r [1] $end
$var wire 1 l# r [0] $end

$scope module dff01[15] $end
$var wire 1 ]# q $end
$var wire 1 E3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F3 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 ^# q $end
$var wire 1 G3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H3 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 _# q $end
$var wire 1 I3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 J3 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 `# q $end
$var wire 1 K3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 L3 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 a# q $end
$var wire 1 M3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N3 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 b# q $end
$var wire 1 O3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 P3 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 c# q $end
$var wire 1 Q3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 R3 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 d# q $end
$var wire 1 S3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 T3 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 e# q $end
$var wire 1 U3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V3 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 f# q $end
$var wire 1 W3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 X3 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 g# q $end
$var wire 1 Y3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Z3 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 h# q $end
$var wire 1 [3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \3 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 i# q $end
$var wire 1 ]3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^3 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 j# q $end
$var wire 1 _3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `3 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 k# q $end
$var wire 1 a3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 b3 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 l# q $end
$var wire 1 c3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 d3 state $end
$upscope $end
$upscope $end

$scope module dff_d_PC $end
$var parameter 32 e3 BIT_WIDTH $end
$var parameter 32 f3 BIT_SIZE $end
$var parameter 32 g3 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 h3 we $end
$var wire 1 #$ w [15] $end
$var wire 1 $$ w [14] $end
$var wire 1 %$ w [13] $end
$var wire 1 &$ w [12] $end
$var wire 1 '$ w [11] $end
$var wire 1 ($ w [10] $end
$var wire 1 )$ w [9] $end
$var wire 1 *$ w [8] $end
$var wire 1 +$ w [7] $end
$var wire 1 ,$ w [6] $end
$var wire 1 -$ w [5] $end
$var wire 1 .$ w [4] $end
$var wire 1 /$ w [3] $end
$var wire 1 0$ w [2] $end
$var wire 1 1$ w [1] $end
$var wire 1 2$ w [0] $end
$var wire 1 {! r [15] $end
$var wire 1 |! r [14] $end
$var wire 1 }! r [13] $end
$var wire 1 ~! r [12] $end
$var wire 1 !" r [11] $end
$var wire 1 "" r [10] $end
$var wire 1 #" r [9] $end
$var wire 1 $" r [8] $end
$var wire 1 %" r [7] $end
$var wire 1 &" r [6] $end
$var wire 1 '" r [5] $end
$var wire 1 (" r [4] $end
$var wire 1 )" r [3] $end
$var wire 1 *" r [2] $end
$var wire 1 +" r [1] $end
$var wire 1 ," r [0] $end

$scope module dff01[15] $end
$var wire 1 {! q $end
$var wire 1 i3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 j3 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 |! q $end
$var wire 1 k3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 l3 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 }! q $end
$var wire 1 m3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 n3 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 ~! q $end
$var wire 1 o3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 p3 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 !" q $end
$var wire 1 q3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 r3 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 "" q $end
$var wire 1 s3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 t3 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 #" q $end
$var wire 1 u3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 v3 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 $" q $end
$var wire 1 w3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 x3 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 %" q $end
$var wire 1 y3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 z3 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 &" q $end
$var wire 1 {3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 |3 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 '" q $end
$var wire 1 }3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ~3 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 (" q $end
$var wire 1 !4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 "4 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 )" q $end
$var wire 1 #4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 $4 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 *" q $end
$var wire 1 %4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 &4 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 +" q $end
$var wire 1 '4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 (4 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 ," q $end
$var wire 1 )4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *4 state $end
$upscope $end
$upscope $end

$scope module dff_d_invA $end
$var wire 1 q# q $end
$var wire 1 q* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 +4 state $end
$upscope $end

$scope module dff_d_invB $end
$var wire 1 r# q $end
$var wire 1 r* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,4 state $end
$upscope $end

$scope module dff_d_Cin $end
$var wire 1 t# q $end
$var wire 1 s* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 -4 state $end
$upscope $end

$scope module dff_RD[8] $end
$var wire 1 ~# q $end
$var wire 1 z* d $end
$var wire 1 .4 clk $end
$var wire 1 /4 rst $end
$var reg 1 04 state $end
$upscope $end

$scope module dff_RD[7] $end
$var wire 1 !$ q $end
$var wire 1 {* d $end
$var wire 1 14 clk $end
$var wire 1 24 rst $end
$var reg 1 34 state $end
$upscope $end

$scope module dff_RD[6] $end
$var wire 1 "$ q $end
$var wire 1 |* d $end
$var wire 1 44 clk $end
$var wire 1 54 rst $end
$var reg 1 64 state $end
$upscope $end

$scope module dff_RD[5] $end
$var wire 1 z* q $end
$var wire 1 w* d $end
$var wire 1 74 clk $end
$var wire 1 84 rst $end
$var reg 1 94 state $end
$upscope $end

$scope module dff_RD[4] $end
$var wire 1 {* q $end
$var wire 1 x* d $end
$var wire 1 :4 clk $end
$var wire 1 ;4 rst $end
$var reg 1 <4 state $end
$upscope $end

$scope module dff_RD[3] $end
$var wire 1 |* q $end
$var wire 1 y* d $end
$var wire 1 =4 clk $end
$var wire 1 >4 rst $end
$var reg 1 ?4 state $end
$upscope $end

$scope module dff_RD[2] $end
$var wire 1 w* q $end
$var wire 1 t* d $end
$var wire 1 @4 clk $end
$var wire 1 A4 rst $end
$var reg 1 B4 state $end
$upscope $end

$scope module dff_RD[1] $end
$var wire 1 x* q $end
$var wire 1 u* d $end
$var wire 1 C4 clk $end
$var wire 1 D4 rst $end
$var reg 1 E4 state $end
$upscope $end

$scope module dff_RD[0] $end
$var wire 1 y* q $end
$var wire 1 v* d $end
$var wire 1 F4 clk $end
$var wire 1 G4 rst $end
$var reg 1 H4 state $end
$upscope $end

$scope module dff_d_RegWrt[2] $end
$var wire 1 $+ q $end
$var wire 1 Z) d $end
$var wire 1 I4 clk $end
$var wire 1 J4 rst $end
$var reg 1 K4 state $end
$upscope $end

$scope module dff_d_RegWrt[1] $end
$var wire 1 Z) q $end
$var wire 1 Y) d $end
$var wire 1 L4 clk $end
$var wire 1 M4 rst $end
$var reg 1 N4 state $end
$upscope $end

$scope module dff_d_RegWrt[0] $end
$var wire 1 Y) q $end
$var wire 1 X) d $end
$var wire 1 O4 clk $end
$var wire 1 P4 rst $end
$var reg 1 Q4 state $end
$upscope $end

$scope module dff_RegSrc[5] $end
$var wire 1 x# q $end
$var wire 1 g) d $end
$var wire 1 R4 clk $end
$var wire 1 S4 rst $end
$var reg 1 T4 state $end
$upscope $end

$scope module dff_RegSrc[4] $end
$var wire 1 y# q $end
$var wire 1 h) d $end
$var wire 1 U4 clk $end
$var wire 1 V4 rst $end
$var reg 1 W4 state $end
$upscope $end

$scope module dff_RegSrc[3] $end
$var wire 1 g) q $end
$var wire 1 e) d $end
$var wire 1 X4 clk $end
$var wire 1 Y4 rst $end
$var reg 1 Z4 state $end
$upscope $end

$scope module dff_RegSrc[2] $end
$var wire 1 h) q $end
$var wire 1 f) d $end
$var wire 1 [4 clk $end
$var wire 1 \4 rst $end
$var reg 1 ]4 state $end
$upscope $end

$scope module dff_RegSrc[1] $end
$var wire 1 e) q $end
$var wire 1 c) d $end
$var wire 1 ^4 clk $end
$var wire 1 _4 rst $end
$var reg 1 `4 state $end
$upscope $end

$scope module dff_RegSrc[0] $end
$var wire 1 f) q $end
$var wire 1 d) d $end
$var wire 1 a4 clk $end
$var wire 1 b4 rst $end
$var reg 1 c4 state $end
$upscope $end

$scope module dff_BSrc[1] $end
$var wire 1 z# q $end
$var wire 1 i) d $end
$var wire 1 d4 clk $end
$var wire 1 e4 rst $end
$var reg 1 f4 state $end
$upscope $end

$scope module dff_BSrc[0] $end
$var wire 1 {# q $end
$var wire 1 j) d $end
$var wire 1 g4 clk $end
$var wire 1 h4 rst $end
$var reg 1 i4 state $end
$upscope $end

$scope module dff_d_oper[3] $end
$var wire 1 3" q $end
$var wire 1 k) d $end
$var wire 1 j4 clk $end
$var wire 1 k4 rst $end
$var reg 1 l4 state $end
$upscope $end

$scope module dff_d_oper[2] $end
$var wire 1 4" q $end
$var wire 1 l) d $end
$var wire 1 m4 clk $end
$var wire 1 n4 rst $end
$var reg 1 o4 state $end
$upscope $end

$scope module dff_d_oper[1] $end
$var wire 1 5" q $end
$var wire 1 m) d $end
$var wire 1 p4 clk $end
$var wire 1 q4 rst $end
$var reg 1 r4 state $end
$upscope $end

$scope module dff_d_oper[0] $end
$var wire 1 6" q $end
$var wire 1 n) d $end
$var wire 1 s4 clk $end
$var wire 1 t4 rst $end
$var reg 1 u4 state $end
$upscope $end
$upscope $end

$scope module dff_d_PC2 $end
$var parameter 32 v4 BIT_WIDTH $end
$var parameter 32 w4 BIT_SIZE $end
$var parameter 32 x4 REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 y4 we $end
$var wire 1 {! w [15] $end
$var wire 1 |! w [14] $end
$var wire 1 }! w [13] $end
$var wire 1 ~! w [12] $end
$var wire 1 !" w [11] $end
$var wire 1 "" w [10] $end
$var wire 1 #" w [9] $end
$var wire 1 $" w [8] $end
$var wire 1 %" w [7] $end
$var wire 1 &" w [6] $end
$var wire 1 '" w [5] $end
$var wire 1 (" w [4] $end
$var wire 1 )" w [3] $end
$var wire 1 *" w [2] $end
$var wire 1 +" w [1] $end
$var wire 1 ," w [0] $end
$var wire 1 S$ r [15] $end
$var wire 1 T$ r [14] $end
$var wire 1 U$ r [13] $end
$var wire 1 V$ r [12] $end
$var wire 1 W$ r [11] $end
$var wire 1 X$ r [10] $end
$var wire 1 Y$ r [9] $end
$var wire 1 Z$ r [8] $end
$var wire 1 [$ r [7] $end
$var wire 1 \$ r [6] $end
$var wire 1 ]$ r [5] $end
$var wire 1 ^$ r [4] $end
$var wire 1 _$ r [3] $end
$var wire 1 `$ r [2] $end
$var wire 1 a$ r [1] $end
$var wire 1 b$ r [0] $end

$scope module dff01[15] $end
$var wire 1 S$ q $end
$var wire 1 z4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 {4 state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 T$ q $end
$var wire 1 |4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 }4 state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 U$ q $end
$var wire 1 ~4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 !5 state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 V$ q $end
$var wire 1 "5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 #5 state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 W$ q $end
$var wire 1 $5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 %5 state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 X$ q $end
$var wire 1 &5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 '5 state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 Y$ q $end
$var wire 1 (5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 )5 state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 Z$ q $end
$var wire 1 *5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 +5 state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 [$ q $end
$var wire 1 ,5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 -5 state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 \$ q $end
$var wire 1 .5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 /5 state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 ]$ q $end
$var wire 1 05 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 15 state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 ^$ q $end
$var wire 1 25 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 35 state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 _$ q $end
$var wire 1 45 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 55 state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 `$ q $end
$var wire 1 65 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 75 state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 a$ q $end
$var wire 1 85 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 95 state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 b$ q $end
$var wire 1 :5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ;5 state $end
$upscope $end
$upscope $end

$scope module execute0 $end
$var wire 1 K" RSData [15] $end
$var wire 1 L" RSData [14] $end
$var wire 1 M" RSData [13] $end
$var wire 1 N" RSData [12] $end
$var wire 1 O" RSData [11] $end
$var wire 1 P" RSData [10] $end
$var wire 1 Q" RSData [9] $end
$var wire 1 R" RSData [8] $end
$var wire 1 S" RSData [7] $end
$var wire 1 T" RSData [6] $end
$var wire 1 U" RSData [5] $end
$var wire 1 V" RSData [4] $end
$var wire 1 W" RSData [3] $end
$var wire 1 X" RSData [2] $end
$var wire 1 Y" RSData [1] $end
$var wire 1 Z" RSData [0] $end
$var wire 1 [" RTData [15] $end
$var wire 1 \" RTData [14] $end
$var wire 1 ]" RTData [13] $end
$var wire 1 ^" RTData [12] $end
$var wire 1 _" RTData [11] $end
$var wire 1 `" RTData [10] $end
$var wire 1 a" RTData [9] $end
$var wire 1 b" RTData [8] $end
$var wire 1 c" RTData [7] $end
$var wire 1 d" RTData [6] $end
$var wire 1 e" RTData [5] $end
$var wire 1 f" RTData [4] $end
$var wire 1 g" RTData [3] $end
$var wire 1 h" RTData [2] $end
$var wire 1 i" RTData [1] $end
$var wire 1 j" RTData [0] $end
$var wire 1 {! PC [15] $end
$var wire 1 |! PC [14] $end
$var wire 1 }! PC [13] $end
$var wire 1 ~! PC [12] $end
$var wire 1 !" PC [11] $end
$var wire 1 "" PC [10] $end
$var wire 1 #" PC [9] $end
$var wire 1 $" PC [8] $end
$var wire 1 %" PC [7] $end
$var wire 1 &" PC [6] $end
$var wire 1 '" PC [5] $end
$var wire 1 (" PC [4] $end
$var wire 1 )" PC [3] $end
$var wire 1 *" PC [2] $end
$var wire 1 +" PC [1] $end
$var wire 1 ," PC [0] $end
$var wire 1 -# Imm5 [15] $end
$var wire 1 .# Imm5 [14] $end
$var wire 1 /# Imm5 [13] $end
$var wire 1 0# Imm5 [12] $end
$var wire 1 1# Imm5 [11] $end
$var wire 1 2# Imm5 [10] $end
$var wire 1 3# Imm5 [9] $end
$var wire 1 4# Imm5 [8] $end
$var wire 1 5# Imm5 [7] $end
$var wire 1 6# Imm5 [6] $end
$var wire 1 7# Imm5 [5] $end
$var wire 1 8# Imm5 [4] $end
$var wire 1 9# Imm5 [3] $end
$var wire 1 :# Imm5 [2] $end
$var wire 1 ;# Imm5 [1] $end
$var wire 1 <# Imm5 [0] $end
$var wire 1 =# Imm8 [15] $end
$var wire 1 ># Imm8 [14] $end
$var wire 1 ?# Imm8 [13] $end
$var wire 1 @# Imm8 [12] $end
$var wire 1 A# Imm8 [11] $end
$var wire 1 B# Imm8 [10] $end
$var wire 1 C# Imm8 [9] $end
$var wire 1 D# Imm8 [8] $end
$var wire 1 E# Imm8 [7] $end
$var wire 1 F# Imm8 [6] $end
$var wire 1 G# Imm8 [5] $end
$var wire 1 H# Imm8 [4] $end
$var wire 1 I# Imm8 [3] $end
$var wire 1 J# Imm8 [2] $end
$var wire 1 K# Imm8 [1] $end
$var wire 1 L# Imm8 [0] $end
$var wire 1 M# sImm8 [15] $end
$var wire 1 N# sImm8 [14] $end
$var wire 1 O# sImm8 [13] $end
$var wire 1 P# sImm8 [12] $end
$var wire 1 Q# sImm8 [11] $end
$var wire 1 R# sImm8 [10] $end
$var wire 1 S# sImm8 [9] $end
$var wire 1 T# sImm8 [8] $end
$var wire 1 U# sImm8 [7] $end
$var wire 1 V# sImm8 [6] $end
$var wire 1 W# sImm8 [5] $end
$var wire 1 X# sImm8 [4] $end
$var wire 1 Y# sImm8 [3] $end
$var wire 1 Z# sImm8 [2] $end
$var wire 1 [# sImm8 [1] $end
$var wire 1 \# sImm8 [0] $end
$var wire 1 ]# sImm11 [15] $end
$var wire 1 ^# sImm11 [14] $end
$var wire 1 _# sImm11 [13] $end
$var wire 1 `# sImm11 [12] $end
$var wire 1 a# sImm11 [11] $end
$var wire 1 b# sImm11 [10] $end
$var wire 1 c# sImm11 [9] $end
$var wire 1 d# sImm11 [8] $end
$var wire 1 e# sImm11 [7] $end
$var wire 1 f# sImm11 [6] $end
$var wire 1 g# sImm11 [5] $end
$var wire 1 h# sImm11 [4] $end
$var wire 1 i# sImm11 [3] $end
$var wire 1 j# sImm11 [2] $end
$var wire 1 k# sImm11 [1] $end
$var wire 1 l# sImm11 [0] $end
$var wire 1 z# BSrc [1] $end
$var wire 1 {# BSrc [0] $end
$var wire 1 3" Oper [3] $end
$var wire 1 4" Oper [2] $end
$var wire 1 5" Oper [1] $end
$var wire 1 6" Oper [0] $end
$var wire 1 7" BranchTaken [3] $end
$var wire 1 8" BranchTaken [2] $end
$var wire 1 9" BranchTaken [1] $end
$var wire 1 :" BranchTaken [0] $end
$var wire 1 p# ImmSrc $end
$var wire 1 u# ALUJmp $end
$var wire 1 q# invA $end
$var wire 1 r# invB $end
$var wire 1 s# ALUSign $end
$var wire 1 t# cin $end
$var wire 1 m# nHaltSig $end
$var wire 1 k" ALU_Out [15] $end
$var wire 1 l" ALU_Out [14] $end
$var wire 1 m" ALU_Out [13] $end
$var wire 1 n" ALU_Out [12] $end
$var wire 1 o" ALU_Out [11] $end
$var wire 1 p" ALU_Out [10] $end
$var wire 1 q" ALU_Out [9] $end
$var wire 1 r" ALU_Out [8] $end
$var wire 1 s" ALU_Out [7] $end
$var wire 1 t" ALU_Out [6] $end
$var wire 1 u" ALU_Out [5] $end
$var wire 1 v" ALU_Out [4] $end
$var wire 1 w" ALU_Out [3] $end
$var wire 1 x" ALU_Out [2] $end
$var wire 1 y" ALU_Out [1] $end
$var wire 1 z" ALU_Out [0] $end
$var wire 1 ;! PC_Next [15] $end
$var wire 1 <! PC_Next [14] $end
$var wire 1 =! PC_Next [13] $end
$var wire 1 >! PC_Next [12] $end
$var wire 1 ?! PC_Next [11] $end
$var wire 1 @! PC_Next [10] $end
$var wire 1 A! PC_Next [9] $end
$var wire 1 B! PC_Next [8] $end
$var wire 1 C! PC_Next [7] $end
$var wire 1 D! PC_Next [6] $end
$var wire 1 E! PC_Next [5] $end
$var wire 1 F! PC_Next [4] $end
$var wire 1 G! PC_Next [3] $end
$var wire 1 H! PC_Next [2] $end
$var wire 1 I! PC_Next [1] $end
$var wire 1 J! PC_Next [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <5 NOP $end
$var wire 1 =5 MemWrt_ff $end
$var wire 1 >5 MemWrt_2ff $end
$var wire 1 ?5 MemRead_ff $end
$var wire 1 @5 MemRead_2ff $end
$var wire 1 A5 RegWrt_ff $end
$var wire 1 B5 RegWrt_2ff $end
$var wire 1 C5 ALUIn [15] $end
$var wire 1 D5 ALUIn [14] $end
$var wire 1 E5 ALUIn [13] $end
$var wire 1 F5 ALUIn [12] $end
$var wire 1 G5 ALUIn [11] $end
$var wire 1 H5 ALUIn [10] $end
$var wire 1 I5 ALUIn [9] $end
$var wire 1 J5 ALUIn [8] $end
$var wire 1 K5 ALUIn [7] $end
$var wire 1 L5 ALUIn [6] $end
$var wire 1 M5 ALUIn [5] $end
$var wire 1 N5 ALUIn [4] $end
$var wire 1 O5 ALUIn [3] $end
$var wire 1 P5 ALUIn [2] $end
$var wire 1 Q5 ALUIn [1] $end
$var wire 1 R5 ALUIn [0] $end
$var wire 1 S5 PC_I [15] $end
$var wire 1 T5 PC_I [14] $end
$var wire 1 U5 PC_I [13] $end
$var wire 1 V5 PC_I [12] $end
$var wire 1 W5 PC_I [11] $end
$var wire 1 X5 PC_I [10] $end
$var wire 1 Y5 PC_I [9] $end
$var wire 1 Z5 PC_I [8] $end
$var wire 1 [5 PC_I [7] $end
$var wire 1 \5 PC_I [6] $end
$var wire 1 ]5 PC_I [5] $end
$var wire 1 ^5 PC_I [4] $end
$var wire 1 _5 PC_I [3] $end
$var wire 1 `5 PC_I [2] $end
$var wire 1 a5 PC_I [1] $end
$var wire 1 b5 PC_I [0] $end
$var wire 1 c5 PC_Branch [15] $end
$var wire 1 d5 PC_Branch [14] $end
$var wire 1 e5 PC_Branch [13] $end
$var wire 1 f5 PC_Branch [12] $end
$var wire 1 g5 PC_Branch [11] $end
$var wire 1 h5 PC_Branch [10] $end
$var wire 1 i5 PC_Branch [9] $end
$var wire 1 j5 PC_Branch [8] $end
$var wire 1 k5 PC_Branch [7] $end
$var wire 1 l5 PC_Branch [6] $end
$var wire 1 m5 PC_Branch [5] $end
$var wire 1 n5 PC_Branch [4] $end
$var wire 1 o5 PC_Branch [3] $end
$var wire 1 p5 PC_Branch [2] $end
$var wire 1 q5 PC_Branch [1] $end
$var wire 1 r5 PC_Branch [0] $end
$var wire 1 s5 Branch [15] $end
$var wire 1 t5 Branch [14] $end
$var wire 1 u5 Branch [13] $end
$var wire 1 v5 Branch [12] $end
$var wire 1 w5 Branch [11] $end
$var wire 1 x5 Branch [10] $end
$var wire 1 y5 Branch [9] $end
$var wire 1 z5 Branch [8] $end
$var wire 1 {5 Branch [7] $end
$var wire 1 |5 Branch [6] $end
$var wire 1 }5 Branch [5] $end
$var wire 1 ~5 Branch [4] $end
$var wire 1 !6 Branch [3] $end
$var wire 1 "6 Branch [2] $end
$var wire 1 #6 Branch [1] $end
$var wire 1 $6 Branch [0] $end
$var wire 1 %6 BrchCnd $end
$var wire 1 &6 SF $end
$var wire 1 '6 CF $end
$var wire 1 (6 OF $end
$var wire 1 )6 ZF $end

$scope module MemWrt_2dff $end
$var wire 1 >5 q $end
$var wire 1 *6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 +6 state $end
$upscope $end

$scope module MemRead_2dff $end
$var wire 1 @5 q $end
$var wire 1 ,6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 -6 state $end
$upscope $end

$scope module RegWrt_2dff $end
$var wire 1 B5 q $end
$var wire 1 .6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 /6 state $end
$upscope $end

$scope module pc_adder $end
$var parameter 32 06 N $end
$var wire 1 s5 sum [15] $end
$var wire 1 t5 sum [14] $end
$var wire 1 u5 sum [13] $end
$var wire 1 v5 sum [12] $end
$var wire 1 w5 sum [11] $end
$var wire 1 x5 sum [10] $end
$var wire 1 y5 sum [9] $end
$var wire 1 z5 sum [8] $end
$var wire 1 {5 sum [7] $end
$var wire 1 |5 sum [6] $end
$var wire 1 }5 sum [5] $end
$var wire 1 ~5 sum [4] $end
$var wire 1 !6 sum [3] $end
$var wire 1 "6 sum [2] $end
$var wire 1 #6 sum [1] $end
$var wire 1 $6 sum [0] $end
$var wire 1 16 c_out $end
$var wire 1 {! a [15] $end
$var wire 1 |! a [14] $end
$var wire 1 }! a [13] $end
$var wire 1 ~! a [12] $end
$var wire 1 !" a [11] $end
$var wire 1 "" a [10] $end
$var wire 1 #" a [9] $end
$var wire 1 $" a [8] $end
$var wire 1 %" a [7] $end
$var wire 1 &" a [6] $end
$var wire 1 '" a [5] $end
$var wire 1 (" a [4] $end
$var wire 1 )" a [3] $end
$var wire 1 *" a [2] $end
$var wire 1 +" a [1] $end
$var wire 1 ," a [0] $end
$var wire 1 S5 b [15] $end
$var wire 1 T5 b [14] $end
$var wire 1 U5 b [13] $end
$var wire 1 V5 b [12] $end
$var wire 1 W5 b [11] $end
$var wire 1 X5 b [10] $end
$var wire 1 Y5 b [9] $end
$var wire 1 Z5 b [8] $end
$var wire 1 [5 b [7] $end
$var wire 1 \5 b [6] $end
$var wire 1 ]5 b [5] $end
$var wire 1 ^5 b [4] $end
$var wire 1 _5 b [3] $end
$var wire 1 `5 b [2] $end
$var wire 1 a5 b [1] $end
$var wire 1 b5 b [0] $end
$var wire 1 26 c_in $end
$var wire 1 36 carries [2] $end
$var wire 1 46 carries [1] $end
$var wire 1 56 carries [0] $end

$scope module cla[3] $end
$var parameter 32 66 N $end
$var wire 1 s5 sum [3] $end
$var wire 1 t5 sum [2] $end
$var wire 1 u5 sum [1] $end
$var wire 1 v5 sum [0] $end
$var wire 1 16 c_out $end
$var wire 1 {! a [3] $end
$var wire 1 |! a [2] $end
$var wire 1 }! a [1] $end
$var wire 1 ~! a [0] $end
$var wire 1 S5 b [3] $end
$var wire 1 T5 b [2] $end
$var wire 1 U5 b [1] $end
$var wire 1 V5 b [0] $end
$var wire 1 36 c_in $end
$var wire 1 76 p [3] $end
$var wire 1 86 p [2] $end
$var wire 1 96 p [1] $end
$var wire 1 :6 p [0] $end
$var wire 1 ;6 ng [3] $end
$var wire 1 <6 ng [2] $end
$var wire 1 =6 ng [1] $end
$var wire 1 >6 ng [0] $end
$var wire 1 ?6 carries [4] $end
$var wire 1 @6 carries [3] $end
$var wire 1 A6 carries [2] $end
$var wire 1 B6 carries [1] $end
$var wire 1 C6 carries [0] $end
$var wire 1 D6 cp [3] $end
$var wire 1 E6 cp [2] $end
$var wire 1 F6 cp [1] $end
$var wire 1 G6 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 76 out $end
$var wire 1 {! in1 $end
$var wire 1 S5 in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 86 out $end
$var wire 1 |! in1 $end
$var wire 1 T5 in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 96 out $end
$var wire 1 }! in1 $end
$var wire 1 U5 in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 :6 out $end
$var wire 1 ~! in1 $end
$var wire 1 V5 in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 ;6 out $end
$var wire 1 {! in1 $end
$var wire 1 S5 in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 <6 out $end
$var wire 1 |! in1 $end
$var wire 1 T5 in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 =6 out $end
$var wire 1 }! in1 $end
$var wire 1 U5 in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 >6 out $end
$var wire 1 ~! in1 $end
$var wire 1 V5 in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 D6 out $end
$var wire 1 76 in1 $end
$var wire 1 @6 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 E6 out $end
$var wire 1 86 in1 $end
$var wire 1 A6 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 F6 out $end
$var wire 1 96 in1 $end
$var wire 1 B6 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 G6 out $end
$var wire 1 :6 in1 $end
$var wire 1 36 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 16 out $end
$var wire 1 D6 in1 $end
$var wire 1 ;6 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 @6 out $end
$var wire 1 E6 in1 $end
$var wire 1 <6 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 A6 out $end
$var wire 1 F6 in1 $end
$var wire 1 =6 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 B6 out $end
$var wire 1 G6 in1 $end
$var wire 1 >6 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 s5 s $end
$var wire 1 H6 c_out $end
$var wire 1 {! a $end
$var wire 1 S5 b $end
$var wire 1 @6 c_in $end
$var wire 1 I6 AxorB $end
$var wire 1 J6 CnandAB $end
$var wire 1 K6 AnandB $end

$scope module xor_1 $end
$var wire 1 I6 out $end
$var wire 1 {! in1 $end
$var wire 1 S5 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 s5 out $end
$var wire 1 I6 in1 $end
$var wire 1 @6 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 J6 out $end
$var wire 1 I6 in1 $end
$var wire 1 @6 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 K6 out $end
$var wire 1 {! in1 $end
$var wire 1 S5 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 H6 out $end
$var wire 1 K6 in1 $end
$var wire 1 J6 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 t5 s $end
$var wire 1 L6 c_out $end
$var wire 1 |! a $end
$var wire 1 T5 b $end
$var wire 1 A6 c_in $end
$var wire 1 M6 AxorB $end
$var wire 1 N6 CnandAB $end
$var wire 1 O6 AnandB $end

$scope module xor_1 $end
$var wire 1 M6 out $end
$var wire 1 |! in1 $end
$var wire 1 T5 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 t5 out $end
$var wire 1 M6 in1 $end
$var wire 1 A6 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 N6 out $end
$var wire 1 M6 in1 $end
$var wire 1 A6 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 O6 out $end
$var wire 1 |! in1 $end
$var wire 1 T5 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 L6 out $end
$var wire 1 O6 in1 $end
$var wire 1 N6 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 u5 s $end
$var wire 1 P6 c_out $end
$var wire 1 }! a $end
$var wire 1 U5 b $end
$var wire 1 B6 c_in $end
$var wire 1 Q6 AxorB $end
$var wire 1 R6 CnandAB $end
$var wire 1 S6 AnandB $end

$scope module xor_1 $end
$var wire 1 Q6 out $end
$var wire 1 }! in1 $end
$var wire 1 U5 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 u5 out $end
$var wire 1 Q6 in1 $end
$var wire 1 B6 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 R6 out $end
$var wire 1 Q6 in1 $end
$var wire 1 B6 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 S6 out $end
$var wire 1 }! in1 $end
$var wire 1 U5 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 P6 out $end
$var wire 1 S6 in1 $end
$var wire 1 R6 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 v5 s $end
$var wire 1 T6 c_out $end
$var wire 1 ~! a $end
$var wire 1 V5 b $end
$var wire 1 36 c_in $end
$var wire 1 U6 AxorB $end
$var wire 1 V6 CnandAB $end
$var wire 1 W6 AnandB $end

$scope module xor_1 $end
$var wire 1 U6 out $end
$var wire 1 ~! in1 $end
$var wire 1 V5 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 v5 out $end
$var wire 1 U6 in1 $end
$var wire 1 36 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 V6 out $end
$var wire 1 U6 in1 $end
$var wire 1 36 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 W6 out $end
$var wire 1 ~! in1 $end
$var wire 1 V5 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 T6 out $end
$var wire 1 W6 in1 $end
$var wire 1 V6 in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[2] $end
$var parameter 32 X6 N $end
$var wire 1 w5 sum [3] $end
$var wire 1 x5 sum [2] $end
$var wire 1 y5 sum [1] $end
$var wire 1 z5 sum [0] $end
$var wire 1 36 c_out $end
$var wire 1 !" a [3] $end
$var wire 1 "" a [2] $end
$var wire 1 #" a [1] $end
$var wire 1 $" a [0] $end
$var wire 1 W5 b [3] $end
$var wire 1 X5 b [2] $end
$var wire 1 Y5 b [1] $end
$var wire 1 Z5 b [0] $end
$var wire 1 46 c_in $end
$var wire 1 Y6 p [3] $end
$var wire 1 Z6 p [2] $end
$var wire 1 [6 p [1] $end
$var wire 1 \6 p [0] $end
$var wire 1 ]6 ng [3] $end
$var wire 1 ^6 ng [2] $end
$var wire 1 _6 ng [1] $end
$var wire 1 `6 ng [0] $end
$var wire 1 a6 carries [4] $end
$var wire 1 b6 carries [3] $end
$var wire 1 c6 carries [2] $end
$var wire 1 d6 carries [1] $end
$var wire 1 e6 carries [0] $end
$var wire 1 f6 cp [3] $end
$var wire 1 g6 cp [2] $end
$var wire 1 h6 cp [1] $end
$var wire 1 i6 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 Y6 out $end
$var wire 1 !" in1 $end
$var wire 1 W5 in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 Z6 out $end
$var wire 1 "" in1 $end
$var wire 1 X5 in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 [6 out $end
$var wire 1 #" in1 $end
$var wire 1 Y5 in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 \6 out $end
$var wire 1 $" in1 $end
$var wire 1 Z5 in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 ]6 out $end
$var wire 1 !" in1 $end
$var wire 1 W5 in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 ^6 out $end
$var wire 1 "" in1 $end
$var wire 1 X5 in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 _6 out $end
$var wire 1 #" in1 $end
$var wire 1 Y5 in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 `6 out $end
$var wire 1 $" in1 $end
$var wire 1 Z5 in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 f6 out $end
$var wire 1 Y6 in1 $end
$var wire 1 b6 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 g6 out $end
$var wire 1 Z6 in1 $end
$var wire 1 c6 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 h6 out $end
$var wire 1 [6 in1 $end
$var wire 1 d6 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 i6 out $end
$var wire 1 \6 in1 $end
$var wire 1 46 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 36 out $end
$var wire 1 f6 in1 $end
$var wire 1 ]6 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 b6 out $end
$var wire 1 g6 in1 $end
$var wire 1 ^6 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 c6 out $end
$var wire 1 h6 in1 $end
$var wire 1 _6 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 d6 out $end
$var wire 1 i6 in1 $end
$var wire 1 `6 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 w5 s $end
$var wire 1 j6 c_out $end
$var wire 1 !" a $end
$var wire 1 W5 b $end
$var wire 1 b6 c_in $end
$var wire 1 k6 AxorB $end
$var wire 1 l6 CnandAB $end
$var wire 1 m6 AnandB $end

$scope module xor_1 $end
$var wire 1 k6 out $end
$var wire 1 !" in1 $end
$var wire 1 W5 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 w5 out $end
$var wire 1 k6 in1 $end
$var wire 1 b6 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 l6 out $end
$var wire 1 k6 in1 $end
$var wire 1 b6 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 m6 out $end
$var wire 1 !" in1 $end
$var wire 1 W5 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 j6 out $end
$var wire 1 m6 in1 $end
$var wire 1 l6 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 x5 s $end
$var wire 1 n6 c_out $end
$var wire 1 "" a $end
$var wire 1 X5 b $end
$var wire 1 c6 c_in $end
$var wire 1 o6 AxorB $end
$var wire 1 p6 CnandAB $end
$var wire 1 q6 AnandB $end

$scope module xor_1 $end
$var wire 1 o6 out $end
$var wire 1 "" in1 $end
$var wire 1 X5 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 x5 out $end
$var wire 1 o6 in1 $end
$var wire 1 c6 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 p6 out $end
$var wire 1 o6 in1 $end
$var wire 1 c6 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 q6 out $end
$var wire 1 "" in1 $end
$var wire 1 X5 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 n6 out $end
$var wire 1 q6 in1 $end
$var wire 1 p6 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 y5 s $end
$var wire 1 r6 c_out $end
$var wire 1 #" a $end
$var wire 1 Y5 b $end
$var wire 1 d6 c_in $end
$var wire 1 s6 AxorB $end
$var wire 1 t6 CnandAB $end
$var wire 1 u6 AnandB $end

$scope module xor_1 $end
$var wire 1 s6 out $end
$var wire 1 #" in1 $end
$var wire 1 Y5 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 y5 out $end
$var wire 1 s6 in1 $end
$var wire 1 d6 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 t6 out $end
$var wire 1 s6 in1 $end
$var wire 1 d6 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 u6 out $end
$var wire 1 #" in1 $end
$var wire 1 Y5 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 r6 out $end
$var wire 1 u6 in1 $end
$var wire 1 t6 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 z5 s $end
$var wire 1 v6 c_out $end
$var wire 1 $" a $end
$var wire 1 Z5 b $end
$var wire 1 46 c_in $end
$var wire 1 w6 AxorB $end
$var wire 1 x6 CnandAB $end
$var wire 1 y6 AnandB $end

$scope module xor_1 $end
$var wire 1 w6 out $end
$var wire 1 $" in1 $end
$var wire 1 Z5 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 z5 out $end
$var wire 1 w6 in1 $end
$var wire 1 46 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 x6 out $end
$var wire 1 w6 in1 $end
$var wire 1 46 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 y6 out $end
$var wire 1 $" in1 $end
$var wire 1 Z5 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 v6 out $end
$var wire 1 y6 in1 $end
$var wire 1 x6 in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[1] $end
$var parameter 32 z6 N $end
$var wire 1 {5 sum [3] $end
$var wire 1 |5 sum [2] $end
$var wire 1 }5 sum [1] $end
$var wire 1 ~5 sum [0] $end
$var wire 1 46 c_out $end
$var wire 1 %" a [3] $end
$var wire 1 &" a [2] $end
$var wire 1 '" a [1] $end
$var wire 1 (" a [0] $end
$var wire 1 [5 b [3] $end
$var wire 1 \5 b [2] $end
$var wire 1 ]5 b [1] $end
$var wire 1 ^5 b [0] $end
$var wire 1 56 c_in $end
$var wire 1 {6 p [3] $end
$var wire 1 |6 p [2] $end
$var wire 1 }6 p [1] $end
$var wire 1 ~6 p [0] $end
$var wire 1 !7 ng [3] $end
$var wire 1 "7 ng [2] $end
$var wire 1 #7 ng [1] $end
$var wire 1 $7 ng [0] $end
$var wire 1 %7 carries [4] $end
$var wire 1 &7 carries [3] $end
$var wire 1 '7 carries [2] $end
$var wire 1 (7 carries [1] $end
$var wire 1 )7 carries [0] $end
$var wire 1 *7 cp [3] $end
$var wire 1 +7 cp [2] $end
$var wire 1 ,7 cp [1] $end
$var wire 1 -7 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 {6 out $end
$var wire 1 %" in1 $end
$var wire 1 [5 in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 |6 out $end
$var wire 1 &" in1 $end
$var wire 1 \5 in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 }6 out $end
$var wire 1 '" in1 $end
$var wire 1 ]5 in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 ~6 out $end
$var wire 1 (" in1 $end
$var wire 1 ^5 in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 !7 out $end
$var wire 1 %" in1 $end
$var wire 1 [5 in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 "7 out $end
$var wire 1 &" in1 $end
$var wire 1 \5 in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 #7 out $end
$var wire 1 '" in1 $end
$var wire 1 ]5 in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 $7 out $end
$var wire 1 (" in1 $end
$var wire 1 ^5 in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 *7 out $end
$var wire 1 {6 in1 $end
$var wire 1 &7 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 +7 out $end
$var wire 1 |6 in1 $end
$var wire 1 '7 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 ,7 out $end
$var wire 1 }6 in1 $end
$var wire 1 (7 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 -7 out $end
$var wire 1 ~6 in1 $end
$var wire 1 56 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 46 out $end
$var wire 1 *7 in1 $end
$var wire 1 !7 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 &7 out $end
$var wire 1 +7 in1 $end
$var wire 1 "7 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 '7 out $end
$var wire 1 ,7 in1 $end
$var wire 1 #7 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 (7 out $end
$var wire 1 -7 in1 $end
$var wire 1 $7 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 {5 s $end
$var wire 1 .7 c_out $end
$var wire 1 %" a $end
$var wire 1 [5 b $end
$var wire 1 &7 c_in $end
$var wire 1 /7 AxorB $end
$var wire 1 07 CnandAB $end
$var wire 1 17 AnandB $end

$scope module xor_1 $end
$var wire 1 /7 out $end
$var wire 1 %" in1 $end
$var wire 1 [5 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 {5 out $end
$var wire 1 /7 in1 $end
$var wire 1 &7 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 07 out $end
$var wire 1 /7 in1 $end
$var wire 1 &7 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 17 out $end
$var wire 1 %" in1 $end
$var wire 1 [5 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 .7 out $end
$var wire 1 17 in1 $end
$var wire 1 07 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 |5 s $end
$var wire 1 27 c_out $end
$var wire 1 &" a $end
$var wire 1 \5 b $end
$var wire 1 '7 c_in $end
$var wire 1 37 AxorB $end
$var wire 1 47 CnandAB $end
$var wire 1 57 AnandB $end

$scope module xor_1 $end
$var wire 1 37 out $end
$var wire 1 &" in1 $end
$var wire 1 \5 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 |5 out $end
$var wire 1 37 in1 $end
$var wire 1 '7 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 47 out $end
$var wire 1 37 in1 $end
$var wire 1 '7 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 57 out $end
$var wire 1 &" in1 $end
$var wire 1 \5 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 27 out $end
$var wire 1 57 in1 $end
$var wire 1 47 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 }5 s $end
$var wire 1 67 c_out $end
$var wire 1 '" a $end
$var wire 1 ]5 b $end
$var wire 1 (7 c_in $end
$var wire 1 77 AxorB $end
$var wire 1 87 CnandAB $end
$var wire 1 97 AnandB $end

$scope module xor_1 $end
$var wire 1 77 out $end
$var wire 1 '" in1 $end
$var wire 1 ]5 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 }5 out $end
$var wire 1 77 in1 $end
$var wire 1 (7 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 87 out $end
$var wire 1 77 in1 $end
$var wire 1 (7 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 97 out $end
$var wire 1 '" in1 $end
$var wire 1 ]5 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 67 out $end
$var wire 1 97 in1 $end
$var wire 1 87 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 ~5 s $end
$var wire 1 :7 c_out $end
$var wire 1 (" a $end
$var wire 1 ^5 b $end
$var wire 1 56 c_in $end
$var wire 1 ;7 AxorB $end
$var wire 1 <7 CnandAB $end
$var wire 1 =7 AnandB $end

$scope module xor_1 $end
$var wire 1 ;7 out $end
$var wire 1 (" in1 $end
$var wire 1 ^5 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 ~5 out $end
$var wire 1 ;7 in1 $end
$var wire 1 56 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 <7 out $end
$var wire 1 ;7 in1 $end
$var wire 1 56 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 =7 out $end
$var wire 1 (" in1 $end
$var wire 1 ^5 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 :7 out $end
$var wire 1 =7 in1 $end
$var wire 1 <7 in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[0] $end
$var parameter 32 >7 N $end
$var wire 1 !6 sum [3] $end
$var wire 1 "6 sum [2] $end
$var wire 1 #6 sum [1] $end
$var wire 1 $6 sum [0] $end
$var wire 1 56 c_out $end
$var wire 1 )" a [3] $end
$var wire 1 *" a [2] $end
$var wire 1 +" a [1] $end
$var wire 1 ," a [0] $end
$var wire 1 _5 b [3] $end
$var wire 1 `5 b [2] $end
$var wire 1 a5 b [1] $end
$var wire 1 b5 b [0] $end
$var wire 1 26 c_in $end
$var wire 1 ?7 p [3] $end
$var wire 1 @7 p [2] $end
$var wire 1 A7 p [1] $end
$var wire 1 B7 p [0] $end
$var wire 1 C7 ng [3] $end
$var wire 1 D7 ng [2] $end
$var wire 1 E7 ng [1] $end
$var wire 1 F7 ng [0] $end
$var wire 1 G7 carries [4] $end
$var wire 1 H7 carries [3] $end
$var wire 1 I7 carries [2] $end
$var wire 1 J7 carries [1] $end
$var wire 1 K7 carries [0] $end
$var wire 1 L7 cp [3] $end
$var wire 1 M7 cp [2] $end
$var wire 1 N7 cp [1] $end
$var wire 1 O7 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 ?7 out $end
$var wire 1 )" in1 $end
$var wire 1 _5 in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 @7 out $end
$var wire 1 *" in1 $end
$var wire 1 `5 in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 A7 out $end
$var wire 1 +" in1 $end
$var wire 1 a5 in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 B7 out $end
$var wire 1 ," in1 $end
$var wire 1 b5 in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 C7 out $end
$var wire 1 )" in1 $end
$var wire 1 _5 in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 D7 out $end
$var wire 1 *" in1 $end
$var wire 1 `5 in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 E7 out $end
$var wire 1 +" in1 $end
$var wire 1 a5 in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 F7 out $end
$var wire 1 ," in1 $end
$var wire 1 b5 in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 L7 out $end
$var wire 1 ?7 in1 $end
$var wire 1 H7 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 M7 out $end
$var wire 1 @7 in1 $end
$var wire 1 I7 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 N7 out $end
$var wire 1 A7 in1 $end
$var wire 1 J7 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 O7 out $end
$var wire 1 B7 in1 $end
$var wire 1 26 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 56 out $end
$var wire 1 L7 in1 $end
$var wire 1 C7 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 H7 out $end
$var wire 1 M7 in1 $end
$var wire 1 D7 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 I7 out $end
$var wire 1 N7 in1 $end
$var wire 1 E7 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 J7 out $end
$var wire 1 O7 in1 $end
$var wire 1 F7 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 !6 s $end
$var wire 1 P7 c_out $end
$var wire 1 )" a $end
$var wire 1 _5 b $end
$var wire 1 H7 c_in $end
$var wire 1 Q7 AxorB $end
$var wire 1 R7 CnandAB $end
$var wire 1 S7 AnandB $end

$scope module xor_1 $end
$var wire 1 Q7 out $end
$var wire 1 )" in1 $end
$var wire 1 _5 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 !6 out $end
$var wire 1 Q7 in1 $end
$var wire 1 H7 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 R7 out $end
$var wire 1 Q7 in1 $end
$var wire 1 H7 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 S7 out $end
$var wire 1 )" in1 $end
$var wire 1 _5 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 P7 out $end
$var wire 1 S7 in1 $end
$var wire 1 R7 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 "6 s $end
$var wire 1 T7 c_out $end
$var wire 1 *" a $end
$var wire 1 `5 b $end
$var wire 1 I7 c_in $end
$var wire 1 U7 AxorB $end
$var wire 1 V7 CnandAB $end
$var wire 1 W7 AnandB $end

$scope module xor_1 $end
$var wire 1 U7 out $end
$var wire 1 *" in1 $end
$var wire 1 `5 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 "6 out $end
$var wire 1 U7 in1 $end
$var wire 1 I7 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 V7 out $end
$var wire 1 U7 in1 $end
$var wire 1 I7 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 W7 out $end
$var wire 1 *" in1 $end
$var wire 1 `5 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 T7 out $end
$var wire 1 W7 in1 $end
$var wire 1 V7 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 #6 s $end
$var wire 1 X7 c_out $end
$var wire 1 +" a $end
$var wire 1 a5 b $end
$var wire 1 J7 c_in $end
$var wire 1 Y7 AxorB $end
$var wire 1 Z7 CnandAB $end
$var wire 1 [7 AnandB $end

$scope module xor_1 $end
$var wire 1 Y7 out $end
$var wire 1 +" in1 $end
$var wire 1 a5 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 #6 out $end
$var wire 1 Y7 in1 $end
$var wire 1 J7 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 Z7 out $end
$var wire 1 Y7 in1 $end
$var wire 1 J7 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 [7 out $end
$var wire 1 +" in1 $end
$var wire 1 a5 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 X7 out $end
$var wire 1 [7 in1 $end
$var wire 1 Z7 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 $6 s $end
$var wire 1 \7 c_out $end
$var wire 1 ," a $end
$var wire 1 b5 b $end
$var wire 1 26 c_in $end
$var wire 1 ]7 AxorB $end
$var wire 1 ^7 CnandAB $end
$var wire 1 _7 AnandB $end

$scope module xor_1 $end
$var wire 1 ]7 out $end
$var wire 1 ," in1 $end
$var wire 1 b5 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 $6 out $end
$var wire 1 ]7 in1 $end
$var wire 1 26 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 ^7 out $end
$var wire 1 ]7 in1 $end
$var wire 1 26 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 _7 out $end
$var wire 1 ," in1 $end
$var wire 1 b5 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 \7 out $end
$var wire 1 _7 in1 $end
$var wire 1 ^7 in2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module alu1 $end
$var parameter 32 `7 OPERAND_WIDTH $end
$var parameter 32 a7 NUM_OPERATIONS $end
$var wire 1 K" InA [15] $end
$var wire 1 L" InA [14] $end
$var wire 1 M" InA [13] $end
$var wire 1 N" InA [12] $end
$var wire 1 O" InA [11] $end
$var wire 1 P" InA [10] $end
$var wire 1 Q" InA [9] $end
$var wire 1 R" InA [8] $end
$var wire 1 S" InA [7] $end
$var wire 1 T" InA [6] $end
$var wire 1 U" InA [5] $end
$var wire 1 V" InA [4] $end
$var wire 1 W" InA [3] $end
$var wire 1 X" InA [2] $end
$var wire 1 Y" InA [1] $end
$var wire 1 Z" InA [0] $end
$var wire 1 C5 InB [15] $end
$var wire 1 D5 InB [14] $end
$var wire 1 E5 InB [13] $end
$var wire 1 F5 InB [12] $end
$var wire 1 G5 InB [11] $end
$var wire 1 H5 InB [10] $end
$var wire 1 I5 InB [9] $end
$var wire 1 J5 InB [8] $end
$var wire 1 K5 InB [7] $end
$var wire 1 L5 InB [6] $end
$var wire 1 M5 InB [5] $end
$var wire 1 N5 InB [4] $end
$var wire 1 O5 InB [3] $end
$var wire 1 P5 InB [2] $end
$var wire 1 Q5 InB [1] $end
$var wire 1 R5 InB [0] $end
$var wire 1 t# Cin $end
$var wire 1 3" Oper [3] $end
$var wire 1 4" Oper [2] $end
$var wire 1 5" Oper [1] $end
$var wire 1 6" Oper [0] $end
$var wire 1 q# invA $end
$var wire 1 r# invB $end
$var wire 1 s# sign $end
$var reg 16 b7 Out [15:0] $end
$var wire 1 (6 OF $end
$var wire 1 )6 ZF $end
$var wire 1 '6 CF $end
$var wire 1 &6 SF $end
$var wire 1 c7 Cout $end
$var wire 1 d7 S [15] $end
$var wire 1 e7 S [14] $end
$var wire 1 f7 S [13] $end
$var wire 1 g7 S [12] $end
$var wire 1 h7 S [11] $end
$var wire 1 i7 S [10] $end
$var wire 1 j7 S [9] $end
$var wire 1 k7 S [8] $end
$var wire 1 l7 S [7] $end
$var wire 1 m7 S [6] $end
$var wire 1 n7 S [5] $end
$var wire 1 o7 S [4] $end
$var wire 1 p7 S [3] $end
$var wire 1 q7 S [2] $end
$var wire 1 r7 S [1] $end
$var wire 1 s7 S [0] $end
$var wire 1 t7 ShOut [15] $end
$var wire 1 u7 ShOut [14] $end
$var wire 1 v7 ShOut [13] $end
$var wire 1 w7 ShOut [12] $end
$var wire 1 x7 ShOut [11] $end
$var wire 1 y7 ShOut [10] $end
$var wire 1 z7 ShOut [9] $end
$var wire 1 {7 ShOut [8] $end
$var wire 1 |7 ShOut [7] $end
$var wire 1 }7 ShOut [6] $end
$var wire 1 ~7 ShOut [5] $end
$var wire 1 !8 ShOut [4] $end
$var wire 1 "8 ShOut [3] $end
$var wire 1 #8 ShOut [2] $end
$var wire 1 $8 ShOut [1] $end
$var wire 1 %8 ShOut [0] $end
$var wire 1 &8 BitOut [15] $end
$var wire 1 '8 BitOut [14] $end
$var wire 1 (8 BitOut [13] $end
$var wire 1 )8 BitOut [12] $end
$var wire 1 *8 BitOut [11] $end
$var wire 1 +8 BitOut [10] $end
$var wire 1 ,8 BitOut [9] $end
$var wire 1 -8 BitOut [8] $end
$var wire 1 .8 BitOut [7] $end
$var wire 1 /8 BitOut [6] $end
$var wire 1 08 BitOut [5] $end
$var wire 1 18 BitOut [4] $end
$var wire 1 28 BitOut [3] $end
$var wire 1 38 BitOut [2] $end
$var wire 1 48 BitOut [1] $end
$var wire 1 58 BitOut [0] $end
$var wire 1 68 A [15] $end
$var wire 1 78 A [14] $end
$var wire 1 88 A [13] $end
$var wire 1 98 A [12] $end
$var wire 1 :8 A [11] $end
$var wire 1 ;8 A [10] $end
$var wire 1 <8 A [9] $end
$var wire 1 =8 A [8] $end
$var wire 1 >8 A [7] $end
$var wire 1 ?8 A [6] $end
$var wire 1 @8 A [5] $end
$var wire 1 A8 A [4] $end
$var wire 1 B8 A [3] $end
$var wire 1 C8 A [2] $end
$var wire 1 D8 A [1] $end
$var wire 1 E8 A [0] $end
$var wire 1 F8 B [15] $end
$var wire 1 G8 B [14] $end
$var wire 1 H8 B [13] $end
$var wire 1 I8 B [12] $end
$var wire 1 J8 B [11] $end
$var wire 1 K8 B [10] $end
$var wire 1 L8 B [9] $end
$var wire 1 M8 B [8] $end
$var wire 1 N8 B [7] $end
$var wire 1 O8 B [6] $end
$var wire 1 P8 B [5] $end
$var wire 1 Q8 B [4] $end
$var wire 1 R8 B [3] $end
$var wire 1 S8 B [2] $end
$var wire 1 T8 B [1] $end
$var wire 1 U8 B [0] $end
$var wire 1 V8 sA [15] $end
$var wire 1 W8 sA [14] $end
$var wire 1 X8 sA [13] $end
$var wire 1 Y8 sA [12] $end
$var wire 1 Z8 sA [11] $end
$var wire 1 [8 sA [10] $end
$var wire 1 \8 sA [9] $end
$var wire 1 ]8 sA [8] $end
$var wire 1 ^8 sA [7] $end
$var wire 1 _8 sA [6] $end
$var wire 1 `8 sA [5] $end
$var wire 1 a8 sA [4] $end
$var wire 1 b8 sA [3] $end
$var wire 1 c8 sA [2] $end
$var wire 1 d8 sA [1] $end
$var wire 1 e8 sA [0] $end
$var wire 1 f8 sB [15] $end
$var wire 1 g8 sB [14] $end
$var wire 1 h8 sB [13] $end
$var wire 1 i8 sB [12] $end
$var wire 1 j8 sB [11] $end
$var wire 1 k8 sB [10] $end
$var wire 1 l8 sB [9] $end
$var wire 1 m8 sB [8] $end
$var wire 1 n8 sB [7] $end
$var wire 1 o8 sB [6] $end
$var wire 1 p8 sB [5] $end
$var wire 1 q8 sB [4] $end
$var wire 1 r8 sB [3] $end
$var wire 1 s8 sB [2] $end
$var wire 1 t8 sB [1] $end
$var wire 1 u8 sB [0] $end

$scope module cla $end
$var parameter 32 v8 N $end
$var wire 1 d7 sum [15] $end
$var wire 1 e7 sum [14] $end
$var wire 1 f7 sum [13] $end
$var wire 1 g7 sum [12] $end
$var wire 1 h7 sum [11] $end
$var wire 1 i7 sum [10] $end
$var wire 1 j7 sum [9] $end
$var wire 1 k7 sum [8] $end
$var wire 1 l7 sum [7] $end
$var wire 1 m7 sum [6] $end
$var wire 1 n7 sum [5] $end
$var wire 1 o7 sum [4] $end
$var wire 1 p7 sum [3] $end
$var wire 1 q7 sum [2] $end
$var wire 1 r7 sum [1] $end
$var wire 1 s7 sum [0] $end
$var wire 1 c7 c_out $end
$var wire 1 F8 a [15] $end
$var wire 1 G8 a [14] $end
$var wire 1 H8 a [13] $end
$var wire 1 I8 a [12] $end
$var wire 1 J8 a [11] $end
$var wire 1 K8 a [10] $end
$var wire 1 L8 a [9] $end
$var wire 1 M8 a [8] $end
$var wire 1 N8 a [7] $end
$var wire 1 O8 a [6] $end
$var wire 1 P8 a [5] $end
$var wire 1 Q8 a [4] $end
$var wire 1 R8 a [3] $end
$var wire 1 S8 a [2] $end
$var wire 1 T8 a [1] $end
$var wire 1 U8 a [0] $end
$var wire 1 68 b [15] $end
$var wire 1 78 b [14] $end
$var wire 1 88 b [13] $end
$var wire 1 98 b [12] $end
$var wire 1 :8 b [11] $end
$var wire 1 ;8 b [10] $end
$var wire 1 <8 b [9] $end
$var wire 1 =8 b [8] $end
$var wire 1 >8 b [7] $end
$var wire 1 ?8 b [6] $end
$var wire 1 @8 b [5] $end
$var wire 1 A8 b [4] $end
$var wire 1 B8 b [3] $end
$var wire 1 C8 b [2] $end
$var wire 1 D8 b [1] $end
$var wire 1 E8 b [0] $end
$var wire 1 t# c_in $end
$var wire 1 w8 carries [2] $end
$var wire 1 x8 carries [1] $end
$var wire 1 y8 carries [0] $end

$scope module cla[3] $end
$var parameter 32 z8 N $end
$var wire 1 d7 sum [3] $end
$var wire 1 e7 sum [2] $end
$var wire 1 f7 sum [1] $end
$var wire 1 g7 sum [0] $end
$var wire 1 c7 c_out $end
$var wire 1 F8 a [3] $end
$var wire 1 G8 a [2] $end
$var wire 1 H8 a [1] $end
$var wire 1 I8 a [0] $end
$var wire 1 68 b [3] $end
$var wire 1 78 b [2] $end
$var wire 1 88 b [1] $end
$var wire 1 98 b [0] $end
$var wire 1 w8 c_in $end
$var wire 1 {8 p [3] $end
$var wire 1 |8 p [2] $end
$var wire 1 }8 p [1] $end
$var wire 1 ~8 p [0] $end
$var wire 1 !9 ng [3] $end
$var wire 1 "9 ng [2] $end
$var wire 1 #9 ng [1] $end
$var wire 1 $9 ng [0] $end
$var wire 1 %9 carries [4] $end
$var wire 1 &9 carries [3] $end
$var wire 1 '9 carries [2] $end
$var wire 1 (9 carries [1] $end
$var wire 1 )9 carries [0] $end
$var wire 1 *9 cp [3] $end
$var wire 1 +9 cp [2] $end
$var wire 1 ,9 cp [1] $end
$var wire 1 -9 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 {8 out $end
$var wire 1 F8 in1 $end
$var wire 1 68 in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 |8 out $end
$var wire 1 G8 in1 $end
$var wire 1 78 in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 }8 out $end
$var wire 1 H8 in1 $end
$var wire 1 88 in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 ~8 out $end
$var wire 1 I8 in1 $end
$var wire 1 98 in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 !9 out $end
$var wire 1 F8 in1 $end
$var wire 1 68 in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 "9 out $end
$var wire 1 G8 in1 $end
$var wire 1 78 in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 #9 out $end
$var wire 1 H8 in1 $end
$var wire 1 88 in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 $9 out $end
$var wire 1 I8 in1 $end
$var wire 1 98 in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 *9 out $end
$var wire 1 {8 in1 $end
$var wire 1 &9 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 +9 out $end
$var wire 1 |8 in1 $end
$var wire 1 '9 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 ,9 out $end
$var wire 1 }8 in1 $end
$var wire 1 (9 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 -9 out $end
$var wire 1 ~8 in1 $end
$var wire 1 w8 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 c7 out $end
$var wire 1 *9 in1 $end
$var wire 1 !9 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 &9 out $end
$var wire 1 +9 in1 $end
$var wire 1 "9 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 '9 out $end
$var wire 1 ,9 in1 $end
$var wire 1 #9 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 (9 out $end
$var wire 1 -9 in1 $end
$var wire 1 $9 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 d7 s $end
$var wire 1 .9 c_out $end
$var wire 1 F8 a $end
$var wire 1 68 b $end
$var wire 1 &9 c_in $end
$var wire 1 /9 AxorB $end
$var wire 1 09 CnandAB $end
$var wire 1 19 AnandB $end

$scope module xor_1 $end
$var wire 1 /9 out $end
$var wire 1 F8 in1 $end
$var wire 1 68 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 d7 out $end
$var wire 1 /9 in1 $end
$var wire 1 &9 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 09 out $end
$var wire 1 /9 in1 $end
$var wire 1 &9 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 19 out $end
$var wire 1 F8 in1 $end
$var wire 1 68 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 .9 out $end
$var wire 1 19 in1 $end
$var wire 1 09 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 e7 s $end
$var wire 1 29 c_out $end
$var wire 1 G8 a $end
$var wire 1 78 b $end
$var wire 1 '9 c_in $end
$var wire 1 39 AxorB $end
$var wire 1 49 CnandAB $end
$var wire 1 59 AnandB $end

$scope module xor_1 $end
$var wire 1 39 out $end
$var wire 1 G8 in1 $end
$var wire 1 78 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 e7 out $end
$var wire 1 39 in1 $end
$var wire 1 '9 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 49 out $end
$var wire 1 39 in1 $end
$var wire 1 '9 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 59 out $end
$var wire 1 G8 in1 $end
$var wire 1 78 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 29 out $end
$var wire 1 59 in1 $end
$var wire 1 49 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 f7 s $end
$var wire 1 69 c_out $end
$var wire 1 H8 a $end
$var wire 1 88 b $end
$var wire 1 (9 c_in $end
$var wire 1 79 AxorB $end
$var wire 1 89 CnandAB $end
$var wire 1 99 AnandB $end

$scope module xor_1 $end
$var wire 1 79 out $end
$var wire 1 H8 in1 $end
$var wire 1 88 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 f7 out $end
$var wire 1 79 in1 $end
$var wire 1 (9 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 89 out $end
$var wire 1 79 in1 $end
$var wire 1 (9 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 99 out $end
$var wire 1 H8 in1 $end
$var wire 1 88 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 69 out $end
$var wire 1 99 in1 $end
$var wire 1 89 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 g7 s $end
$var wire 1 :9 c_out $end
$var wire 1 I8 a $end
$var wire 1 98 b $end
$var wire 1 w8 c_in $end
$var wire 1 ;9 AxorB $end
$var wire 1 <9 CnandAB $end
$var wire 1 =9 AnandB $end

$scope module xor_1 $end
$var wire 1 ;9 out $end
$var wire 1 I8 in1 $end
$var wire 1 98 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 g7 out $end
$var wire 1 ;9 in1 $end
$var wire 1 w8 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 <9 out $end
$var wire 1 ;9 in1 $end
$var wire 1 w8 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 =9 out $end
$var wire 1 I8 in1 $end
$var wire 1 98 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 :9 out $end
$var wire 1 =9 in1 $end
$var wire 1 <9 in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[2] $end
$var parameter 32 >9 N $end
$var wire 1 h7 sum [3] $end
$var wire 1 i7 sum [2] $end
$var wire 1 j7 sum [1] $end
$var wire 1 k7 sum [0] $end
$var wire 1 w8 c_out $end
$var wire 1 J8 a [3] $end
$var wire 1 K8 a [2] $end
$var wire 1 L8 a [1] $end
$var wire 1 M8 a [0] $end
$var wire 1 :8 b [3] $end
$var wire 1 ;8 b [2] $end
$var wire 1 <8 b [1] $end
$var wire 1 =8 b [0] $end
$var wire 1 x8 c_in $end
$var wire 1 ?9 p [3] $end
$var wire 1 @9 p [2] $end
$var wire 1 A9 p [1] $end
$var wire 1 B9 p [0] $end
$var wire 1 C9 ng [3] $end
$var wire 1 D9 ng [2] $end
$var wire 1 E9 ng [1] $end
$var wire 1 F9 ng [0] $end
$var wire 1 G9 carries [4] $end
$var wire 1 H9 carries [3] $end
$var wire 1 I9 carries [2] $end
$var wire 1 J9 carries [1] $end
$var wire 1 K9 carries [0] $end
$var wire 1 L9 cp [3] $end
$var wire 1 M9 cp [2] $end
$var wire 1 N9 cp [1] $end
$var wire 1 O9 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 ?9 out $end
$var wire 1 J8 in1 $end
$var wire 1 :8 in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 @9 out $end
$var wire 1 K8 in1 $end
$var wire 1 ;8 in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 A9 out $end
$var wire 1 L8 in1 $end
$var wire 1 <8 in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 B9 out $end
$var wire 1 M8 in1 $end
$var wire 1 =8 in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 C9 out $end
$var wire 1 J8 in1 $end
$var wire 1 :8 in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 D9 out $end
$var wire 1 K8 in1 $end
$var wire 1 ;8 in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 E9 out $end
$var wire 1 L8 in1 $end
$var wire 1 <8 in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 F9 out $end
$var wire 1 M8 in1 $end
$var wire 1 =8 in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 L9 out $end
$var wire 1 ?9 in1 $end
$var wire 1 H9 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 M9 out $end
$var wire 1 @9 in1 $end
$var wire 1 I9 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 N9 out $end
$var wire 1 A9 in1 $end
$var wire 1 J9 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 O9 out $end
$var wire 1 B9 in1 $end
$var wire 1 x8 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 w8 out $end
$var wire 1 L9 in1 $end
$var wire 1 C9 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 H9 out $end
$var wire 1 M9 in1 $end
$var wire 1 D9 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 I9 out $end
$var wire 1 N9 in1 $end
$var wire 1 E9 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 J9 out $end
$var wire 1 O9 in1 $end
$var wire 1 F9 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 h7 s $end
$var wire 1 P9 c_out $end
$var wire 1 J8 a $end
$var wire 1 :8 b $end
$var wire 1 H9 c_in $end
$var wire 1 Q9 AxorB $end
$var wire 1 R9 CnandAB $end
$var wire 1 S9 AnandB $end

$scope module xor_1 $end
$var wire 1 Q9 out $end
$var wire 1 J8 in1 $end
$var wire 1 :8 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 h7 out $end
$var wire 1 Q9 in1 $end
$var wire 1 H9 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 R9 out $end
$var wire 1 Q9 in1 $end
$var wire 1 H9 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 S9 out $end
$var wire 1 J8 in1 $end
$var wire 1 :8 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 P9 out $end
$var wire 1 S9 in1 $end
$var wire 1 R9 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 i7 s $end
$var wire 1 T9 c_out $end
$var wire 1 K8 a $end
$var wire 1 ;8 b $end
$var wire 1 I9 c_in $end
$var wire 1 U9 AxorB $end
$var wire 1 V9 CnandAB $end
$var wire 1 W9 AnandB $end

$scope module xor_1 $end
$var wire 1 U9 out $end
$var wire 1 K8 in1 $end
$var wire 1 ;8 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 i7 out $end
$var wire 1 U9 in1 $end
$var wire 1 I9 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 V9 out $end
$var wire 1 U9 in1 $end
$var wire 1 I9 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 W9 out $end
$var wire 1 K8 in1 $end
$var wire 1 ;8 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 T9 out $end
$var wire 1 W9 in1 $end
$var wire 1 V9 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 j7 s $end
$var wire 1 X9 c_out $end
$var wire 1 L8 a $end
$var wire 1 <8 b $end
$var wire 1 J9 c_in $end
$var wire 1 Y9 AxorB $end
$var wire 1 Z9 CnandAB $end
$var wire 1 [9 AnandB $end

$scope module xor_1 $end
$var wire 1 Y9 out $end
$var wire 1 L8 in1 $end
$var wire 1 <8 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 j7 out $end
$var wire 1 Y9 in1 $end
$var wire 1 J9 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 Z9 out $end
$var wire 1 Y9 in1 $end
$var wire 1 J9 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 [9 out $end
$var wire 1 L8 in1 $end
$var wire 1 <8 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 X9 out $end
$var wire 1 [9 in1 $end
$var wire 1 Z9 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 k7 s $end
$var wire 1 \9 c_out $end
$var wire 1 M8 a $end
$var wire 1 =8 b $end
$var wire 1 x8 c_in $end
$var wire 1 ]9 AxorB $end
$var wire 1 ^9 CnandAB $end
$var wire 1 _9 AnandB $end

$scope module xor_1 $end
$var wire 1 ]9 out $end
$var wire 1 M8 in1 $end
$var wire 1 =8 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 k7 out $end
$var wire 1 ]9 in1 $end
$var wire 1 x8 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 ^9 out $end
$var wire 1 ]9 in1 $end
$var wire 1 x8 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 _9 out $end
$var wire 1 M8 in1 $end
$var wire 1 =8 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 \9 out $end
$var wire 1 _9 in1 $end
$var wire 1 ^9 in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[1] $end
$var parameter 32 `9 N $end
$var wire 1 l7 sum [3] $end
$var wire 1 m7 sum [2] $end
$var wire 1 n7 sum [1] $end
$var wire 1 o7 sum [0] $end
$var wire 1 x8 c_out $end
$var wire 1 N8 a [3] $end
$var wire 1 O8 a [2] $end
$var wire 1 P8 a [1] $end
$var wire 1 Q8 a [0] $end
$var wire 1 >8 b [3] $end
$var wire 1 ?8 b [2] $end
$var wire 1 @8 b [1] $end
$var wire 1 A8 b [0] $end
$var wire 1 y8 c_in $end
$var wire 1 a9 p [3] $end
$var wire 1 b9 p [2] $end
$var wire 1 c9 p [1] $end
$var wire 1 d9 p [0] $end
$var wire 1 e9 ng [3] $end
$var wire 1 f9 ng [2] $end
$var wire 1 g9 ng [1] $end
$var wire 1 h9 ng [0] $end
$var wire 1 i9 carries [4] $end
$var wire 1 j9 carries [3] $end
$var wire 1 k9 carries [2] $end
$var wire 1 l9 carries [1] $end
$var wire 1 m9 carries [0] $end
$var wire 1 n9 cp [3] $end
$var wire 1 o9 cp [2] $end
$var wire 1 p9 cp [1] $end
$var wire 1 q9 cp [0] $end

$scope module xor_1[3] $end
$var wire 1 a9 out $end
$var wire 1 N8 in1 $end
$var wire 1 >8 in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 b9 out $end
$var wire 1 O8 in1 $end
$var wire 1 ?8 in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 c9 out $end
$var wire 1 P8 in1 $end
$var wire 1 @8 in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 d9 out $end
$var wire 1 Q8 in1 $end
$var wire 1 A8 in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 e9 out $end
$var wire 1 N8 in1 $end
$var wire 1 >8 in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 f9 out $end
$var wire 1 O8 in1 $end
$var wire 1 ?8 in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 g9 out $end
$var wire 1 P8 in1 $end
$var wire 1 @8 in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 h9 out $end
$var wire 1 Q8 in1 $end
$var wire 1 A8 in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 n9 out $end
$var wire 1 a9 in1 $end
$var wire 1 j9 in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 o9 out $end
$var wire 1 b9 in1 $end
$var wire 1 k9 in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 p9 out $end
$var wire 1 c9 in1 $end
$var wire 1 l9 in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 q9 out $end
$var wire 1 d9 in1 $end
$var wire 1 y8 in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 x8 out $end
$var wire 1 n9 in1 $end
$var wire 1 e9 in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 j9 out $end
$var wire 1 o9 in1 $end
$var wire 1 f9 in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 k9 out $end
$var wire 1 p9 in1 $end
$var wire 1 g9 in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 l9 out $end
$var wire 1 q9 in1 $end
$var wire 1 h9 in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 l7 s $end
$var wire 1 r9 c_out $end
$var wire 1 N8 a $end
$var wire 1 >8 b $end
$var wire 1 j9 c_in $end
$var wire 1 s9 AxorB $end
$var wire 1 t9 CnandAB $end
$var wire 1 u9 AnandB $end

$scope module xor_1 $end
$var wire 1 s9 out $end
$var wire 1 N8 in1 $end
$var wire 1 >8 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 l7 out $end
$var wire 1 s9 in1 $end
$var wire 1 j9 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 t9 out $end
$var wire 1 s9 in1 $end
$var wire 1 j9 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 u9 out $end
$var wire 1 N8 in1 $end
$var wire 1 >8 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 r9 out $end
$var wire 1 u9 in1 $end
$var wire 1 t9 in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 m7 s $end
$var wire 1 v9 c_out $end
$var wire 1 O8 a $end
$var wire 1 ?8 b $end
$var wire 1 k9 c_in $end
$var wire 1 w9 AxorB $end
$var wire 1 x9 CnandAB $end
$var wire 1 y9 AnandB $end

$scope module xor_1 $end
$var wire 1 w9 out $end
$var wire 1 O8 in1 $end
$var wire 1 ?8 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 m7 out $end
$var wire 1 w9 in1 $end
$var wire 1 k9 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 x9 out $end
$var wire 1 w9 in1 $end
$var wire 1 k9 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 y9 out $end
$var wire 1 O8 in1 $end
$var wire 1 ?8 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 v9 out $end
$var wire 1 y9 in1 $end
$var wire 1 x9 in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 n7 s $end
$var wire 1 z9 c_out $end
$var wire 1 P8 a $end
$var wire 1 @8 b $end
$var wire 1 l9 c_in $end
$var wire 1 {9 AxorB $end
$var wire 1 |9 CnandAB $end
$var wire 1 }9 AnandB $end

$scope module xor_1 $end
$var wire 1 {9 out $end
$var wire 1 P8 in1 $end
$var wire 1 @8 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 n7 out $end
$var wire 1 {9 in1 $end
$var wire 1 l9 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 |9 out $end
$var wire 1 {9 in1 $end
$var wire 1 l9 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 }9 out $end
$var wire 1 P8 in1 $end
$var wire 1 @8 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 z9 out $end
$var wire 1 }9 in1 $end
$var wire 1 |9 in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 o7 s $end
$var wire 1 ~9 c_out $end
$var wire 1 Q8 a $end
$var wire 1 A8 b $end
$var wire 1 y8 c_in $end
$var wire 1 !: AxorB $end
$var wire 1 ": CnandAB $end
$var wire 1 #: AnandB $end

$scope module xor_1 $end
$var wire 1 !: out $end
$var wire 1 Q8 in1 $end
$var wire 1 A8 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 o7 out $end
$var wire 1 !: in1 $end
$var wire 1 y8 in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 ": out $end
$var wire 1 !: in1 $end
$var wire 1 y8 in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 #: out $end
$var wire 1 Q8 in1 $end
$var wire 1 A8 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 ~9 out $end
$var wire 1 #: in1 $end
$var wire 1 ": in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla[0] $end
$var parameter 32 $: N $end
$var wire 1 p7 sum [3] $end
$var wire 1 q7 sum [2] $end
$var wire 1 r7 sum [1] $end
$var wire 1 s7 sum [0] $end
$var wire 1 y8 c_out $end
$var wire 1 R8 a [3] $end
$var wire 1 S8 a [2] $end
$var wire 1 T8 a [1] $end
$var wire 1 U8 a [0] $end
$var wire 1 B8 b [3] $end
$var wire 1 C8 b [2] $end
$var wire 1 D8 b [1] $end
$var wire 1 E8 b [0] $end
$var wire 1 t# c_in $end
$var wire 1 %: p [3] $end
$var wire 1 &: p [2] $end
$var wire 1 ': p [1] $end
$var wire 1 (: p [0] $end
$var wire 1 ): ng [3] $end
$var wire 1 *: ng [2] $end
$var wire 1 +: ng [1] $end
$var wire 1 ,: ng [0] $end
$var wire 1 -: carries [4] $end
$var wire 1 .: carries [3] $end
$var wire 1 /: carries [2] $end
$var wire 1 0: carries [1] $end
$var wire 1 1: carries [0] $end
$var wire 1 2: cp [3] $end
$var wire 1 3: cp [2] $end
$var wire 1 4: cp [1] $end
$var wire 1 5: cp [0] $end

$scope module xor_1[3] $end
$var wire 1 %: out $end
$var wire 1 R8 in1 $end
$var wire 1 B8 in2 $end
$upscope $end

$scope module xor_1[2] $end
$var wire 1 &: out $end
$var wire 1 S8 in1 $end
$var wire 1 C8 in2 $end
$upscope $end

$scope module xor_1[1] $end
$var wire 1 ': out $end
$var wire 1 T8 in1 $end
$var wire 1 D8 in2 $end
$upscope $end

$scope module xor_1[0] $end
$var wire 1 (: out $end
$var wire 1 U8 in1 $end
$var wire 1 E8 in2 $end
$upscope $end

$scope module nand_1[3] $end
$var wire 1 ): out $end
$var wire 1 R8 in1 $end
$var wire 1 B8 in2 $end
$upscope $end

$scope module nand_1[2] $end
$var wire 1 *: out $end
$var wire 1 S8 in1 $end
$var wire 1 C8 in2 $end
$upscope $end

$scope module nand_1[1] $end
$var wire 1 +: out $end
$var wire 1 T8 in1 $end
$var wire 1 D8 in2 $end
$upscope $end

$scope module nand_1[0] $end
$var wire 1 ,: out $end
$var wire 1 U8 in1 $end
$var wire 1 E8 in2 $end
$upscope $end

$scope module nand_2[3] $end
$var wire 1 2: out $end
$var wire 1 %: in1 $end
$var wire 1 .: in2 $end
$upscope $end

$scope module nand_2[2] $end
$var wire 1 3: out $end
$var wire 1 &: in1 $end
$var wire 1 /: in2 $end
$upscope $end

$scope module nand_2[1] $end
$var wire 1 4: out $end
$var wire 1 ': in1 $end
$var wire 1 0: in2 $end
$upscope $end

$scope module nand_2[0] $end
$var wire 1 5: out $end
$var wire 1 (: in1 $end
$var wire 1 t# in2 $end
$upscope $end

$scope module nand_3[3] $end
$var wire 1 y8 out $end
$var wire 1 2: in1 $end
$var wire 1 ): in2 $end
$upscope $end

$scope module nand_3[2] $end
$var wire 1 .: out $end
$var wire 1 3: in1 $end
$var wire 1 *: in2 $end
$upscope $end

$scope module nand_3[1] $end
$var wire 1 /: out $end
$var wire 1 4: in1 $end
$var wire 1 +: in2 $end
$upscope $end

$scope module nand_3[0] $end
$var wire 1 0: out $end
$var wire 1 5: in1 $end
$var wire 1 ,: in2 $end
$upscope $end

$scope module fa[3] $end
$var wire 1 p7 s $end
$var wire 1 6: c_out $end
$var wire 1 R8 a $end
$var wire 1 B8 b $end
$var wire 1 .: c_in $end
$var wire 1 7: AxorB $end
$var wire 1 8: CnandAB $end
$var wire 1 9: AnandB $end

$scope module xor_1 $end
$var wire 1 7: out $end
$var wire 1 R8 in1 $end
$var wire 1 B8 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 p7 out $end
$var wire 1 7: in1 $end
$var wire 1 .: in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 8: out $end
$var wire 1 7: in1 $end
$var wire 1 .: in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 9: out $end
$var wire 1 R8 in1 $end
$var wire 1 B8 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 6: out $end
$var wire 1 9: in1 $end
$var wire 1 8: in2 $end
$upscope $end
$upscope $end

$scope module fa[2] $end
$var wire 1 q7 s $end
$var wire 1 :: c_out $end
$var wire 1 S8 a $end
$var wire 1 C8 b $end
$var wire 1 /: c_in $end
$var wire 1 ;: AxorB $end
$var wire 1 <: CnandAB $end
$var wire 1 =: AnandB $end

$scope module xor_1 $end
$var wire 1 ;: out $end
$var wire 1 S8 in1 $end
$var wire 1 C8 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 q7 out $end
$var wire 1 ;: in1 $end
$var wire 1 /: in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 <: out $end
$var wire 1 ;: in1 $end
$var wire 1 /: in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 =: out $end
$var wire 1 S8 in1 $end
$var wire 1 C8 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 :: out $end
$var wire 1 =: in1 $end
$var wire 1 <: in2 $end
$upscope $end
$upscope $end

$scope module fa[1] $end
$var wire 1 r7 s $end
$var wire 1 >: c_out $end
$var wire 1 T8 a $end
$var wire 1 D8 b $end
$var wire 1 0: c_in $end
$var wire 1 ?: AxorB $end
$var wire 1 @: CnandAB $end
$var wire 1 A: AnandB $end

$scope module xor_1 $end
$var wire 1 ?: out $end
$var wire 1 T8 in1 $end
$var wire 1 D8 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 r7 out $end
$var wire 1 ?: in1 $end
$var wire 1 0: in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 @: out $end
$var wire 1 ?: in1 $end
$var wire 1 0: in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 A: out $end
$var wire 1 T8 in1 $end
$var wire 1 D8 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 >: out $end
$var wire 1 A: in1 $end
$var wire 1 @: in2 $end
$upscope $end
$upscope $end

$scope module fa[0] $end
$var wire 1 s7 s $end
$var wire 1 B: c_out $end
$var wire 1 U8 a $end
$var wire 1 E8 b $end
$var wire 1 t# c_in $end
$var wire 1 C: AxorB $end
$var wire 1 D: CnandAB $end
$var wire 1 E: AnandB $end

$scope module xor_1 $end
$var wire 1 C: out $end
$var wire 1 U8 in1 $end
$var wire 1 E8 in2 $end
$upscope $end

$scope module xor_2 $end
$var wire 1 s7 out $end
$var wire 1 C: in1 $end
$var wire 1 t# in2 $end
$upscope $end

$scope module nand_1 $end
$var wire 1 D: out $end
$var wire 1 C: in1 $end
$var wire 1 t# in2 $end
$upscope $end

$scope module nand_2 $end
$var wire 1 E: out $end
$var wire 1 U8 in1 $end
$var wire 1 E8 in2 $end
$upscope $end

$scope module nand_3 $end
$var wire 1 B: out $end
$var wire 1 E: in1 $end
$var wire 1 D: in2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module shift $end
$var parameter 32 F: OPERAND_WIDTH $end
$var parameter 32 G: SHAMT_WIDTH $end
$var parameter 32 H: NUM_OPERATIONS $end
$var wire 1 68 In [15] $end
$var wire 1 78 In [14] $end
$var wire 1 88 In [13] $end
$var wire 1 98 In [12] $end
$var wire 1 :8 In [11] $end
$var wire 1 ;8 In [10] $end
$var wire 1 <8 In [9] $end
$var wire 1 =8 In [8] $end
$var wire 1 >8 In [7] $end
$var wire 1 ?8 In [6] $end
$var wire 1 @8 In [5] $end
$var wire 1 A8 In [4] $end
$var wire 1 B8 In [3] $end
$var wire 1 C8 In [2] $end
$var wire 1 D8 In [1] $end
$var wire 1 E8 In [0] $end
$var wire 1 R8 ShAmt [3] $end
$var wire 1 S8 ShAmt [2] $end
$var wire 1 T8 ShAmt [1] $end
$var wire 1 U8 ShAmt [0] $end
$var wire 1 5" Oper [1] $end
$var wire 1 6" Oper [0] $end
$var wire 1 t7 Out [15] $end
$var wire 1 u7 Out [14] $end
$var wire 1 v7 Out [13] $end
$var wire 1 w7 Out [12] $end
$var wire 1 x7 Out [11] $end
$var wire 1 y7 Out [10] $end
$var wire 1 z7 Out [9] $end
$var wire 1 {7 Out [8] $end
$var wire 1 |7 Out [7] $end
$var wire 1 }7 Out [6] $end
$var wire 1 ~7 Out [5] $end
$var wire 1 !8 Out [4] $end
$var wire 1 "8 Out [3] $end
$var wire 1 #8 Out [2] $end
$var wire 1 $8 Out [1] $end
$var wire 1 %8 Out [0] $end
$var wire 1 I: s0 [15] $end
$var wire 1 J: s0 [14] $end
$var wire 1 K: s0 [13] $end
$var wire 1 L: s0 [12] $end
$var wire 1 M: s0 [11] $end
$var wire 1 N: s0 [10] $end
$var wire 1 O: s0 [9] $end
$var wire 1 P: s0 [8] $end
$var wire 1 Q: s0 [7] $end
$var wire 1 R: s0 [6] $end
$var wire 1 S: s0 [5] $end
$var wire 1 T: s0 [4] $end
$var wire 1 U: s0 [3] $end
$var wire 1 V: s0 [2] $end
$var wire 1 W: s0 [1] $end
$var wire 1 X: s0 [0] $end
$var wire 1 Y: s1 [15] $end
$var wire 1 Z: s1 [14] $end
$var wire 1 [: s1 [13] $end
$var wire 1 \: s1 [12] $end
$var wire 1 ]: s1 [11] $end
$var wire 1 ^: s1 [10] $end
$var wire 1 _: s1 [9] $end
$var wire 1 `: s1 [8] $end
$var wire 1 a: s1 [7] $end
$var wire 1 b: s1 [6] $end
$var wire 1 c: s1 [5] $end
$var wire 1 d: s1 [4] $end
$var wire 1 e: s1 [3] $end
$var wire 1 f: s1 [2] $end
$var wire 1 g: s1 [1] $end
$var wire 1 h: s1 [0] $end
$var wire 1 i: s2 [15] $end
$var wire 1 j: s2 [14] $end
$var wire 1 k: s2 [13] $end
$var wire 1 l: s2 [12] $end
$var wire 1 m: s2 [11] $end
$var wire 1 n: s2 [10] $end
$var wire 1 o: s2 [9] $end
$var wire 1 p: s2 [8] $end
$var wire 1 q: s2 [7] $end
$var wire 1 r: s2 [6] $end
$var wire 1 s: s2 [5] $end
$var wire 1 t: s2 [4] $end
$var wire 1 u: s2 [3] $end
$var wire 1 v: s2 [2] $end
$var wire 1 w: s2 [1] $end
$var wire 1 x: s2 [0] $end
$var wire 1 y: s3 [15] $end
$var wire 1 z: s3 [14] $end
$var wire 1 {: s3 [13] $end
$var wire 1 |: s3 [12] $end
$var wire 1 }: s3 [11] $end
$var wire 1 ~: s3 [10] $end
$var wire 1 !; s3 [9] $end
$var wire 1 "; s3 [8] $end
$var wire 1 #; s3 [7] $end
$var wire 1 $; s3 [6] $end
$var wire 1 %; s3 [5] $end
$var wire 1 &; s3 [4] $end
$var wire 1 '; s3 [3] $end
$var wire 1 (; s3 [2] $end
$var wire 1 ); s3 [1] $end
$var wire 1 *; s3 [0] $end
$var wire 1 +; temp_out_sh0 [15] $end
$var wire 1 ,; temp_out_sh0 [14] $end
$var wire 1 -; temp_out_sh0 [13] $end
$var wire 1 .; temp_out_sh0 [12] $end
$var wire 1 /; temp_out_sh0 [11] $end
$var wire 1 0; temp_out_sh0 [10] $end
$var wire 1 1; temp_out_sh0 [9] $end
$var wire 1 2; temp_out_sh0 [8] $end
$var wire 1 3; temp_out_sh0 [7] $end
$var wire 1 4; temp_out_sh0 [6] $end
$var wire 1 5; temp_out_sh0 [5] $end
$var wire 1 6; temp_out_sh0 [4] $end
$var wire 1 7; temp_out_sh0 [3] $end
$var wire 1 8; temp_out_sh0 [2] $end
$var wire 1 9; temp_out_sh0 [1] $end
$var wire 1 :; temp_out_sh0 [0] $end
$var wire 1 ;; temp_out_sh1 [15] $end
$var wire 1 <; temp_out_sh1 [14] $end
$var wire 1 =; temp_out_sh1 [13] $end
$var wire 1 >; temp_out_sh1 [12] $end
$var wire 1 ?; temp_out_sh1 [11] $end
$var wire 1 @; temp_out_sh1 [10] $end
$var wire 1 A; temp_out_sh1 [9] $end
$var wire 1 B; temp_out_sh1 [8] $end
$var wire 1 C; temp_out_sh1 [7] $end
$var wire 1 D; temp_out_sh1 [6] $end
$var wire 1 E; temp_out_sh1 [5] $end
$var wire 1 F; temp_out_sh1 [4] $end
$var wire 1 G; temp_out_sh1 [3] $end
$var wire 1 H; temp_out_sh1 [2] $end
$var wire 1 I; temp_out_sh1 [1] $end
$var wire 1 J; temp_out_sh1 [0] $end
$var wire 1 K; temp_out_sh2 [15] $end
$var wire 1 L; temp_out_sh2 [14] $end
$var wire 1 M; temp_out_sh2 [13] $end
$var wire 1 N; temp_out_sh2 [12] $end
$var wire 1 O; temp_out_sh2 [11] $end
$var wire 1 P; temp_out_sh2 [10] $end
$var wire 1 Q; temp_out_sh2 [9] $end
$var wire 1 R; temp_out_sh2 [8] $end
$var wire 1 S; temp_out_sh2 [7] $end
$var wire 1 T; temp_out_sh2 [6] $end
$var wire 1 U; temp_out_sh2 [5] $end
$var wire 1 V; temp_out_sh2 [4] $end
$var wire 1 W; temp_out_sh2 [3] $end
$var wire 1 X; temp_out_sh2 [2] $end
$var wire 1 Y; temp_out_sh2 [1] $end
$var wire 1 Z; temp_out_sh2 [0] $end
$var wire 1 [; temp_out_sh3 [15] $end
$var wire 1 \; temp_out_sh3 [14] $end
$var wire 1 ]; temp_out_sh3 [13] $end
$var wire 1 ^; temp_out_sh3 [12] $end
$var wire 1 _; temp_out_sh3 [11] $end
$var wire 1 `; temp_out_sh3 [10] $end
$var wire 1 a; temp_out_sh3 [9] $end
$var wire 1 b; temp_out_sh3 [8] $end
$var wire 1 c; temp_out_sh3 [7] $end
$var wire 1 d; temp_out_sh3 [6] $end
$var wire 1 e; temp_out_sh3 [5] $end
$var wire 1 f; temp_out_sh3 [4] $end
$var wire 1 g; temp_out_sh3 [3] $end
$var wire 1 h; temp_out_sh3 [2] $end
$var wire 1 i; temp_out_sh3 [1] $end
$var wire 1 j; temp_out_sh3 [0] $end

$scope module bs0 $end
$var wire 1 68 in [15] $end
$var wire 1 78 in [14] $end
$var wire 1 88 in [13] $end
$var wire 1 98 in [12] $end
$var wire 1 :8 in [11] $end
$var wire 1 ;8 in [10] $end
$var wire 1 <8 in [9] $end
$var wire 1 =8 in [8] $end
$var wire 1 >8 in [7] $end
$var wire 1 ?8 in [6] $end
$var wire 1 @8 in [5] $end
$var wire 1 A8 in [4] $end
$var wire 1 B8 in [3] $end
$var wire 1 C8 in [2] $end
$var wire 1 D8 in [1] $end
$var wire 1 E8 in [0] $end
$var wire 1 5" oper [1] $end
$var wire 1 6" oper [0] $end
$var wire 1 +; out [15] $end
$var wire 1 ,; out [14] $end
$var wire 1 -; out [13] $end
$var wire 1 .; out [12] $end
$var wire 1 /; out [11] $end
$var wire 1 0; out [10] $end
$var wire 1 1; out [9] $end
$var wire 1 2; out [8] $end
$var wire 1 3; out [7] $end
$var wire 1 4; out [6] $end
$var wire 1 5; out [5] $end
$var wire 1 6; out [4] $end
$var wire 1 7; out [3] $end
$var wire 1 8; out [2] $end
$var wire 1 9; out [1] $end
$var wire 1 :; out [0] $end
$upscope $end

$scope module bs1 $end
$var wire 1 I: in [15] $end
$var wire 1 J: in [14] $end
$var wire 1 K: in [13] $end
$var wire 1 L: in [12] $end
$var wire 1 M: in [11] $end
$var wire 1 N: in [10] $end
$var wire 1 O: in [9] $end
$var wire 1 P: in [8] $end
$var wire 1 Q: in [7] $end
$var wire 1 R: in [6] $end
$var wire 1 S: in [5] $end
$var wire 1 T: in [4] $end
$var wire 1 U: in [3] $end
$var wire 1 V: in [2] $end
$var wire 1 W: in [1] $end
$var wire 1 X: in [0] $end
$var wire 1 5" oper [1] $end
$var wire 1 6" oper [0] $end
$var wire 1 ;; out [15] $end
$var wire 1 <; out [14] $end
$var wire 1 =; out [13] $end
$var wire 1 >; out [12] $end
$var wire 1 ?; out [11] $end
$var wire 1 @; out [10] $end
$var wire 1 A; out [9] $end
$var wire 1 B; out [8] $end
$var wire 1 C; out [7] $end
$var wire 1 D; out [6] $end
$var wire 1 E; out [5] $end
$var wire 1 F; out [4] $end
$var wire 1 G; out [3] $end
$var wire 1 H; out [2] $end
$var wire 1 I; out [1] $end
$var wire 1 J; out [0] $end
$upscope $end

$scope module bs2 $end
$var wire 1 Y: in [15] $end
$var wire 1 Z: in [14] $end
$var wire 1 [: in [13] $end
$var wire 1 \: in [12] $end
$var wire 1 ]: in [11] $end
$var wire 1 ^: in [10] $end
$var wire 1 _: in [9] $end
$var wire 1 `: in [8] $end
$var wire 1 a: in [7] $end
$var wire 1 b: in [6] $end
$var wire 1 c: in [5] $end
$var wire 1 d: in [4] $end
$var wire 1 e: in [3] $end
$var wire 1 f: in [2] $end
$var wire 1 g: in [1] $end
$var wire 1 h: in [0] $end
$var wire 1 5" oper [1] $end
$var wire 1 6" oper [0] $end
$var wire 1 K; out [15] $end
$var wire 1 L; out [14] $end
$var wire 1 M; out [13] $end
$var wire 1 N; out [12] $end
$var wire 1 O; out [11] $end
$var wire 1 P; out [10] $end
$var wire 1 Q; out [9] $end
$var wire 1 R; out [8] $end
$var wire 1 S; out [7] $end
$var wire 1 T; out [6] $end
$var wire 1 U; out [5] $end
$var wire 1 V; out [4] $end
$var wire 1 W; out [3] $end
$var wire 1 X; out [2] $end
$var wire 1 Y; out [1] $end
$var wire 1 Z; out [0] $end
$upscope $end

$scope module bs3 $end
$var wire 1 i: in [15] $end
$var wire 1 j: in [14] $end
$var wire 1 k: in [13] $end
$var wire 1 l: in [12] $end
$var wire 1 m: in [11] $end
$var wire 1 n: in [10] $end
$var wire 1 o: in [9] $end
$var wire 1 p: in [8] $end
$var wire 1 q: in [7] $end
$var wire 1 r: in [6] $end
$var wire 1 s: in [5] $end
$var wire 1 t: in [4] $end
$var wire 1 u: in [3] $end
$var wire 1 v: in [2] $end
$var wire 1 w: in [1] $end
$var wire 1 x: in [0] $end
$var wire 1 5" oper [1] $end
$var wire 1 6" oper [0] $end
$var wire 1 [; out [15] $end
$var wire 1 \; out [14] $end
$var wire 1 ]; out [13] $end
$var wire 1 ^; out [12] $end
$var wire 1 _; out [11] $end
$var wire 1 `; out [10] $end
$var wire 1 a; out [9] $end
$var wire 1 b; out [8] $end
$var wire 1 c; out [7] $end
$var wire 1 d; out [6] $end
$var wire 1 e; out [5] $end
$var wire 1 f; out [4] $end
$var wire 1 g; out [3] $end
$var wire 1 h; out [2] $end
$var wire 1 i; out [1] $end
$var wire 1 j; out [0] $end
$upscope $end
$upscope $end
$upscope $end

$scope module branch_ctrl $end
$var wire 1 &6 SF $end
$var wire 1 )6 ZF $end
$var wire 1 7" brch_instr [3] $end
$var wire 1 8" brch_instr [2] $end
$var wire 1 9" brch_instr [1] $end
$var wire 1 :" brch_instr [0] $end
$var wire 1 %6 BrchCnd $end
$var reg 1 k; brch_sig $end
$upscope $end
$upscope $end

$scope module dff_e_ALU $end
$var parameter 32 l; BIT_WIDTH $end
$var parameter 32 m; BIT_SIZE $end
$var parameter 32 n; REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 o; we $end
$var wire 1 k" w [15] $end
$var wire 1 l" w [14] $end
$var wire 1 m" w [13] $end
$var wire 1 n" w [12] $end
$var wire 1 o" w [11] $end
$var wire 1 p" w [10] $end
$var wire 1 q" w [9] $end
$var wire 1 r" w [8] $end
$var wire 1 s" w [7] $end
$var wire 1 t" w [6] $end
$var wire 1 u" w [5] $end
$var wire 1 v" w [4] $end
$var wire 1 w" w [3] $end
$var wire 1 x" w [2] $end
$var wire 1 y" w [1] $end
$var wire 1 z" w [0] $end
$var wire 1 c$ r [15] $end
$var wire 1 d$ r [14] $end
$var wire 1 e$ r [13] $end
$var wire 1 f$ r [12] $end
$var wire 1 g$ r [11] $end
$var wire 1 h$ r [10] $end
$var wire 1 i$ r [9] $end
$var wire 1 j$ r [8] $end
$var wire 1 k$ r [7] $end
$var wire 1 l$ r [6] $end
$var wire 1 m$ r [5] $end
$var wire 1 n$ r [4] $end
$var wire 1 o$ r [3] $end
$var wire 1 p$ r [2] $end
$var wire 1 q$ r [1] $end
$var wire 1 r$ r [0] $end

$scope module dff01[15] $end
$var wire 1 c$ q $end
$var wire 1 p; d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 q; state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 d$ q $end
$var wire 1 r; d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 s; state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 e$ q $end
$var wire 1 t; d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 u; state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 f$ q $end
$var wire 1 v; d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 w; state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 g$ q $end
$var wire 1 x; d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 y; state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 h$ q $end
$var wire 1 z; d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 {; state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 i$ q $end
$var wire 1 |; d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 }; state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 j$ q $end
$var wire 1 ~; d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 !< state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 k$ q $end
$var wire 1 "< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 #< state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 l$ q $end
$var wire 1 $< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 %< state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 m$ q $end
$var wire 1 &< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 '< state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 n$ q $end
$var wire 1 (< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 )< state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 o$ q $end
$var wire 1 *< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 +< state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 p$ q $end
$var wire 1 ,< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 -< state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 q$ q $end
$var wire 1 .< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 /< state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 r$ q $end
$var wire 1 0< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 1< state $end
$upscope $end
$upscope $end

$scope module dff_e_ALU2 $end
$var parameter 32 2< BIT_WIDTH $end
$var parameter 32 3< BIT_SIZE $end
$var parameter 32 4< REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 5< we $end
$var wire 1 c$ w [15] $end
$var wire 1 d$ w [14] $end
$var wire 1 e$ w [13] $end
$var wire 1 f$ w [12] $end
$var wire 1 g$ w [11] $end
$var wire 1 h$ w [10] $end
$var wire 1 i$ w [9] $end
$var wire 1 j$ w [8] $end
$var wire 1 k$ w [7] $end
$var wire 1 l$ w [6] $end
$var wire 1 m$ w [5] $end
$var wire 1 n$ w [4] $end
$var wire 1 o$ w [3] $end
$var wire 1 p$ w [2] $end
$var wire 1 q$ w [1] $end
$var wire 1 r$ w [0] $end
$var wire 1 s$ r [15] $end
$var wire 1 t$ r [14] $end
$var wire 1 u$ r [13] $end
$var wire 1 v$ r [12] $end
$var wire 1 w$ r [11] $end
$var wire 1 x$ r [10] $end
$var wire 1 y$ r [9] $end
$var wire 1 z$ r [8] $end
$var wire 1 {$ r [7] $end
$var wire 1 |$ r [6] $end
$var wire 1 }$ r [5] $end
$var wire 1 ~$ r [4] $end
$var wire 1 !% r [3] $end
$var wire 1 "% r [2] $end
$var wire 1 #% r [1] $end
$var wire 1 $% r [0] $end

$scope module dff01[15] $end
$var wire 1 s$ q $end
$var wire 1 6< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 7< state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 t$ q $end
$var wire 1 8< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 9< state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 u$ q $end
$var wire 1 :< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ;< state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 v$ q $end
$var wire 1 << d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 =< state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 w$ q $end
$var wire 1 >< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ?< state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 x$ q $end
$var wire 1 @< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 A< state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 y$ q $end
$var wire 1 B< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 C< state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 z$ q $end
$var wire 1 D< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 E< state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 {$ q $end
$var wire 1 F< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 G< state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 |$ q $end
$var wire 1 H< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 I< state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 }$ q $end
$var wire 1 J< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 K< state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 ~$ q $end
$var wire 1 L< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 M< state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 !% q $end
$var wire 1 N< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 O< state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 "% q $end
$var wire 1 P< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Q< state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 #% q $end
$var wire 1 R< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 S< state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 $% q $end
$var wire 1 T< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 U< state $end
$upscope $end
$upscope $end

$scope module memory0 $end
$var wire 1 c$ ALU [15] $end
$var wire 1 d$ ALU [14] $end
$var wire 1 e$ ALU [13] $end
$var wire 1 f$ ALU [12] $end
$var wire 1 g$ ALU [11] $end
$var wire 1 h$ ALU [10] $end
$var wire 1 i$ ALU [9] $end
$var wire 1 j$ ALU [8] $end
$var wire 1 k$ ALU [7] $end
$var wire 1 l$ ALU [6] $end
$var wire 1 m$ ALU [5] $end
$var wire 1 n$ ALU [4] $end
$var wire 1 o$ ALU [3] $end
$var wire 1 p$ ALU [2] $end
$var wire 1 q$ ALU [1] $end
$var wire 1 r$ ALU [0] $end
$var wire 1 [" writeData [15] $end
$var wire 1 \" writeData [14] $end
$var wire 1 ]" writeData [13] $end
$var wire 1 ^" writeData [12] $end
$var wire 1 _" writeData [11] $end
$var wire 1 `" writeData [10] $end
$var wire 1 a" writeData [9] $end
$var wire 1 b" writeData [8] $end
$var wire 1 c" writeData [7] $end
$var wire 1 d" writeData [6] $end
$var wire 1 e" writeData [5] $end
$var wire 1 f" writeData [4] $end
$var wire 1 g" writeData [3] $end
$var wire 1 h" writeData [2] $end
$var wire 1 i" writeData [1] $end
$var wire 1 j" writeData [0] $end
$var wire 1 E% MemWrt $end
$var wire 1 F% readEn $end
$var wire 1 m# nHaltSig $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 {" readData [15] $end
$var wire 1 |" readData [14] $end
$var wire 1 }" readData [13] $end
$var wire 1 ~" readData [12] $end
$var wire 1 !# readData [11] $end
$var wire 1 "# readData [10] $end
$var wire 1 ## readData [9] $end
$var wire 1 $# readData [8] $end
$var wire 1 %# readData [7] $end
$var wire 1 &# readData [6] $end
$var wire 1 '# readData [5] $end
$var wire 1 (# readData [4] $end
$var wire 1 )# readData [3] $end
$var wire 1 *# readData [2] $end
$var wire 1 +# readData [1] $end
$var wire 1 ,# readData [0] $end

$scope module data_mem $end
$var wire 1 {" data_out [15] $end
$var wire 1 |" data_out [14] $end
$var wire 1 }" data_out [13] $end
$var wire 1 ~" data_out [12] $end
$var wire 1 !# data_out [11] $end
$var wire 1 "# data_out [10] $end
$var wire 1 ## data_out [9] $end
$var wire 1 $# data_out [8] $end
$var wire 1 %# data_out [7] $end
$var wire 1 &# data_out [6] $end
$var wire 1 '# data_out [5] $end
$var wire 1 (# data_out [4] $end
$var wire 1 )# data_out [3] $end
$var wire 1 *# data_out [2] $end
$var wire 1 +# data_out [1] $end
$var wire 1 ,# data_out [0] $end
$var wire 1 [" data_in [15] $end
$var wire 1 \" data_in [14] $end
$var wire 1 ]" data_in [13] $end
$var wire 1 ^" data_in [12] $end
$var wire 1 _" data_in [11] $end
$var wire 1 `" data_in [10] $end
$var wire 1 a" data_in [9] $end
$var wire 1 b" data_in [8] $end
$var wire 1 c" data_in [7] $end
$var wire 1 d" data_in [6] $end
$var wire 1 e" data_in [5] $end
$var wire 1 f" data_in [4] $end
$var wire 1 g" data_in [3] $end
$var wire 1 h" data_in [2] $end
$var wire 1 i" data_in [1] $end
$var wire 1 j" data_in [0] $end
$var wire 1 c$ addr [15] $end
$var wire 1 d$ addr [14] $end
$var wire 1 e$ addr [13] $end
$var wire 1 f$ addr [12] $end
$var wire 1 g$ addr [11] $end
$var wire 1 h$ addr [10] $end
$var wire 1 i$ addr [9] $end
$var wire 1 j$ addr [8] $end
$var wire 1 k$ addr [7] $end
$var wire 1 l$ addr [6] $end
$var wire 1 m$ addr [5] $end
$var wire 1 n$ addr [4] $end
$var wire 1 o$ addr [3] $end
$var wire 1 p$ addr [2] $end
$var wire 1 q$ addr [1] $end
$var wire 1 r$ addr [0] $end
$var wire 1 V< enable $end
$var wire 1 E% wr $end
$var wire 1 W< createdump $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 X< loaded $end
$var reg 17 Y< largest [16:0] $end
$var integer 32 Z< mcd $end
$var integer 32 [< i $end
$upscope $end
$upscope $end

$scope module dff_memory $end
$var parameter 32 \< BIT_WIDTH $end
$var parameter 32 ]< BIT_SIZE $end
$var parameter 32 ^< REG_NUMS $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 _< we $end
$var wire 1 5% w [15] $end
$var wire 1 6% w [14] $end
$var wire 1 7% w [13] $end
$var wire 1 8% w [12] $end
$var wire 1 9% w [11] $end
$var wire 1 :% w [10] $end
$var wire 1 ;% w [9] $end
$var wire 1 <% w [8] $end
$var wire 1 =% w [7] $end
$var wire 1 >% w [6] $end
$var wire 1 ?% w [5] $end
$var wire 1 @% w [4] $end
$var wire 1 A% w [3] $end
$var wire 1 B% w [2] $end
$var wire 1 C% w [1] $end
$var wire 1 D% w [0] $end
$var wire 1 {" r [15] $end
$var wire 1 |" r [14] $end
$var wire 1 }" r [13] $end
$var wire 1 ~" r [12] $end
$var wire 1 !# r [11] $end
$var wire 1 "# r [10] $end
$var wire 1 ## r [9] $end
$var wire 1 $# r [8] $end
$var wire 1 %# r [7] $end
$var wire 1 &# r [6] $end
$var wire 1 '# r [5] $end
$var wire 1 (# r [4] $end
$var wire 1 )# r [3] $end
$var wire 1 *# r [2] $end
$var wire 1 +# r [1] $end
$var wire 1 ,# r [0] $end

$scope module dff01[15] $end
$var wire 1 {" q $end
$var wire 1 `< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 a< state $end
$upscope $end

$scope module dff01[14] $end
$var wire 1 |" q $end
$var wire 1 b< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 c< state $end
$upscope $end

$scope module dff01[13] $end
$var wire 1 }" q $end
$var wire 1 d< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 e< state $end
$upscope $end

$scope module dff01[12] $end
$var wire 1 ~" q $end
$var wire 1 f< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 g< state $end
$upscope $end

$scope module dff01[11] $end
$var wire 1 !# q $end
$var wire 1 h< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 i< state $end
$upscope $end

$scope module dff01[10] $end
$var wire 1 "# q $end
$var wire 1 j< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 k< state $end
$upscope $end

$scope module dff01[9] $end
$var wire 1 ## q $end
$var wire 1 l< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 m< state $end
$upscope $end

$scope module dff01[8] $end
$var wire 1 $# q $end
$var wire 1 n< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 o< state $end
$upscope $end

$scope module dff01[7] $end
$var wire 1 %# q $end
$var wire 1 p< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 q< state $end
$upscope $end

$scope module dff01[6] $end
$var wire 1 &# q $end
$var wire 1 r< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 s< state $end
$upscope $end

$scope module dff01[5] $end
$var wire 1 '# q $end
$var wire 1 t< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 u< state $end
$upscope $end

$scope module dff01[4] $end
$var wire 1 (# q $end
$var wire 1 v< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 w< state $end
$upscope $end

$scope module dff01[3] $end
$var wire 1 )# q $end
$var wire 1 x< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 y< state $end
$upscope $end

$scope module dff01[2] $end
$var wire 1 *# q $end
$var wire 1 z< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 {< state $end
$upscope $end

$scope module dff01[1] $end
$var wire 1 +# q $end
$var wire 1 |< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 }< state $end
$upscope $end

$scope module dff01[0] $end
$var wire 1 ,# q $end
$var wire 1 ~< d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 != state $end
$upscope $end
$upscope $end

$scope module wb0 $end
$var wire 1 5% MemIn [15] $end
$var wire 1 6% MemIn [14] $end
$var wire 1 7% MemIn [13] $end
$var wire 1 8% MemIn [12] $end
$var wire 1 9% MemIn [11] $end
$var wire 1 :% MemIn [10] $end
$var wire 1 ;% MemIn [9] $end
$var wire 1 <% MemIn [8] $end
$var wire 1 =% MemIn [7] $end
$var wire 1 >% MemIn [6] $end
$var wire 1 ?% MemIn [5] $end
$var wire 1 @% MemIn [4] $end
$var wire 1 A% MemIn [3] $end
$var wire 1 B% MemIn [2] $end
$var wire 1 C% MemIn [1] $end
$var wire 1 D% MemIn [0] $end
$var wire 1 S$ PcIn [15] $end
$var wire 1 T$ PcIn [14] $end
$var wire 1 U$ PcIn [13] $end
$var wire 1 V$ PcIn [12] $end
$var wire 1 W$ PcIn [11] $end
$var wire 1 X$ PcIn [10] $end
$var wire 1 Y$ PcIn [9] $end
$var wire 1 Z$ PcIn [8] $end
$var wire 1 [$ PcIn [7] $end
$var wire 1 \$ PcIn [6] $end
$var wire 1 ]$ PcIn [5] $end
$var wire 1 ^$ PcIn [4] $end
$var wire 1 _$ PcIn [3] $end
$var wire 1 `$ PcIn [2] $end
$var wire 1 a$ PcIn [1] $end
$var wire 1 b$ PcIn [0] $end
$var wire 1 s$ ALUIn [15] $end
$var wire 1 t$ ALUIn [14] $end
$var wire 1 u$ ALUIn [13] $end
$var wire 1 v$ ALUIn [12] $end
$var wire 1 w$ ALUIn [11] $end
$var wire 1 x$ ALUIn [10] $end
$var wire 1 y$ ALUIn [9] $end
$var wire 1 z$ ALUIn [8] $end
$var wire 1 {$ ALUIn [7] $end
$var wire 1 |$ ALUIn [6] $end
$var wire 1 }$ ALUIn [5] $end
$var wire 1 ~$ ALUIn [4] $end
$var wire 1 !% ALUIn [3] $end
$var wire 1 "% ALUIn [2] $end
$var wire 1 #% ALUIn [1] $end
$var wire 1 $% ALUIn [0] $end
$var wire 1 x# RegSrc [1] $end
$var wire 1 y# RegSrc [0] $end
$var wire 1 ;" WB [15] $end
$var wire 1 <" WB [14] $end
$var wire 1 =" WB [13] $end
$var wire 1 >" WB [12] $end
$var wire 1 ?" WB [11] $end
$var wire 1 @" WB [10] $end
$var wire 1 A" WB [9] $end
$var wire 1 B" WB [8] $end
$var wire 1 C" WB [7] $end
$var wire 1 D" WB [6] $end
$var wire 1 E" WB [5] $end
$var wire 1 F" WB [4] $end
$var wire 1 G" WB [3] $end
$var wire 1 H" WB [2] $end
$var wire 1 I" WB [1] $end
$var wire 1 J" WB [0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
18!
19!
0G%
0H%
0P&
0N&
0L&
0J&
0H&
0F&
0D&
0B&
0@&
0>&
0<&
0:&
08&
06&
04&
02&
1d&
b0 e&
0l(
0j(
0h(
0f(
0d(
0b(
0`(
0^(
0\(
0Z(
0X(
0V(
0T(
0R(
0P(
0N(
02)
00)
0.)
0,)
0*)
0()
0&)
0$)
0")
0~(
0|(
0z(
0x(
0v(
0t(
0r(
0V)
0T)
0R)
0P)
0N)
0L)
0J)
0H)
0F)
0D)
0B)
0@)
0>)
0<)
0:)
08)
0H4
0E4
0B4
0?4
0<4
094
064
034
004
001
0.1
0,1
0*1
0(1
0&1
0$1
0"1
0~0
0|0
0z0
0x0
0v0
0t0
0r0
0p0
0k0
0i0
0g0
0e0
0c0
0a0
0_0
0]0
0[0
0Y0
0W0
0U0
0S0
0Q0
0O0
0M0
0H0
0F0
0D0
0B0
0@0
0>0
0<0
0:0
080
060
040
020
000
0.0
0,0
0*0
0%0
0#0
0!0
0}/
0{/
0y/
0w/
0u/
0s/
0q/
0o/
0m/
0k/
0i/
0g/
0e/
0`/
0^/
0\/
0Z/
0X/
0V/
0T/
0R/
0P/
0N/
0L/
0J/
0H/
0F/
0D/
0B/
0=/
0;/
09/
07/
05/
03/
01/
0//
0-/
0+/
0)/
0'/
0%/
0#/
0!/
0}.
0x.
0v.
0t.
0r.
0p.
0n.
0l.
0j.
0h.
0f.
0d.
0b.
0`.
0^.
0\.
0Z.
0U.
0S.
0Q.
0O.
0M.
0K.
0I.
0G.
0E.
0C.
0A.
0?.
0=.
0;.
09.
07.
x11
x21
x31
bx 41
0Q4
0N4
0K4
x51
x61
x71
x81
x91
x:1
x;1
x<1
x=1
bx >1
bx ?1
bx @1
bx A1
bx B1
0c4
0`4
0]4
0Z4
0W4
0T4
0i4
0f4
0D1
0E1
0F1
0G1
0H1
0u4
0r4
0o4
0l4
0l1
0j1
0h1
0f1
0d1
0b1
0`1
0^1
0\1
0Z1
0X1
0V1
0T1
0R1
0P1
0N1
022
002
0.2
0,2
0*2
0(2
0&2
0$2
0"2
0~1
0|1
0z1
0x1
0v1
0t1
0r1
0V2
0T2
0R2
0P2
0N2
0L2
0J2
0H2
0F2
0D2
0B2
0@2
0>2
0<2
0:2
082
0z2
0x2
0v2
0t2
0r2
0p2
0n2
0l2
0j2
0h2
0f2
0d2
0b2
0`2
0^2
0\2
0@3
0>3
0<3
0:3
083
063
043
023
003
0.3
0,3
0*3
0(3
0&3
0$3
0"3
0d3
0b3
0`3
0^3
0\3
0Z3
0X3
0V3
0T3
0R3
0P3
0N3
0L3
0J3
0H3
0F3
0*4
0(4
0&4
0$4
0"4
0~3
0|3
0z3
0x3
0v3
0t3
0r3
0p3
0n3
0l3
0j3
0+4
0,4
0-4
0;5
095
075
055
035
015
0/5
0-5
0+5
0)5
0'5
0%5
0#5
0!5
0}4
0{4
0+6
0-6
0/6
bx b7
xk;
01<
0/<
0-<
0+<
0)<
0'<
0%<
0#<
0!<
0};
0{;
0y;
0w;
0u;
0s;
0q;
0U<
0S<
0Q<
0O<
0M<
0K<
0I<
0G<
0E<
0C<
0A<
0?<
0=<
0;<
09<
07<
1X<
b0 Y<
0!=
0}<
0{<
0y<
0w<
0u<
0s<
0q<
0o<
0m<
0k<
0i<
0g<
0e<
0c<
0a<
b10000 -&
b11 .&
b1000 /&
b10000 h&
b10000 I(
b11 J(
b1000 K(
b10000 m(
b11 n(
b1000 o(
b10000 3)
b11 4)
b1000 5)
b10000 %+
b11 &+
b1000 '+
b10000 Z,
b100 [,
b10 \,
b10000 I1
b11 J1
b1000 K1
b10000 m1
b11 n1
b1000 o1
b10000 32
b11 42
b1000 52
b10000 W2
b11 X2
b1000 Y2
b10000 {2
b11 |2
b1000 }2
b10000 A3
b11 B3
b1000 C3
b10000 e3
b11 f3
b1000 g3
b10000 v4
b11 w4
b1000 x4
b10000 06
b10000 `7
b100 a7
b10000 v8
b10000 F:
b100 G:
b10 H:
b10000 l;
b11 m;
b1000 n;
b10000 2<
b11 3<
b1000 4<
b10000 \<
b11 ]<
b1000 ^<
b100 }&
b100 A'
b100 c'
b100 '(
b10000 3.
b11 4.
b1000 5.
b10000 V.
b11 W.
b1000 X.
b10000 y.
b11 z.
b1000 {.
b10000 >/
b11 ?/
b1000 @/
b10000 a/
b11 b/
b1000 c/
b10000 &0
b11 '0
b1000 (0
b10000 I0
b11 J0
b1000 K0
b10000 l0
b11 m0
b1000 n0
b100 66
b100 X6
b100 z6
b100 >7
b100 z8
b100 >9
b100 `9
b100 $:
b0 .!
b10 /!
b100 0!
b0 1!
b0 2!
b0 3!
b0 4!
b1 :!
bx f&
b10000000000000000 g&
bx Z<
b10000000000000000 [<
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
x%
x$
x#
x"
x!
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
xA
xD
xC
xB
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xU
xV
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
x(!
x'!
x&!
x%!
x$!
x#!
x"!
x!!
x~
x}
x|
x{
xz
xy
xx
xw
x)!
x*!
x+!
x,!
x-!
15!
x6!
17!
xJ!
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xj!
xi!
xh!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x_!
x^!
x]!
x\!
x[!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
xq!
xp!
xo!
xn!
xm!
xl!
xk!
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x~!
x}!
x|!
x{!
z2"
z1"
z0"
z/"
z."
z-"
x6"
x5"
x4"
x3"
x:"
x9"
x8"
x7"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
xZ"
xY"
xX"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
xm#
zn#
zo#
xp#
xq#
xr#
xs#
xt#
xu#
xv#
xw#
xy#
xx#
x{#
xz#
z}#
z|#
x"$
x!$
x~#
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
xB$
xA$
x@$
x?$
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
xR$
xQ$
xP$
xO$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
xF$
xE$
xD$
xC$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
xk$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
z4%
z3%
z2%
z1%
z0%
z/%
z.%
z-%
z,%
z+%
z*%
z)%
z(%
z'%
z&%
z%%
zD%
zC%
zB%
zA%
z@%
z?%
z>%
z=%
z<%
z;%
z:%
z9%
z8%
z7%
z6%
z5%
xE%
xF%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
xP%
xO%
xN%
xM%
xL%
xK%
xJ%
xI%
xh%
xg%
xf%
xe%
xd%
xc%
xb%
xa%
x`%
x_%
x^%
x]%
x\%
x[%
xZ%
xY%
zi%
zy%
zx%
zw%
zv%
zu%
zt%
zs%
zr%
zq%
zp%
zo%
zn%
zm%
zl%
zk%
zj%
x+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
x!&
x~%
x}%
x|%
x{%
xz%
x,&
x|&
x{&
xz&
x+(
x*(
x)(
x((
1/(
x.(
1-(
1,(
z4(
03(
x2(
x1(
z0(
18(
17(
x6(
x5(
xF(
1G(
1H(
xB(
1C(
xD(
x>(
x?(
1@(
x:(
x;(
1<(
xg'
xf'
xe'
xd'
1k'
1j'
1i'
1h'
zp'
xo'
xn'
xm'
zl'
xt'
xs'
xr'
xq'
x$(
x%(
1&(
x~'
x!(
1"(
xz'
x{'
1|'
xv'
xw'
1x'
xE'
xD'
xC'
xB'
1I'
1H'
1G'
1F'
zN'
xM'
xL'
xK'
zJ'
xR'
xQ'
xP'
xO'
x`'
xa'
1b'
x\'
x]'
1^'
xX'
xY'
1Z'
xT'
xU'
1V'
x#'
x"'
x!'
x~&
1''
1&'
1%'
1$'
z,'
x+'
x*'
x)'
z('
x0'
x/'
x.'
x-'
x>'
x?'
1@'
x:'
x;'
1<'
x6'
x7'
18'
x2'
x3'
14'
xW)
xX)
xY)
xZ)
x`)
x_)
x^)
x])
x\)
x[)
xb)
xa)
xd)
xc)
xf)
xe)
xh)
xg)
xj)
xi)
xn)
xm)
xl)
xk)
x~)
x})
x|)
x{)
xz)
xy)
xx)
xw)
xv)
xu)
xt)
xs)
xr)
xq)
xp)
xo)
x0*
x/*
x.*
x-*
x,*
x+*
x**
x)*
x(*
x'*
x&*
x%*
x$*
x#*
x"*
x!*
x@*
x?*
x>*
x=*
x<*
x;*
x:*
x9*
x8*
x7*
x6*
x5*
x4*
x3*
x2*
x1*
xP*
xO*
xN*
xM*
xL*
xK*
xJ*
xI*
xH*
xG*
xF*
xE*
xD*
xC*
xB*
xA*
x`*
x_*
x^*
x]*
x\*
x[*
xZ*
xY*
xX*
xW*
xV*
xU*
xT*
xS*
xR*
xQ*
xp*
xo*
xn*
xm*
xl*
xk*
xj*
xi*
xh*
xg*
xf*
xe*
xd*
xc*
xb*
xa*
xq*
xr*
xs*
xv*
xu*
xt*
xy*
xx*
xw*
x|*
x{*
xz*
x}*
x~*
x!+
x"+
x#+
x$+
x7+
x6+
x5+
x4+
x3+
x2+
x1+
x0+
x/+
x.+
x-+
x,+
x++
x*+
x)+
x(+
xG+
xF+
xE+
xD+
xC+
xB+
xA+
x@+
x?+
x>+
x=+
x<+
x;+
x:+
x9+
x8+
xW+
xV+
xU+
xT+
xS+
xR+
xQ+
xP+
xO+
xN+
xM+
xL+
xK+
xJ+
xI+
xH+
xg+
xf+
xe+
xd+
xc+
xb+
xa+
x`+
x_+
x^+
x]+
x\+
x[+
xZ+
xY+
xX+
xw+
xv+
xu+
xt+
xs+
xr+
xq+
xp+
xo+
xn+
xm+
xl+
xk+
xj+
xi+
xh+
x),
x(,
x',
x&,
x%,
x$,
x#,
x",
x!,
x~+
x}+
x|+
x{+
xz+
xy+
xx+
x9,
x8,
x7,
x6,
x5,
x4,
x3,
x2,
x1,
x0,
x/,
x.,
x-,
x,,
x+,
x*,
xI,
xH,
xG,
xF,
xE,
xD,
xC,
xB,
xA,
x@,
x?,
x>,
x=,
x<,
x;,
x:,
xY,
xX,
xW,
xV,
xU,
xT,
xS,
xR,
0Q,
0P,
0O,
0N,
0M,
0L,
0K,
0J,
x~,
x},
0|,
0{,
0z,
0y,
0x,
0w,
0v,
0u,
0t,
0s,
0r,
0q,
0p,
0o,
x0-
x/-
x.-
x--
0,-
0+-
0*-
0)-
0(-
0'-
0&-
0%-
0$-
0#-
0"-
0!-
x@-
x?-
x>-
x=-
x<-
x;-
x:-
x9-
08-
07-
06-
05-
04-
03-
02-
01-
xP-
xO-
xN-
xM-
xL-
xK-
xJ-
xI-
0H-
0G-
0F-
0E-
0D-
0C-
0B-
0A-
0`-
x_-
0^-
0]-
0\-
0[-
0Z-
0Y-
0X-
0W-
0V-
0U-
0T-
0S-
0R-
0Q-
0p-
0o-
xn-
xm-
0l-
0k-
0j-
0i-
0h-
0g-
0f-
0e-
0d-
0c-
0b-
0a-
0".
0!.
0~-
0}-
x|-
x{-
xz-
xy-
0x-
0w-
0v-
0u-
0t-
0s-
0r-
0q-
02.
01.
00.
0/.
0..
0-.
0,.
0+.
x*.
x).
x(.
x'.
x&.
x%.
x$.
x#.
xC1
xR5
xQ5
xP5
xO5
xN5
xM5
xL5
xK5
xJ5
xI5
xH5
xG5
xF5
xE5
xD5
xC5
xb5
xa5
x`5
x_5
x^5
x]5
x\5
x[5
xZ5
xY5
xX5
xW5
xV5
xU5
xT5
xS5
xr5
xq5
xp5
xo5
xn5
xm5
xl5
xk5
xj5
xi5
xh5
xg5
xf5
xe5
xd5
xc5
x$6
x#6
x"6
x!6
x~5
x}5
x|5
x{5
xz5
xy5
xx5
xw5
xv5
xu5
xt5
xs5
x%6
x&6
x'6
x(6
x)6
x56
x46
x36
xB7
xA7
x@7
x?7
xF7
xE7
xD7
xC7
zK7
xJ7
xI7
xH7
zG7
1O7
xN7
xM7
xL7
x]7
1^7
x_7
xY7
xZ7
x[7
xU7
xV7
xW7
xQ7
xR7
xS7
x~6
x}6
x|6
x{6
x$7
x#7
x"7
x!7
z)7
x(7
x'7
x&7
z%7
x-7
x,7
x+7
x*7
x;7
x<7
x=7
x77
x87
x97
x37
x47
x57
x/7
x07
x17
x\6
x[6
xZ6
xY6
x`6
x_6
x^6
x]6
ze6
xd6
xc6
xb6
za6
xi6
xh6
xg6
xf6
xw6
xx6
xy6
xs6
xt6
xu6
xo6
xp6
xq6
xk6
xl6
xm6
x:6
x96
x86
x76
x>6
x=6
x<6
x;6
zC6
xB6
xA6
x@6
z?6
xG6
xF6
xE6
xD6
xU6
xV6
xW6
xQ6
xR6
xS6
xM6
xN6
xO6
xI6
xJ6
xK6
xc7
xs7
xr7
xq7
xp7
xo7
xn7
xm7
xl7
xk7
xj7
xi7
xh7
xg7
xf7
xe7
xd7
x%8
x$8
x#8
x"8
x!8
x~7
x}7
x|7
x{7
xz7
xy7
xx7
xw7
xv7
xu7
xt7
x58
x48
x38
x28
x18
x08
x/8
x.8
x-8
x,8
x+8
x*8
x)8
x(8
x'8
x&8
xE8
xD8
xC8
xB8
xA8
x@8
x?8
x>8
x=8
x<8
x;8
x:8
x98
x88
x78
x68
xU8
xT8
xS8
xR8
xQ8
xP8
xO8
xN8
xM8
xL8
xK8
xJ8
xI8
xH8
xG8
xF8
ze8
zd8
zc8
zb8
za8
z`8
z_8
z^8
z]8
z\8
z[8
zZ8
zY8
zX8
zW8
zV8
zu8
zt8
zs8
zr8
zq8
zp8
zo8
zn8
zm8
zl8
zk8
zj8
zi8
zh8
zg8
zf8
xy8
xx8
xw8
x(:
x':
x&:
x%:
x,:
x+:
x*:
x):
z1:
x0:
x/:
x.:
z-:
x5:
x4:
x3:
x2:
xC:
xD:
xE:
x?:
x@:
xA:
x;:
x<:
x=:
x7:
x8:
x9:
xd9
xc9
xb9
xa9
xh9
xg9
xf9
xe9
zm9
xl9
xk9
xj9
zi9
xq9
xp9
xo9
xn9
x!:
x":
x#:
x{9
x|9
x}9
xw9
xx9
xy9
xs9
xt9
xu9
xB9
xA9
x@9
x?9
xF9
xE9
xD9
xC9
zK9
xJ9
xI9
xH9
zG9
xO9
xN9
xM9
xL9
x]9
x^9
x_9
xY9
xZ9
x[9
xU9
xV9
xW9
xQ9
xR9
xS9
x~8
x}8
x|8
x{8
x$9
x#9
x"9
x!9
z)9
x(9
x'9
x&9
z%9
x-9
x,9
x+9
x*9
x;9
x<9
x=9
x79
x89
x99
x39
x49
x59
x/9
x09
x19
xX:
xW:
xV:
xU:
xT:
xS:
xR:
xQ:
xP:
xO:
xN:
xM:
xL:
xK:
xJ:
xI:
xh:
xg:
xf:
xe:
xd:
xc:
xb:
xa:
x`:
x_:
x^:
x]:
x\:
x[:
xZ:
xY:
xx:
xw:
xv:
xu:
xt:
xs:
xr:
xq:
xp:
xo:
xn:
xm:
xl:
xk:
xj:
xi:
x*;
x);
x(;
x';
x&;
x%;
x$;
x#;
x";
x!;
x~:
x}:
x|:
x{:
xz:
xy:
x:;
x9;
x8;
x7;
x6;
x5;
x4;
x3;
x2;
x1;
x0;
x/;
x.;
x-;
x,;
x+;
xJ;
xI;
xH;
xG;
xF;
xE;
xD;
xC;
xB;
xA;
x@;
x?;
x>;
x=;
x<;
x;;
xZ;
xY;
xX;
xW;
xV;
xU;
xT;
xS;
xR;
xQ;
xP;
xO;
xN;
xM;
xL;
xK;
xj;
xi;
xh;
xg;
xf;
xe;
xd;
xc;
xb;
xa;
x`;
x_;
x^;
x];
x\;
x[;
1_<
15<
1o;
1y4
16)
1p(
1L(
0y&
0x&
1w&
0v&
0u&
0t&
0s&
0r&
0q&
0p&
0o&
0n&
0m&
0l&
0k&
0j&
0i&
xc&
0b&
1a&
0`&
0_&
0^&
0]&
0\&
0[&
0Z&
0Y&
0X&
0W&
0V&
0U&
0T&
0S&
0R&
0Q&
10&
xO&
xM&
xK&
xI&
xG&
xE&
xC&
xA&
x?&
x=&
x;&
x9&
x7&
x5&
x3&
x1&
0E(
xA(
x=(
x9(
x#(
x}'
xy'
xu'
x_'
x['
xW'
xS'
x='
x9'
x5'
x1'
xk(
xi(
xg(
xe(
xc(
xa(
x_(
x](
x[(
xY(
xW(
xU(
xS(
xQ(
xO(
xM(
x1)
x/)
x-)
x+)
x))
x')
x%)
x#)
x!)
x}(
x{(
xy(
xw(
xu(
xs(
xq(
xU)
xS)
xQ)
xO)
xM)
xK)
xI)
xG)
xE)
xC)
xA)
x?)
x=)
x;)
x9)
x7)
1h3
1D3
1~2
1Z2
162
1p1
1L1
1t4
1q4
1n4
1k4
1s4
1p4
1m4
1j4
1h4
1e4
1g4
1d4
1b4
1_4
1\4
1Y4
1V4
1S4
1a4
1^4
1[4
1X4
1U4
1R4
1P4
1M4
1J4
1O4
1L4
1I4
1G4
1D4
1A4
1>4
1;4
184
154
124
1/4
1F4
1C4
1@4
1=4
1:4
174
144
114
1.4
1n,
0m,
0l,
0k,
0j,
0i,
0h,
0g,
0f,
0e,
0d,
0c,
0b,
0a,
0`,
0_,
0^,
0],
x/1
x-1
x+1
x)1
x'1
x%1
x#1
x!1
x}0
x{0
xy0
xw0
xu0
xs0
xq0
xo0
xj0
xh0
xf0
xd0
xb0
x`0
x^0
x\0
xZ0
xX0
xV0
xT0
xR0
xP0
xN0
xL0
xG0
xE0
xC0
xA0
x?0
x=0
x;0
x90
x70
x50
x30
x10
x/0
x-0
x+0
x)0
x$0
x"0
x~/
x|/
xz/
xx/
xv/
xt/
xr/
xp/
xn/
xl/
xj/
xh/
xf/
xd/
x_/
x]/
x[/
xY/
xW/
xU/
xS/
xQ/
xO/
xM/
xK/
xI/
xG/
xE/
xC/
xA/
x</
x:/
x8/
x6/
x4/
x2/
x0/
x./
x,/
x*/
x(/
x&/
x$/
x"/
x~.
x|.
xw.
xu.
xs.
xq.
xo.
xm.
xk.
xi.
xg.
xe.
xc.
xa.
x_.
x].
x[.
xY.
xT.
xR.
xP.
xN.
xL.
xJ.
xH.
xF.
xD.
xB.
x@.
x>.
x<.
x:.
x8.
x6.
xk1
xi1
xg1
xe1
xc1
xa1
x_1
x]1
x[1
xY1
xW1
xU1
xS1
xQ1
xO1
xM1
x12
x/2
x-2
x+2
x)2
x'2
x%2
x#2
x!2
x}1
x{1
xy1
xw1
xu1
xs1
xq1
xU2
xS2
xQ2
xO2
xM2
xK2
xI2
xG2
xE2
xC2
xA2
x?2
x=2
x;2
x92
x72
xy2
xw2
xu2
xs2
xq2
xo2
xm2
xk2
xi2
xg2
xe2
xc2
xa2
x_2
x]2
x[2
x?3
x=3
x;3
x93
x73
x53
x33
x13
x/3
x-3
x+3
x)3
x'3
x%3
x#3
x!3
xc3
xa3
x_3
x]3
x[3
xY3
xW3
xU3
xS3
xQ3
xO3
xM3
xK3
xI3
xG3
xE3
x)4
x'4
x%4
x#4
x!4
x}3
x{3
xy3
xw3
xu3
xs3
xq3
xo3
xm3
xk3
xi3
x:5
x85
x65
x45
x25
x05
x.5
x,5
x*5
x(5
x&5
x$5
x"5
x~4
x|4
xz4
z<5
z=5
z?5
x>5
x@5
zA5
xB5
026
x.6
x,6
x*6
x16
x\7
xX7
xT7
xP7
x:7
x67
x27
x.7
xv6
xr6
xn6
xj6
xT6
xP6
xL6
xH6
xB:
x>:
x::
x6:
x~9
xz9
xv9
xr9
x\9
xX9
xT9
xP9
x:9
x69
x29
x.9
x0<
x.<
x,<
x*<
x(<
x&<
x$<
x"<
x~;
x|;
xz;
xx;
xv;
xt;
xr;
xp;
xT<
xR<
xP<
xN<
xL<
xJ<
xH<
xF<
xD<
xB<
x@<
x><
x<<
x:<
x8<
x6<
xW<
xV<
z~<
z|<
zz<
zx<
zv<
zt<
zr<
zp<
zn<
zl<
zj<
zh<
zf<
zd<
zb<
z`<
$end
#1
0s$
0t$
0u$
0v$
0w$
0x$
0y$
0z$
0{$
0|$
0}$
0~$
0!%
0"%
0#%
0$%
0c$
0d$
0e$
0f$
0g$
0h$
0i$
0j$
0k$
0l$
0m$
0n$
0o$
0p$
0q$
0r$
0B5
0@5
0>5
0S$
0T$
0U$
0V$
0W$
0X$
0Y$
0Z$
0[$
0\$
0]$
0^$
0_$
0`$
0a$
0b$
0t#
0r#
0q#
0{!
0|!
0}!
0~!
0!"
0""
0#"
0$"
0%"
0&"
0'"
0("
0)"
0*"
0+"
0,"
0]#
0^#
0_#
0`#
0a#
0b#
0c#
0d#
0e#
0f#
0g#
0h#
0i#
0j#
0k#
0l#
0M#
0N#
0O#
0P#
0Q#
0R#
0S#
0T#
0U#
0V#
0W#
0X#
0Y#
0Z#
0[#
0\#
0=#
0>#
0?#
0@#
0A#
0B#
0C#
0D#
0E#
0F#
0G#
0H#
0I#
0J#
0K#
0L#
0-#
0.#
0/#
00#
01#
02#
03#
04#
05#
06#
07#
08#
09#
0:#
0;#
0<#
0["
0\"
0]"
0^"
0_"
0`"
0a"
0b"
0c"
0d"
0e"
0f"
0g"
0h"
0i"
0j"
0K"
0L"
0M"
0N"
0O"
0P"
0Q"
0R"
0S"
0T"
0U"
0V"
0W"
0X"
0Y"
0Z"
0v#
0w#
0u#
0s#
0p#
0:,
0;,
0<,
0=,
0>,
0?,
0@,
0A,
0B,
0C,
0D,
0E,
0F,
0G,
0H,
0I,
0*,
0+,
0,,
0-,
0.,
0/,
00,
01,
02,
03,
04,
05,
06,
07,
08,
09,
0x+
0y+
0z+
0{+
0|+
0}+
0~+
0!,
0",
0#,
0$,
0%,
0&,
0',
0(,
0),
0h+
0i+
0j+
0k+
0l+
0m+
0n+
0o+
0p+
0q+
0r+
0s+
0t+
0u+
0v+
0w+
0X+
0Y+
0Z+
0[+
0\+
0]+
0^+
0_+
0`+
0a+
0b+
0c+
0d+
0e+
0f+
0g+
0H+
0I+
0J+
0K+
0L+
0M+
0N+
0O+
0P+
0Q+
0R+
0S+
0T+
0U+
0V+
0W+
08+
09+
0:+
0;+
0<+
0=+
0>+
0?+
0@+
0A+
0B+
0C+
0D+
0E+
0F+
0G+
0(+
0)+
0*+
0++
0,+
0-+
0.+
0/+
00+
01+
02+
03+
04+
05+
06+
07+
0C$
0D$
0E$
0F$
0G$
0H$
0I$
0J$
0K$
0L$
0M$
0N$
0O$
0P$
0Q$
0R$
03$
04$
05$
06$
07$
08$
09$
0:$
0;$
0<$
0=$
0>$
0?$
0@$
0A$
0B$
0#$
0$$
0%$
0&$
0'$
0($
0)$
0*$
0+$
0,$
0-$
0.$
0/$
00$
01$
02$
0I%
0J%
0K%
0L%
0M%
0N%
0O%
0P%
0Q%
0R%
0S%
0T%
0U%
0V%
0W%
0X%
0E%
0F%
06"
05"
04"
03"
0{#
0z#
0f)
0e)
0h)
0g)
0y#
0x#
0Y)
0Z)
0$+
0y*
0x*
0w*
0|*
0{*
0z*
0"$
0!$
0~#
0V<
0+(
0F(
1*(
1.(
1B(
1D(
0)(
0>(
0((
0:(
0g'
0$(
0f'
0~'
0e'
0z'
0d'
0v'
0E'
0`'
0D'
0\'
0C'
0X'
0B'
0T'
0#'
0>'
0"'
0:'
0!'
06'
0~&
02'
1F7
1_7
1E7
1[7
1D7
1W7
1C7
1S7
1$7
1=7
1#7
197
1"7
157
1!7
117
1`6
1y6
1_6
1u6
1^6
1q6
1]6
1m6
1>6
1W6
1=6
1S6
1<6
1O6
1;6
1K6
15:
1D:
0\7
0J7
13'
1-'
17'
1.'
1;'
1/'
1?'
10'
1U'
1O'
1Y'
1P'
1]'
1Q'
1a'
1R'
1w'
1q'
1{'
1r'
1!(
1s'
1%(
1t'
1;(
15(
1?(
16(
0A(
1*&
02(
0+&
0)&
01(
0=(
0|&
09(
0o'
0#(
0n'
0}'
0m'
0y'
0{&
0u'
0M'
0_'
0L'
0['
0K'
0W'
0z&
0S'
0+'
0='
0*'
09'
0)'
05'
0,&
01'
1N7
1Z7
0X7
0I7
0z%
0{%
0|%
0}%
0~%
0!&
0"&
0#&
0$&
0%&
0&&
0'&
0(&
1M7
1V7
0T7
0H7
1L7
1R7
0P7
056
1-7
1<7
0:7
0(7
1,7
187
067
0'7
1+7
147
027
0&7
1*7
107
0.7
046
1i6
1x6
0v6
0d6
1h6
1t6
0r6
0c6
1g6
1p6
0n6
0b6
1f6
1l6
0j6
036
1G6
1V6
0T6
0B6
1F6
1R6
0P6
0A6
1E6
1N6
0L6
0@6
1D6
1J6
0H6
016
0C1
0U
0V
0A
0h%
1g%
0f%
0e%
0d%
0c%
0b%
0a%
0`%
0_%
0^%
0]%
0\%
0[%
0Z%
0Y%
0<-
0;-
0:-
09-
0.-
0--
0D
0C
0B
0_-
0~,
0},
0Z!
0Y!
0X!
0W!
0V!
0U!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
0M!
0L!
0K!
0j!
0i!
0h!
0g!
0f!
0e!
0d!
0c!
1b!
0a!
0`!
0_!
0^!
0]!
1\!
1[!
0z!
0x!
0w!
0v!
0u!
0t!
0s!
0r!
0q!
0p!
0o!
0n!
0m!
0l!
0k!
0@*
0?*
0>*
0=*
0<*
0;*
0:*
09*
08*
07*
06*
05*
04*
03*
02*
01*
0`*
0_*
0^*
0]*
0\*
0[*
0Z*
0Y*
0X*
0W*
0V*
0U*
0T*
0S*
0R*
0Q*
0p*
0o*
0n*
0m*
0l*
0k*
0j*
0i*
0h*
0g*
0f*
0e*
0d*
0c*
0b*
0a*
0~)
0})
0|)
0{)
0z)
0y)
0x)
0w)
0v)
0u)
0t)
0s)
0r)
0q)
0p)
0o)
00*
0/*
0.*
0-*
0,*
0+*
0**
0)*
0(*
0'*
0&*
0%*
0$*
0#*
0"*
0!*
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0R5
0Q5
0P5
0O5
0N5
0M5
0L5
0K5
0J5
0I5
0H5
0G5
0F5
0E5
0D5
0C5
0b5
0a5
0`5
0_5
0^5
0]5
0\5
0[5
0Z5
0Y5
0X5
0W5
0V5
0U5
0T5
0S5
0)4
0'4
0%4
0#4
0!4
0}3
0{3
0y3
0w3
0u3
0s3
0q3
0o3
0m3
0k3
0i3
0:5
085
065
045
025
005
0.5
0,5
0*5
0(5
0&5
0$5
0"5
0~4
0|4
0z4
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0T<
0R<
0P<
0N<
0L<
0J<
0H<
0F<
0D<
0B<
0@<
0><
0<<
0:<
08<
06<
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
076
0I6
086
0M6
096
0Q6
0:6
0U6
0Y6
0k6
0Z6
0o6
0[6
0s6
0\6
0w6
0{6
0/7
0|6
037
0}6
077
0~6
0;7
0?7
0Q7
0@7
0U7
0A7
0Y7
0B7
0]7
0$6
0#6
0"6
0!6
0~5
0}5
0|5
0{5
0z5
0y5
0x5
0w5
0v5
0u5
0t5
0s5
0)!
0+!
0*!
0,!
0r5
0q5
0p5
0o5
0n5
0m5
0l5
0k5
0j5
0i5
0h5
0g5
0f5
0e5
0d5
0c5
0/1
0-1
0+1
0)1
0'1
0%1
0#1
0!1
0}0
0{0
0y0
0w0
0u0
0s0
0q0
0o0
0j0
0h0
0f0
0d0
0b0
0`0
0^0
0\0
0Z0
0X0
0V0
0T0
0R0
0P0
0N0
0L0
0G0
0E0
0C0
0A0
0?0
0=0
0;0
090
070
050
030
010
0/0
0-0
0+0
0)0
0$0
0"0
0~/
0|/
0z/
0x/
0v/
0t/
0r/
0p/
0n/
0l/
0j/
0h/
0f/
0d/
0_/
0]/
0[/
0Y/
0W/
0U/
0S/
0Q/
0O/
0M/
0K/
0I/
0G/
0E/
0C/
0A/
0</
0:/
08/
06/
04/
02/
00/
0./
0,/
0*/
0(/
0&/
0$/
0"/
0~.
0|.
0w.
0u.
0s.
0q.
0o.
0m.
0k.
0i.
0g.
0e.
0c.
0a.
0_.
0].
0[.
0Y.
0T.
0R.
0P.
0N.
0L.
0J.
0H.
0F.
0D.
0B.
0@.
0>.
0<.
0:.
08.
06.
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0(!
0'!
0&!
0%!
0$!
0#!
0"!
0!!
0~
0}
0|
0{
0z
0y
0x
0w
012
0/2
0-2
0+2
0)2
0'2
0%2
0#2
0!2
0}1
0{1
0y1
0w1
0u1
0s1
0q1
0k1
0i1
0g1
0e1
0c1
0a1
0_1
0]1
0[1
0Y1
0W1
0U1
0S1
0Q1
0O1
0M1
0c3
0a3
0_3
0]3
0[3
0Y3
0W3
0U3
0S3
0Q3
0O3
0M3
0K3
0I3
0G3
0E3
0P*
0O*
0N*
0M*
0L*
0K*
0J*
0I*
0H*
0G*
0F*
0E*
0D*
0C*
0B*
0A*
0?3
0=3
0;3
093
073
053
033
013
0/3
0-3
0+3
0)3
0'3
0%3
0#3
0!3
0U2
0S2
0Q2
0O2
0M2
0K2
0I2
0G2
0E2
0C2
0A2
0?2
0=2
0;2
092
072
0k(
0g(
0e(
0c(
0a(
0_(
0](
0[(
0Y(
0W(
0U(
0S(
0Q(
0O(
0M(
0U)
0S)
0Q)
0O)
0M)
0K)
0I)
0G)
1E)
0C)
0A)
0?)
0=)
0;)
19)
17)
0@
0?
0>
0=
0<
0;
0:
09
18
07
06
05
04
03
12
11
01)
0/)
0-)
0+)
0))
0')
0%)
0#)
0!)
0}(
0{(
0y(
0w(
0u(
0s(
0q(
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0$
0#
0"
0!
0n-
0m-
00-
0/-
0z-
0y-
0>-
0=-
0&.
0%.
0$.
0#.
0L-
0K-
0J-
0I-
0O&
1M&
0K&
0I&
0G&
0E&
0C&
0A&
0?&
0=&
0;&
09&
07&
05&
03&
01&
0U,
0T,
0S,
0R,
0(.
0'.
0N-
0M-
0|-
0{-
0@-
0?-
0y2
0w2
0u2
0s2
0q2
0o2
0m2
0k2
0i2
0g2
0e2
0c2
0a2
0_2
0]2
0[2
0J!
0I!
0H!
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0>!
0=!
0<!
0;!
0*.
0).
0W,
0V,
0P-
0O-
0Y,
0X,
0E8
0D8
0C8
0B8
0A8
0@8
0?8
0>8
0=8
0<8
0;8
0:8
098
088
078
068
0U8
0T8
0S8
0R8
0Q8
0P8
0O8
0N8
0M8
0L8
0K8
0J8
0I8
0H8
0G8
0F8
0{8
0/9
0|8
039
0}8
079
0~8
0;9
0?9
0Q9
0@9
0U9
0A9
0Y9
0B9
0]9
0a9
0s9
0b9
0w9
0c9
0{9
0d9
0!:
0%:
07:
0&:
0;:
0':
0?:
0(:
0C:
1!9
119
1"9
159
1#9
199
1$9
1=9
1C9
1S9
1D9
1W9
1E9
1[9
1F9
1_9
1e9
1u9
1f9
1y9
1g9
1}9
1h9
1#:
1):
19:
1*:
1=:
1+:
1A:
1,:
1E:
0B:
00:
0s7
1@:
14:
1<:
13:
18:
12:
1":
1q9
1|9
1p9
1x9
1o9
1t9
1n9
1^9
1O9
1Z9
1N9
1V9
1M9
1R9
1L9
1<9
1-9
189
1,9
149
1+9
109
1*9
0c7
0.9
0&9
029
0'9
069
0(9
0:9
0w8
0P9
0H9
0T9
0I9
0X9
0J9
0\9
0x8
0r9
0j9
0v9
0k9
0z9
0l9
0~9
0y8
06:
0.:
0::
0/:
0>:
0r7
0q7
0p7
0o7
0n7
0m7
0l7
0k7
0j7
0i7
0h7
0g7
0f7
0e7
0d7
0:;
09;
08;
07;
06;
05;
04;
03;
02;
01;
00;
0/;
0.;
0-;
0,;
0+;
0X:
0W:
0V:
0U:
0T:
0S:
0R:
0Q:
0P:
0O:
0N:
0M:
0L:
0K:
0J:
0I:
0J;
0I;
0H;
0G;
0F;
0E;
0D;
0C;
0B;
0A;
0@;
0?;
0>;
0=;
0<;
0;;
0h:
0g:
0f:
0e:
0d:
0c:
0b:
0a:
0`:
0_:
0^:
0]:
0\:
0[:
0Z:
0Y:
0Z;
0Y;
0X;
0W;
0V;
0U;
0T;
0S;
0R;
0Q;
0P;
0O;
0N;
0M;
0L;
0K;
0x:
0w:
0v:
0u:
0t:
0s:
0r:
0q:
0p:
0o:
0n:
0m:
0l:
0k:
0j:
0i:
0j;
0i;
0h;
0g;
0f;
0e;
0d;
0c;
0b;
0a;
0`;
0_;
0^;
0];
0\;
0[;
0*;
0);
0(;
0';
0&;
0%;
0$;
0#;
0";
0!;
0~:
0}:
0|:
0{:
0z:
0y:
1)6
0'6
0(6
0&6
0%8
0$8
0#8
0"8
0!8
0~7
0}7
0|7
0{7
0z7
0y7
0x7
0w7
0v7
0u7
0t7
058
048
038
028
018
008
0/8
0.8
0-8
0,8
0+8
0*8
0)8
0(8
0'8
0&8
b0 b7
011
021
031
111
131
151
061
071
091
0:1
0;1
0<1
181
0=1
b0 >1
b10 ?1
b0 A1
b0 @1
081
b0 B1
051
1q*
0r*
1s*
0m#
0X)
0W)
0~*
0!+
0"+
0#+
0}*
0j)
0i)
0b)
0a)
0d)
1c)
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
1c&
1W<
1-!
00<
0.<
0,<
0*<
0(<
0&<
0$<
0"<
0~;
0|;
0z;
0x;
0v;
0t;
0r;
0p;
0v*
0u*
0t*
0y!
0i(
0:"
09"
08"
07"
0`)
0_)
0^)
0])
0\)
0[)
0%6
011
031
b0 41
1k;
0q*
0s*
0n)
0m)
0l)
0k)
#50
08!
05!
0s4
0p4
0m4
0j4
0g4
0d4
0a4
0^4
0[4
0X4
0U4
0R4
0O4
0L4
0I4
0F4
0C4
0@4
0=4
0:4
074
044
014
0.4
#100
18!
15!
1s4
1p4
1m4
1j4
1g4
1d4
1a4
1^4
1[4
1X4
1U4
1R4
1O4
1L4
1I4
1F4
1C4
1@4
1=4
1:4
174
144
114
1.4
b10 :!
#150
08!
05!
0s4
0p4
0m4
0j4
0g4
0d4
0a4
0^4
0[4
0X4
0U4
0R4
0O4
0L4
0I4
0F4
0C4
0@4
0=4
0:4
074
044
014
0.4
#200
18!
15!
1s4
1p4
1m4
1j4
1g4
1d4
1a4
1^4
1[4
1X4
1U4
1R4
1O4
1L4
1I4
1F4
1C4
1@4
1=4
1:4
174
144
114
1.4
b11 :!
#201
09!
07!
0t4
0q4
0n4
0k4
0h4
0e4
0b4
0_4
0\4
0Y4
0V4
0S4
0P4
0M4
0J4
0G4
0D4
0A4
0>4
0;4
084
054
024
0/4
#250
08!
05!
0s4
0p4
0m4
0j4
0g4
0d4
0a4
0^4
0[4
0X4
0U4
0R4
0O4
0L4
0I4
0F4
0C4
0@4
0=4
0:4
074
044
014
0.4
#300
18!
15!
1s4
1p4
1m4
1j4
1g4
1d4
1a4
1^4
1[4
1X4
1U4
1R4
1O4
1L4
1I4
1F4
1C4
1@4
1=4
1:4
174
144
114
1.4
1`4
1N&
b10000000000000000000000000000011 f&
b0 g&
b1 g&
b10 g&
1F)
1:)
18)
x+6
x-6
x/6
b10000000000000000000000000000011 Z<
b0 [<
b1 [<
b10 [<
z!=
z}<
z{<
zy<
zw<
zu<
zs<
zq<
zo<
zm<
zk<
zi<
zg<
ze<
zc<
za<
b100 :!
b1 .!
#301
xB5
x@5
x>5
1C$
1D$
1J$
1W%
1e)
0*(
0.(
0B(
0D(
1A(
0*&
12(
1)&
0g%
1f%
1Y!
1i!
1g!
1f!
1e!
0[!
1y!
1h*
1S3
1i(
1S)
1O)
1M)
1K)
07)
1?
1=
1<
1;
01
1/)
1/
0M&
1K&
151
181
081
161
b1 A1
191
b10 @1
b101x >1
1m#
1X)
1~*
1i)
1b)
0c&
0W<
0-!
1v*
0y!
1x!
0i(
1g(
x`)
1_)
1])
b1101 41
1n)
1l)
1k)
